
stm32h7disco-i2s-baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f444  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800f6dc  0800f6dc  0001f6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbc4  0800fbc4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbc4  0800fbc4  0001fbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbcc  0800fbcc  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbcc  0800fbcc  0001fbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbd0  0800fbd0  0001fbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  24000000  0800fbd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c8  240000ac  0800fc80  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001774  0800fc80  00021774  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd59  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003814  00000000  00000000  0003be33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043259  00000000  00000000  00041e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002056c  00000000  00000000  000850a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f2a8  00000000  00000000  000a5615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002448bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  00244910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000ac 	.word	0x240000ac
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f6c4 	.word	0x0800f6c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000b0 	.word	0x240000b0
 80002d4:	0800f6c4 	.word	0x0800f6c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <sd_card_init>:
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
static uint8_t first_play = 0;
void sd_card_init()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	4907      	ldr	r1, [pc, #28]	; (800072c <sd_card_init+0x24>)
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <sd_card_init+0x28>)
 8000712:	f00d feab 	bl	800e46c <f_mount>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <sd_card_init+0x2c>)
 800071c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <sd_card_init+0x2c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <sd_card_init+0x20>
	{
//		printf("error in mounting an sd card: %d \n", sd_result);
		while(1);
 8000726:	e7fe      	b.n	8000726 <sd_card_init+0x1e>
	}
//	else
//	{
//		printf("succeded in mounting an sd card \n");
//	}
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400172c 	.word	0x2400172c
 8000730:	240000cc 	.word	0x240000cc
 8000734:	240000c8 	.word	0x240000c8

08000738 <start_recording>:

void start_recording(uint32_t frequency)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	static char file_name[] = "samp.wav";

	uint32_t byte_rate = frequency * 2 * 2;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
	wav_file_header[24] = (uint8_t)frequency;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <start_recording+0x84>)
 800074c:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <start_recording+0x84>)
 8000756:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <start_recording+0x84>)
 8000760:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0e1b      	lsrs	r3, r3, #24
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <start_recording+0x84>)
 800076a:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <start_recording+0x84>)
 8000772:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <start_recording+0x84>)
 800077c:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <start_recording+0x84>)
 8000786:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <start_recording+0x84>)
 8000790:	77da      	strb	r2, [r3, #31]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 8000792:	220a      	movs	r2, #10
 8000794:	490a      	ldr	r1, [pc, #40]	; (80007c0 <start_recording+0x88>)
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <start_recording+0x8c>)
 8000798:	f00d feae 	bl	800e4f8 <f_open>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <start_recording+0x90>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <start_recording+0x90>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d000      	beq.n	80007ae <start_recording+0x76>
	{
//		printf("error in creating a file: %d \n", sd_result);
		while(1);
 80007ac:	e7fe      	b.n	80007ac <start_recording+0x74>
	}
//	else
//	{
//		printf("succeeded in opening a file \n");
//	}
	wav_file_size = 0;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <start_recording+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]


}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000008 	.word	0x24000008
 80007c0:	24000034 	.word	0x24000034
 80007c4:	24000300 	.word	0x24000300
 80007c8:	240000c8 	.word	0x240000c8
 80007cc:	24000530 	.word	0x24000530

080007d0 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
//	printf("w\n");
	if(first_time == 0)
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <write2wave_file+0x70>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d113      	bne.n	800080c <write2wave_file+0x3c>
	{
		for(int i = 0; i < 44; i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e00a      	b.n	8000800 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	4914      	ldr	r1, [pc, #80]	; (8000844 <write2wave_file+0x74>)
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	440a      	add	r2, r1
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b2b      	cmp	r3, #43	; 0x2b
 8000804:	ddf1      	ble.n	80007ea <write2wave_file+0x1a>
		}
		first_time = 1;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <write2wave_file+0x70>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <write2wave_file+0x78>)
 8000816:	f00e f97c 	bl	800eb12 <f_write>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <write2wave_file+0x7c>)
 8000820:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <write2wave_file+0x7c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <write2wave_file+0x5c>
	{
//		printf("error in writing to the file: %d \n", sd_result);
		while(1);
 800082a:	e7fe      	b.n	800082a <write2wave_file+0x5a>
	}
	wav_file_size += data_size;
 800082c:	887a      	ldrh	r2, [r7, #2]
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <write2wave_file+0x80>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <write2wave_file+0x80>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000534 	.word	0x24000534
 8000844:	24000008 	.word	0x24000008
 8000848:	24000300 	.word	0x24000300
 800084c:	240000c8 	.word	0x240000c8
 8000850:	24000530 	.word	0x24000530

08000854 <stop_recording>:

void stop_recording()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <stop_recording+0xb0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3b08      	subs	r3, #8
 8000860:	4a28      	ldr	r2, [pc, #160]	; (8000904 <stop_recording+0xb0>)
 8000862:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <stop_recording+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <stop_recording+0xb4>)
 800086c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <stop_recording+0xb0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <stop_recording+0xb4>)
 8000878:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <stop_recording+0xb0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <stop_recording+0xb4>)
 8000884:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <stop_recording+0xb0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <stop_recording+0xb4>)
 8000890:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <stop_recording+0xb0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3b24      	subs	r3, #36	; 0x24
 8000898:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <stop_recording+0xb0>)
 800089a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <stop_recording+0xb0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <stop_recording+0xb4>)
 80008a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <stop_recording+0xb0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <stop_recording+0xb4>)
 80008b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <stop_recording+0xb0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	0c1b      	lsrs	r3, r3, #16
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <stop_recording+0xb4>)
 80008c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <stop_recording+0xb0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0e1b      	lsrs	r3, r3, #24
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <stop_recording+0xb4>)
 80008ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80008d2:	2100      	movs	r1, #0
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <stop_recording+0xb8>)
 80008d6:	f00e fb39 	bl	800ef4c <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80008da:	1dbb      	adds	r3, r7, #6
 80008dc:	222c      	movs	r2, #44	; 0x2c
 80008de:	490a      	ldr	r1, [pc, #40]	; (8000908 <stop_recording+0xb4>)
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <stop_recording+0xb8>)
 80008e2:	f00e f916 	bl	800eb12 <f_write>
	if(sd_result != 0)
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <stop_recording+0xbc>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d000      	beq.n	80008f0 <stop_recording+0x9c>
	{
//		printf("error in updating the first sector: %d \n", sd_result);
		while(1);
 80008ee:	e7fe      	b.n	80008ee <stop_recording+0x9a>
	}
	f_close(&wavFile);
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <stop_recording+0xb8>)
 80008f2:	f00e fb01 	bl	800eef8 <f_close>
	first_time = 0;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <stop_recording+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
//	printf("closed the file \n");
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000530 	.word	0x24000530
 8000908:	24000008 	.word	0x24000008
 800090c:	24000300 	.word	0x24000300
 8000910:	240000c8 	.word	0x240000c8
 8000914:	24000534 	.word	0x24000534

08000918 <play_record>:

bool play_record(uint8_t *data, uint16_t data_size){
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
	FRESULT fr = FR_NOT_READY;
 8000924:	2303      	movs	r3, #3
 8000926:	77fb      	strb	r3, [r7, #31]
	UINT bytesRead = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]

	char folderPath[] = "0:samp.wav";
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <play_record+0x84>)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	ca07      	ldmia	r2, {r0, r1, r2}
 8000934:	c303      	stmia	r3!, {r0, r1}
 8000936:	801a      	strh	r2, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
	if(first_play == 0){
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <play_record+0x88>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d112      	bne.n	800096c <play_record+0x54>
		fr = f_open(&wavFile, folderPath, FA_READ);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <play_record+0x8c>)
 8000950:	f00d fdd2 	bl	800e4f8 <f_open>
 8000954:	4603      	mov	r3, r0
 8000956:	77fb      	strb	r3, [r7, #31]

		if (fr == FR_OK)
 8000958:	7ffb      	ldrb	r3, [r7, #31]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <play_record+0x4e>
		{
		  f_lseek(&wavFile, 44);
 800095e:	212c      	movs	r1, #44	; 0x2c
 8000960:	4810      	ldr	r0, [pc, #64]	; (80009a4 <play_record+0x8c>)
 8000962:	f00e faf3 	bl	800ef4c <f_lseek>
		}
		first_play = 1;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <play_record+0x88>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
	}

	f_read(&wavFile, data, data_size, &bytesRead);
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <play_record+0x8c>)
 8000976:	f00d ff8d 	bl	800e894 <f_read>
	if(bytesRead < data_size){
 800097a:	887a      	ldrh	r2, [r7, #2]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <play_record+0x7a>
		f_close(&wavFile);
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <play_record+0x8c>)
 8000984:	f00e fab8 	bl	800eef8 <f_close>
		first_play = 0;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <play_record+0x88>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <play_record+0x7c>
	}

	return true;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800f6dc 	.word	0x0800f6dc
 80009a0:	24000535 	.word	0x24000535
 80009a4:	24000300 	.word	0x24000300

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009b4:	bf00      	nop
 80009b6:	4b9f      	ldr	r3, [pc, #636]	; (8000c34 <main+0x28c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <main+0x24>
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	60fa      	str	r2, [r7, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dcf4      	bgt.n	80009b6 <main+0xe>
  if ( timeout < 0 )
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da01      	bge.n	80009d6 <main+0x2e>
  {
  Error_Handler();
 80009d2:	f000 fb99 	bl	8001108 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 fe3d 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f949 	bl	8000c70 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009de:	4b95      	ldr	r3, [pc, #596]	; (8000c34 <main+0x28c>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a93      	ldr	r2, [pc, #588]	; (8000c34 <main+0x28c>)
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b91      	ldr	r3, [pc, #580]	; (8000c34 <main+0x28c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 fdb9 	bl	8004574 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f003 fdcf 	bl	80045a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a10:	bf00      	nop
 8000a12:	4b88      	ldr	r3, [pc, #544]	; (8000c34 <main+0x28c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <main+0x80>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	60fa      	str	r2, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dcf4      	bgt.n	8000a12 <main+0x6a>
if ( timeout < 0 )
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da01      	bge.n	8000a32 <main+0x8a>
{
Error_Handler();
 8000a2e:	f000 fb6b 	bl	8001108 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 fa67 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a36:	f000 fa45 	bl	8000ec4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000a3a:	f000 f9d3 	bl	8000de4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000a3e:	f000 f9f5 	bl	8000e2c <MX_USART1_UART_Init>
  MX_I2S1_Init();
 8000a42:	f000 f99b 	bl	8000d7c <MX_I2S1_Init>
  MX_FATFS_Init();
 8000a46:	f00b f98b 	bl	800bd60 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4e:	f000 fe93 	bl	8001778 <HAL_Delay>
  sd_card_init();
 8000a52:	f7ff fe59 	bl	8000708 <sd_card_init>
  HAL_Delay(500);
 8000a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5a:	f000 fe8d 	bl	8001778 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // RECORD BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000a5e:	2108      	movs	r1, #8
 8000a60:	4875      	ldr	r0, [pc, #468]	; (8000c38 <main+0x290>)
 8000a62:	f003 fd6f 	bl	8004544 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10e      	bne.n	8000a8a <main+0xe2>
		  recordBtnState++;
 8000a6c:	4b73      	ldr	r3, [pc, #460]	; (8000c3c <main+0x294>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <main+0x294>)
 8000a76:	801a      	strh	r2, [r3, #0]
		  if(recordBtnState > 1000)
 8000a78:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <main+0x294>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a80:	d903      	bls.n	8000a8a <main+0xe2>
			  recordBtnState = 1000;
 8000a82:	4b6e      	ldr	r3, [pc, #440]	; (8000c3c <main+0x294>)
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	801a      	strh	r2, [r3, #0]
	  }
	  if(recordBtnState == 1000 && recordBtnPrevState != HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)){
 8000a8a:	4b6c      	ldr	r3, [pc, #432]	; (8000c3c <main+0x294>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a92:	d10f      	bne.n	8000ab4 <main+0x10c>
 8000a94:	2108      	movs	r1, #8
 8000a96:	4868      	ldr	r0, [pc, #416]	; (8000c38 <main+0x290>)
 8000a98:	f003 fd54 	bl	8004544 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b67      	ldr	r3, [pc, #412]	; (8000c40 <main+0x298>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d005      	beq.n	8000ab4 <main+0x10c>
		  recordBtnState = 0;
 8000aa8:	4b64      	ldr	r3, [pc, #400]	; (8000c3c <main+0x294>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	801a      	strh	r2, [r3, #0]
		  recordBtnPressed = 1;
 8000aae:	4b65      	ldr	r3, [pc, #404]	; (8000c44 <main+0x29c>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
	  }
	  recordBtnPrevState = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	4860      	ldr	r0, [pc, #384]	; (8000c38 <main+0x290>)
 8000ab8:	f003 fd44 	bl	8004544 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <main+0x298>)
 8000ac2:	701a      	strb	r2, [r3, #0]

	  // PLAY BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == 0){
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	485c      	ldr	r0, [pc, #368]	; (8000c38 <main+0x290>)
 8000ac8:	f003 fd3c 	bl	8004544 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10e      	bne.n	8000af0 <main+0x148>
		  playBtnState++;
 8000ad2:	4b5d      	ldr	r3, [pc, #372]	; (8000c48 <main+0x2a0>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b5b      	ldr	r3, [pc, #364]	; (8000c48 <main+0x2a0>)
 8000adc:	801a      	strh	r2, [r3, #0]
		  if(playBtnState > 1000)
 8000ade:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <main+0x2a0>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ae6:	d903      	bls.n	8000af0 <main+0x148>
			  playBtnState = 1000;
 8000ae8:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <main+0x2a0>)
 8000aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aee:	801a      	strh	r2, [r3, #0]
	  }
	  if(playBtnState == 1000 && playBtnPrevState != HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin)){
 8000af0:	4b55      	ldr	r3, [pc, #340]	; (8000c48 <main+0x2a0>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af8:	d10f      	bne.n	8000b1a <main+0x172>
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	484e      	ldr	r0, [pc, #312]	; (8000c38 <main+0x290>)
 8000afe:	f003 fd21 	bl	8004544 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b51      	ldr	r3, [pc, #324]	; (8000c4c <main+0x2a4>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d005      	beq.n	8000b1a <main+0x172>
		  playBtnState = 0;
 8000b0e:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <main+0x2a0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	801a      	strh	r2, [r3, #0]
		  playBtnPressed = 1;
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <main+0x2a8>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
	  }
	  playBtnPrevState = HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin);
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4846      	ldr	r0, [pc, #280]	; (8000c38 <main+0x290>)
 8000b1e:	f003 fd11 	bl	8004544 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b49      	ldr	r3, [pc, #292]	; (8000c4c <main+0x2a4>)
 8000b28:	701a      	strb	r2, [r3, #0]


	  if(recordBtnPressed){
 8000b2a:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <main+0x29c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d01d      	beq.n	8000b6e <main+0x1c6>
		  recordStartStop ^= 0x01;
 8000b32:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <main+0x2ac>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f083 0301 	eor.w	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <main+0x2ac>)
 8000b3e:	701a      	strb	r2, [r3, #0]
		  if(recordStartStop){
 8000b40:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <main+0x2ac>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00d      	beq.n	8000b64 <main+0x1bc>
			  I2S1_ReInit(I2S_MODE_MASTER_RX);
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f000 fa85 	bl	8001058 <I2S1_ReInit>
			  start_recording(I2S_AUDIOFREQ_32K);
 8000b4e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000b52:	f7ff fdf1 	bl	8000738 <start_recording>
			  HAL_I2S_Receive_DMA(&hi2s1, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 8000b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5a:	493f      	ldr	r1, [pc, #252]	; (8000c58 <main+0x2b0>)
 8000b5c:	483f      	ldr	r0, [pc, #252]	; (8000c5c <main+0x2b4>)
 8000b5e:	f003 ff3f 	bl	80049e0 <HAL_I2S_Receive_DMA>
 8000b62:	e004      	b.n	8000b6e <main+0x1c6>
		  }
		  else{
			  HAL_I2S_DMAStop(&hi2s1);
 8000b64:	483d      	ldr	r0, [pc, #244]	; (8000c5c <main+0x2b4>)
 8000b66:	f003 ffdd 	bl	8004b24 <HAL_I2S_DMAStop>
			  stop_recording();
 8000b6a:	f7ff fe73 	bl	8000854 <stop_recording>
		  }
	  }

	  if(playBtnPressed){
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <main+0x2a8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <main+0x1da>
		  playStartStop = 1;
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <main+0x2b8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
		  I2S1_ReInit(I2S_MODE_MASTER_TX);
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f000 fa6b 	bl	8001058 <I2S1_ReInit>
	  }

	  if(recordStartStop == 1 && half_i2s == 1){
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <main+0x2ac>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d10c      	bne.n	8000ba4 <main+0x1fc>
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <main+0x2bc>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d107      	bne.n	8000ba4 <main+0x1fc>
		  write2wave_file(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT);
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	482f      	ldr	r0, [pc, #188]	; (8000c58 <main+0x2b0>)
 8000b9a:	f7ff fe19 	bl	80007d0 <write2wave_file>
		  half_i2s = 0;
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <main+0x2bc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	  }
	  if(recordStartStop == 1 && full_i2s == 1){
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <main+0x2ac>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d10d      	bne.n	8000bc8 <main+0x220>
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <main+0x2c0>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <main+0x220>
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <main+0x2c4>)
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fe07 	bl	80007d0 <write2wave_file>
		  full_i2s = 0;
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <main+0x2c0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	  }

	  if(playStartStop){
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <main+0x2b8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02a      	beq.n	8000c26 <main+0x27e>
		  if(!play_record(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT*2))
 8000bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd4:	4820      	ldr	r0, [pc, #128]	; (8000c58 <main+0x2b0>)
 8000bd6:	f7ff fe9f 	bl	8000918 <play_record>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <main+0x244>
			  playStartStop = 0;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <main+0x2b8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	e00d      	b.n	8000c0e <main+0x266>
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	005a      	lsls	r2, r3, #1
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4916      	ldr	r1, [pc, #88]	; (8000c58 <main+0x2b0>)
 8000bfe:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <main+0x2b0>)
 8000c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c14:	dbed      	blt.n	8000bf2 <main+0x24a>
		  HAL_I2S_Transmit(&hi2s1, data_i2s, WAV_WRITE_SAMPLE_COUNT, 1000);
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <main+0x2b0>)
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <main+0x2b4>)
 8000c22:	f003 fdf7 	bl	8004814 <HAL_I2S_Transmit>
	  }

	  recordBtnPressed = 0;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <main+0x29c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	  playBtnPressed = 0;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <main+0x2a8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000c32:	e714      	b.n	8000a5e <main+0xb6>
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58022800 	.word	0x58022800
 8000c3c:	24000716 	.word	0x24000716
 8000c40:	24000715 	.word	0x24000715
 8000c44:	24000714 	.word	0x24000714
 8000c48:	2400071a 	.word	0x2400071a
 8000c4c:	24000719 	.word	0x24000719
 8000c50:	24000718 	.word	0x24000718
 8000c54:	2400171e 	.word	0x2400171e
 8000c58:	2400071c 	.word	0x2400071c
 8000c5c:	24000538 	.word	0x24000538
 8000c60:	2400171f 	.word	0x2400171f
 8000c64:	2400171c 	.word	0x2400171c
 8000c68:	2400171d 	.word	0x2400171d
 8000c6c:	24000f1c 	.word	0x24000f1c

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b09c      	sub	sp, #112	; 0x70
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	224c      	movs	r2, #76	; 0x4c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00e fc1a 	bl	800f4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2220      	movs	r2, #32
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00e fc14 	bl	800f4b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c90:	2004      	movs	r0, #4
 8000c92:	f004 f82b 	bl	8004cec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <SystemClock_Config+0x104>)
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	4a35      	ldr	r2, [pc, #212]	; (8000d74 <SystemClock_Config+0x104>)
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <SystemClock_Config+0x104>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <SystemClock_Config+0x108>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a30      	ldr	r2, [pc, #192]	; (8000d78 <SystemClock_Config+0x108>)
 8000cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <SystemClock_Config+0x108>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc8:	bf00      	nop
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <SystemClock_Config+0x108>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd6:	d1f8      	bne.n	8000cca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000cd8:	230b      	movs	r3, #11
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cea:	2301      	movs	r3, #1
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000cfa:	23a0      	movs	r3, #160	; 0xa0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 f840 	bl	8004da0 <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d26:	f000 f9ef 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	233f      	movs	r3, #63	; 0x3f
 8000d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d36:	2308      	movs	r3, #8
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d3e:	2340      	movs	r3, #64	; 0x40
 8000d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d48:	2340      	movs	r3, #64	; 0x40
 8000d4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fc7f 	bl	8005654 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d5c:	f000 f9d4 	bl	8001108 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000d60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d64:	2100      	movs	r1, #0
 8000d66:	2000      	movs	r0, #0
 8000d68:	f004 fe2a 	bl	80059c0 <HAL_RCC_MCOConfig>
}
 8000d6c:	bf00      	nop
 8000d6e:	3770      	adds	r7, #112	; 0x70
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58000400 	.word	0x58000400
 8000d78:	58024800 	.word	0x58024800

08000d7c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <MX_I2S1_Init+0x64>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000d88:	2204      	movs	r2, #4
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d98:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000da2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000da6:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_I2S1_Init+0x60>)
 8000dc8:	f003 fc02 	bl	80045d0 <HAL_I2S_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000dd2:	f000 f999 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	24000538 	.word	0x24000538
 8000de0:	40013000 	.word	0x40013000

08000de4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <MX_SDMMC1_SD_Init+0x44>)
 8000dec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000dfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e00:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_SDMMC1_SD_Init+0x40>)
 8000e10:	f007 fd54 	bl	80088bc <HAL_SD_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e1a:	f000 f975 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000604 	.word	0x24000604
 8000e28:	52007000 	.word	0x52007000

08000e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e76:	f009 f8d3 	bl	800a020 <HAL_UART_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e80:	f000 f942 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e88:	f00a f8d5 	bl	800b036 <HAL_UARTEx_SetTxFifoThreshold>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e92:	f000 f939 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000e9a:	f00a f90a 	bl	800b0b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea4:	f000 f930 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_USART1_UART_Init+0x90>)
 8000eaa:	f00a f88b 	bl	800afc4 <HAL_UARTEx_DisableFifoMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 f928 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	24000680 	.word	0x24000680
 8000ec0:	40011000 	.word	0x40011000

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000edc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	200b      	movs	r0, #11
 8000eee:	f000 fd4e 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ef2:	200b      	movs	r0, #11
 8000ef4:	f000 fd65 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024400 	.word	0x58024400

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f1a:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a33      	ldr	r2, [pc, #204]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a2b      	ldr	r2, [pc, #172]	; (8001048 <MX_GPIO_Init+0x144>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a24      	ldr	r2, [pc, #144]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin JOY_UP_Pin JOY_DOWN_Pin
                           JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin
 8000fec:	237c      	movs	r3, #124	; 0x7c
 8000fee:	61fb      	str	r3, [r7, #28]
                          |JOY_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4813      	ldr	r0, [pc, #76]	; (800104c <MX_GPIO_Init+0x148>)
 8001000:	f003 f8f0 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_GPIO_Init+0x14c>)
 800101a:	f003 f8e3 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_GPIO_Init+0x150>)
 800103c:	f003 f8d2 	bl	80041e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58024400 	.word	0x58024400
 800104c:	58022800 	.word	0x58022800
 8001050:	58022000 	.word	0x58022000
 8001054:	58020000 	.word	0x58020000

08001058 <I2S1_ReInit>:

/* USER CODE BEGIN 4 */

static void I2S1_ReInit(uint32_t Mode)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <I2S1_ReInit+0x68>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <I2S1_ReInit+0x6c>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = Mode;
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <I2S1_ReInit+0x68>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6053      	str	r3, [r2, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <I2S1_ReInit+0x68>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <I2S1_ReInit+0x68>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <I2S1_ReInit+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <I2S1_ReInit+0x68>)
 8001082:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001086:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <I2S1_ReInit+0x68>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <I2S1_ReInit+0x68>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <I2S1_ReInit+0x68>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <I2S1_ReInit+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <I2S1_ReInit+0x68>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <I2S1_ReInit+0x68>)
 80010a8:	f003 fa92 	bl	80045d0 <HAL_I2S_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <I2S1_ReInit+0x5e>
  {
    Error_Handler();
 80010b2:	f000 f829 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000538 	.word	0x24000538
 80010c4:	40013000 	.word	0x40013000

080010c8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
//void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	full_i2s = 1;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_I2S_RxCpltCallback+0x1c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2400171d 	.word	0x2400171d

080010e8 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
//void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	half_i2s = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2400171c 	.word	0x2400171c

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_MspInit+0x30>)
 800111c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001120:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x30>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x30>)
 800112c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	58024400 	.word	0x58024400

08001148 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0be      	sub	sp, #248	; 0xf8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	22c8      	movs	r2, #200	; 0xc8
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00e f9a5 	bl	800f4b8 <memset>
  if(hi2s->Instance==SPI1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a62      	ldr	r2, [pc, #392]	; (80012fc <HAL_I2S_MspInit+0x1b4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f040 80bd 	bne.w	80012f4 <HAL_I2S_MspInit+0x1ac>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800117a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001186:	2300      	movs	r3, #0
 8001188:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	4618      	mov	r0, r3
 8001190:	f004 fe56 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 800119a:	f7ff ffb5 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119e:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a4:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011ae:	4b54      	ldr	r3, [pc, #336]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b50      	ldr	r3, [pc, #320]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011cc:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	4b49      	ldr	r3, [pc, #292]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	4a40      	ldr	r2, [pc, #256]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001208:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_I2S_MspInit+0x1b8>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    PB3 (JTDO/TRACESWO)     ------> I2S1_CK
    PD7     ------> I2S1_SDO
    PA6     ------> I2S1_SDI
    PA4     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001216:	2308      	movs	r3, #8
 8001218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122e:	2305      	movs	r3, #5
 8001230:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001238:	4619      	mov	r1, r3
 800123a:	4832      	ldr	r0, [pc, #200]	; (8001304 <HAL_I2S_MspInit+0x1bc>)
 800123c:	f002 ffd2 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001258:	2305      	movs	r3, #5
 800125a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001262:	4619      	mov	r1, r3
 8001264:	4828      	ldr	r0, [pc, #160]	; (8001308 <HAL_I2S_MspInit+0x1c0>)
 8001266:	f002 ffbd 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4;
 800126a:	2350      	movs	r3, #80	; 0x50
 800126c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001282:	2305      	movs	r3, #5
 8001284:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800128c:	4619      	mov	r1, r3
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <HAL_I2S_MspInit+0x1c4>)
 8001290:	f002 ffa8 	bl	80041e4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_I2S_MspInit+0x1cc>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 800129c:	2225      	movs	r2, #37	; 0x25
 800129e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012da:	f000 fb8d 	bl	80019f8 <HAL_DMA_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_I2S_MspInit+0x1a0>
    {
      Error_Handler();
 80012e4:	f7ff ff10 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012ec:	649a      	str	r2, [r3, #72]	; 0x48
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_I2S_MspInit+0x1c8>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	37f8      	adds	r7, #248	; 0xf8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013000 	.word	0x40013000
 8001300:	58024400 	.word	0x58024400
 8001304:	58020400 	.word	0x58020400
 8001308:	58020c00 	.word	0x58020c00
 800130c:	58020000 	.word	0x58020000
 8001310:	2400058c 	.word	0x2400058c
 8001314:	40020010 	.word	0x40020010

08001318 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0be      	sub	sp, #248	; 0xf8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	22c8      	movs	r2, #200	; 0xc8
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00e f8bd 	bl	800f4b8 <memset>
  if(hsd->Instance==SDMMC1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a41      	ldr	r2, [pc, #260]	; (8001448 <HAL_SD_MspInit+0x130>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d17a      	bne.n	800143e <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001348:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001358:	230c      	movs	r3, #12
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001360:	2302      	movs	r3, #2
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001364:	2302      	movs	r3, #2
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001368:	23c0      	movs	r3, #192	; 0xc0
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800136c:	2320      	movs	r3, #32
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001378:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4618      	mov	r0, r3
 8001380:	f004 fd5e 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 800138a:	f7ff febd 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <HAL_SD_MspInit+0x134>)
 8001390:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001394:	4a2d      	ldr	r2, [pc, #180]	; (800144c <HAL_SD_MspInit+0x134>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_SD_MspInit+0x134>)
 80013a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_SD_MspInit+0x134>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	4a26      	ldr	r2, [pc, #152]	; (800144c <HAL_SD_MspInit+0x134>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_SD_MspInit+0x134>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_SD_MspInit+0x134>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_SD_MspInit+0x134>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_SD_MspInit+0x134>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 80013e8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001402:	230c      	movs	r3, #12
 8001404:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800140c:	4619      	mov	r1, r3
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <HAL_SD_MspInit+0x138>)
 8001410:	f002 fee8 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001414:	2304      	movs	r3, #4
 8001416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800142c:	230c      	movs	r3, #12
 800142e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001436:	4619      	mov	r1, r3
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_SD_MspInit+0x13c>)
 800143a:	f002 fed3 	bl	80041e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	37f8      	adds	r7, #248	; 0xf8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	52007000 	.word	0x52007000
 800144c:	58024400 	.word	0x58024400
 8001450:	58020800 	.word	0x58020800
 8001454:	58020c00 	.word	0x58020c00

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0bc      	sub	sp, #240	; 0xf0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	22c8      	movs	r2, #200	; 0xc8
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f00e f81d 	bl	800f4b8 <memset>
  if(huart->Instance==USART1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_UART_MspInit+0xc8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d146      	bne.n	8001516 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001488:	f04f 0201 	mov.w	r2, #1
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fcce 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014aa:	f7ff fe2d 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_UART_MspInit+0xcc>)
 80014b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_UART_MspInit+0xcc>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_UART_MspInit+0xcc>)
 80014c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_UART_MspInit+0xcc>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <HAL_UART_MspInit+0xcc>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_UART_MspInit+0xcc>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001504:	2307      	movs	r3, #7
 8001506:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_UART_MspInit+0xd0>)
 8001512:	f002 fe67 	bl	80041e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	37f0      	adds	r7, #240	; 0xf0
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40011000 	.word	0x40011000
 8001524:	58024400 	.word	0x58024400
 8001528:	58020000 	.word	0x58020000

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001578:	f000 f8de 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Stream0_IRQHandler+0x10>)
 8001586:	f001 fb1b 	bl	8002bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2400058c 	.word	0x2400058c

08001594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c4:	f00d ff3e 	bl	800f444 <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	24080000 	.word	0x24080000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	24001720 	.word	0x24001720
 80015fc:	24001778 	.word	0x24001778

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001604:	f7fe ffea 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	; (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f00d ff0f 	bl	800f450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff f9b9 	bl	80009a8 <main>
  bx  lr
 8001636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800163c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001640:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 8001644:	0800fbd4 	.word	0x0800fbd4
  ldr r2, =_sbss
 8001648:	240000ac 	.word	0x240000ac
  ldr r4, =_ebss
 800164c:	24001774 	.word	0x24001774

08001650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC3_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f98c 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001660:	f004 fa18 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_Init+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4913      	ldr	r1, [pc, #76]	; (80016c0 <HAL_Init+0x6c>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_Init+0x6c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x70>)
 8001696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f814 	bl	80016cc <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e002      	b.n	80016b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ae:	f7ff fd31 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	0800f730 	.word	0x0800f730
 80016c4:	24000004 	.word	0x24000004
 80016c8:	24000000 	.word	0x24000000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_InitTick+0x60>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e021      	b.n	8001724 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_InitTick+0x64>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_InitTick+0x60>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f971 	bl	80019de <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f93b 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x68>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	24000044 	.word	0x24000044
 8001730:	24000000 	.word	0x24000000
 8001734:	24000040 	.word	0x24000040

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	24000044 	.word	0x24000044
 800175c:	24001724 	.word	0x24001724

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	24001724 	.word	0x24001724

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff ffee 	bl	8001760 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_Delay+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffde 	bl	8001760 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24000044 	.word	0x24000044

080017c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetREVID+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0c1b      	lsrs	r3, r3, #16
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	5c001000 	.word	0x5c001000

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <__NVIC_SetPriorityGrouping+0x40>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	4313      	orrs	r3, r2
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x40>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	05fa0000 	.word	0x05fa0000

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db0b      	blt.n	8001866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <__NVIC_EnableIRQ+0x38>)
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff29 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff40 	bl	8001820 <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff90 	bl	80018cc <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5f 	bl	8001878 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff33 	bl	800183c <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa4 	bl	8001934 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff feae 	bl	8001760 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e316      	b.n	800203e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a66      	ldr	r2, [pc, #408]	; (8001bb0 <HAL_DMA_Init+0x1b8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d04a      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_DMA_Init+0x1bc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d045      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a63      	ldr	r2, [pc, #396]	; (8001bb8 <HAL_DMA_Init+0x1c0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d040      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a62      	ldr	r2, [pc, #392]	; (8001bbc <HAL_DMA_Init+0x1c4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d03b      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_DMA_Init+0x1c8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d036      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_DMA_Init+0x1cc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d031      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5d      	ldr	r2, [pc, #372]	; (8001bc8 <HAL_DMA_Init+0x1d0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d02c      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5c      	ldr	r2, [pc, #368]	; (8001bcc <HAL_DMA_Init+0x1d4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d027      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_DMA_Init+0x1d8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d022      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <HAL_DMA_Init+0x1dc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d01d      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_DMA_Init+0x1e0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d018      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_DMA_Init+0x1e4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_DMA_Init+0x1e8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00e      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a53      	ldr	r2, [pc, #332]	; (8001be4 <HAL_DMA_Init+0x1ec>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_DMA_Init+0x1f0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_DMA_Init+0x1f4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Init+0xbc>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_DMA_Init+0xbe>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 813b 	beq.w	8001d32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_DMA_Init+0x1b8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d04a      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <HAL_DMA_Init+0x1bc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d045      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_DMA_Init+0x1c0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d040      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_DMA_Init+0x1c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d03b      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_DMA_Init+0x1c8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d036      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <HAL_DMA_Init+0x1cc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d031      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_DMA_Init+0x1d0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02c      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2d      	ldr	r2, [pc, #180]	; (8001bcc <HAL_DMA_Init+0x1d4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d027      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <HAL_DMA_Init+0x1d8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <HAL_DMA_Init+0x1dc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d01d      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <HAL_DMA_Init+0x1e0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <HAL_DMA_Init+0x1e4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <HAL_DMA_Init+0x1e8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <HAL_DMA_Init+0x1ec>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_DMA_Init+0x1f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_DMA_Init+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d108      	bne.n	8001b7e <HAL_DMA_Init+0x186>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_DMA_Init+0x196>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b8e:	e02f      	b.n	8001bf0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b90:	f7ff fde6 	bl	8001760 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d928      	bls.n	8001bf0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e246      	b.n	800203e <HAL_DMA_Init+0x646>
 8001bb0:	40020010 	.word	0x40020010
 8001bb4:	40020028 	.word	0x40020028
 8001bb8:	40020040 	.word	0x40020040
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	40020070 	.word	0x40020070
 8001bc4:	40020088 	.word	0x40020088
 8001bc8:	400200a0 	.word	0x400200a0
 8001bcc:	400200b8 	.word	0x400200b8
 8001bd0:	40020410 	.word	0x40020410
 8001bd4:	40020428 	.word	0x40020428
 8001bd8:	40020440 	.word	0x40020440
 8001bdc:	40020458 	.word	0x40020458
 8001be0:	40020470 	.word	0x40020470
 8001be4:	40020488 	.word	0x40020488
 8001be8:	400204a0 	.word	0x400204a0
 8001bec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1c8      	bne.n	8001b90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4b83      	ldr	r3, [pc, #524]	; (8001e18 <HAL_DMA_Init+0x420>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c54:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <HAL_DMA_Init+0x424>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_DMA_Init+0x428>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c60:	d328      	bcc.n	8001cb4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b28      	cmp	r3, #40	; 0x28
 8001c68:	d903      	bls.n	8001c72 <HAL_DMA_Init+0x27a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c70:	d917      	bls.n	8001ca2 <HAL_DMA_Init+0x2aa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b3e      	cmp	r3, #62	; 0x3e
 8001c78:	d903      	bls.n	8001c82 <HAL_DMA_Init+0x28a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b42      	cmp	r3, #66	; 0x42
 8001c80:	d90f      	bls.n	8001ca2 <HAL_DMA_Init+0x2aa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b46      	cmp	r3, #70	; 0x46
 8001c88:	d903      	bls.n	8001c92 <HAL_DMA_Init+0x29a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b48      	cmp	r3, #72	; 0x48
 8001c90:	d907      	bls.n	8001ca2 <HAL_DMA_Init+0x2aa>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b4e      	cmp	r3, #78	; 0x4e
 8001c98:	d905      	bls.n	8001ca6 <HAL_DMA_Init+0x2ae>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b52      	cmp	r3, #82	; 0x52
 8001ca0:	d801      	bhi.n	8001ca6 <HAL_DMA_Init+0x2ae>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_Init+0x2b0>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d117      	bne.n	8001d0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f002 f8ed 	bl	8003ed0 <DMA_CheckFifoParam>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e197      	b.n	800203e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f002 f828 	bl	8003d6c <DMA_CalcBaseAndBitshift>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	223f      	movs	r2, #63	; 0x3f
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e0cd      	b.n	8001ece <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_DMA_Init+0x42c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <HAL_DMA_Init+0x430>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01d      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a38      	ldr	r2, [pc, #224]	; (8001e2c <HAL_DMA_Init+0x434>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d018      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <HAL_DMA_Init+0x438>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <HAL_DMA_Init+0x43c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00e      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a33      	ldr	r2, [pc, #204]	; (8001e38 <HAL_DMA_Init+0x440>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_DMA_Init+0x444>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d004      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_DMA_Init+0x448>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Init+0x38e>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_DMA_Init+0x390>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8097 	beq.w	8001ebc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <HAL_DMA_Init+0x42c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d021      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_DMA_Init+0x430>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01c      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_DMA_Init+0x434>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d017      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_DMA_Init+0x438>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d012      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_DMA_Init+0x43c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00d      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_DMA_Init+0x440>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d008      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_DMA_Init+0x444>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_DMA_Init+0x448>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_DMA_Init+0x44c>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d020      	beq.n	8001e48 <HAL_DMA_Init+0x450>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b80      	cmp	r3, #128	; 0x80
 8001e0c:	d102      	bne.n	8001e14 <HAL_DMA_Init+0x41c>
 8001e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e12:	e01a      	b.n	8001e4a <HAL_DMA_Init+0x452>
 8001e14:	2300      	movs	r3, #0
 8001e16:	e018      	b.n	8001e4a <HAL_DMA_Init+0x452>
 8001e18:	fe10803f 	.word	0xfe10803f
 8001e1c:	5c001000 	.word	0x5c001000
 8001e20:	ffff0000 	.word	0xffff0000
 8001e24:	58025408 	.word	0x58025408
 8001e28:	5802541c 	.word	0x5802541c
 8001e2c:	58025430 	.word	0x58025430
 8001e30:	58025444 	.word	0x58025444
 8001e34:	58025458 	.word	0x58025458
 8001e38:	5802546c 	.word	0x5802546c
 8001e3c:	58025480 	.word	0x58025480
 8001e40:	58025494 	.word	0x58025494
 8001e44:	fffe000f 	.word	0xfffe000f
 8001e48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <HAL_DMA_Init+0x650>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_DMA_Init+0x654>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	009a      	lsls	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f001 ff63 	bl	8003d6c <DMA_CalcBaseAndBitshift>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e008      	b.n	8001ece <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0b7      	b.n	800203e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <HAL_DMA_Init+0x658>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d072      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	; (8002054 <HAL_DMA_Init+0x65c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d06d      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <HAL_DMA_Init+0x660>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d068      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	; (800205c <HAL_DMA_Init+0x664>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d063      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a59      	ldr	r2, [pc, #356]	; (8002060 <HAL_DMA_Init+0x668>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a57      	ldr	r2, [pc, #348]	; (8002064 <HAL_DMA_Init+0x66c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d059      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_DMA_Init+0x670>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d054      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a54      	ldr	r2, [pc, #336]	; (800206c <HAL_DMA_Init+0x674>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04f      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_DMA_Init+0x678>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04a      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	; (8002074 <HAL_DMA_Init+0x67c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d045      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a50      	ldr	r2, [pc, #320]	; (8002078 <HAL_DMA_Init+0x680>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d040      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_DMA_Init+0x684>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d03b      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_DMA_Init+0x688>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d036      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <HAL_DMA_Init+0x68c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d031      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_DMA_Init+0x690>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d02c      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_DMA_Init+0x694>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d027      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_DMA_Init+0x698>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a45      	ldr	r2, [pc, #276]	; (8002094 <HAL_DMA_Init+0x69c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a44      	ldr	r2, [pc, #272]	; (8002098 <HAL_DMA_Init+0x6a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d018      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a42      	ldr	r2, [pc, #264]	; (800209c <HAL_DMA_Init+0x6a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a41      	ldr	r2, [pc, #260]	; (80020a0 <HAL_DMA_Init+0x6a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_DMA_Init+0x6ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_DMA_Init+0x6b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3c      	ldr	r2, [pc, #240]	; (80020ac <HAL_DMA_Init+0x6b4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Init+0x5ca>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_Init+0x5cc>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d032      	beq.n	800202e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f001 fffd 	bl	8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b80      	cmp	r3, #128	; 0x80
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ff0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_DMA_Init+0x624>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d80c      	bhi.n	800201c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f002 f87a 	bl	80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e008      	b.n	800202e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	a7fdabf8 	.word	0xa7fdabf8
 800204c:	cccccccd 	.word	0xcccccccd
 8002050:	40020010 	.word	0x40020010
 8002054:	40020028 	.word	0x40020028
 8002058:	40020040 	.word	0x40020040
 800205c:	40020058 	.word	0x40020058
 8002060:	40020070 	.word	0x40020070
 8002064:	40020088 	.word	0x40020088
 8002068:	400200a0 	.word	0x400200a0
 800206c:	400200b8 	.word	0x400200b8
 8002070:	40020410 	.word	0x40020410
 8002074:	40020428 	.word	0x40020428
 8002078:	40020440 	.word	0x40020440
 800207c:	40020458 	.word	0x40020458
 8002080:	40020470 	.word	0x40020470
 8002084:	40020488 	.word	0x40020488
 8002088:	400204a0 	.word	0x400204a0
 800208c:	400204b8 	.word	0x400204b8
 8002090:	58025408 	.word	0x58025408
 8002094:	5802541c 	.word	0x5802541c
 8002098:	58025430 	.word	0x58025430
 800209c:	58025444 	.word	0x58025444
 80020a0:	58025458 	.word	0x58025458
 80020a4:	5802546c 	.word	0x5802546c
 80020a8:	58025480 	.word	0x58025480
 80020ac:	58025494 	.word	0x58025494

080020b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e226      	b.n	800251a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x2a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e21f      	b.n	800251a <HAL_DMA_Start_IT+0x46a>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 820a 	bne.w	8002504 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a68      	ldr	r2, [pc, #416]	; (80022a4 <HAL_DMA_Start_IT+0x1f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <HAL_DMA_Start_IT+0x1f8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a65      	ldr	r2, [pc, #404]	; (80022ac <HAL_DMA_Start_IT+0x1fc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_DMA_Start_IT+0x200>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a62      	ldr	r2, [pc, #392]	; (80022b4 <HAL_DMA_Start_IT+0x204>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a60      	ldr	r2, [pc, #384]	; (80022b8 <HAL_DMA_Start_IT+0x208>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <HAL_DMA_Start_IT+0x20c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_DMA_Start_IT+0x210>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_DMA_Start_IT+0x214>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5a      	ldr	r2, [pc, #360]	; (80022c8 <HAL_DMA_Start_IT+0x218>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a59      	ldr	r2, [pc, #356]	; (80022cc <HAL_DMA_Start_IT+0x21c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_DMA_Start_IT+0x220>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a56      	ldr	r2, [pc, #344]	; (80022d4 <HAL_DMA_Start_IT+0x224>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_DMA_Start_IT+0x228>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a53      	ldr	r2, [pc, #332]	; (80022dc <HAL_DMA_Start_IT+0x22c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a51      	ldr	r2, [pc, #324]	; (80022e0 <HAL_DMA_Start_IT+0x230>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_Start_IT+0x100>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_DMA_Start_IT+0x110>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 fc24 	bl	8003a14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <HAL_DMA_Start_IT+0x1f4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04a      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a33      	ldr	r2, [pc, #204]	; (80022a8 <HAL_DMA_Start_IT+0x1f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d045      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a31      	ldr	r2, [pc, #196]	; (80022ac <HAL_DMA_Start_IT+0x1fc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d040      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <HAL_DMA_Start_IT+0x200>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d03b      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	; (80022b4 <HAL_DMA_Start_IT+0x204>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d036      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <HAL_DMA_Start_IT+0x208>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d031      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <HAL_DMA_Start_IT+0x20c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02c      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_DMA_Start_IT+0x210>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d027      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_DMA_Start_IT+0x214>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d022      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_DMA_Start_IT+0x218>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d01d      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <HAL_DMA_Start_IT+0x21c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d018      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <HAL_DMA_Start_IT+0x220>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_DMA_Start_IT+0x224>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00e      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_DMA_Start_IT+0x228>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_DMA_Start_IT+0x22c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_DMA_Start_IT+0x230>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Start_IT+0x1c0>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_DMA_Start_IT+0x1c2>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 021e 	bic.w	r2, r3, #30
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0216 	orr.w	r2, r2, #22
 8002288:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d03e      	beq.n	8002310 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0208 	orr.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e035      	b.n	8002310 <HAL_DMA_Start_IT+0x260>
 80022a4:	40020010 	.word	0x40020010
 80022a8:	40020028 	.word	0x40020028
 80022ac:	40020040 	.word	0x40020040
 80022b0:	40020058 	.word	0x40020058
 80022b4:	40020070 	.word	0x40020070
 80022b8:	40020088 	.word	0x40020088
 80022bc:	400200a0 	.word	0x400200a0
 80022c0:	400200b8 	.word	0x400200b8
 80022c4:	40020410 	.word	0x40020410
 80022c8:	40020428 	.word	0x40020428
 80022cc:	40020440 	.word	0x40020440
 80022d0:	40020458 	.word	0x40020458
 80022d4:	40020470 	.word	0x40020470
 80022d8:	40020488 	.word	0x40020488
 80022dc:	400204a0 	.word	0x400204a0
 80022e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 020e 	bic.w	r2, r3, #14
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 020a 	orr.w	r2, r2, #10
 80022f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0204 	orr.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a83      	ldr	r2, [pc, #524]	; (8002524 <HAL_DMA_Start_IT+0x474>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d072      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_DMA_Start_IT+0x478>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d06d      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a80      	ldr	r2, [pc, #512]	; (800252c <HAL_DMA_Start_IT+0x47c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d068      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7f      	ldr	r2, [pc, #508]	; (8002530 <HAL_DMA_Start_IT+0x480>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d063      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7d      	ldr	r2, [pc, #500]	; (8002534 <HAL_DMA_Start_IT+0x484>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d05e      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7c      	ldr	r2, [pc, #496]	; (8002538 <HAL_DMA_Start_IT+0x488>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d059      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7a      	ldr	r2, [pc, #488]	; (800253c <HAL_DMA_Start_IT+0x48c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d054      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a79      	ldr	r2, [pc, #484]	; (8002540 <HAL_DMA_Start_IT+0x490>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04f      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_DMA_Start_IT+0x494>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d04a      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a76      	ldr	r2, [pc, #472]	; (8002548 <HAL_DMA_Start_IT+0x498>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d045      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a74      	ldr	r2, [pc, #464]	; (800254c <HAL_DMA_Start_IT+0x49c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d040      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <HAL_DMA_Start_IT+0x4a0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d03b      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a71      	ldr	r2, [pc, #452]	; (8002554 <HAL_DMA_Start_IT+0x4a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d036      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_DMA_Start_IT+0x4a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d031      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6e      	ldr	r2, [pc, #440]	; (800255c <HAL_DMA_Start_IT+0x4ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02c      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6d      	ldr	r2, [pc, #436]	; (8002560 <HAL_DMA_Start_IT+0x4b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d027      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6b      	ldr	r2, [pc, #428]	; (8002564 <HAL_DMA_Start_IT+0x4b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d022      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <HAL_DMA_Start_IT+0x4b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d01d      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a68      	ldr	r2, [pc, #416]	; (800256c <HAL_DMA_Start_IT+0x4bc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d018      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_DMA_Start_IT+0x4c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_DMA_Start_IT+0x4c4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a64      	ldr	r2, [pc, #400]	; (8002578 <HAL_DMA_Start_IT+0x4c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a62      	ldr	r2, [pc, #392]	; (800257c <HAL_DMA_Start_IT+0x4cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a61      	ldr	r2, [pc, #388]	; (8002580 <HAL_DMA_Start_IT+0x4d0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_DMA_Start_IT+0x354>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_DMA_Start_IT+0x356>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002426:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a37      	ldr	r2, [pc, #220]	; (8002524 <HAL_DMA_Start_IT+0x474>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04a      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a36      	ldr	r2, [pc, #216]	; (8002528 <HAL_DMA_Start_IT+0x478>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d045      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_DMA_Start_IT+0x47c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d040      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_DMA_Start_IT+0x480>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d03b      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_DMA_Start_IT+0x484>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d036      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a30      	ldr	r2, [pc, #192]	; (8002538 <HAL_DMA_Start_IT+0x488>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2e      	ldr	r2, [pc, #184]	; (800253c <HAL_DMA_Start_IT+0x48c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02c      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_DMA_Start_IT+0x490>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d027      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <HAL_DMA_Start_IT+0x494>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <HAL_DMA_Start_IT+0x498>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_DMA_Start_IT+0x49c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_DMA_Start_IT+0x4a0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_DMA_Start_IT+0x4a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_DMA_Start_IT+0x4a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_DMA_Start_IT+0x4ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_DMA_Start_IT+0x4b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <HAL_DMA_Start_IT+0x442>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e012      	b.n	8002518 <HAL_DMA_Start_IT+0x468>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e009      	b.n	8002518 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800250a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020010 	.word	0x40020010
 8002528:	40020028 	.word	0x40020028
 800252c:	40020040 	.word	0x40020040
 8002530:	40020058 	.word	0x40020058
 8002534:	40020070 	.word	0x40020070
 8002538:	40020088 	.word	0x40020088
 800253c:	400200a0 	.word	0x400200a0
 8002540:	400200b8 	.word	0x400200b8
 8002544:	40020410 	.word	0x40020410
 8002548:	40020428 	.word	0x40020428
 800254c:	40020440 	.word	0x40020440
 8002550:	40020458 	.word	0x40020458
 8002554:	40020470 	.word	0x40020470
 8002558:	40020488 	.word	0x40020488
 800255c:	400204a0 	.word	0x400204a0
 8002560:	400204b8 	.word	0x400204b8
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494

08002584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff f8e8 	bl	8001760 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e2dc      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e2cd      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a76      	ldr	r2, [pc, #472]	; (8002798 <HAL_DMA_Abort+0x214>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04a      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a74      	ldr	r2, [pc, #464]	; (800279c <HAL_DMA_Abort+0x218>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d045      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a73      	ldr	r2, [pc, #460]	; (80027a0 <HAL_DMA_Abort+0x21c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d040      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a71      	ldr	r2, [pc, #452]	; (80027a4 <HAL_DMA_Abort+0x220>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d03b      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_DMA_Abort+0x224>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d036      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_DMA_Abort+0x228>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6d      	ldr	r2, [pc, #436]	; (80027b0 <HAL_DMA_Abort+0x22c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d02c      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <HAL_DMA_Abort+0x230>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d027      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6a      	ldr	r2, [pc, #424]	; (80027b8 <HAL_DMA_Abort+0x234>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_DMA_Abort+0x238>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01d      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <HAL_DMA_Abort+0x23c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_DMA_Abort+0x240>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <HAL_DMA_Abort+0x244>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a62      	ldr	r2, [pc, #392]	; (80027cc <HAL_DMA_Abort+0x248>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <HAL_DMA_Abort+0x24c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <HAL_DMA_Abort+0x250>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_DMA_Abort+0xda>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort+0xdc>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 021e 	bic.w	r2, r2, #30
 8002672:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002682:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e00a      	b.n	80026a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <HAL_DMA_Abort+0x214>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d072      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3a      	ldr	r2, [pc, #232]	; (800279c <HAL_DMA_Abort+0x218>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d06d      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a39      	ldr	r2, [pc, #228]	; (80027a0 <HAL_DMA_Abort+0x21c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d068      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	; (80027a4 <HAL_DMA_Abort+0x220>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d063      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <HAL_DMA_Abort+0x224>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a34      	ldr	r2, [pc, #208]	; (80027ac <HAL_DMA_Abort+0x228>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d059      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <HAL_DMA_Abort+0x22c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d054      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_DMA_Abort+0x230>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04f      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_DMA_Abort+0x234>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <HAL_DMA_Abort+0x238>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_DMA_Abort+0x23c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <HAL_DMA_Abort+0x240>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_DMA_Abort+0x244>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <HAL_DMA_Abort+0x248>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_DMA_Abort+0x24c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_DMA_Abort+0x250>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <HAL_DMA_Abort+0x254>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_DMA_Abort+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_DMA_Abort+0x25c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_DMA_Abort+0x260>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_DMA_Abort+0x264>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_DMA_Abort+0x268>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_DMA_Abort+0x26c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_DMA_Abort+0x270>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d132      	bne.n	80027f8 <HAL_DMA_Abort+0x274>
 8002792:	2301      	movs	r3, #1
 8002794:	e031      	b.n	80027fa <HAL_DMA_Abort+0x276>
 8002796:	bf00      	nop
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
 80027d8:	58025408 	.word	0x58025408
 80027dc:	5802541c 	.word	0x5802541c
 80027e0:	58025430 	.word	0x58025430
 80027e4:	58025444 	.word	0x58025444
 80027e8:	58025458 	.word	0x58025458
 80027ec:	5802546c 	.word	0x5802546c
 80027f0:	58025480 	.word	0x58025480
 80027f4:	58025494 	.word	0x58025494
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	; (80029c8 <HAL_DMA_Abort+0x444>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04a      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	; (80029cc <HAL_DMA_Abort+0x448>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d045      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_DMA_Abort+0x44c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d040      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_DMA_Abort+0x450>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03b      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	; (80029d8 <HAL_DMA_Abort+0x454>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d036      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_DMA_Abort+0x458>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d031      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_DMA_Abort+0x45c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02c      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_DMA_Abort+0x460>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d027      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <HAL_DMA_Abort+0x464>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_DMA_Abort+0x468>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5e      	ldr	r2, [pc, #376]	; (80029f0 <HAL_DMA_Abort+0x46c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <HAL_DMA_Abort+0x470>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_DMA_Abort+0x474>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_DMA_Abort+0x478>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_DMA_Abort+0x47c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_DMA_Abort+0x480>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d108      	bne.n	80028c0 <HAL_DMA_Abort+0x33c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e007      	b.n	80028d0 <HAL_DMA_Abort+0x34c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028d0:	e013      	b.n	80028fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7fe ff45 	bl	8001760 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d90c      	bls.n	80028fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12d      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <HAL_DMA_Abort+0x444>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04a      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <HAL_DMA_Abort+0x448>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <HAL_DMA_Abort+0x44c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d040      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_DMA_Abort+0x450>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d03b      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <HAL_DMA_Abort+0x454>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d036      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_DMA_Abort+0x458>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <HAL_DMA_Abort+0x45c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02c      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_DMA_Abort+0x460>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d027      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_DMA_Abort+0x464>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_DMA_Abort+0x468>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_DMA_Abort+0x46c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_DMA_Abort+0x470>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_DMA_Abort+0x474>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_DMA_Abort+0x478>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_DMA_Abort+0x47c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_DMA_Abort+0x480>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Abort+0x426>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_DMA_Abort+0x428>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	223f      	movs	r2, #63	; 0x3f
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	e02a      	b.n	8002a1e <HAL_DMA_Abort+0x49a>
 80029c8:	40020010 	.word	0x40020010
 80029cc:	40020028 	.word	0x40020028
 80029d0:	40020040 	.word	0x40020040
 80029d4:	40020058 	.word	0x40020058
 80029d8:	40020070 	.word	0x40020070
 80029dc:	40020088 	.word	0x40020088
 80029e0:	400200a0 	.word	0x400200a0
 80029e4:	400200b8 	.word	0x400200b8
 80029e8:	40020410 	.word	0x40020410
 80029ec:	40020428 	.word	0x40020428
 80029f0:	40020440 	.word	0x40020440
 80029f4:	40020458 	.word	0x40020458
 80029f8:	40020470 	.word	0x40020470
 80029fc:	40020488 	.word	0x40020488
 8002a00:	400204a0 	.word	0x400204a0
 8002a04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2201      	movs	r2, #1
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_DMA_Abort+0x5dc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d072      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <HAL_DMA_Abort+0x5e0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d06d      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_DMA_Abort+0x5e4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d068      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_DMA_Abort+0x5e8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d063      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_DMA_Abort+0x5ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d05e      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_DMA_Abort+0x5f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d059      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_DMA_Abort+0x5f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d054      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a44      	ldr	r2, [pc, #272]	; (8002b7c <HAL_DMA_Abort+0x5f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04f      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <HAL_DMA_Abort+0x5fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04a      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_DMA_Abort+0x600>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d045      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a40      	ldr	r2, [pc, #256]	; (8002b88 <HAL_DMA_Abort+0x604>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d040      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3e      	ldr	r2, [pc, #248]	; (8002b8c <HAL_DMA_Abort+0x608>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d03b      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	; (8002b90 <HAL_DMA_Abort+0x60c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d036      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <HAL_DMA_Abort+0x610>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <HAL_DMA_Abort+0x614>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d02c      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <HAL_DMA_Abort+0x618>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d027      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a37      	ldr	r2, [pc, #220]	; (8002ba0 <HAL_DMA_Abort+0x61c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <HAL_DMA_Abort+0x620>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01d      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <HAL_DMA_Abort+0x624>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a32      	ldr	r2, [pc, #200]	; (8002bac <HAL_DMA_Abort+0x628>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_DMA_Abort+0x62c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_DMA_Abort+0x630>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Abort+0x634>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	; (8002bbc <HAL_DMA_Abort+0x638>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Abort+0x58e>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_DMA_Abort+0x590>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
 8002ba0:	58025408 	.word	0x58025408
 8002ba4:	5802541c 	.word	0x5802541c
 8002ba8:	58025430 	.word	0x58025430
 8002bac:	58025444 	.word	0x58025444
 8002bb0:	58025458 	.word	0x58025458
 8002bb4:	5802546c 	.word	0x5802546c
 8002bb8:	58025480 	.word	0x58025480
 8002bbc:	58025494 	.word	0x58025494

08002bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bcc:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <HAL_DMA_IRQHandler+0x1ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a67      	ldr	r2, [pc, #412]	; (8002d70 <HAL_DMA_IRQHandler+0x1b0>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5f      	ldr	r2, [pc, #380]	; (8002d74 <HAL_DMA_IRQHandler+0x1b4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_DMA_IRQHandler+0x1b8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5c      	ldr	r2, [pc, #368]	; (8002d7c <HAL_DMA_IRQHandler+0x1bc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_DMA_IRQHandler+0x1c0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a59      	ldr	r2, [pc, #356]	; (8002d84 <HAL_DMA_IRQHandler+0x1c4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <HAL_DMA_IRQHandler+0x1c8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <HAL_DMA_IRQHandler+0x1cc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_DMA_IRQHandler+0x1d0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a53      	ldr	r2, [pc, #332]	; (8002d94 <HAL_DMA_IRQHandler+0x1d4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <HAL_DMA_IRQHandler+0x1d8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a50      	ldr	r2, [pc, #320]	; (8002d9c <HAL_DMA_IRQHandler+0x1dc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4e      	ldr	r2, [pc, #312]	; (8002da0 <HAL_DMA_IRQHandler+0x1e0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <HAL_DMA_IRQHandler+0x1e4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_DMA_IRQHandler+0x1e8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_DMA_IRQHandler+0x1ec>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xd2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a48      	ldr	r2, [pc, #288]	; (8002db0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_IRQHandler+0xd6>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_IRQHandler+0xd8>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 842b 	beq.w	80034f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80a2 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2e      	ldr	r2, [pc, #184]	; (8002d74 <HAL_DMA_IRQHandler+0x1b4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2d      	ldr	r2, [pc, #180]	; (8002d78 <HAL_DMA_IRQHandler+0x1b8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d045      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <HAL_DMA_IRQHandler+0x1bc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d040      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <HAL_DMA_IRQHandler+0x1c0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d03b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_DMA_IRQHandler+0x1c4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d036      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_DMA_IRQHandler+0x1c8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d031      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <HAL_DMA_IRQHandler+0x1cc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02c      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <HAL_DMA_IRQHandler+0x1d0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d027      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_DMA_IRQHandler+0x1d4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_DMA_IRQHandler+0x1d8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01d      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_DMA_IRQHandler+0x1dc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_DMA_IRQHandler+0x1e0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_DMA_IRQHandler+0x1e4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_DMA_IRQHandler+0x1e8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_DMA_IRQHandler+0x1ec>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x194>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d12f      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x1f4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e02e      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x208>
 8002d6a:	bf00      	nop
 8002d6c:	24000000 	.word	0x24000000
 8002d70:	1b4e81b5 	.word	0x1b4e81b5
 8002d74:	40020010 	.word	0x40020010
 8002d78:	40020028 	.word	0x40020028
 8002d7c:	40020040 	.word	0x40020040
 8002d80:	40020058 	.word	0x40020058
 8002d84:	40020070 	.word	0x40020070
 8002d88:	40020088 	.word	0x40020088
 8002d8c:	400200a0 	.word	0x400200a0
 8002d90:	400200b8 	.word	0x400200b8
 8002d94:	40020410 	.word	0x40020410
 8002d98:	40020428 	.word	0x40020428
 8002d9c:	40020440 	.word	0x40020440
 8002da0:	40020458 	.word	0x40020458
 8002da4:	40020470 	.word	0x40020470
 8002da8:	40020488 	.word	0x40020488
 8002dac:	400204a0 	.word	0x400204a0
 8002db0:	400204b8 	.word	0x400204b8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2208      	movs	r2, #8
 8002de6:	409a      	lsls	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d06e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_DMA_IRQHandler+0x3f8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_DMA_IRQHandler+0x3fc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a66      	ldr	r2, [pc, #408]	; (8002fc0 <HAL_DMA_IRQHandler+0x400>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a64      	ldr	r2, [pc, #400]	; (8002fc4 <HAL_DMA_IRQHandler+0x404>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <HAL_DMA_IRQHandler+0x408>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a61      	ldr	r2, [pc, #388]	; (8002fcc <HAL_DMA_IRQHandler+0x40c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a60      	ldr	r2, [pc, #384]	; (8002fd0 <HAL_DMA_IRQHandler+0x410>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_DMA_IRQHandler+0x414>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5d      	ldr	r2, [pc, #372]	; (8002fd8 <HAL_DMA_IRQHandler+0x418>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5b      	ldr	r2, [pc, #364]	; (8002fdc <HAL_DMA_IRQHandler+0x41c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5a      	ldr	r2, [pc, #360]	; (8002fe0 <HAL_DMA_IRQHandler+0x420>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_DMA_IRQHandler+0x424>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a57      	ldr	r2, [pc, #348]	; (8002fe8 <HAL_DMA_IRQHandler+0x428>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_DMA_IRQHandler+0x42c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a54      	ldr	r2, [pc, #336]	; (8002ff0 <HAL_DMA_IRQHandler+0x430>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_IRQHandler+0x2ee>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_DMA_IRQHandler+0x434>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10a      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x304>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e003      	b.n	8002ecc <HAL_DMA_IRQHandler+0x30c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f043 0202 	orr.w	r2, r3, #2
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 808f 	beq.w	8003020 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04a      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <HAL_DMA_IRQHandler+0x3fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d045      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a29      	ldr	r2, [pc, #164]	; (8002fc0 <HAL_DMA_IRQHandler+0x400>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d040      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <HAL_DMA_IRQHandler+0x404>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <HAL_DMA_IRQHandler+0x408>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d036      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_DMA_IRQHandler+0x40c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_DMA_IRQHandler+0x410>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <HAL_DMA_IRQHandler+0x414>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d027      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_DMA_IRQHandler+0x418>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_DMA_IRQHandler+0x41c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_DMA_IRQHandler+0x420>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_DMA_IRQHandler+0x424>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_DMA_IRQHandler+0x428>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_DMA_IRQHandler+0x42c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_DMA_IRQHandler+0x430>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x3e2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_DMA_IRQHandler+0x434>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12a      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x438>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e023      	b.n	8003000 <HAL_DMA_IRQHandler+0x440>
 8002fb8:	40020010 	.word	0x40020010
 8002fbc:	40020028 	.word	0x40020028
 8002fc0:	40020040 	.word	0x40020040
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	40020070 	.word	0x40020070
 8002fcc:	40020088 	.word	0x40020088
 8002fd0:	400200a0 	.word	0x400200a0
 8002fd4:	400200b8 	.word	0x400200b8
 8002fd8:	40020410 	.word	0x40020410
 8002fdc:	40020428 	.word	0x40020428
 8002fe0:	40020440 	.word	0x40020440
 8002fe4:	40020458 	.word	0x40020458
 8002fe8:	40020470 	.word	0x40020470
 8002fec:	40020488 	.word	0x40020488
 8002ff0:	400204a0 	.word	0x400204a0
 8002ff4:	400204b8 	.word	0x400204b8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2204      	movs	r2, #4
 800300e:	409a      	lsls	r2, r3
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2210      	movs	r2, #16
 800302a:	409a      	lsls	r2, r3
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a6 	beq.w	8003182 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a85      	ldr	r2, [pc, #532]	; (8003250 <HAL_DMA_IRQHandler+0x690>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a83      	ldr	r2, [pc, #524]	; (8003254 <HAL_DMA_IRQHandler+0x694>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a82      	ldr	r2, [pc, #520]	; (8003258 <HAL_DMA_IRQHandler+0x698>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a80      	ldr	r2, [pc, #512]	; (800325c <HAL_DMA_IRQHandler+0x69c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7f      	ldr	r2, [pc, #508]	; (8003260 <HAL_DMA_IRQHandler+0x6a0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7d      	ldr	r2, [pc, #500]	; (8003264 <HAL_DMA_IRQHandler+0x6a4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7c      	ldr	r2, [pc, #496]	; (8003268 <HAL_DMA_IRQHandler+0x6a8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7a      	ldr	r2, [pc, #488]	; (800326c <HAL_DMA_IRQHandler+0x6ac>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a79      	ldr	r2, [pc, #484]	; (8003270 <HAL_DMA_IRQHandler+0x6b0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a77      	ldr	r2, [pc, #476]	; (8003274 <HAL_DMA_IRQHandler+0x6b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a76      	ldr	r2, [pc, #472]	; (8003278 <HAL_DMA_IRQHandler+0x6b8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a74      	ldr	r2, [pc, #464]	; (800327c <HAL_DMA_IRQHandler+0x6bc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a73      	ldr	r2, [pc, #460]	; (8003280 <HAL_DMA_IRQHandler+0x6c0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a71      	ldr	r2, [pc, #452]	; (8003284 <HAL_DMA_IRQHandler+0x6c4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a70      	ldr	r2, [pc, #448]	; (8003288 <HAL_DMA_IRQHandler+0x6c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x516>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6e      	ldr	r2, [pc, #440]	; (800328c <HAL_DMA_IRQHandler+0x6cc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10a      	bne.n	80030ec <HAL_DMA_IRQHandler+0x52c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e009      	b.n	8003100 <HAL_DMA_IRQHandler+0x540>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d03e      	beq.n	8003182 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2210      	movs	r2, #16
 800310e:	409a      	lsls	r2, r3
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d108      	bne.n	8003142 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d024      	beq.n	8003182 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
 8003140:	e01f      	b.n	8003182 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01b      	beq.n	8003182 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
 8003152:	e016      	b.n	8003182 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2220      	movs	r2, #32
 800318c:	409a      	lsls	r2, r3
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8110 	beq.w	80033b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_DMA_IRQHandler+0x690>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04a      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_DMA_IRQHandler+0x694>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d045      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <HAL_DMA_IRQHandler+0x698>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d040      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a28      	ldr	r2, [pc, #160]	; (800325c <HAL_DMA_IRQHandler+0x69c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d03b      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <HAL_DMA_IRQHandler+0x6a0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d036      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_DMA_IRQHandler+0x6a4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <HAL_DMA_IRQHandler+0x6a8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02c      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a22      	ldr	r2, [pc, #136]	; (800326c <HAL_DMA_IRQHandler+0x6ac>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d027      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a20      	ldr	r2, [pc, #128]	; (8003270 <HAL_DMA_IRQHandler+0x6b0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <HAL_DMA_IRQHandler+0x6b4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01d      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_DMA_IRQHandler+0x6b8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_DMA_IRQHandler+0x6bc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_DMA_IRQHandler+0x6c0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_DMA_IRQHandler+0x6c4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_DMA_IRQHandler+0x6c8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_DMA_IRQHandler+0x678>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_DMA_IRQHandler+0x6cc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d12b      	bne.n	8003290 <HAL_DMA_IRQHandler+0x6d0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e02a      	b.n	80032a4 <HAL_DMA_IRQHandler+0x6e4>
 800324e:	bf00      	nop
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8087 	beq.w	80033b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2220      	movs	r2, #32
 80032b4:	409a      	lsls	r2, r3
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d139      	bne.n	800333a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0216 	bic.w	r2, r2, #22
 80032d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x736>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0208 	bic.w	r2, r2, #8
 8003304:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	223f      	movs	r2, #63	; 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 834a 	beq.w	80039c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
          }
          return;
 8003338:	e344      	b.n	80039c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02c      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e027      	b.n	80033b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e01e      	b.n	80033b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0210 	bic.w	r2, r2, #16
 8003396:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8306 	beq.w	80039ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8088 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2204      	movs	r2, #4
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_DMA_IRQHandler+0xa08>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04a      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a79      	ldr	r2, [pc, #484]	; (80035cc <HAL_DMA_IRQHandler+0xa0c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a77      	ldr	r2, [pc, #476]	; (80035d0 <HAL_DMA_IRQHandler+0xa10>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d040      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a76      	ldr	r2, [pc, #472]	; (80035d4 <HAL_DMA_IRQHandler+0xa14>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a74      	ldr	r2, [pc, #464]	; (80035d8 <HAL_DMA_IRQHandler+0xa18>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d036      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a73      	ldr	r2, [pc, #460]	; (80035dc <HAL_DMA_IRQHandler+0xa1c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_DMA_IRQHandler+0xa20>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <HAL_DMA_IRQHandler+0xa24>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d027      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <HAL_DMA_IRQHandler+0xa28>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6d      	ldr	r2, [pc, #436]	; (80035ec <HAL_DMA_IRQHandler+0xa2c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6b      	ldr	r2, [pc, #428]	; (80035f0 <HAL_DMA_IRQHandler+0xa30>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6a      	ldr	r2, [pc, #424]	; (80035f4 <HAL_DMA_IRQHandler+0xa34>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <HAL_DMA_IRQHandler+0xa38>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a67      	ldr	r2, [pc, #412]	; (80035fc <HAL_DMA_IRQHandler+0xa3c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a65      	ldr	r2, [pc, #404]	; (8003600 <HAL_DMA_IRQHandler+0xa40>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_IRQHandler+0x8b8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a64      	ldr	r2, [pc, #400]	; (8003604 <HAL_DMA_IRQHandler+0xa44>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d108      	bne.n	800348a <HAL_DMA_IRQHandler+0x8ca>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e007      	b.n	800349a <HAL_DMA_IRQHandler+0x8da>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d307      	bcc.n	80034b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f2      	bne.n	800349a <HAL_DMA_IRQHandler+0x8da>
 80034b4:	e000      	b.n	80034b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80034ce:	e003      	b.n	80034d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8272 	beq.w	80039ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
 80034f2:	e26c      	b.n	80039ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a43      	ldr	r2, [pc, #268]	; (8003608 <HAL_DMA_IRQHandler+0xa48>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a42      	ldr	r2, [pc, #264]	; (800360c <HAL_DMA_IRQHandler+0xa4c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d01d      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a40      	ldr	r2, [pc, #256]	; (8003610 <HAL_DMA_IRQHandler+0xa50>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3f      	ldr	r2, [pc, #252]	; (8003614 <HAL_DMA_IRQHandler+0xa54>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3d      	ldr	r2, [pc, #244]	; (8003618 <HAL_DMA_IRQHandler+0xa58>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3c      	ldr	r2, [pc, #240]	; (800361c <HAL_DMA_IRQHandler+0xa5c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <HAL_DMA_IRQHandler+0xa60>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_DMA_IRQHandler+0x984>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_DMA_IRQHandler+0xa64>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_DMA_IRQHandler+0x988>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x98a>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 823f 	beq.w	80039ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2204      	movs	r2, #4
 8003562:	409a      	lsls	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80cd 	beq.w	8003708 <HAL_DMA_IRQHandler+0xb48>
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80c7 	beq.w	8003708 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2204      	movs	r2, #4
 8003584:	409a      	lsls	r2, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d049      	beq.n	8003628 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8210 	beq.w	80039c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b0:	e20a      	b.n	80039c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8206 	beq.w	80039c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035c4:	e200      	b.n	80039c8 <HAL_DMA_IRQHandler+0xe08>
 80035c6:	bf00      	nop
 80035c8:	40020010 	.word	0x40020010
 80035cc:	40020028 	.word	0x40020028
 80035d0:	40020040 	.word	0x40020040
 80035d4:	40020058 	.word	0x40020058
 80035d8:	40020070 	.word	0x40020070
 80035dc:	40020088 	.word	0x40020088
 80035e0:	400200a0 	.word	0x400200a0
 80035e4:	400200b8 	.word	0x400200b8
 80035e8:	40020410 	.word	0x40020410
 80035ec:	40020428 	.word	0x40020428
 80035f0:	40020440 	.word	0x40020440
 80035f4:	40020458 	.word	0x40020458
 80035f8:	40020470 	.word	0x40020470
 80035fc:	40020488 	.word	0x40020488
 8003600:	400204a0 	.word	0x400204a0
 8003604:	400204b8 	.word	0x400204b8
 8003608:	58025408 	.word	0x58025408
 800360c:	5802541c 	.word	0x5802541c
 8003610:	58025430 	.word	0x58025430
 8003614:	58025444 	.word	0x58025444
 8003618:	58025458 	.word	0x58025458
 800361c:	5802546c 	.word	0x5802546c
 8003620:	58025480 	.word	0x58025480
 8003624:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d160      	bne.n	80036f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7f      	ldr	r2, [pc, #508]	; (8003834 <HAL_DMA_IRQHandler+0xc74>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7d      	ldr	r2, [pc, #500]	; (8003838 <HAL_DMA_IRQHandler+0xc78>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d045      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7c      	ldr	r2, [pc, #496]	; (800383c <HAL_DMA_IRQHandler+0xc7c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_DMA_IRQHandler+0xc80>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d03b      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a79      	ldr	r2, [pc, #484]	; (8003844 <HAL_DMA_IRQHandler+0xc84>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d036      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a77      	ldr	r2, [pc, #476]	; (8003848 <HAL_DMA_IRQHandler+0xc88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d031      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a76      	ldr	r2, [pc, #472]	; (800384c <HAL_DMA_IRQHandler+0xc8c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d02c      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a74      	ldr	r2, [pc, #464]	; (8003850 <HAL_DMA_IRQHandler+0xc90>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a73      	ldr	r2, [pc, #460]	; (8003854 <HAL_DMA_IRQHandler+0xc94>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a71      	ldr	r2, [pc, #452]	; (8003858 <HAL_DMA_IRQHandler+0xc98>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a70      	ldr	r2, [pc, #448]	; (800385c <HAL_DMA_IRQHandler+0xc9c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_DMA_IRQHandler+0xca0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6d      	ldr	r2, [pc, #436]	; (8003864 <HAL_DMA_IRQHandler+0xca4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6b      	ldr	r2, [pc, #428]	; (8003868 <HAL_DMA_IRQHandler+0xca8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_DMA_IRQHandler+0xcac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xb12>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a68      	ldr	r2, [pc, #416]	; (8003870 <HAL_DMA_IRQHandler+0xcb0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <HAL_DMA_IRQHandler+0xb24>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0208 	bic.w	r2, r2, #8
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e007      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb34>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8165 	beq.w	80039c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003706:	e15f      	b.n	80039c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2202      	movs	r2, #2
 8003712:	409a      	lsls	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80c5 	beq.w	80038a8 <HAL_DMA_IRQHandler+0xce8>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80bf 	beq.w	80038a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2202      	movs	r2, #2
 8003734:	409a      	lsls	r2, r3
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d018      	beq.n	8003776 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 813a 	beq.w	80039cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003760:	e134      	b.n	80039cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8130 	beq.w	80039cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003774:	e12a      	b.n	80039cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	f040 8089 	bne.w	8003894 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2b      	ldr	r2, [pc, #172]	; (8003834 <HAL_DMA_IRQHandler+0xc74>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d04a      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a29      	ldr	r2, [pc, #164]	; (8003838 <HAL_DMA_IRQHandler+0xc78>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d045      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a28      	ldr	r2, [pc, #160]	; (800383c <HAL_DMA_IRQHandler+0xc7c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d040      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_DMA_IRQHandler+0xc80>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d03b      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a25      	ldr	r2, [pc, #148]	; (8003844 <HAL_DMA_IRQHandler+0xc84>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d036      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_DMA_IRQHandler+0xc88>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d031      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a22      	ldr	r2, [pc, #136]	; (800384c <HAL_DMA_IRQHandler+0xc8c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d02c      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a20      	ldr	r2, [pc, #128]	; (8003850 <HAL_DMA_IRQHandler+0xc90>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d027      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_DMA_IRQHandler+0xc94>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <HAL_DMA_IRQHandler+0xc98>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01d      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_DMA_IRQHandler+0xc9c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d018      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_DMA_IRQHandler+0xca0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_DMA_IRQHandler+0xca4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_DMA_IRQHandler+0xca8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_DMA_IRQHandler+0xcac>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_IRQHandler+0xc62>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <HAL_DMA_IRQHandler+0xcb0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d128      	bne.n	8003874 <HAL_DMA_IRQHandler+0xcb4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0214 	bic.w	r2, r2, #20
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e027      	b.n	8003884 <HAL_DMA_IRQHandler+0xcc4>
 8003834:	40020010 	.word	0x40020010
 8003838:	40020028 	.word	0x40020028
 800383c:	40020040 	.word	0x40020040
 8003840:	40020058 	.word	0x40020058
 8003844:	40020070 	.word	0x40020070
 8003848:	40020088 	.word	0x40020088
 800384c:	400200a0 	.word	0x400200a0
 8003850:	400200b8 	.word	0x400200b8
 8003854:	40020410 	.word	0x40020410
 8003858:	40020428 	.word	0x40020428
 800385c:	40020440 	.word	0x40020440
 8003860:	40020458 	.word	0x40020458
 8003864:	40020470 	.word	0x40020470
 8003868:	40020488 	.word	0x40020488
 800386c:	400204a0 	.word	0x400204a0
 8003870:	400204b8 	.word	0x400204b8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 020a 	bic.w	r2, r2, #10
 8003882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a6:	e091      	b.n	80039cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2208      	movs	r2, #8
 80038b2:	409a      	lsls	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8088 	beq.w	80039ce <HAL_DMA_IRQHandler+0xe0e>
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8082 	beq.w	80039ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_DMA_IRQHandler+0xe14>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3f      	ldr	r2, [pc, #252]	; (80039d8 <HAL_DMA_IRQHandler+0xe18>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <HAL_DMA_IRQHandler+0xe1c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3c      	ldr	r2, [pc, #240]	; (80039e0 <HAL_DMA_IRQHandler+0xe20>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3b      	ldr	r2, [pc, #236]	; (80039e4 <HAL_DMA_IRQHandler+0xe24>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a39      	ldr	r2, [pc, #228]	; (80039e8 <HAL_DMA_IRQHandler+0xe28>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_DMA_IRQHandler+0xe2c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a36      	ldr	r2, [pc, #216]	; (80039f0 <HAL_DMA_IRQHandler+0xe30>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a35      	ldr	r2, [pc, #212]	; (80039f4 <HAL_DMA_IRQHandler+0xe34>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <HAL_DMA_IRQHandler+0xe38>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_DMA_IRQHandler+0xe3c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <HAL_DMA_IRQHandler+0xe40>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <HAL_DMA_IRQHandler+0xe44>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2d      	ldr	r2, [pc, #180]	; (8003a08 <HAL_DMA_IRQHandler+0xe48>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <HAL_DMA_IRQHandler+0xe4c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_IRQHandler+0xdaa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <HAL_DMA_IRQHandler+0xe50>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d108      	bne.n	800397c <HAL_DMA_IRQHandler+0xdbc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 021c 	bic.w	r2, r2, #28
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e007      	b.n	800398c <HAL_DMA_IRQHandler+0xdcc>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 020e 	bic.w	r2, r2, #14
 800398a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2201      	movs	r2, #1
 8003996:	409a      	lsls	r2, r3
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
 80039c2:	e004      	b.n	80039ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8

08003a14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7f      	ldr	r2, [pc, #508]	; (8003c30 <DMA_SetConfig+0x21c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d072      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a7d      	ldr	r2, [pc, #500]	; (8003c34 <DMA_SetConfig+0x220>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d06d      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7c      	ldr	r2, [pc, #496]	; (8003c38 <DMA_SetConfig+0x224>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d068      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7a      	ldr	r2, [pc, #488]	; (8003c3c <DMA_SetConfig+0x228>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d063      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a79      	ldr	r2, [pc, #484]	; (8003c40 <DMA_SetConfig+0x22c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d05e      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a77      	ldr	r2, [pc, #476]	; (8003c44 <DMA_SetConfig+0x230>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d059      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a76      	ldr	r2, [pc, #472]	; (8003c48 <DMA_SetConfig+0x234>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d054      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a74      	ldr	r2, [pc, #464]	; (8003c4c <DMA_SetConfig+0x238>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04f      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a73      	ldr	r2, [pc, #460]	; (8003c50 <DMA_SetConfig+0x23c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <DMA_SetConfig+0x240>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a70      	ldr	r2, [pc, #448]	; (8003c58 <DMA_SetConfig+0x244>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6e      	ldr	r2, [pc, #440]	; (8003c5c <DMA_SetConfig+0x248>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6d      	ldr	r2, [pc, #436]	; (8003c60 <DMA_SetConfig+0x24c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6b      	ldr	r2, [pc, #428]	; (8003c64 <DMA_SetConfig+0x250>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6a      	ldr	r2, [pc, #424]	; (8003c68 <DMA_SetConfig+0x254>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <DMA_SetConfig+0x258>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a67      	ldr	r2, [pc, #412]	; (8003c70 <DMA_SetConfig+0x25c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <DMA_SetConfig+0x260>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a64      	ldr	r2, [pc, #400]	; (8003c78 <DMA_SetConfig+0x264>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a62      	ldr	r2, [pc, #392]	; (8003c7c <DMA_SetConfig+0x268>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <DMA_SetConfig+0x26c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5f      	ldr	r2, [pc, #380]	; (8003c84 <DMA_SetConfig+0x270>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5e      	ldr	r2, [pc, #376]	; (8003c88 <DMA_SetConfig+0x274>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <DMA_SetConfig+0x10a>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <DMA_SetConfig+0x278>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <DMA_SetConfig+0x10e>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <DMA_SetConfig+0x110>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a39      	ldr	r2, [pc, #228]	; (8003c30 <DMA_SetConfig+0x21c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d04a      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a38      	ldr	r2, [pc, #224]	; (8003c34 <DMA_SetConfig+0x220>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d045      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <DMA_SetConfig+0x224>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d040      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a35      	ldr	r2, [pc, #212]	; (8003c3c <DMA_SetConfig+0x228>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d03b      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a33      	ldr	r2, [pc, #204]	; (8003c40 <DMA_SetConfig+0x22c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d036      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a32      	ldr	r2, [pc, #200]	; (8003c44 <DMA_SetConfig+0x230>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d031      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <DMA_SetConfig+0x234>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d02c      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <DMA_SetConfig+0x238>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d027      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <DMA_SetConfig+0x23c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d022      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <DMA_SetConfig+0x240>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d01d      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <DMA_SetConfig+0x244>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <DMA_SetConfig+0x248>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <DMA_SetConfig+0x24c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <DMA_SetConfig+0x250>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <DMA_SetConfig+0x254>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <DMA_SetConfig+0x1d0>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <DMA_SetConfig+0x258>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <DMA_SetConfig+0x1d4>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <DMA_SetConfig+0x1d6>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d059      	beq.n	8003ca2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	223f      	movs	r2, #63	; 0x3f
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d138      	bne.n	8003c90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c2e:	e086      	b.n	8003d3e <DMA_SetConfig+0x32a>
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8
 8003c70:	58025408 	.word	0x58025408
 8003c74:	5802541c 	.word	0x5802541c
 8003c78:	58025430 	.word	0x58025430
 8003c7c:	58025444 	.word	0x58025444
 8003c80:	58025458 	.word	0x58025458
 8003c84:	5802546c 	.word	0x5802546c
 8003c88:	58025480 	.word	0x58025480
 8003c8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
}
 8003ca0:	e04d      	b.n	8003d3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <DMA_SetConfig+0x338>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <DMA_SetConfig+0x33c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <DMA_SetConfig+0x340>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <DMA_SetConfig+0x344>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <DMA_SetConfig+0x348>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <DMA_SetConfig+0x34c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <DMA_SetConfig+0x350>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <DMA_SetConfig+0x2de>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <DMA_SetConfig+0x354>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <DMA_SetConfig+0x2e2>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <DMA_SetConfig+0x2e4>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2201      	movs	r2, #1
 8003d06:	409a      	lsls	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d108      	bne.n	8003d2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
}
 8003d2c:	e007      	b.n	8003d3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	58025408 	.word	0x58025408
 8003d50:	5802541c 	.word	0x5802541c
 8003d54:	58025430 	.word	0x58025430
 8003d58:	58025444 	.word	0x58025444
 8003d5c:	58025458 	.word	0x58025458
 8003d60:	5802546c 	.word	0x5802546c
 8003d64:	58025480 	.word	0x58025480
 8003d68:	58025494 	.word	0x58025494

08003d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <DMA_CalcBaseAndBitshift+0x118>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04a      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a41      	ldr	r2, [pc, #260]	; (8003e88 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d045      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3f      	ldr	r2, [pc, #252]	; (8003e8c <DMA_CalcBaseAndBitshift+0x120>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d040      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3e      	ldr	r2, [pc, #248]	; (8003e90 <DMA_CalcBaseAndBitshift+0x124>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d03b      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <DMA_CalcBaseAndBitshift+0x128>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d036      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <DMA_CalcBaseAndBitshift+0x12c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a39      	ldr	r2, [pc, #228]	; (8003e9c <DMA_CalcBaseAndBitshift+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02c      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x134>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a36      	ldr	r2, [pc, #216]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x138>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a33      	ldr	r2, [pc, #204]	; (8003eac <DMA_CalcBaseAndBitshift+0x140>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a32      	ldr	r2, [pc, #200]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x144>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x148>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2f      	ldr	r2, [pc, #188]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2d      	ldr	r2, [pc, #180]	; (8003ebc <DMA_CalcBaseAndBitshift+0x150>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x154>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <DMA_CalcBaseAndBitshift+0xac>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <DMA_CalcBaseAndBitshift+0xae>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d024      	beq.n	8003e68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	3b10      	subs	r3, #16
 8003e26:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x158>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e38:	5cd3      	ldrb	r3, [r2, r3]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d908      	bls.n	8003e58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <DMA_CalcBaseAndBitshift+0x160>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	659a      	str	r2, [r3, #88]	; 0x58
 8003e56:	e00d      	b.n	8003e74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <DMA_CalcBaseAndBitshift+0x160>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
 8003e66:	e005      	b.n	8003e74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	aaaaaaab 	.word	0xaaaaaaab
 8003ec8:	0800f740 	.word	0x0800f740
 8003ecc:	fffffc00 	.word	0xfffffc00

08003ed0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d120      	bne.n	8003f26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d858      	bhi.n	8003f9e <DMA_CheckFifoParam+0xce>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <DMA_CheckFifoParam+0x24>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f17 	.word	0x08003f17
 8003efc:	08003f05 	.word	0x08003f05
 8003f00:	08003f9f 	.word	0x08003f9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d048      	beq.n	8003fa2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f14:	e045      	b.n	8003fa2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f1e:	d142      	bne.n	8003fa6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f24:	e03f      	b.n	8003fa6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2e:	d123      	bne.n	8003f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d838      	bhi.n	8003faa <DMA_CheckFifoParam+0xda>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <DMA_CheckFifoParam+0x70>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f57 	.word	0x08003f57
 8003f48:	08003f51 	.word	0x08003f51
 8003f4c:	08003f69 	.word	0x08003f69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
        break;
 8003f54:	e030      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d025      	beq.n	8003fae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f66:	e022      	b.n	8003fae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f70:	d11f      	bne.n	8003fb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f76:	e01c      	b.n	8003fb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d902      	bls.n	8003f86 <DMA_CheckFifoParam+0xb6>
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d003      	beq.n	8003f8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f84:	e018      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e015      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8003f9c:	e00b      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e00a      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e008      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e006      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
    break;
 8003fb6:	bf00      	nop
    }
  }

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop

08003fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a38      	ldr	r2, [pc, #224]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a36      	ldr	r2, [pc, #216]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a33      	ldr	r2, [pc, #204]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a32      	ldr	r2, [pc, #200]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3b08      	subs	r3, #8
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2201      	movs	r2, #1
 800405e:	409a      	lsls	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004064:	e024      	b.n	80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	3b10      	subs	r3, #16
 800406e:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d806      	bhi.n	800408e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d902      	bls.n	800408e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3308      	adds	r3, #8
 800408c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	58025408 	.word	0x58025408
 80040c0:	5802541c 	.word	0x5802541c
 80040c4:	58025430 	.word	0x58025430
 80040c8:	58025444 	.word	0x58025444
 80040cc:	58025458 	.word	0x58025458
 80040d0:	5802546c 	.word	0x5802546c
 80040d4:	58025480 	.word	0x58025480
 80040d8:	58025494 	.word	0x58025494
 80040dc:	cccccccd 	.word	0xcccccccd
 80040e0:	16009600 	.word	0x16009600
 80040e4:	58025880 	.word	0x58025880
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	400204b8 	.word	0x400204b8
 80040f0:	4002040f 	.word	0x4002040f
 80040f4:	10008200 	.word	0x10008200
 80040f8:	40020880 	.word	0x40020880

080040fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04a      	beq.n	80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d847      	bhi.n	80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d01d      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	461a      	mov	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004184:	671a      	str	r2, [r3, #112]	; 0x70
 8004186:	e009      	b.n	800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800419a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3b01      	subs	r3, #1
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	58025408 	.word	0x58025408
 80041b8:	5802541c 	.word	0x5802541c
 80041bc:	58025430 	.word	0x58025430
 80041c0:	58025444 	.word	0x58025444
 80041c4:	58025458 	.word	0x58025458
 80041c8:	5802546c 	.word	0x5802546c
 80041cc:	58025480 	.word	0x58025480
 80041d0:	58025494 	.word	0x58025494
 80041d4:	1600963f 	.word	0x1600963f
 80041d8:	58025940 	.word	0x58025940
 80041dc:	1000823f 	.word	0x1000823f
 80041e0:	40020940 	.word	0x40020940

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041f2:	4b89      	ldr	r3, [pc, #548]	; (8004418 <HAL_GPIO_Init+0x234>)
 80041f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041f6:	e194      	b.n	8004522 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2101      	movs	r1, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8186 	beq.w	800451c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d005      	beq.n	8004228 <HAL_GPIO_Init+0x44>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d130      	bne.n	800428a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	2203      	movs	r2, #3
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800425e:	2201      	movs	r2, #1
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0201 	and.w	r2, r3, #1
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b03      	cmp	r3, #3
 8004294:	d017      	beq.n	80042c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	2203      	movs	r2, #3
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d123      	bne.n	800431a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	08da      	lsrs	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3208      	adds	r2, #8
 80042da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	220f      	movs	r2, #15
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	08da      	lsrs	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3208      	adds	r2, #8
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	2203      	movs	r2, #3
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0203 	and.w	r2, r3, #3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80e0 	beq.w	800451c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435c:	4b2f      	ldr	r3, [pc, #188]	; (800441c <HAL_GPIO_Init+0x238>)
 800435e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004362:	4a2e      	ldr	r2, [pc, #184]	; (800441c <HAL_GPIO_Init+0x238>)
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800436c:	4b2b      	ldr	r3, [pc, #172]	; (800441c <HAL_GPIO_Init+0x238>)
 800436e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437a:	4a29      	ldr	r2, [pc, #164]	; (8004420 <HAL_GPIO_Init+0x23c>)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_GPIO_Init+0x240>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d052      	beq.n	800444c <HAL_GPIO_Init+0x268>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <HAL_GPIO_Init+0x244>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d031      	beq.n	8004412 <HAL_GPIO_Init+0x22e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <HAL_GPIO_Init+0x248>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d02b      	beq.n	800440e <HAL_GPIO_Init+0x22a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_GPIO_Init+0x24c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d025      	beq.n	800440a <HAL_GPIO_Init+0x226>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_GPIO_Init+0x250>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <HAL_GPIO_Init+0x222>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <HAL_GPIO_Init+0x254>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d019      	beq.n	8004402 <HAL_GPIO_Init+0x21e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_GPIO_Init+0x258>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0x21a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_GPIO_Init+0x25c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00d      	beq.n	80043fa <HAL_GPIO_Init+0x216>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_GPIO_Init+0x260>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <HAL_GPIO_Init+0x212>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_GPIO_Init+0x264>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_GPIO_Init+0x20e>
 80043ee:	2309      	movs	r3, #9
 80043f0:	e02d      	b.n	800444e <HAL_GPIO_Init+0x26a>
 80043f2:	230a      	movs	r3, #10
 80043f4:	e02b      	b.n	800444e <HAL_GPIO_Init+0x26a>
 80043f6:	2308      	movs	r3, #8
 80043f8:	e029      	b.n	800444e <HAL_GPIO_Init+0x26a>
 80043fa:	2307      	movs	r3, #7
 80043fc:	e027      	b.n	800444e <HAL_GPIO_Init+0x26a>
 80043fe:	2306      	movs	r3, #6
 8004400:	e025      	b.n	800444e <HAL_GPIO_Init+0x26a>
 8004402:	2305      	movs	r3, #5
 8004404:	e023      	b.n	800444e <HAL_GPIO_Init+0x26a>
 8004406:	2304      	movs	r3, #4
 8004408:	e021      	b.n	800444e <HAL_GPIO_Init+0x26a>
 800440a:	2303      	movs	r3, #3
 800440c:	e01f      	b.n	800444e <HAL_GPIO_Init+0x26a>
 800440e:	2302      	movs	r3, #2
 8004410:	e01d      	b.n	800444e <HAL_GPIO_Init+0x26a>
 8004412:	2301      	movs	r3, #1
 8004414:	e01b      	b.n	800444e <HAL_GPIO_Init+0x26a>
 8004416:	bf00      	nop
 8004418:	58000080 	.word	0x58000080
 800441c:	58024400 	.word	0x58024400
 8004420:	58000400 	.word	0x58000400
 8004424:	58020000 	.word	0x58020000
 8004428:	58020400 	.word	0x58020400
 800442c:	58020800 	.word	0x58020800
 8004430:	58020c00 	.word	0x58020c00
 8004434:	58021000 	.word	0x58021000
 8004438:	58021400 	.word	0x58021400
 800443c:	58021800 	.word	0x58021800
 8004440:	58021c00 	.word	0x58021c00
 8004444:	58022000 	.word	0x58022000
 8004448:	58022400 	.word	0x58022400
 800444c:	2300      	movs	r3, #0
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	f002 0203 	and.w	r2, r2, #3
 8004454:	0092      	lsls	r2, r2, #2
 8004456:	4093      	lsls	r3, r2
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800445e:	4938      	ldr	r1, [pc, #224]	; (8004540 <HAL_GPIO_Init+0x35c>)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	3302      	adds	r3, #2
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	f47f ae63 	bne.w	80041f8 <HAL_GPIO_Init+0x14>
  }
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	3724      	adds	r7, #36	; 0x24
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	58000400 	.word	0x58000400

08004544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e001      	b.n	8004566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800457c:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <HAL_HSEM_FastTake+0x2c>)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3320      	adds	r3, #32
 8004582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004586:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <HAL_HSEM_FastTake+0x30>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58026400 	.word	0x58026400
 80045a4:	80000300 	.word	0x80000300

080045a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80045b2:	4906      	ldr	r1, [pc, #24]	; (80045cc <HAL_HSEM_Release+0x24>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	58026400 	.word	0x58026400

080045d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e10d      	b.n	80047fe <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fda6 	bl	8001148 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b04      	cmp	r3, #4
 8004630:	d008      	beq.n	8004644 <HAL_I2S_Init+0x74>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d004      	beq.n	8004644 <HAL_I2S_Init+0x74>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b0a      	cmp	r3, #10
 8004640:	f040 8087 	bne.w	8004752 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d05a      	beq.n	8004702 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004654:	2302      	movs	r3, #2
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e001      	b.n	800465e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800465a:	2301      	movs	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b30      	cmp	r3, #48	; 0x30
 8004664:	d003      	beq.n	800466e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800466a:	2bb0      	cmp	r3, #176	; 0xb0
 800466c:	d102      	bne.n	8004674 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800466e:	2301      	movs	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e001      	b.n	8004678 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004678:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	f002 fe28 	bl	80072d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004684:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800468e:	d113      	bne.n	80046b8 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	fa22 f303 	lsr.w	r3, r2, r3
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	3305      	adds	r3, #5
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	e014      	b.n	80046e2 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80046b8:	2220      	movs	r2, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	3305      	adds	r3, #5
 80046e0:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4a48      	ldr	r2, [pc, #288]	; (8004808 <HAL_I2S_Init+0x238>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	08db      	lsrs	r3, r3, #3
 80046ec:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e003      	b.n	800470a <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004702:	2302      	movs	r3, #2
 8004704:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d102      	bne.n	8004716 <HAL_I2S_Init+0x146>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d002      	beq.n	800471c <HAL_I2S_Init+0x14c>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2bff      	cmp	r3, #255	; 0xff
 800471a:	d907      	bls.n	800472c <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	f043 0210 	orr.w	r2, r3, #16
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e068      	b.n	80047fe <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8004732:	2301      	movs	r3, #1
 8004734:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800473c:	4b33      	ldr	r3, [pc, #204]	; (800480c <HAL_I2S_Init+0x23c>)
 800473e:	4013      	ands	r3, r2
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	0411      	lsls	r1, r2, #16
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0612      	lsls	r2, r2, #24
 8004748:	4311      	orrs	r1, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	430b      	orrs	r3, r1
 8004750:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004758:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <HAL_I2S_Init+0x240>)
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6851      	ldr	r1, [r2, #4]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6892      	ldr	r2, [r2, #8]
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6992      	ldr	r2, [r2, #24]
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a12      	ldr	r2, [r2, #32]
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6912      	ldr	r2, [r2, #16]
 8004782:	430a      	orrs	r2, r1
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f640 72f8 	movw	r2, #4088	; 0xff8
 8004798:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047a8:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d007      	beq.n	80047d8 <HAL_I2S_Init+0x208>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b06      	cmp	r3, #6
 80047ce:	d003      	beq.n	80047d8 <HAL_I2S_Init+0x208>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b0a      	cmp	r3, #10
 80047d6:	d10a      	bne.n	80047ee <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	cccccccd 	.word	0xcccccccd
 800480c:	fe00ffff 	.word	0xfe00ffff
 8004810:	fdff9040 	.word	0xfdff9040

08004814 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->TXDR));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3320      	adds	r3, #32
 800482a:	617b      	str	r3, [r7, #20]
#endif /* __GNUC__ */
  uint32_t tickstart;

  if ((pData == NULL) || (Size == 0UL))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_I2S_Transmit+0x24>
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_I2S_Transmit+0x28>
  {
    return  HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0cd      	b.n	80049d8 <HAL_I2S_Transmit+0x1c4>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d001      	beq.n	800484c <HAL_I2S_Transmit+0x38>
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
 800484a:	e0c5      	b.n	80049d8 <HAL_I2S_Transmit+0x1c4>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_I2S_Transmit+0x48>
 8004858:	2302      	movs	r3, #2
 800485a:	e0bd      	b.n	80049d8 <HAL_I2S_Transmit+0x1c4>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004864:	f7fc ff7c 	bl	8001760 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2203      	movs	r2, #3
 800486e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Initialize fields not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t) 0UL;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d007      	beq.n	80048ba <HAL_I2S_Transmit+0xa6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]


  /* Wait until TXP flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2201      	movs	r2, #1
 80048d2:	2102      	movs	r1, #2
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f9d3 	bl	8004c80 <I2S_WaitFlagStateUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d06d      	beq.n	80049bc <HAL_I2S_Transmit+0x1a8>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	f043 0201 	orr.w	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e06b      	b.n	80049d8 <HAL_I2S_Transmit+0x1c4>
  }

  while (hi2s->TxXferCount > 0UL)
  {
    if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004908:	d004      	beq.n	8004914 <HAL_I2S_Transmit+0x100>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004912:	d112      	bne.n	800493a <HAL_I2S_Transmit+0x126>
    {
      /* Transmit data in 32 Bit mode */
      hi2s->Instance->TXDR = *((const uint32_t *)hi2s->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	621a      	str	r2, [r3, #32]
      hi2s->pTxBuffPtr += 2;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	865a      	strh	r2, [r3, #50]	; 0x32
 8004938:	e010      	b.n	800495c <HAL_I2S_Transmit+0x148>
    }
    else
    {
      /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hi2s->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hi2s->Instance->TXDR) = *((const uint16_t *)hi2s->pTxBuffPtr);
#endif /* __GNUC__ */

      hi2s->pTxBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    /* Wait until TXP flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, tickstart, Timeout) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2201      	movs	r2, #1
 8004964:	2102      	movs	r1, #2
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f98a 	bl	8004c80 <I2S_WaitFlagStateUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00f      	beq.n	8004992 <HAL_I2S_Transmit+0x17e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	651a      	str	r2, [r3, #80]	; 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      __HAL_UNLOCK(hi2s);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e022      	b.n	80049d8 <HAL_I2S_Transmit+0x1c4>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b20      	cmp	r3, #32
 800499e:	d10d      	bne.n	80049bc <HAL_I2S_Transmit+0x1a8>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0220 	orr.w	r2, r2, #32
 80049ae:	619a      	str	r2, [r3, #24]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b4:	f043 0204 	orr.w	r2, r3, #4
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	651a      	str	r2, [r3, #80]	; 0x50
  while (hi2s->TxXferCount > 0UL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d19c      	bne.n	8004900 <HAL_I2S_Transmit+0xec>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  __HAL_UNLOCK(hi2s);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_I2S_Receive_DMA+0x1e>
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e086      	b.n	8004b10 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e07e      	b.n	8004b10 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2S_Receive_DMA+0x42>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e076      	b.n	8004b10 <HAL_I2S_Receive_DMA+0x130>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	88fa      	ldrh	r2, [r7, #6]
 8004a42:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <HAL_I2S_Receive_DMA+0x138>)
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a68:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <HAL_I2S_Receive_DMA+0x13c>)
 8004a6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_I2S_Receive_DMA+0x140>)
 8004a72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3330      	adds	r3, #48	; 0x30
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004a8c:	f7fd fb10 	bl	80020b0 <HAL_DMA_Start_IT>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	f043 0208 	orr.w	r2, r3, #8
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	e02a      	b.n	8004b10 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08004c19 	.word	0x08004c19
 8004b1c:	08004bd7 	.word	0x08004bd7
 8004b20:	08004c35 	.word	0x08004c35

08004b24 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b3e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fd fd11 	bl	8002584 <HAL_DMA_Abort>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	f043 0208 	orr.w	r2, r3, #8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00f      	beq.n	8004ba0 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fcfd 	bl	8002584 <HAL_DMA_Abort>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	f043 0208 	orr.w	r2, r3, #8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10e      	bne.n	8004c0a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bfa:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7fc fa5c 	bl	80010c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7fc fa5e 	bl	80010e8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004c50:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6a:	f043 0208 	orr.w	r2, r3, #8
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff ffa5 	bl	8004bc2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Tickstart, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004c90:	e018      	b.n	8004cc4 <I2S_WaitFlagStateUntilTimeout+0x44>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d014      	beq.n	8004cc4 <I2S_WaitFlagStateUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0UL))
 8004c9a:	f7fc fd61 	bl	8001760 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d902      	bls.n	8004cb0 <I2S_WaitFlagStateUntilTimeout+0x30>
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <I2S_WaitFlagStateUntilTimeout+0x44>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e00f      	b.n	8004ce4 <I2S_WaitFlagStateUntilTimeout+0x64>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d1d7      	bne.n	8004c92 <I2S_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004cf4:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d00a      	beq.n	8004d16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d001      	beq.n	8004d12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e040      	b.n	8004d94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e03e      	b.n	8004d94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d16:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004d1e:	491f      	ldr	r1, [pc, #124]	; (8004d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d26:	f7fc fd1b 	bl	8001760 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d2c:	e009      	b.n	8004d42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d2e:	f7fc fd17 	bl	8001760 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3c:	d901      	bls.n	8004d42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e028      	b.n	8004d94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4e:	d1ee      	bne.n	8004d2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b1e      	cmp	r3, #30
 8004d54:	d008      	beq.n	8004d68 <HAL_PWREx_ConfigSupply+0x7c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5a:	d005      	beq.n	8004d68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b1d      	cmp	r3, #29
 8004d60:	d002      	beq.n	8004d68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b2d      	cmp	r3, #45	; 0x2d
 8004d66:	d114      	bne.n	8004d92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004d68:	f7fc fcfa 	bl	8001760 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d6e:	e009      	b.n	8004d84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d70:	f7fc fcf6 	bl	8001760 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d7e:	d901      	bls.n	8004d84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e007      	b.n	8004d94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d1ee      	bne.n	8004d70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58024800 	.word	0x58024800

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f000 bc48 	b.w	8005644 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8088 	beq.w	8004ed2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc2:	4b99      	ldr	r3, [pc, #612]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dcc:	4b96      	ldr	r3, [pc, #600]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d007      	beq.n	8004de8 <HAL_RCC_OscConfig+0x48>
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	2b18      	cmp	r3, #24
 8004ddc:	d111      	bne.n	8004e02 <HAL_RCC_OscConfig+0x62>
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	4b8f      	ldr	r3, [pc, #572]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d06d      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x130>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d169      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f000 bc21 	b.w	8005644 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7a>
 8004e0c:	4b86      	ldr	r3, [pc, #536]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a85      	ldr	r2, [pc, #532]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e02e      	b.n	8004e78 <HAL_RCC_OscConfig+0xd8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x9c>
 8004e22:	4b81      	ldr	r3, [pc, #516]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a80      	ldr	r2, [pc, #512]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a7d      	ldr	r2, [pc, #500]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e01d      	b.n	8004e78 <HAL_RCC_OscConfig+0xd8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCC_OscConfig+0xc0>
 8004e46:	4b78      	ldr	r3, [pc, #480]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a77      	ldr	r2, [pc, #476]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b75      	ldr	r3, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a74      	ldr	r2, [pc, #464]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCC_OscConfig+0xd8>
 8004e60:	4b71      	ldr	r3, [pc, #452]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a70      	ldr	r2, [pc, #448]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b6e      	ldr	r3, [pc, #440]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6d      	ldr	r2, [pc, #436]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d013      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc fc6e 	bl	8001760 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fc fc6a 	bl	8001760 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e3d4      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e9a:	4b63      	ldr	r3, [pc, #396]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0xe8>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fc fc5a 	bl	8001760 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fc fc56 	bl	8001760 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e3c0      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ec2:	4b59      	ldr	r3, [pc, #356]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x110>
 8004ece:	e000      	b.n	8004ed2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80ca 	beq.w	8005074 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee0:	4b51      	ldr	r3, [pc, #324]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eea:	4b4f      	ldr	r3, [pc, #316]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_RCC_OscConfig+0x166>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	2b18      	cmp	r3, #24
 8004efa:	d156      	bne.n	8004faa <HAL_RCC_OscConfig+0x20a>
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d151      	bne.n	8004faa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_RCC_OscConfig+0x17e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e392      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f1e:	4b42      	ldr	r3, [pc, #264]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 0219 	bic.w	r2, r3, #25
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	493f      	ldr	r1, [pc, #252]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fc fc16 	bl	8001760 <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f38:	f7fc fc12 	bl	8001760 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e37c      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f4a:	4b37      	ldr	r3, [pc, #220]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f56:	f7fc fc33 	bl	80017c0 <HAL_GetREVID>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d817      	bhi.n	8004f94 <HAL_RCC_OscConfig+0x1f4>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d108      	bne.n	8004f7e <HAL_RCC_OscConfig+0x1de>
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f74:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f7c:	e07a      	b.n	8005074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	031b      	lsls	r3, r3, #12
 8004f8c:	4926      	ldr	r1, [pc, #152]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f92:	e06f      	b.n	8005074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	4921      	ldr	r1, [pc, #132]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fa8:	e064      	b.n	8005074 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d047      	beq.n	8005042 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 0219 	bic.w	r2, r3, #25
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	491a      	ldr	r1, [pc, #104]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fbcc 	bl	8001760 <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fcc:	f7fc fbc8 	bl	8001760 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e332      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	f7fc fbe9 	bl	80017c0 <HAL_GetREVID>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d819      	bhi.n	800502c <HAL_RCC_OscConfig+0x28c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d108      	bne.n	8005012 <HAL_RCC_OscConfig+0x272>
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005008:	4a07      	ldr	r2, [pc, #28]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 800500a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500e:	6053      	str	r3, [r2, #4]
 8005010:	e030      	b.n	8005074 <HAL_RCC_OscConfig+0x2d4>
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	031b      	lsls	r3, r3, #12
 8005020:	4901      	ldr	r1, [pc, #4]	; (8005028 <HAL_RCC_OscConfig+0x288>)
 8005022:	4313      	orrs	r3, r2
 8005024:	604b      	str	r3, [r1, #4]
 8005026:	e025      	b.n	8005074 <HAL_RCC_OscConfig+0x2d4>
 8005028:	58024400 	.word	0x58024400
 800502c:	4b9a      	ldr	r3, [pc, #616]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	4997      	ldr	r1, [pc, #604]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	e018      	b.n	8005074 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b95      	ldr	r3, [pc, #596]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a94      	ldr	r2, [pc, #592]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7fc fb87 	bl	8001760 <HAL_GetTick>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005056:	f7fc fb83 	bl	8001760 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e2ed      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005068:	4b8b      	ldr	r3, [pc, #556]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a9 	beq.w	80051d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b85      	ldr	r3, [pc, #532]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800508a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800508c:	4b82      	ldr	r3, [pc, #520]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d007      	beq.n	80050a8 <HAL_RCC_OscConfig+0x308>
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b18      	cmp	r3, #24
 800509c:	d13a      	bne.n	8005114 <HAL_RCC_OscConfig+0x374>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d135      	bne.n	8005114 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050a8:	4b7b      	ldr	r3, [pc, #492]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_OscConfig+0x320>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	2b80      	cmp	r3, #128	; 0x80
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e2c1      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050c0:	f7fc fb7e 	bl	80017c0 <HAL_GetREVID>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d817      	bhi.n	80050fe <HAL_RCC_OscConfig+0x35e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d108      	bne.n	80050e8 <HAL_RCC_OscConfig+0x348>
 80050d6:	4b70      	ldr	r3, [pc, #448]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80050de:	4a6e      	ldr	r2, [pc, #440]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80050e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050e6:	e075      	b.n	80051d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050e8:	4b6b      	ldr	r3, [pc, #428]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	069b      	lsls	r3, r3, #26
 80050f6:	4968      	ldr	r1, [pc, #416]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050fc:	e06a      	b.n	80051d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050fe:	4b66      	ldr	r3, [pc, #408]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	4962      	ldr	r1, [pc, #392]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800510e:	4313      	orrs	r3, r2
 8005110:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005112:	e05f      	b.n	80051d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d042      	beq.n	80051a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800511c:	4b5e      	ldr	r3, [pc, #376]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a5d      	ldr	r2, [pc, #372]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fc fb1a 	bl	8001760 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005130:	f7fc fb16 	bl	8001760 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e280      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005142:	4b55      	ldr	r3, [pc, #340]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800514e:	f7fc fb37 	bl	80017c0 <HAL_GetREVID>
 8005152:	4603      	mov	r3, r0
 8005154:	f241 0203 	movw	r2, #4099	; 0x1003
 8005158:	4293      	cmp	r3, r2
 800515a:	d817      	bhi.n	800518c <HAL_RCC_OscConfig+0x3ec>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	2b20      	cmp	r3, #32
 8005162:	d108      	bne.n	8005176 <HAL_RCC_OscConfig+0x3d6>
 8005164:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800516c:	4a4a      	ldr	r2, [pc, #296]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800516e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005172:	6053      	str	r3, [r2, #4]
 8005174:	e02e      	b.n	80051d4 <HAL_RCC_OscConfig+0x434>
 8005176:	4b48      	ldr	r3, [pc, #288]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	069b      	lsls	r3, r3, #26
 8005184:	4944      	ldr	r1, [pc, #272]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
 800518a:	e023      	b.n	80051d4 <HAL_RCC_OscConfig+0x434>
 800518c:	4b42      	ldr	r3, [pc, #264]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	493f      	ldr	r1, [pc, #252]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800519c:	4313      	orrs	r3, r2
 800519e:	60cb      	str	r3, [r1, #12]
 80051a0:	e018      	b.n	80051d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051a2:	4b3d      	ldr	r3, [pc, #244]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80051a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fc fad7 	bl	8001760 <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051b6:	f7fc fad3 	bl	8001760 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e23d      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051c8:	4b33      	ldr	r3, [pc, #204]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f0      	bne.n	80051b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d036      	beq.n	800524e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e8:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80051ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ec:	4a2a      	ldr	r2, [pc, #168]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fc fab4 	bl	8001760 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fc fab0 	bl	8001760 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e21a      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800520e:	4b22      	ldr	r3, [pc, #136]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x45c>
 800521a:	e018      	b.n	800524e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521c:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800521e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fc fa9a 	bl	8001760 <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005230:	f7fc fa96 	bl	8001760 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e200      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d039      	beq.n	80052ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01c      	beq.n	800529c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 8005268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800526c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800526e:	f7fc fa77 	bl	8001760 <HAL_GetTick>
 8005272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005276:	f7fc fa73 	bl	8001760 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e1dd      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_OscConfig+0x4f8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x4d6>
 8005294:	e01b      	b.n	80052ce <HAL_RCC_OscConfig+0x52e>
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800529c:	4b9b      	ldr	r3, [pc, #620]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a9a      	ldr	r2, [pc, #616]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80052a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052a8:	f7fc fa5a 	bl	8001760 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052b0:	f7fc fa56 	bl	8001760 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e1c0      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052c2:	4b92      	ldr	r3, [pc, #584]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8081 	beq.w	80053de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052dc:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <HAL_RCC_OscConfig+0x770>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a8b      	ldr	r2, [pc, #556]	; (8005510 <HAL_RCC_OscConfig+0x770>)
 80052e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052e8:	f7fc fa3a 	bl	8001760 <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f0:	f7fc fa36 	bl	8001760 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1a0      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005302:	4b83      	ldr	r3, [pc, #524]	; (8005510 <HAL_RCC_OscConfig+0x770>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d106      	bne.n	8005324 <HAL_RCC_OscConfig+0x584>
 8005316:	4b7d      	ldr	r3, [pc, #500]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a7c      	ldr	r2, [pc, #496]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
 8005322:	e02d      	b.n	8005380 <HAL_RCC_OscConfig+0x5e0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10c      	bne.n	8005346 <HAL_RCC_OscConfig+0x5a6>
 800532c:	4b77      	ldr	r3, [pc, #476]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	4a76      	ldr	r2, [pc, #472]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	6713      	str	r3, [r2, #112]	; 0x70
 8005338:	4b74      	ldr	r3, [pc, #464]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533c:	4a73      	ldr	r2, [pc, #460]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800533e:	f023 0304 	bic.w	r3, r3, #4
 8005342:	6713      	str	r3, [r2, #112]	; 0x70
 8005344:	e01c      	b.n	8005380 <HAL_RCC_OscConfig+0x5e0>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b05      	cmp	r3, #5
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0x5c8>
 800534e:	4b6f      	ldr	r3, [pc, #444]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a6e      	ldr	r2, [pc, #440]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	6713      	str	r3, [r2, #112]	; 0x70
 800535a:	4b6c      	ldr	r3, [pc, #432]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4a6b      	ldr	r2, [pc, #428]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	6713      	str	r3, [r2, #112]	; 0x70
 8005366:	e00b      	b.n	8005380 <HAL_RCC_OscConfig+0x5e0>
 8005368:	4b68      	ldr	r3, [pc, #416]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a67      	ldr	r2, [pc, #412]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
 8005374:	4b65      	ldr	r3, [pc, #404]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4a64      	ldr	r2, [pc, #400]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800537a:	f023 0304 	bic.w	r3, r3, #4
 800537e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc f9ea 	bl	8001760 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005390:	f7fc f9e6 	bl	8001760 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e14e      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053a6:	4b59      	ldr	r3, [pc, #356]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ee      	beq.n	8005390 <HAL_RCC_OscConfig+0x5f0>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fc f9d4 	bl	8001760 <HAL_GetTick>
 80053b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fc f9d0 	bl	8001760 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e138      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053d2:	4b4e      	ldr	r3, [pc, #312]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ee      	bne.n	80053bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 812d 	beq.w	8005642 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053e8:	4b48      	ldr	r3, [pc, #288]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f0:	2b18      	cmp	r3, #24
 80053f2:	f000 80bd 	beq.w	8005570 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	f040 809e 	bne.w	800553c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005400:	4b42      	ldr	r3, [pc, #264]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a41      	ldr	r2, [pc, #260]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc f9a8 	bl	8001760 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fc f9a4 	bl	8001760 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e10e      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005426:	4b39      	ldr	r3, [pc, #228]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005432:	4b36      	ldr	r3, [pc, #216]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCC_OscConfig+0x774>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	430a      	orrs	r2, r1
 8005446:	4931      	ldr	r1, [pc, #196]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	628b      	str	r3, [r1, #40]	; 0x28
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	3b01      	subs	r3, #1
 8005452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	3b01      	subs	r3, #1
 800545c:	025b      	lsls	r3, r3, #9
 800545e:	b29b      	uxth	r3, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	3b01      	subs	r3, #1
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	3b01      	subs	r3, #1
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800547c:	4923      	ldr	r1, [pc, #140]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4a21      	ldr	r2, [pc, #132]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800548e:	4b1f      	ldr	r3, [pc, #124]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 8005490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005492:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_RCC_OscConfig+0x778>)
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800549a:	00d2      	lsls	r2, r2, #3
 800549c:	491b      	ldr	r1, [pc, #108]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	f023 020c 	bic.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4917      	ldr	r1, [pc, #92]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054b4:	4b15      	ldr	r3, [pc, #84]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	f023 0202 	bic.w	r2, r3, #2
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	4912      	ldr	r1, [pc, #72]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4a10      	ldr	r2, [pc, #64]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d2:	4b0e      	ldr	r3, [pc, #56]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	4a0d      	ldr	r2, [pc, #52]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	4a0a      	ldr	r2, [pc, #40]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	4a07      	ldr	r2, [pc, #28]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <HAL_RCC_OscConfig+0x76c>)
 80054fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fc f92d 	bl	8001760 <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005508:	e011      	b.n	800552e <HAL_RCC_OscConfig+0x78e>
 800550a:	bf00      	nop
 800550c:	58024400 	.word	0x58024400
 8005510:	58024800 	.word	0x58024800
 8005514:	fffffc0c 	.word	0xfffffc0c
 8005518:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fc f920 	bl	8001760 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e08a      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800552e:	4b47      	ldr	r3, [pc, #284]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x77c>
 800553a:	e082      	b.n	8005642 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a42      	ldr	r2, [pc, #264]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fc f90a 	bl	8001760 <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7fc f906 	bl	8001760 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e070      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x7b0>
 800556e:	e068      	b.n	8005642 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005576:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b01      	cmp	r3, #1
 8005582:	d031      	beq.n	80055e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0203 	and.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d12a      	bne.n	80055e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d122      	bne.n	80055e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d11a      	bne.n	80055e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	0a5b      	lsrs	r3, r3, #9
 80055b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d111      	bne.n	80055e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d108      	bne.n	80055e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	0e1b      	lsrs	r3, r3, #24
 80055da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e02b      	b.n	8005644 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d01f      	beq.n	8005642 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	4a11      	ldr	r2, [pc, #68]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800560e:	f7fc f8a7 	bl	8001760 <HAL_GetTick>
 8005612:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005614:	bf00      	nop
 8005616:	f7fc f8a3 	bl	8001760 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	4293      	cmp	r3, r2
 8005620:	d0f9      	beq.n	8005616 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <HAL_RCC_OscConfig+0x8b0>)
 8005628:	4013      	ands	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800562e:	00d2      	lsls	r2, r2, #3
 8005630:	4906      	ldr	r1, [pc, #24]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005632:	4313      	orrs	r3, r2
 8005634:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	4a04      	ldr	r2, [pc, #16]	; (800564c <HAL_RCC_OscConfig+0x8ac>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3730      	adds	r7, #48	; 0x30
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	58024400 	.word	0x58024400
 8005650:	ffff0007 	.word	0xffff0007

08005654 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e19c      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005668:	4b8a      	ldr	r3, [pc, #552]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d910      	bls.n	8005698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005676:	4b87      	ldr	r3, [pc, #540]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	4985      	ldr	r1, [pc, #532]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b83      	ldr	r3, [pc, #524]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d001      	beq.n	8005698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e184      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	4b7b      	ldr	r3, [pc, #492]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d908      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056b4:	4b78      	ldr	r3, [pc, #480]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	4975      	ldr	r1, [pc, #468]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d010      	beq.n	80056f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	4b70      	ldr	r3, [pc, #448]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056de:	429a      	cmp	r2, r3
 80056e0:	d908      	bls.n	80056f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056e2:	4b6d      	ldr	r3, [pc, #436]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	496a      	ldr	r1, [pc, #424]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d010      	beq.n	8005722 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	4b64      	ldr	r3, [pc, #400]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800570c:	429a      	cmp	r2, r3
 800570e:	d908      	bls.n	8005722 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	495e      	ldr	r1, [pc, #376]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 800571e:	4313      	orrs	r3, r2
 8005720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d010      	beq.n	8005750 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800573a:	429a      	cmp	r2, r3
 800573c:	d908      	bls.n	8005750 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800573e:	4b56      	ldr	r3, [pc, #344]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4953      	ldr	r1, [pc, #332]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 800574c:	4313      	orrs	r3, r2
 800574e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	4b4d      	ldr	r3, [pc, #308]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	429a      	cmp	r2, r3
 800576a:	d908      	bls.n	800577e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576c:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f023 020f 	bic.w	r2, r3, #15
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4947      	ldr	r1, [pc, #284]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 800577a:	4313      	orrs	r3, r2
 800577c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d055      	beq.n	8005836 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800578a:	4b43      	ldr	r3, [pc, #268]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4940      	ldr	r1, [pc, #256]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005798:	4313      	orrs	r3, r2
 800579a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d107      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057a4:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d121      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0f6      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d107      	bne.n	80057cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d115      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0ea      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0de      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057e4:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0d6      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057f4:	4b28      	ldr	r3, [pc, #160]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f023 0207 	bic.w	r2, r3, #7
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4925      	ldr	r1, [pc, #148]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005802:	4313      	orrs	r3, r2
 8005804:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005806:	f7fb ffab 	bl	8001760 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580c:	e00a      	b.n	8005824 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800580e:	f7fb ffa7 	bl	8001760 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0be      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	429a      	cmp	r2, r3
 8005834:	d1eb      	bne.n	800580e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d010      	beq.n	8005864 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	429a      	cmp	r2, r3
 8005850:	d208      	bcs.n	8005864 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f023 020f 	bic.w	r2, r3, #15
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	490e      	ldr	r1, [pc, #56]	; (8005898 <HAL_RCC_ClockConfig+0x244>)
 8005860:	4313      	orrs	r3, r2
 8005862:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d214      	bcs.n	800589c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 020f 	bic.w	r2, r3, #15
 800587a:	4906      	ldr	r1, [pc, #24]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b04      	ldr	r3, [pc, #16]	; (8005894 <HAL_RCC_ClockConfig+0x240>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e086      	b.n	80059a2 <HAL_RCC_ClockConfig+0x34e>
 8005894:	52002000 	.word	0x52002000
 8005898:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d208      	bcs.n	80058ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058b8:	4b3c      	ldr	r3, [pc, #240]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	4939      	ldr	r1, [pc, #228]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d010      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	4b34      	ldr	r3, [pc, #208]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d208      	bcs.n	80058f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058e6:	4b31      	ldr	r3, [pc, #196]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	492e      	ldr	r1, [pc, #184]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005910:	429a      	cmp	r2, r3
 8005912:	d208      	bcs.n	8005926 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005914:	4b25      	ldr	r3, [pc, #148]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	4922      	ldr	r1, [pc, #136]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 8005922:	4313      	orrs	r3, r2
 8005924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800593e:	429a      	cmp	r2, r3
 8005940:	d208      	bcs.n	8005954 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005942:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	4917      	ldr	r1, [pc, #92]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 8005950:	4313      	orrs	r3, r2
 8005952:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005954:	f000 f89e 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8005958:	4602      	mov	r2, r0
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	0a1b      	lsrs	r3, r3, #8
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	4912      	ldr	r1, [pc, #72]	; (80059b0 <HAL_RCC_ClockConfig+0x35c>)
 8005966:	5ccb      	ldrb	r3, [r1, r3]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
 8005970:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005972:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <HAL_RCC_ClockConfig+0x358>)
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <HAL_RCC_ClockConfig+0x35c>)
 800597c:	5cd3      	ldrb	r3, [r2, r3]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <HAL_RCC_ClockConfig+0x360>)
 800598a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800598c:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <HAL_RCC_ClockConfig+0x364>)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCC_ClockConfig+0x368>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fb fe98 	bl	80016cc <HAL_InitTick>
 800599c:	4603      	mov	r3, r0
 800599e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	58024400 	.word	0x58024400
 80059b0:	0800f730 	.word	0x0800f730
 80059b4:	24000004 	.word	0x24000004
 80059b8:	24000000 	.word	0x24000000
 80059bc:	24000040 	.word	0x24000040

080059c0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08c      	sub	sp, #48	; 0x30
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d12a      	bne.n	8005a28 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80059d2:	4b2d      	ldr	r3, [pc, #180]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 80059d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059d8:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059e2:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 80059e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80059f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059fa:	2303      	movs	r3, #3
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a02:	2300      	movs	r3, #0
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005a06:	f107 031c 	add.w	r3, r7, #28
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	481f      	ldr	r0, [pc, #124]	; (8005a8c <HAL_RCC_MCOConfig+0xcc>)
 8005a0e:	f7fe fbe9 	bl	80041e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	4919      	ldr	r1, [pc, #100]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005a26:	e02a      	b.n	8005a7e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005a28:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a50:	2303      	movs	r3, #3
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005a5c:	f107 031c 	add.w	r3, r7, #28
 8005a60:	4619      	mov	r1, r3
 8005a62:	480b      	ldr	r0, [pc, #44]	; (8005a90 <HAL_RCC_MCOConfig+0xd0>)
 8005a64:	f7fe fbbe 	bl	80041e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	01d9      	lsls	r1, r3, #7
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	430b      	orrs	r3, r1
 8005a78:	4903      	ldr	r1, [pc, #12]	; (8005a88 <HAL_RCC_MCOConfig+0xc8>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]
}
 8005a7e:	bf00      	nop
 8005a80:	3730      	adds	r7, #48	; 0x30
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	58020000 	.word	0x58020000
 8005a90:	58020800 	.word	0x58020800

08005a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a9a:	4bb3      	ldr	r3, [pc, #716]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aa2:	2b18      	cmp	r3, #24
 8005aa4:	f200 8155 	bhi.w	8005d52 <HAL_RCC_GetSysClockFreq+0x2be>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005b15 	.word	0x08005b15
 8005ab4:	08005d53 	.word	0x08005d53
 8005ab8:	08005d53 	.word	0x08005d53
 8005abc:	08005d53 	.word	0x08005d53
 8005ac0:	08005d53 	.word	0x08005d53
 8005ac4:	08005d53 	.word	0x08005d53
 8005ac8:	08005d53 	.word	0x08005d53
 8005acc:	08005d53 	.word	0x08005d53
 8005ad0:	08005b3b 	.word	0x08005b3b
 8005ad4:	08005d53 	.word	0x08005d53
 8005ad8:	08005d53 	.word	0x08005d53
 8005adc:	08005d53 	.word	0x08005d53
 8005ae0:	08005d53 	.word	0x08005d53
 8005ae4:	08005d53 	.word	0x08005d53
 8005ae8:	08005d53 	.word	0x08005d53
 8005aec:	08005d53 	.word	0x08005d53
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005d53 	.word	0x08005d53
 8005af8:	08005d53 	.word	0x08005d53
 8005afc:	08005d53 	.word	0x08005d53
 8005b00:	08005d53 	.word	0x08005d53
 8005b04:	08005d53 	.word	0x08005d53
 8005b08:	08005d53 	.word	0x08005d53
 8005b0c:	08005d53 	.word	0x08005d53
 8005b10:	08005b47 	.word	0x08005b47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b14:	4b94      	ldr	r3, [pc, #592]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b20:	4b91      	ldr	r3, [pc, #580]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	08db      	lsrs	r3, r3, #3
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	4a90      	ldr	r2, [pc, #576]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b32:	e111      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b34:	4b8d      	ldr	r3, [pc, #564]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b36:	61bb      	str	r3, [r7, #24]
      break;
 8005b38:	e10e      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b3c:	61bb      	str	r3, [r7, #24]
      break;
 8005b3e:	e10b      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b40:	4b8c      	ldr	r3, [pc, #560]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b42:	61bb      	str	r3, [r7, #24]
      break;
 8005b44:	e108      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b46:	4b88      	ldr	r3, [pc, #544]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b50:	4b85      	ldr	r3, [pc, #532]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b5c:	4b82      	ldr	r3, [pc, #520]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b66:	4b80      	ldr	r3, [pc, #512]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80e1 	beq.w	8005d4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	f000 8083 	beq.w	8005c98 <HAL_RCC_GetSysClockFreq+0x204>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	f200 80a1 	bhi.w	8005cdc <HAL_RCC_GetSysClockFreq+0x248>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d056      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ba6:	e099      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba8:	4b6f      	ldr	r3, [pc, #444]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02d      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bb4:	4b6c      	ldr	r3, [pc, #432]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	4a6b      	ldr	r2, [pc, #428]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bde:	4b62      	ldr	r3, [pc, #392]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bf2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c0e:	e087      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b51      	ldr	r3, [pc, #324]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c52:	e065      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b40      	ldr	r3, [pc, #256]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c96:	e043      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cda:	e021      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	0a5b      	lsrs	r3, r3, #9
 8005d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d44:	ee17 3a90 	vmov	r3, s15
 8005d48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d4a:	e005      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
      break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d54:	61bb      	str	r3, [r7, #24]
      break;
 8005d56:	bf00      	nop
  }

  return sysclockfreq;
 8005d58:	69bb      	ldr	r3, [r7, #24]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3724      	adds	r7, #36	; 0x24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	03d09000 	.word	0x03d09000
 8005d70:	003d0900 	.word	0x003d0900
 8005d74:	017d7840 	.word	0x017d7840
 8005d78:	46000000 	.word	0x46000000
 8005d7c:	4c742400 	.word	0x4c742400
 8005d80:	4a742400 	.word	0x4a742400
 8005d84:	4bbebc20 	.word	0x4bbebc20

08005d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d8e:	f7ff fe81 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	490f      	ldr	r1, [pc, #60]	; (8005ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8005da0:	5ccb      	ldrb	r3, [r1, r3]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8005db6:	5cd3      	ldrb	r3, [r2, r3]
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dc6:	4a07      	ldr	r2, [pc, #28]	; (8005de4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dce:	681b      	ldr	r3, [r3, #0]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	0800f730 	.word	0x0800f730
 8005de0:	24000004 	.word	0x24000004
 8005de4:	24000000 	.word	0x24000000

08005de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dec:	f7ff ffcc 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	4904      	ldr	r1, [pc, #16]	; (8005e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	0800f730 	.word	0x0800f730

08005e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e18:	f7ff ffb6 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	4904      	ldr	r1, [pc, #16]	; (8005e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e2a:	5ccb      	ldrb	r3, [r1, r3]
 8005e2c:	f003 031f 	and.w	r3, r3, #31
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	0800f730 	.word	0x0800f730

08005e40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e44:	b0cc      	sub	sp, #304	; 0x130
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005e64:	2500      	movs	r5, #0
 8005e66:	ea54 0305 	orrs.w	r3, r4, r5
 8005e6a:	d049      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e76:	d02f      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e7c:	d828      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e82:	d01a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e88:	d822      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e92:	d007      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e94:	e01c      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e96:	4bb8      	ldr	r3, [pc, #736]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	4ab7      	ldr	r2, [pc, #732]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ea2:	e01a      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f002 fba1 	bl	80085f4 <RCCEx_PLL2_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eb8:	e00f      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ebe:	3328      	adds	r3, #40	; 0x28
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f002 fc48 	bl	8008758 <RCCEx_PLL3_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ece:	e004      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005ed6:	e000      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ee2:	4ba5      	ldr	r3, [pc, #660]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef0:	4aa1      	ldr	r2, [pc, #644]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	6513      	str	r3, [r2, #80]	; 0x50
 8005ef6:	e003      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005efc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005f0c:	f04f 0900 	mov.w	r9, #0
 8005f10:	ea58 0309 	orrs.w	r3, r8, r9
 8005f14:	d047      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d82a      	bhi.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f3d 	.word	0x08005f3d
 8005f2c:	08005f4b 	.word	0x08005f4b
 8005f30:	08005f61 	.word	0x08005f61
 8005f34:	08005f7f 	.word	0x08005f7f
 8005f38:	08005f7f 	.word	0x08005f7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3c:	4b8e      	ldr	r3, [pc, #568]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4a8d      	ldr	r2, [pc, #564]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f48:	e01a      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f4e:	3308      	adds	r3, #8
 8005f50:	2100      	movs	r1, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	f002 fb4e 	bl	80085f4 <RCCEx_PLL2_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f5e:	e00f      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f64:	3328      	adds	r3, #40	; 0x28
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f002 fbf5 	bl	8008758 <RCCEx_PLL3_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f80:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f88:	4b7b      	ldr	r3, [pc, #492]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	f023 0107 	bic.w	r1, r3, #7
 8005f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	4a78      	ldr	r2, [pc, #480]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	; 0x50
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fa2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005fb2:	f04f 0b00 	mov.w	fp, #0
 8005fb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fba:	d04c      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc6:	d030      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fcc:	d829      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fce:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd0:	d02d      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd4:	d825      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d018      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005fda:	2b80      	cmp	r3, #128	; 0x80
 8005fdc:	d821      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d007      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005fe6:	e01c      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe8:	4b63      	ldr	r3, [pc, #396]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4a62      	ldr	r2, [pc, #392]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e01c      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f002 faf8 	bl	80085f4 <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800600a:	e011      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800600c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006010:	3328      	adds	r3, #40	; 0x28
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f002 fb9f 	bl	8008758 <RCCEx_PLL3_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800602e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006030:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006038:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006046:	4a4c      	ldr	r2, [pc, #304]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6513      	str	r3, [r2, #80]	; 0x50
 800604c:	e003      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006052:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006056:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006062:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006066:	2300      	movs	r3, #0
 8006068:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800606c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8006070:	460b      	mov	r3, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	d053      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006076:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800607a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800607e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006082:	d035      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006088:	d82e      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800608a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800608e:	d031      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006090:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006094:	d828      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609a:	d01a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800609c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a0:	d822      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80060a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060aa:	d007      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80060ac:	e01c      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ae:	4b32      	ldr	r3, [pc, #200]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	4a31      	ldr	r2, [pc, #196]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ba:	e01c      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060c0:	3308      	adds	r3, #8
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f002 fa95 	bl	80085f4 <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060d0:	e011      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d6:	3328      	adds	r3, #40	; 0x28
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f002 fb3c 	bl	8008758 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060e6:	e006      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80060ee:	e002      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060fe:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006102:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006106:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800610a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800610e:	4a1a      	ldr	r2, [pc, #104]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006110:	430b      	orrs	r3, r1
 8006112:	6593      	str	r3, [r2, #88]	; 0x58
 8006114:	e003      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800611a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800611e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800612a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006134:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006138:	460b      	mov	r3, r1
 800613a:	4313      	orrs	r3, r2
 800613c:	d056      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800613e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800614a:	d038      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800614c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006150:	d831      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006156:	d034      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800615c:	d82b      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800615e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006162:	d01d      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006168:	d825      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d006      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800616e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006172:	d00a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006174:	e01f      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006176:	bf00      	nop
 8006178:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617c:	4ba2      	ldr	r3, [pc, #648]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4aa1      	ldr	r2, [pc, #644]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006186:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006188:	e01c      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800618e:	3308      	adds	r3, #8
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f002 fa2e 	bl	80085f4 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800619e:	e011      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061a4:	3328      	adds	r3, #40	; 0x28
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f002 fad5 	bl	8008758 <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061b4:	e006      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061bc:	e002      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061cc:	4b8e      	ldr	r3, [pc, #568]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80061d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061dc:	4a8a      	ldr	r2, [pc, #552]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061de:	430b      	orrs	r3, r1
 80061e0:	6593      	str	r3, [r2, #88]	; 0x58
 80061e2:	e003      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061e8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80061f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061fc:	2300      	movs	r3, #0
 80061fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006202:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006206:	460b      	mov	r3, r1
 8006208:	4313      	orrs	r3, r2
 800620a:	d03a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800620c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006212:	2b30      	cmp	r3, #48	; 0x30
 8006214:	d01f      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006216:	2b30      	cmp	r3, #48	; 0x30
 8006218:	d819      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800621a:	2b20      	cmp	r3, #32
 800621c:	d00c      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d815      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d019      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006226:	2b10      	cmp	r3, #16
 8006228:	d111      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622a:	4b77      	ldr	r3, [pc, #476]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	4a76      	ldr	r2, [pc, #472]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006236:	e011      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006238:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800623c:	3308      	adds	r3, #8
 800623e:	2102      	movs	r1, #2
 8006240:	4618      	mov	r0, r3
 8006242:	f002 f9d7 	bl	80085f4 <RCCEx_PLL2_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800624c:	e006      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006264:	4b68      	ldr	r3, [pc, #416]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006268:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800626c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006272:	4a65      	ldr	r2, [pc, #404]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006274:	430b      	orrs	r3, r1
 8006276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800627e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006282:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800628e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006292:	2300      	movs	r3, #0
 8006294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006298:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d051      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ac:	d035      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80062ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b2:	d82e      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062b8:	d031      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80062ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062be:	d828      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c4:	d01a      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	d822      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80062d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d4:	d007      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80062d6:	e01c      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4a4a      	ldr	r2, [pc, #296]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062e4:	e01c      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ea:	3308      	adds	r3, #8
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f002 f980 	bl	80085f4 <RCCEx_PLL2_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062fa:	e011      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006300:	3328      	adds	r3, #40	; 0x28
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f002 fa27 	bl	8008758 <RCCEx_PLL3_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800631e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006320:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006328:	4b37      	ldr	r3, [pc, #220]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006336:	4a34      	ldr	r2, [pc, #208]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006338:	430b      	orrs	r3, r1
 800633a:	6513      	str	r3, [r2, #80]	; 0x50
 800633c:	e003      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006342:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006346:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006352:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800635c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006360:	460b      	mov	r3, r1
 8006362:	4313      	orrs	r3, r2
 8006364:	d056      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006366:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800636a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006370:	d033      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006376:	d82c      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800637c:	d02f      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800637e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006382:	d826      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006384:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006388:	d02b      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800638a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800638e:	d820      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006394:	d012      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800639a:	d81a      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d022      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a4:	d115      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063aa:	3308      	adds	r3, #8
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f002 f920 	bl	80085f4 <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063ba:	e015      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c0:	3328      	adds	r3, #40	; 0x28
 80063c2:	2101      	movs	r1, #1
 80063c4:	4618      	mov	r0, r3
 80063c6:	f002 f9c7 	bl	8008758 <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063d0:	e00a      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063da:	bf00      	nop
 80063dc:	e004      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10d      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80063f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063fe:	4a02      	ldr	r2, [pc, #8]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006400:	430b      	orrs	r3, r1
 8006402:	6513      	str	r3, [r2, #80]	; 0x50
 8006404:	e006      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006406:	bf00      	nop
 8006408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006410:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006420:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800642a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d055      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800643c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006440:	d033      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006446:	d82c      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644c:	d02f      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d826      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006454:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006458:	d02b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800645a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800645e:	d820      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006464:	d012      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800646a:	d81a      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d022      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006474:	d115      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006476:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800647a:	3308      	adds	r3, #8
 800647c:	2101      	movs	r1, #1
 800647e:	4618      	mov	r0, r3
 8006480:	f002 f8b8 	bl	80085f4 <RCCEx_PLL2_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800648a:	e015      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800648c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006490:	3328      	adds	r3, #40	; 0x28
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f002 f95f 	bl	8008758 <RCCEx_PLL3_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064a0:	e00a      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80064a8:	e006      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064aa:	bf00      	nop
 80064ac:	e004      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064ae:	bf00      	nop
 80064b0:	e002      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064b2:	bf00      	nop
 80064b4:	e000      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064c0:	4bb6      	ldr	r3, [pc, #728]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064d0:	4ab2      	ldr	r2, [pc, #712]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6593      	str	r3, [r2, #88]	; 0x58
 80064d6:	e003      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80064e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80064ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d02a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006500:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006506:	2b00      	cmp	r3, #0
 8006508:	d011      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800650a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650e:	d10a      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006514:	3308      	adds	r3, #8
 8006516:	2101      	movs	r1, #1
 8006518:	4618      	mov	r0, r3
 800651a:	f002 f86b 	bl	80085f4 <RCCEx_PLL2_Config>
 800651e:	4603      	mov	r3, r0
 8006520:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006524:	e004      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800652c:	e000      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800652e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006530:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006538:	4b98      	ldr	r3, [pc, #608]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006546:	4a95      	ldr	r2, [pc, #596]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006548:	430b      	orrs	r3, r1
 800654a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006552:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006556:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006566:	2300      	movs	r3, #0
 8006568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800656c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d037      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006580:	d00e      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006586:	d816      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d018      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800658c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006590:	d111      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006592:	4b82      	ldr	r3, [pc, #520]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	4a81      	ldr	r2, [pc, #516]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800659e:	e00f      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065a4:	3308      	adds	r3, #8
 80065a6:	2101      	movs	r1, #1
 80065a8:	4618      	mov	r0, r3
 80065aa:	f002 f823 	bl	80085f4 <RCCEx_PLL2_Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065b4:	e004      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80065bc:	e000      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80065be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065c8:	4b74      	ldr	r3, [pc, #464]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065cc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d6:	4a71      	ldr	r2, [pc, #452]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065d8:	430b      	orrs	r3, r1
 80065da:	6513      	str	r3, [r2, #80]	; 0x50
 80065dc:	e003      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f6:	2300      	movs	r3, #0
 80065f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065fc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d03a      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800660a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660c:	2b03      	cmp	r3, #3
 800660e:	d81d      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006655 	.word	0x08006655
 800661c:	08006629 	.word	0x08006629
 8006620:	08006637 	.word	0x08006637
 8006624:	08006655 	.word	0x08006655
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006628:	4b5c      	ldr	r3, [pc, #368]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	4a5b      	ldr	r2, [pc, #364]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800662e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006634:	e00f      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006636:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800663a:	3308      	adds	r3, #8
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f001 ffd8 	bl	80085f4 <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800665e:	4b4f      	ldr	r3, [pc, #316]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	f023 0103 	bic.w	r1, r3, #3
 8006666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800666a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666c:	4a4b      	ldr	r2, [pc, #300]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800666e:	430b      	orrs	r3, r1
 8006670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006678:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800667c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	f000 80a0 	beq.w	80067de <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800669e:	4b40      	ldr	r3, [pc, #256]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a3f      	ldr	r2, [pc, #252]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066aa:	f7fb f859 	bl	8001760 <HAL_GetTick>
 80066ae:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b2:	e00b      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b4:	f7fb f854 	bl	8001760 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b64      	cmp	r3, #100	; 0x64
 80066c2:	d903      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80066ca:	e005      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066cc:	4b34      	ldr	r3, [pc, #208]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0ed      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80066d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d17a      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066e0:	4b2e      	ldr	r3, [pc, #184]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066ec:	4053      	eors	r3, r2
 80066ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d015      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066f6:	4b29      	ldr	r3, [pc, #164]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006702:	4b26      	ldr	r3, [pc, #152]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	4a25      	ldr	r2, [pc, #148]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800670e:	4b23      	ldr	r3, [pc, #140]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006718:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800671a:	4a20      	ldr	r2, [pc, #128]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800671c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006720:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006722:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006726:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800672a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672e:	d118      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fb f816 	bl	8001760 <HAL_GetTick>
 8006734:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006738:	e00d      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fb f811 	bl	8001760 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	f241 3388 	movw	r3, #5000	; 0x1388
 800674a:	429a      	cmp	r2, r3
 800674c:	d903      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8006754:	e005      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0eb      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006762:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006766:	2b00      	cmp	r3, #0
 8006768:	d130      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800676a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800676e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800677a:	d115      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006788:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800678c:	091a      	lsrs	r2, r3, #4
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006790:	4013      	ands	r3, r2
 8006792:	4a02      	ldr	r2, [pc, #8]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006794:	430b      	orrs	r3, r1
 8006796:	6113      	str	r3, [r2, #16]
 8006798:	e00c      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
 80067a0:	58024800 	.word	0x58024800
 80067a4:	00ffffcf 	.word	0x00ffffcf
 80067a8:	4bd4      	ldr	r3, [pc, #848]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	4ad3      	ldr	r2, [pc, #844]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067b2:	6113      	str	r3, [r2, #16]
 80067b4:	4bd1      	ldr	r3, [pc, #836]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80067b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c4:	4acd      	ldr	r2, [pc, #820]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ca:	e008      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f002 0301 	and.w	r3, r2, #1
 80067ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f000 808b 	beq.w	8006916 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006808:	2b28      	cmp	r3, #40	; 0x28
 800680a:	d86b      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	080068ed 	.word	0x080068ed
 8006818:	080068e5 	.word	0x080068e5
 800681c:	080068e5 	.word	0x080068e5
 8006820:	080068e5 	.word	0x080068e5
 8006824:	080068e5 	.word	0x080068e5
 8006828:	080068e5 	.word	0x080068e5
 800682c:	080068e5 	.word	0x080068e5
 8006830:	080068e5 	.word	0x080068e5
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080068e5 	.word	0x080068e5
 800683c:	080068e5 	.word	0x080068e5
 8006840:	080068e5 	.word	0x080068e5
 8006844:	080068e5 	.word	0x080068e5
 8006848:	080068e5 	.word	0x080068e5
 800684c:	080068e5 	.word	0x080068e5
 8006850:	080068e5 	.word	0x080068e5
 8006854:	080068cf 	.word	0x080068cf
 8006858:	080068e5 	.word	0x080068e5
 800685c:	080068e5 	.word	0x080068e5
 8006860:	080068e5 	.word	0x080068e5
 8006864:	080068e5 	.word	0x080068e5
 8006868:	080068e5 	.word	0x080068e5
 800686c:	080068e5 	.word	0x080068e5
 8006870:	080068e5 	.word	0x080068e5
 8006874:	080068ed 	.word	0x080068ed
 8006878:	080068e5 	.word	0x080068e5
 800687c:	080068e5 	.word	0x080068e5
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080068e5 	.word	0x080068e5
 8006888:	080068e5 	.word	0x080068e5
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068e5 	.word	0x080068e5
 8006894:	080068ed 	.word	0x080068ed
 8006898:	080068e5 	.word	0x080068e5
 800689c:	080068e5 	.word	0x080068e5
 80068a0:	080068e5 	.word	0x080068e5
 80068a4:	080068e5 	.word	0x080068e5
 80068a8:	080068e5 	.word	0x080068e5
 80068ac:	080068e5 	.word	0x080068e5
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080068ed 	.word	0x080068ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068bc:	3308      	adds	r3, #8
 80068be:	2101      	movs	r1, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 fe97 	bl	80085f4 <RCCEx_PLL2_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068cc:	e00f      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068d2:	3328      	adds	r3, #40	; 0x28
 80068d4:	2101      	movs	r1, #1
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 ff3e 	bl	8008758 <RCCEx_PLL3_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80068ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068f6:	4b81      	ldr	r3, [pc, #516]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80068fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006906:	4a7d      	ldr	r2, [pc, #500]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006908:	430b      	orrs	r3, r1
 800690a:	6553      	str	r3, [r2, #84]	; 0x54
 800690c:	e003      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006912:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f002 0302 	and.w	r3, r2, #2
 8006922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006926:	2300      	movs	r3, #0
 8006928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800692c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006930:	460b      	mov	r3, r1
 8006932:	4313      	orrs	r3, r2
 8006934:	d042      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006936:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800693a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693c:	2b05      	cmp	r3, #5
 800693e:	d825      	bhi.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	08006995 	.word	0x08006995
 800694c:	08006961 	.word	0x08006961
 8006950:	08006977 	.word	0x08006977
 8006954:	08006995 	.word	0x08006995
 8006958:	08006995 	.word	0x08006995
 800695c:	08006995 	.word	0x08006995
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006964:	3308      	adds	r3, #8
 8006966:	2101      	movs	r1, #1
 8006968:	4618      	mov	r0, r3
 800696a:	f001 fe43 	bl	80085f4 <RCCEx_PLL2_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006974:	e00f      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006976:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800697a:	3328      	adds	r3, #40	; 0x28
 800697c:	2101      	movs	r1, #1
 800697e:	4618      	mov	r0, r3
 8006980:	f001 feea 	bl	8008758 <RCCEx_PLL3_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800698a:	e004      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006992:	e000      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006996:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800699e:	4b57      	ldr	r3, [pc, #348]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	f023 0107 	bic.w	r1, r3, #7
 80069a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ac:	4a53      	ldr	r2, [pc, #332]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6553      	str	r3, [r2, #84]	; 0x54
 80069b2:	e003      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069b8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f002 0304 	and.w	r3, r2, #4
 80069c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d044      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069e4:	2b05      	cmp	r3, #5
 80069e6:	d825      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a3d 	.word	0x08006a3d
 80069f4:	08006a09 	.word	0x08006a09
 80069f8:	08006a1f 	.word	0x08006a1f
 80069fc:	08006a3d 	.word	0x08006a3d
 8006a00:	08006a3d 	.word	0x08006a3d
 8006a04:	08006a3d 	.word	0x08006a3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fdef 	bl	80085f4 <RCCEx_PLL2_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a1c:	e00f      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a22:	3328      	adds	r3, #40	; 0x28
 8006a24:	2101      	movs	r1, #1
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 fe96 	bl	8008758 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10b      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a46:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f023 0107 	bic.w	r1, r3, #7
 8006a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a56:	4a29      	ldr	r2, [pc, #164]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a5c:	e003      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a62:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f002 0320 	and.w	r3, r2, #32
 8006a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a76:	2300      	movs	r3, #0
 8006a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a80:	460b      	mov	r3, r1
 8006a82:	4313      	orrs	r3, r2
 8006a84:	d057      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a92:	d035      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a98:	d82c      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d031      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa4:	d826      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006aa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aaa:	d02d      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006aac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab0:	d820      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab6:	d012      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006abc:	d81a      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d024      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac6:	d115      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006acc:	3308      	adds	r3, #8
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fd8f 	bl	80085f4 <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006adc:	e017      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ae2:	3328      	adds	r3, #40	; 0x28
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 fe36 	bl	8008758 <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006af2:	e00c      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006afa:	e008      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006afc:	58024400 	.word	0x58024400
        break;
 8006b00:	bf00      	nop
 8006b02:	e004      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b04:	bf00      	nop
 8006b06:	e002      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e000      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b16:	4bc2      	ldr	r3, [pc, #776]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b26:	4abe      	ldr	r2, [pc, #760]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6553      	str	r3, [r2, #84]	; 0x54
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4313      	orrs	r3, r2
 8006b54:	d055      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b62:	d033      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006b64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b68:	d82c      	bhi.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6e:	d02f      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b74:	d826      	bhi.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b7a:	d02b      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b80:	d820      	bhi.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b86:	d012      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b8c:	d81a      	bhi.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d022      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b96:	d115      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fd27 	bl	80085f4 <RCCEx_PLL2_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bac:	e015      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bb2:	3328      	adds	r3, #40	; 0x28
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fdce 	bl	8008758 <RCCEx_PLL3_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bc2:	e00a      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006bca:	e006      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e004      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bd0:	bf00      	nop
 8006bd2:	e002      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006be2:	4b8f      	ldr	r3, [pc, #572]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bf2:	4a8b      	ldr	r2, [pc, #556]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006c0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c18:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d055      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c2e:	d033      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006c30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c34:	d82c      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3a:	d02f      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c40:	d826      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c46:	d02b      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006c48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c4c:	d820      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c52:	d012      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c58:	d81a      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d022      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c62:	d115      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 fcc1 	bl	80085f4 <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c78:	e015      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c7e:	3328      	adds	r3, #40	; 0x28
 8006c80:	2102      	movs	r1, #2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 fd68 	bl	8008758 <RCCEx_PLL3_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c8e:	e00a      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006c96:	e006      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c98:	bf00      	nop
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cae:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cbe:	4a58      	ldr	r2, [pc, #352]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cc4:	e003      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006cca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f002 0308 	and.w	r3, r2, #8
 8006cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ce4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4313      	orrs	r3, r2
 8006cec:	d01e      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfa:	d10c      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d00:	3328      	adds	r3, #40	; 0x28
 8006d02:	2102      	movs	r1, #2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 fd27 	bl	8008758 <RCCEx_PLL3_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d16:	4b42      	ldr	r3, [pc, #264]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	4a3e      	ldr	r2, [pc, #248]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f002 0310 	and.w	r3, r2, #16
 8006d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d42:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	d01e      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d58:	d10c      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d5e:	3328      	adds	r3, #40	; 0x28
 8006d60:	2102      	movs	r1, #2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 fcf8 	bl	8008758 <RCCEx_PLL3_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d74:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d84:	4a26      	ldr	r2, [pc, #152]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d86:	430b      	orrs	r3, r1
 8006d88:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d040      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db6:	d022      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dbc:	d81b      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc6:	d00b      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006dc8:	e015      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dce:	3308      	adds	r3, #8
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fc0e 	bl	80085f4 <RCCEx_PLL2_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dde:	e00f      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006de4:	3328      	adds	r3, #40	; 0x28
 8006de6:	2102      	movs	r1, #2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fcb5 	bl	8008758 <RCCEx_PLL3_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006df4:	e004      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006dfc:	e000      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e18:	4a01      	ldr	r2, [pc, #4]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8006e1e:	e005      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e28:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e3e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e42:	460b      	mov	r3, r1
 8006e44:	4313      	orrs	r3, r2
 8006e46:	d03b      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e54:	d01f      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006e56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e5a:	d818      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e60:	d003      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e66:	d007      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006e68:	e011      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6a:	4b64      	ldr	r3, [pc, #400]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	4a63      	ldr	r2, [pc, #396]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e76:	e00f      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e7c:	3328      	adds	r3, #40	; 0x28
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fc69 	bl	8008758 <RCCEx_PLL3_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e8c:	e004      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ea0:	4b56      	ldr	r3, [pc, #344]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb0:	4a52      	ldr	r2, [pc, #328]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6553      	str	r3, [r2, #84]	; 0x54
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ebc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ec0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006ecc:	673b      	str	r3, [r7, #112]	; 0x70
 8006ece:	2300      	movs	r3, #0
 8006ed0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ed2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	d031      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006edc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eea:	d007      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006eec:	e011      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eee:	4b43      	ldr	r3, [pc, #268]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	4a42      	ldr	r2, [pc, #264]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006efa:	e00e      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f00:	3308      	adds	r3, #8
 8006f02:	2102      	movs	r1, #2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fb75 	bl	80085f4 <RCCEx_PLL2_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f10:	e003      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f22:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f30:	4a32      	ldr	r2, [pc, #200]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f32:	430b      	orrs	r3, r1
 8006f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f36:	e003      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006f3c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4e:	2300      	movs	r3, #0
 8006f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006f56:	460b      	mov	r3, r1
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	d00c      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f60:	3328      	adds	r3, #40	; 0x28
 8006f62:	2102      	movs	r1, #2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fbf7 	bl	8008758 <RCCEx_PLL3_Config>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f82:	663b      	str	r3, [r7, #96]	; 0x60
 8006f84:	2300      	movs	r3, #0
 8006f86:	667b      	str	r3, [r7, #100]	; 0x64
 8006f88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d03a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f9e:	d018      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa4:	d811      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006faa:	d014      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb0:	d80b      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d011      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fba:	d106      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	4a0e      	ldr	r2, [pc, #56]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006fd0:	e004      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fd2:	bf00      	nop
 8006fd4:	e002      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff4:	4a01      	ldr	r2, [pc, #4]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	6553      	str	r3, [r2, #84]	; 0x54
 8006ffa:	e005      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007000:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007004:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007014:	65bb      	str	r3, [r7, #88]	; 0x58
 8007016:	2300      	movs	r3, #0
 8007018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800701a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800701e:	460b      	mov	r3, r1
 8007020:	4313      	orrs	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007024:	4baa      	ldr	r3, [pc, #680]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800702c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007032:	4aa7      	ldr	r2, [pc, #668]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007034:	430b      	orrs	r3, r1
 8007036:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007044:	653b      	str	r3, [r7, #80]	; 0x50
 8007046:	2300      	movs	r3, #0
 8007048:	657b      	str	r3, [r7, #84]	; 0x54
 800704a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007054:	4b9e      	ldr	r3, [pc, #632]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800705c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007060:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007064:	4a9a      	ldr	r2, [pc, #616]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007066:	430b      	orrs	r3, r1
 8007068:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800706a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007076:	64bb      	str	r3, [r7, #72]	; 0x48
 8007078:	2300      	movs	r3, #0
 800707a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800707c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007080:	460b      	mov	r3, r1
 8007082:	4313      	orrs	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007086:	4b92      	ldr	r3, [pc, #584]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800708e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	4a8e      	ldr	r2, [pc, #568]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007096:	430b      	orrs	r3, r1
 8007098:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800709a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80070a6:	643b      	str	r3, [r7, #64]	; 0x40
 80070a8:	2300      	movs	r3, #0
 80070aa:	647b      	str	r3, [r7, #68]	; 0x44
 80070ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80070b0:	460b      	mov	r3, r1
 80070b2:	4313      	orrs	r3, r2
 80070b4:	d00e      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070b6:	4b86      	ldr	r3, [pc, #536]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	4a85      	ldr	r2, [pc, #532]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070c0:	6113      	str	r3, [r2, #16]
 80070c2:	4b83      	ldr	r3, [pc, #524]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070c4:	6919      	ldr	r1, [r3, #16]
 80070c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070ce:	4a80      	ldr	r2, [pc, #512]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80070e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e2:	2300      	movs	r3, #0
 80070e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070f0:	4b77      	ldr	r3, [pc, #476]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fe:	4a74      	ldr	r2, [pc, #464]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007100:	430b      	orrs	r3, r1
 8007102:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007104:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007110:	633b      	str	r3, [r7, #48]	; 0x30
 8007112:	2300      	movs	r3, #0
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
 8007116:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800711a:	460b      	mov	r3, r1
 800711c:	4313      	orrs	r3, r2
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007120:	4b6b      	ldr	r3, [pc, #428]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007124:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	4a67      	ldr	r2, [pc, #412]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007132:	430b      	orrs	r3, r1
 8007134:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	2100      	movs	r1, #0
 8007140:	62b9      	str	r1, [r7, #40]	; 0x28
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007148:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800714c:	460b      	mov	r3, r1
 800714e:	4313      	orrs	r3, r2
 8007150:	d011      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007152:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007156:	3308      	adds	r3, #8
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fa4a 	bl	80085f4 <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007166:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007172:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	2100      	movs	r1, #0
 8007180:	6239      	str	r1, [r7, #32]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
 8007188:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800718c:	460b      	mov	r3, r1
 800718e:	4313      	orrs	r3, r2
 8007190:	d011      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007192:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007196:	3308      	adds	r3, #8
 8007198:	2101      	movs	r1, #1
 800719a:	4618      	mov	r0, r3
 800719c:	f001 fa2a 	bl	80085f4 <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80071a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	2100      	movs	r1, #0
 80071c0:	61b9      	str	r1, [r7, #24]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071cc:	460b      	mov	r3, r1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	d011      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071d6:	3308      	adds	r3, #8
 80071d8:	2102      	movs	r1, #2
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fa0a 	bl	80085f4 <RCCEx_PLL2_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80071e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	2100      	movs	r1, #0
 8007200:	6139      	str	r1, [r7, #16]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d011      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007216:	3328      	adds	r3, #40	; 0x28
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fa9c 	bl	8008758 <RCCEx_PLL3_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8007226:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007232:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007236:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	2100      	movs	r1, #0
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d011      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007252:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007256:	3328      	adds	r3, #40	; 0x28
 8007258:	2101      	movs	r1, #1
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fa7c 	bl	8008758 <RCCEx_PLL3_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007266:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007272:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	2100      	movs	r1, #0
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	e9d7 1200 	ldrd	r1, r2, [r7]
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d011      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007296:	3328      	adds	r3, #40	; 0x28
 8007298:	2102      	movs	r1, #2
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fa5c 	bl	8008758 <RCCEx_PLL3_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80072a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80072b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80072b6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072ca:	46bd      	mov	sp, r7
 80072cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d0:	58024400 	.word	0x58024400

080072d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b090      	sub	sp, #64	; 0x40
 80072d8:	af00      	add	r7, sp, #0
 80072da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80072e6:	430b      	orrs	r3, r1
 80072e8:	f040 8094 	bne.w	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80072ec:	4b9e      	ldr	r3, [pc, #632]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	f200 8087 	bhi.w	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80072fe:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007319 	.word	0x08007319
 8007308:	08007341 	.word	0x08007341
 800730c:	08007369 	.word	0x08007369
 8007310:	08007405 	.word	0x08007405
 8007314:	08007391 	.word	0x08007391
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007318:	4b93      	ldr	r3, [pc, #588]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007324:	d108      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800732a:	4618      	mov	r0, r3
 800732c:	f001 f810 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007334:	f000 bd45 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733c:	f000 bd41 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007340:	4b89      	ldr	r3, [pc, #548]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800734c:	d108      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734e:	f107 0318 	add.w	r3, r7, #24
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fd54 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800735c:	f000 bd31 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007364:	f000 bd2d 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007368:	4b7f      	ldr	r3, [pc, #508]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007374:	d108      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fe94 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007384:	f000 bd1d 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800738c:	f000 bd19 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007390:	4b75      	ldr	r3, [pc, #468]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007398:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800739a:	4b73      	ldr	r3, [pc, #460]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073ac:	4b6e      	ldr	r3, [pc, #440]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	08db      	lsrs	r3, r3, #3
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	4a6d      	ldr	r2, [pc, #436]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073be:	e01f      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073c0:	4b69      	ldr	r3, [pc, #420]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073cc:	d106      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d4:	d102      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073d6:	4b66      	ldr	r3, [pc, #408]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073da:	e011      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073dc:	4b62      	ldr	r3, [pc, #392]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e8:	d106      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f0:	d102      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073f2:	4b60      	ldr	r3, [pc, #384]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f6:	e003      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80073fc:	f000 bce1 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007400:	f000 bcdf 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007404:	4b5c      	ldr	r3, [pc, #368]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007408:	f000 bcdb 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007410:	f000 bcd7 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007418:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800741c:	430b      	orrs	r3, r1
 800741e:	f040 80ad 	bne.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007422:	4b51      	ldr	r3, [pc, #324]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007426:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800742a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	d056      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	f200 8090 	bhi.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2bc0      	cmp	r3, #192	; 0xc0
 8007442:	f000 8088 	beq.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2bc0      	cmp	r3, #192	; 0xc0
 800744a:	f200 8088 	bhi.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	2b80      	cmp	r3, #128	; 0x80
 8007452:	d032      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	f200 8081 	bhi.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b40      	cmp	r3, #64	; 0x40
 8007466:	d014      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007468:	e079      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800746a:	4b3f      	ldr	r3, [pc, #252]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007476:	d108      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800747c:	4618      	mov	r0, r3
 800747e:	f000 ff67 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007486:	f000 bc9c 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748e:	f000 bc98 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007492:	4b35      	ldr	r3, [pc, #212]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800749a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749e:	d108      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a0:	f107 0318 	add.w	r3, r7, #24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fcab 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ae:	f000 bc88 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074b6:	f000 bc84 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074ba:	4b2b      	ldr	r3, [pc, #172]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c6:	d108      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c8:	f107 030c 	add.w	r3, r7, #12
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fdeb 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074d6:	f000 bc74 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074de:	f000 bc70 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074e2:	4b21      	ldr	r3, [pc, #132]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074ec:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d10c      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80074f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074fe:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	08db      	lsrs	r3, r3, #3
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	4a18      	ldr	r2, [pc, #96]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800750a:	fa22 f303 	lsr.w	r3, r2, r3
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007510:	e01f      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751e:	d106      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007526:	d102      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800752c:	e011      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800752e:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800753a:	d106      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007542:	d102      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007548:	e003      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800754e:	f000 bc38 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007552:	f000 bc36 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007556:	4b08      	ldr	r3, [pc, #32]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800755a:	f000 bc32 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007562:	f000 bc2e 	b.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007566:	bf00      	nop
 8007568:	58024400 	.word	0x58024400
 800756c:	03d09000 	.word	0x03d09000
 8007570:	003d0900 	.word	0x003d0900
 8007574:	017d7840 	.word	0x017d7840
 8007578:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800757c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007580:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007584:	430b      	orrs	r3, r1
 8007586:	f040 809c 	bne.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800758a:	4b9e      	ldr	r3, [pc, #632]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007592:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800759a:	d054      	beq.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075a2:	f200 808b 	bhi.w	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075ac:	f000 8083 	beq.w	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075b6:	f200 8081 	bhi.w	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075c0:	d02f      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075c8:	d878      	bhi.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075d6:	d012      	beq.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80075d8:	e070      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075da:	4b8a      	ldr	r3, [pc, #552]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075e6:	d107      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 feaf 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f6:	e3e4      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075fc:	e3e1      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075fe:	4b81      	ldr	r3, [pc, #516]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800760a:	d107      	bne.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800760c:	f107 0318 	add.w	r3, r7, #24
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fbf5 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800761a:	e3d2      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007620:	e3cf      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007622:	4b78      	ldr	r3, [pc, #480]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800762e:	d107      	bne.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007630:	f107 030c 	add.w	r3, r7, #12
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fd37 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800763e:	e3c0      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007644:	e3bd      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007646:	4b6f      	ldr	r3, [pc, #444]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800764e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007650:	4b6c      	ldr	r3, [pc, #432]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b04      	cmp	r3, #4
 800765a:	d10c      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007662:	4b68      	ldr	r3, [pc, #416]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	08db      	lsrs	r3, r3, #3
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	4a66      	ldr	r2, [pc, #408]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800766e:	fa22 f303 	lsr.w	r3, r2, r3
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007674:	e01e      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007676:	4b63      	ldr	r3, [pc, #396]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d106      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800768a:	d102      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800768c:	4b5f      	ldr	r3, [pc, #380]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007690:	e010      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007692:	4b5c      	ldr	r3, [pc, #368]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076a8:	4b59      	ldr	r3, [pc, #356]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ac:	e002      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076b2:	e386      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076b4:	e385      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076b6:	4b57      	ldr	r3, [pc, #348]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ba:	e382      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076c0:	e37f      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80076c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80076ca:	430b      	orrs	r3, r1
 80076cc:	f040 80a7 	bne.w	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80076d0:	4b4c      	ldr	r3, [pc, #304]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80076d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076e0:	d055      	beq.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076e8:	f200 8096 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076f2:	f000 8084 	beq.w	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076fc:	f200 808c 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007706:	d030      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800770e:	f200 8083 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800771e:	d012      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007720:	e07a      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007722:	4b38      	ldr	r3, [pc, #224]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800772e:	d107      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fe0b 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773e:	e340      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e33d      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007746:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800774e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007752:	d107      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007754:	f107 0318 	add.w	r3, r7, #24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fb51 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007762:	e32e      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007768:	e32b      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007776:	d107      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fc93 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007786:	e31c      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778c:	e319      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800778e:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007796:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d10c      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077aa:	4b16      	ldr	r3, [pc, #88]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	08db      	lsrs	r3, r3, #3
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	4a14      	ldr	r2, [pc, #80]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077b6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077bc:	e01e      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077be:	4b11      	ldr	r3, [pc, #68]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d106      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80077cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d2:	d102      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077d4:	4b0d      	ldr	r3, [pc, #52]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d8:	e010      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077da:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077e6:	d106      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ee:	d102      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f4:	e002      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077fa:	e2e2      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077fc:	e2e1      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077fe:	4b05      	ldr	r3, [pc, #20]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007802:	e2de      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007804:	58024400 	.word	0x58024400
 8007808:	03d09000 	.word	0x03d09000
 800780c:	003d0900 	.word	0x003d0900
 8007810:	017d7840 	.word	0x017d7840
 8007814:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800781c:	e2d1      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800781e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007822:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007826:	430b      	orrs	r3, r1
 8007828:	f040 809c 	bne.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800782c:	4b93      	ldr	r3, [pc, #588]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800782e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007830:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800783c:	d054      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007844:	f200 808b 	bhi.w	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800784e:	f000 8083 	beq.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007858:	f200 8081 	bhi.w	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	d02f      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800786a:	d878      	bhi.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007878:	d012      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800787a:	e070      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800787c:	4b7f      	ldr	r3, [pc, #508]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800788a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fd5e 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007898:	e293      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800789e:	e290      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078a0:	4b76      	ldr	r3, [pc, #472]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ac:	d107      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ae:	f107 0318 	add.w	r3, r7, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 faa4 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078bc:	e281      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c2:	e27e      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078c4:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d0:	d107      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d2:	f107 030c 	add.w	r3, r7, #12
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fbe6 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e0:	e26f      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e6:	e26c      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078e8:	4b64      	ldr	r3, [pc, #400]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078f2:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d10c      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007904:	4b5d      	ldr	r3, [pc, #372]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	4a5c      	ldr	r2, [pc, #368]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007916:	e01e      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007918:	4b58      	ldr	r3, [pc, #352]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007924:	d106      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800792c:	d102      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800792e:	4b55      	ldr	r3, [pc, #340]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007932:	e010      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007934:	4b51      	ldr	r3, [pc, #324]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007940:	d106      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007948:	d102      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800794a:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794e:	e002      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007954:	e235      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007956:	e234      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007958:	4b4c      	ldr	r3, [pc, #304]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800795c:	e231      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007962:	e22e      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007968:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800796c:	430b      	orrs	r3, r1
 800796e:	f040 808f 	bne.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007972:	4b42      	ldr	r3, [pc, #264]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007976:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007982:	d06b      	beq.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800798a:	d874      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007992:	d056      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800799a:	d86c      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079a2:	d03b      	beq.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079aa:	d864      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b2:	d021      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ba:	d85c      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c8:	d004      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80079ca:	e054      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80079cc:	f7fe fa0c 	bl	8005de8 <HAL_RCC_GetPCLK1Freq>
 80079d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d2:	e1f6      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079d4:	4b29      	ldr	r3, [pc, #164]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e0:	d107      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e2:	f107 0318 	add.w	r3, r7, #24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fa0a 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f0:	e1e7      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f6:	e1e4      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079f8:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a04:	d107      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fb4c 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a14:	e1d5      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a1a:	e1d2      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a1c:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d109      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a28:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	08db      	lsrs	r3, r3, #3
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a3a:	e1c2      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a40:	e1bf      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a42:	4b0e      	ldr	r3, [pc, #56]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4e:	d102      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a54:	e1b5      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5a:	e1b2      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a5c:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a68:	d102      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007a6a:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a6e:	e1a8      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a74:	e1a5      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a7a:	e1a2      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a7c:	58024400 	.word	0x58024400
 8007a80:	03d09000 	.word	0x03d09000
 8007a84:	003d0900 	.word	0x003d0900
 8007a88:	017d7840 	.word	0x017d7840
 8007a8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a94:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	d173      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007a9c:	4b9c      	ldr	r3, [pc, #624]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007aa4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aac:	d02f      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab4:	d863      	bhi.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac2:	d012      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007ac4:	e05b      	b.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ac6:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad2:	d107      	bne.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad4:	f107 0318 	add.w	r3, r7, #24
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f991 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ae2:	e16e      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae8:	e16b      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007aea:	4b89      	ldr	r3, [pc, #548]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af6:	d107      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af8:	f107 030c 	add.w	r3, r7, #12
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fad3 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b06:	e15c      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0c:	e159      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b0e:	4b80      	ldr	r3, [pc, #512]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b18:	4b7d      	ldr	r3, [pc, #500]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d10c      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b2a:	4b79      	ldr	r3, [pc, #484]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	08db      	lsrs	r3, r3, #3
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	4a77      	ldr	r2, [pc, #476]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b3c:	e01e      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b3e:	4b74      	ldr	r3, [pc, #464]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4a:	d106      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b52:	d102      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b54:	4b70      	ldr	r3, [pc, #448]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b58:	e010      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b5a:	4b6d      	ldr	r3, [pc, #436]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b66:	d106      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b70:	4b6a      	ldr	r3, [pc, #424]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b74:	e002      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b7a:	e122      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b7c:	e121      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b82:	e11e      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b88:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	d133      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b90:	4b5f      	ldr	r3, [pc, #380]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d004      	beq.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba6:	d012      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007ba8:	e023      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007baa:	4b59      	ldr	r3, [pc, #356]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb6:	d107      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fbc7 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc6:	e0fc      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bcc:	e0f9      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bce:	4b50      	ldr	r3, [pc, #320]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bda:	d107      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bdc:	f107 0318 	add.w	r3, r7, #24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f90d 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bea:	e0ea      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf0:	e0e7      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf6:	e0e4      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bfc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007c00:	430b      	orrs	r3, r1
 8007c02:	f040 808d 	bne.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007c06:	4b42      	ldr	r3, [pc, #264]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c16:	d06b      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c1e:	d874      	bhi.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c26:	d056      	beq.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2e:	d86c      	bhi.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c36:	d03b      	beq.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c3e:	d864      	bhi.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c46:	d021      	beq.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c4e:	d85c      	bhi.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d004      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5c:	d004      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007c5e:	e054      	b.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007c60:	f000 f8b8 	bl	8007dd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c64:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c66:	e0ac      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c68:	4b29      	ldr	r3, [pc, #164]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c74:	d107      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c76:	f107 0318 	add.w	r3, r7, #24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f8c0 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c84:	e09d      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c8a:	e09a      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c98:	d107      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c9a:	f107 030c 	add.w	r3, r7, #12
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fa02 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca8:	e08b      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cae:	e088      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cb0:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d109      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cbc:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	08db      	lsrs	r3, r3, #3
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cce:	e078      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd4:	e075      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007cd6:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce2:	d102      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce8:	e06b      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cee:	e068      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cfc:	d102      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d02:	e05e      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d08:	e05b      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0e:	e058      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d10:	58024400 	.word	0x58024400
 8007d14:	03d09000 	.word	0x03d09000
 8007d18:	003d0900 	.word	0x003d0900
 8007d1c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	d148      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3c:	d02a      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d44:	d838      	bhi.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d52:	d00d      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007d54:	e030      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d56:	4b1d      	ldr	r3, [pc, #116]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007d64:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d68:	e02b      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d6e:	e028      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d70:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fae4 	bl	8008350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8c:	e019      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d92:	e016      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007da0:	d107      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da2:	f107 0318 	add.w	r3, r7, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f82a 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db0:	e007      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db6:	e004      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dbc:	e001      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3740      	adds	r7, #64	; 0x40
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	017d7840 	.word	0x017d7840

08007dd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007dd8:	f7fd ffd6 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	091b      	lsrs	r3, r3, #4
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	4904      	ldr	r1, [pc, #16]	; (8007dfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007dea:	5ccb      	ldrb	r3, [r1, r3]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	0800f730 	.word	0x0800f730

08007e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e08:	4ba1      	ldr	r3, [pc, #644]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007e12:	4b9f      	ldr	r3, [pc, #636]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	0b1b      	lsrs	r3, r3, #12
 8007e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e1e:	4b9c      	ldr	r3, [pc, #624]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007e2a:	4b99      	ldr	r3, [pc, #612]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	08db      	lsrs	r3, r3, #3
 8007e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8111 	beq.w	8008070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	f000 8083 	beq.w	8007f5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	f200 80a1 	bhi.w	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d056      	beq.n	8007f18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e6a:	e099      	b.n	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6c:	4b88      	ldr	r3, [pc, #544]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d02d      	beq.n	8007ed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e78:	4b85      	ldr	r3, [pc, #532]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	4a84      	ldr	r2, [pc, #528]	; (8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b7b      	ldr	r3, [pc, #492]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ed2:	e087      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800809c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	4b6a      	ldr	r3, [pc, #424]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f16:	e065      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2a:	4b59      	ldr	r3, [pc, #356]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f5a:	e043      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6e:	4b48      	ldr	r3, [pc, #288]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f9e:	e021      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb2:	4b37      	ldr	r3, [pc, #220]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	0a5b      	lsrs	r3, r3, #9
 8007fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800a:	ee17 2a90 	vmov	r2, s15
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008012:	4b1f      	ldr	r3, [pc, #124]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800802c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008038:	ee17 2a90 	vmov	r2, s15
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800805a:	edd7 6a07 	vldr	s13, [r7, #28]
 800805e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008066:	ee17 2a90 	vmov	r2, s15
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	609a      	str	r2, [r3, #8]
}
 8008082:	bf00      	nop
 8008084:	3724      	adds	r7, #36	; 0x24
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
 8008094:	03d09000 	.word	0x03d09000
 8008098:	46000000 	.word	0x46000000
 800809c:	4c742400 	.word	0x4c742400
 80080a0:	4a742400 	.word	0x4a742400
 80080a4:	4bbebc20 	.word	0x4bbebc20

080080a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	; 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080b0:	4ba1      	ldr	r3, [pc, #644]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80080ba:	4b9f      	ldr	r3, [pc, #636]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	0d1b      	lsrs	r3, r3, #20
 80080c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080c6:	4b9c      	ldr	r3, [pc, #624]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080d2:	4b99      	ldr	r3, [pc, #612]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	08db      	lsrs	r3, r3, #3
 80080d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8111 	beq.w	8008318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f000 8083 	beq.w	8008204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b02      	cmp	r3, #2
 8008102:	f200 80a1 	bhi.w	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d056      	beq.n	80081c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008112:	e099      	b.n	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008114:	4b88      	ldr	r3, [pc, #544]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d02d      	beq.n	800817c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008120:	4b85      	ldr	r3, [pc, #532]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	08db      	lsrs	r3, r3, #3
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	4a84      	ldr	r2, [pc, #528]	; (800833c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
 8008130:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814a:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815a:	ed97 6a03 	vldr	s12, [r7, #12]
 800815e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800817a:	e087      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b6a      	ldr	r3, [pc, #424]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081be:	e065      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b59      	ldr	r3, [pc, #356]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008202:	e043      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800834c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008216:	4b48      	ldr	r3, [pc, #288]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a03 	vldr	s12, [r7, #12]
 800822a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008246:	e021      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b37      	ldr	r3, [pc, #220]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	ed97 6a03 	vldr	s12, [r7, #12]
 800826e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800828c:	4b2a      	ldr	r3, [pc, #168]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	0a5b      	lsrs	r3, r3, #9
 8008292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b2:	ee17 2a90 	vmov	r2, s15
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80082ba:	4b1f      	ldr	r3, [pc, #124]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e0:	ee17 2a90 	vmov	r2, s15
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	0e1b      	lsrs	r3, r3, #24
 80082ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008302:	edd7 6a07 	vldr	s13, [r7, #28]
 8008306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830e:	ee17 2a90 	vmov	r2, s15
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008316:	e008      	b.n	800832a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	609a      	str	r2, [r3, #8]
}
 800832a:	bf00      	nop
 800832c:	3724      	adds	r7, #36	; 0x24
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	58024400 	.word	0x58024400
 800833c:	03d09000 	.word	0x03d09000
 8008340:	46000000 	.word	0x46000000
 8008344:	4c742400 	.word	0x4c742400
 8008348:	4a742400 	.word	0x4a742400
 800834c:	4bbebc20 	.word	0x4bbebc20

08008350 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008350:	b480      	push	{r7}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008358:	4ba0      	ldr	r3, [pc, #640]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008362:	4b9e      	ldr	r3, [pc, #632]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800836c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800836e:	4b9b      	ldr	r3, [pc, #620]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008378:	4b98      	ldr	r3, [pc, #608]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	08db      	lsrs	r3, r3, #3
 800837e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	fb02 f303 	mul.w	r3, r2, r3
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008390:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8111 	beq.w	80085be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	f000 8083 	beq.w	80084aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	f200 80a1 	bhi.w	80084ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d056      	beq.n	8008466 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80083b8:	e099      	b.n	80084ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ba:	4b88      	ldr	r3, [pc, #544]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d02d      	beq.n	8008422 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083c6:	4b85      	ldr	r3, [pc, #532]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	08db      	lsrs	r3, r3, #3
 80083cc:	f003 0303 	and.w	r3, r3, #3
 80083d0:	4a83      	ldr	r2, [pc, #524]	; (80085e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80083d2:	fa22 f303 	lsr.w	r3, r2, r3
 80083d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f0:	4b7a      	ldr	r3, [pc, #488]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008400:	ed97 6a03 	vldr	s12, [r7, #12]
 8008404:	eddf 5a77 	vldr	s11, [pc, #476]	; 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008420:	e087      	b.n	8008532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	ee07 3a90 	vmov	s15, r3
 8008428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80085e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008434:	4b69      	ldr	r3, [pc, #420]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843c:	ee07 3a90 	vmov	s15, r3
 8008440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008444:	ed97 6a03 	vldr	s12, [r7, #12]
 8008448:	eddf 5a66 	vldr	s11, [pc, #408]	; 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800844c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008460:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008464:	e065      	b.n	8008532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008470:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80085ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008478:	4b58      	ldr	r3, [pc, #352]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008488:	ed97 6a03 	vldr	s12, [r7, #12]
 800848c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a8:	e043      	b.n	8008532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	ee07 3a90 	vmov	s15, r3
 80084b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80085f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80084b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084bc:	4b47      	ldr	r3, [pc, #284]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ec:	e021      	b.n	8008532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80085e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80084fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008500:	4b36      	ldr	r3, [pc, #216]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008510:	ed97 6a03 	vldr	s12, [r7, #12]
 8008514:	eddf 5a33 	vldr	s11, [pc, #204]	; 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008530:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008532:	4b2a      	ldr	r3, [pc, #168]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	0a5b      	lsrs	r3, r3, #9
 8008538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800853c:	ee07 3a90 	vmov	s15, r3
 8008540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800854c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008558:	ee17 2a90 	vmov	r2, s15
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008560:	4b1e      	ldr	r3, [pc, #120]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800857a:	edd7 6a07 	vldr	s13, [r7, #28]
 800857e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008586:	ee17 2a90 	vmov	r2, s15
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800858e:	4b13      	ldr	r3, [pc, #76]	; (80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	0e1b      	lsrs	r3, r3, #24
 8008594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b4:	ee17 2a90 	vmov	r2, s15
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80085bc:	e008      	b.n	80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
}
 80085d0:	bf00      	nop
 80085d2:	3724      	adds	r7, #36	; 0x24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	58024400 	.word	0x58024400
 80085e0:	03d09000 	.word	0x03d09000
 80085e4:	46000000 	.word	0x46000000
 80085e8:	4c742400 	.word	0x4c742400
 80085ec:	4a742400 	.word	0x4a742400
 80085f0:	4bbebc20 	.word	0x4bbebc20

080085f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008602:	4b53      	ldr	r3, [pc, #332]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d101      	bne.n	8008612 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e099      	b.n	8008746 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008612:	4b4f      	ldr	r3, [pc, #316]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a4e      	ldr	r2, [pc, #312]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800861c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800861e:	f7f9 f89f 	bl	8001760 <HAL_GetTick>
 8008622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008624:	e008      	b.n	8008638 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008626:	f7f9 f89b 	bl	8001760 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e086      	b.n	8008746 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008638:	4b45      	ldr	r3, [pc, #276]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f0      	bne.n	8008626 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008644:	4b42      	ldr	r3, [pc, #264]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008648:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	031b      	lsls	r3, r3, #12
 8008652:	493f      	ldr	r1, [pc, #252]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008654:	4313      	orrs	r3, r2
 8008656:	628b      	str	r3, [r1, #40]	; 0x28
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	3b01      	subs	r3, #1
 800865e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	3b01      	subs	r3, #1
 8008668:	025b      	lsls	r3, r3, #9
 800866a:	b29b      	uxth	r3, r3
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	3b01      	subs	r3, #1
 8008674:	041b      	lsls	r3, r3, #16
 8008676:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	3b01      	subs	r3, #1
 8008682:	061b      	lsls	r3, r3, #24
 8008684:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008688:	4931      	ldr	r1, [pc, #196]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 800868a:	4313      	orrs	r3, r2
 800868c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800868e:	4b30      	ldr	r3, [pc, #192]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	492d      	ldr	r1, [pc, #180]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 800869c:	4313      	orrs	r3, r2
 800869e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80086a0:	4b2b      	ldr	r3, [pc, #172]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	f023 0220 	bic.w	r2, r3, #32
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	4928      	ldr	r1, [pc, #160]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80086b2:	4b27      	ldr	r3, [pc, #156]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	4a26      	ldr	r2, [pc, #152]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	f023 0310 	bic.w	r3, r3, #16
 80086bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086be:	4b24      	ldr	r3, [pc, #144]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c2:	4b24      	ldr	r3, [pc, #144]	; (8008754 <RCCEx_PLL2_Config+0x160>)
 80086c4:	4013      	ands	r3, r2
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	69d2      	ldr	r2, [r2, #28]
 80086ca:	00d2      	lsls	r2, r2, #3
 80086cc:	4920      	ldr	r1, [pc, #128]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80086d2:	4b1f      	ldr	r3, [pc, #124]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d6:	4a1e      	ldr	r2, [pc, #120]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086d8:	f043 0310 	orr.w	r3, r3, #16
 80086dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086e4:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	4a19      	ldr	r2, [pc, #100]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086f0:	e00f      	b.n	8008712 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d106      	bne.n	8008706 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086f8:	4b15      	ldr	r3, [pc, #84]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	4a14      	ldr	r2, [pc, #80]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 80086fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008704:	e005      	b.n	8008712 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008706:	4b12      	ldr	r3, [pc, #72]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	4a11      	ldr	r2, [pc, #68]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 800870c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008710:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008712:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a0e      	ldr	r2, [pc, #56]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 8008718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800871c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7f9 f81f 	bl	8001760 <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008724:	e008      	b.n	8008738 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008726:	f7f9 f81b 	bl	8001760 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e006      	b.n	8008746 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <RCCEx_PLL2_Config+0x15c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0f0      	beq.n	8008726 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	58024400 	.word	0x58024400
 8008754:	ffff0007 	.word	0xffff0007

08008758 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008766:	4b53      	ldr	r3, [pc, #332]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	2b03      	cmp	r3, #3
 8008770:	d101      	bne.n	8008776 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e099      	b.n	80088aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008776:	4b4f      	ldr	r3, [pc, #316]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a4e      	ldr	r2, [pc, #312]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800877c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008782:	f7f8 ffed 	bl	8001760 <HAL_GetTick>
 8008786:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008788:	e008      	b.n	800879c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800878a:	f7f8 ffe9 	bl	8001760 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e086      	b.n	80088aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800879c:	4b45      	ldr	r3, [pc, #276]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	051b      	lsls	r3, r3, #20
 80087b6:	493f      	ldr	r1, [pc, #252]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	628b      	str	r3, [r1, #40]	; 0x28
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	025b      	lsls	r3, r3, #9
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	431a      	orrs	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	061b      	lsls	r3, r3, #24
 80087e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087ec:	4931      	ldr	r1, [pc, #196]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087f2:	4b30      	ldr	r3, [pc, #192]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	492d      	ldr	r1, [pc, #180]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008800:	4313      	orrs	r3, r2
 8008802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008804:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	4928      	ldr	r1, [pc, #160]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008812:	4313      	orrs	r3, r2
 8008814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008816:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800881c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008822:	4b24      	ldr	r3, [pc, #144]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <RCCEx_PLL3_Config+0x160>)
 8008828:	4013      	ands	r3, r2
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	69d2      	ldr	r2, [r2, #28]
 800882e:	00d2      	lsls	r2, r2, #3
 8008830:	4920      	ldr	r1, [pc, #128]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008832:	4313      	orrs	r3, r2
 8008834:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008836:	4b1f      	ldr	r3, [pc, #124]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	4a1e      	ldr	r2, [pc, #120]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800883c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008848:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	4a19      	ldr	r2, [pc, #100]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800884e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008854:	e00f      	b.n	8008876 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d106      	bne.n	800886a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800885c:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008868:	e005      	b.n	8008876 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	4a11      	ldr	r2, [pc, #68]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008870:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a0e      	ldr	r2, [pc, #56]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800887c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008882:	f7f8 ff6d 	bl	8001760 <HAL_GetTick>
 8008886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008888:	e008      	b.n	800889c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800888a:	f7f8 ff69 	bl	8001760 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e006      	b.n	80088aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <RCCEx_PLL3_Config+0x15c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f0      	beq.n	800888a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	58024400 	.word	0x58024400
 80088b8:	ffff0007 	.word	0xffff0007

080088bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e075      	b.n	80089ba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7f8 fd19 	bl	8001318 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2204      	movs	r2, #4
 80088ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f868 	bl	80089c4 <HAL_SD_InitCard>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e05d      	b.n	80089ba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80088fe:	f107 0308 	add.w	r3, r7, #8
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fdb5 	bl	8009474 <HAL_SD_GetCardStatus>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e052      	b.n	80089ba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008914:	7e3b      	ldrb	r3, [r7, #24]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800891a:	7e7b      	ldrb	r3, [r7, #25]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	2b01      	cmp	r3, #1
 8008926:	d10a      	bne.n	800893e <HAL_SD_Init+0x82>
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	2b00      	cmp	r3, #0
 800892c:	d102      	bne.n	8008934 <HAL_SD_Init+0x78>
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d004      	beq.n	800893e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800893a:	659a      	str	r2, [r3, #88]	; 0x58
 800893c:	e00b      	b.n	8008956 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	2b01      	cmp	r3, #1
 8008944:	d104      	bne.n	8008950 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800894c:	659a      	str	r2, [r3, #88]	; 0x58
 800894e:	e002      	b.n	8008956 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fe73 	bl	8009648 <HAL_SD_ConfigWideBusOperation>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e026      	b.n	80089ba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800896c:	f7f8 fef8 	bl	8001760 <HAL_GetTick>
 8008970:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008972:	e011      	b.n	8008998 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008974:	f7f8 fef4 	bl	8001760 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d109      	bne.n	8008998 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800898a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e010      	b.n	80089ba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 ff67 	bl	800986c <HAL_SD_GetCardState>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d1e7      	bne.n	8008974 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3728      	adds	r7, #40	; 0x28
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b08d      	sub	sp, #52	; 0x34
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80089d8:	2300      	movs	r3, #0
 80089da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80089dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	f7fe fc76 	bl	80072d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80089e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d109      	bne.n	8008a04 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e070      	b.n	8008ae6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	4a39      	ldr	r2, [pc, #228]	; (8008af0 <HAL_SD_InitCard+0x12c>)
 8008a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0e:	091b      	lsrs	r3, r3, #4
 8008a10:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681c      	ldr	r4, [r3, #0]
 8008a16:	466a      	mov	r2, sp
 8008a18:	f107 0318 	add.w	r3, r7, #24
 8008a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a20:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f002 fbce 	bl	800b1cc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f002 fc11 	bl	800b25c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008a52:	4a28      	ldr	r2, [pc, #160]	; (8008af4 <HAL_SD_InitCard+0x130>)
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7f8 fe8b 	bl	8001778 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fff0 	bl	8009a48 <SD_PowerON>
 8008a68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e02e      	b.n	8008ae6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 ff0f 	bl	80098ac <SD_InitCard>
 8008a8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00b      	beq.n	8008aae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e01b      	b.n	8008ae6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f002 fc66 	bl	800b388 <SDMMC_CmdBlockLength>
 8008abc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00f      	beq.n	8008ae4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <HAL_SD_InitCard+0x134>)
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	372c      	adds	r7, #44	; 0x2c
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd90      	pop	{r4, r7, pc}
 8008aee:	bf00      	nop
 8008af0:	014f8b59 	.word	0x014f8b59
 8008af4:	00012110 	.word	0x00012110
 8008af8:	1fe00fff 	.word	0x1fe00fff

08008afc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b092      	sub	sp, #72	; 0x48
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b0a:	f7f8 fe29 	bl	8001760 <HAL_GetTick>
 8008b0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d107      	bne.n	8008b2e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e167      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	f040 815a 	bne.w	8008df0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	441a      	add	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d907      	bls.n	8008b60 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e14e      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2203      	movs	r2, #3
 8008b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d002      	beq.n	8008b7e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	025b      	lsls	r3, r3, #9
 8008b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b82:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	025b      	lsls	r3, r3, #9
 8008b88:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b8a:	2390      	movs	r3, #144	; 0x90
 8008b8c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f107 0214 	add.w	r2, r7, #20
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f002 fbc3 	bl	800b330 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d90a      	bls.n	8008bd6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f002 fc21 	bl	800b414 <SDMMC_CmdReadMultiBlock>
 8008bd2:	6478      	str	r0, [r7, #68]	; 0x44
 8008bd4:	e009      	b.n	8008bea <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008be2:	4618      	mov	r0, r3
 8008be4:	f002 fbf3 	bl	800b3ce <SDMMC_CmdReadSingleBlock>
 8008be8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d012      	beq.n	8008c16 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a84      	ldr	r2, [pc, #528]	; (8008e08 <HAL_SD_ReadBlocks+0x30c>)
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e0f3      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c1a:	e058      	b.n	8008cce <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d033      	beq.n	8008c92 <HAL_SD_ReadBlocks+0x196>
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2c:	2b1f      	cmp	r3, #31
 8008c2e:	d930      	bls.n	8008c92 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008c30:	2300      	movs	r3, #0
 8008c32:	643b      	str	r3, [r7, #64]	; 0x40
 8008c34:	e027      	b.n	8008c86 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 faf0 	bl	800b220 <SDMMC_ReadFIFO>
 8008c40:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	0a1b      	lsrs	r3, r3, #8
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	0c1b      	lsrs	r3, r3, #16
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	0e1b      	lsrs	r3, r3, #24
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c82:	3301      	adds	r3, #1
 8008c84:	643b      	str	r3, [r7, #64]	; 0x40
 8008c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c88:	2b07      	cmp	r3, #7
 8008c8a:	d9d4      	bls.n	8008c36 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8e:	3b20      	subs	r3, #32
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008c92:	f7f8 fd65 	bl	8001760 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d902      	bls.n	8008ca8 <HAL_SD_ReadBlocks+0x1ac>
 8008ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d112      	bne.n	8008cce <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a56      	ldr	r2, [pc, #344]	; (8008e08 <HAL_SD_ReadBlocks+0x30c>)
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e097      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d09f      	beq.n	8008c1c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cea:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d022      	beq.n	8008d40 <HAL_SD_ReadBlocks+0x244>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d91f      	bls.n	8008d40 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d01b      	beq.n	8008d40 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 fbeb 	bl	800b4e8 <SDMMC_CmdStopTransfer>
 8008d12:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d012      	beq.n	8008d40 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a3a      	ldr	r2, [pc, #232]	; (8008e08 <HAL_SD_ReadBlocks+0x30c>)
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e05e      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	f003 0308 	and.w	r3, r3, #8
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d012      	beq.n	8008d74 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a2d      	ldr	r2, [pc, #180]	; (8008e08 <HAL_SD_ReadBlocks+0x30c>)
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	f043 0208 	orr.w	r2, r3, #8
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e044      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d012      	beq.n	8008da8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a20      	ldr	r2, [pc, #128]	; (8008e08 <HAL_SD_ReadBlocks+0x30c>)
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e02a      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d012      	beq.n	8008ddc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <HAL_SD_ReadBlocks+0x30c>)
 8008dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	f043 0220 	orr.w	r2, r3, #32
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e010      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <HAL_SD_ReadBlocks+0x310>)
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e006      	b.n	8008dfe <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
  }
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3748      	adds	r7, #72	; 0x48
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	1fe00fff 	.word	0x1fe00fff
 8008e0c:	18000f3a 	.word	0x18000f3a

08008e10 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b092      	sub	sp, #72	; 0x48
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e1e:	f7f8 fc9f 	bl	8001760 <HAL_GetTick>
 8008e22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d107      	bne.n	8008e42 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e16b      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	f040 815e 	bne.w	800910c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d907      	bls.n	8008e74 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e152      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2203      	movs	r2, #3
 8008e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2200      	movs	r2, #0
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d002      	beq.n	8008e92 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	025b      	lsls	r3, r3, #9
 8008e90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295
 8008e96:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	025b      	lsls	r3, r3, #9
 8008e9c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e9e:	2390      	movs	r3, #144	; 0x90
 8008ea0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f107 0218 	add.w	r2, r7, #24
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f002 fa39 	bl	800b330 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ecc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d90a      	bls.n	8008eea <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 fadd 	bl	800b4a0 <SDMMC_CmdWriteMultiBlock>
 8008ee6:	6478      	str	r0, [r7, #68]	; 0x44
 8008ee8:	e009      	b.n	8008efe <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2210      	movs	r2, #16
 8008eee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f002 faaf 	bl	800b45a <SDMMC_CmdWriteSingleBlock>
 8008efc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d012      	beq.n	8008f2a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a86      	ldr	r2, [pc, #536]	; (8009124 <HAL_SD_WriteBlocks+0x314>)
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f12:	431a      	orrs	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e0f7      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008f2e:	e05c      	b.n	8008fea <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d037      	beq.n	8008fae <HAL_SD_WriteBlocks+0x19e>
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	2b1f      	cmp	r3, #31
 8008f42:	d934      	bls.n	8008fae <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008f44:	2300      	movs	r3, #0
 8008f46:	643b      	str	r3, [r7, #64]	; 0x40
 8008f48:	e02b      	b.n	8008fa2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f52:	3301      	adds	r3, #1
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	021a      	lsls	r2, r3, #8
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f64:	3301      	adds	r3, #1
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	041a      	lsls	r2, r3, #16
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f76:	3301      	adds	r3, #1
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	061a      	lsls	r2, r3, #24
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	3301      	adds	r3, #1
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f107 0214 	add.w	r2, r7, #20
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 f94f 	bl	800b23a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa4:	2b07      	cmp	r3, #7
 8008fa6:	d9d0      	bls.n	8008f4a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008faa:	3b20      	subs	r3, #32
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008fae:	f7f8 fbd7 	bl	8001760 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d902      	bls.n	8008fc4 <HAL_SD_WriteBlocks+0x1b4>
 8008fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d112      	bne.n	8008fea <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a56      	ldr	r2, [pc, #344]	; (8009124 <HAL_SD_WriteBlocks+0x314>)
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e097      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d09b      	beq.n	8008f30 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009006:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009012:	2b00      	cmp	r3, #0
 8009014:	d022      	beq.n	800905c <HAL_SD_WriteBlocks+0x24c>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d91f      	bls.n	800905c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	2b03      	cmp	r3, #3
 8009022:	d01b      	beq.n	800905c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f002 fa5d 	bl	800b4e8 <SDMMC_CmdStopTransfer>
 800902e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009032:	2b00      	cmp	r3, #0
 8009034:	d012      	beq.n	800905c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a3a      	ldr	r2, [pc, #232]	; (8009124 <HAL_SD_WriteBlocks+0x314>)
 800903c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009044:	431a      	orrs	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e05e      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d012      	beq.n	8009090 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a2d      	ldr	r2, [pc, #180]	; (8009124 <HAL_SD_WriteBlocks+0x314>)
 8009070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009076:	f043 0208 	orr.w	r2, r3, #8
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e044      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d012      	beq.n	80090c4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a20      	ldr	r2, [pc, #128]	; (8009124 <HAL_SD_WriteBlocks+0x314>)
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	f043 0202 	orr.w	r2, r3, #2
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e02a      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ca:	f003 0310 	and.w	r3, r3, #16
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d012      	beq.n	80090f8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a13      	ldr	r2, [pc, #76]	; (8009124 <HAL_SD_WriteBlocks+0x314>)
 80090d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	f043 0210 	orr.w	r2, r3, #16
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e010      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a0a      	ldr	r2, [pc, #40]	; (8009128 <HAL_SD_WriteBlocks+0x318>)
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	e006      	b.n	800911a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009110:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
  }
}
 800911a:	4618      	mov	r0, r3
 800911c:	3748      	adds	r7, #72	; 0x48
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	1fe00fff 	.word	0x1fe00fff
 8009128:	18000f3a 	.word	0x18000f3a

0800912c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913a:	0f9b      	lsrs	r3, r3, #30
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009146:	0e9b      	lsrs	r3, r3, #26
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009158:	0e1b      	lsrs	r3, r3, #24
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800916a:	0c1b      	lsrs	r3, r3, #16
 800916c:	b2da      	uxtb	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009176:	0a1b      	lsrs	r3, r3, #8
 8009178:	b2da      	uxtb	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800918c:	0d1b      	lsrs	r3, r3, #20
 800918e:	b29a      	uxth	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009198:	0c1b      	lsrs	r3, r3, #16
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091aa:	0bdb      	lsrs	r3, r3, #15
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091bc:	0b9b      	lsrs	r3, r3, #14
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ce:	0b5b      	lsrs	r3, r3, #13
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e0:	0b1b      	lsrs	r3, r3, #12
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d163      	bne.n	80092c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009200:	009a      	lsls	r2, r3, #2
 8009202:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009206:	4013      	ands	r3, r2
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800920c:	0f92      	lsrs	r2, r2, #30
 800920e:	431a      	orrs	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009218:	0edb      	lsrs	r3, r3, #27
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	b2da      	uxtb	r2, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800922a:	0e1b      	lsrs	r3, r3, #24
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	b2da      	uxtb	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800923c:	0d5b      	lsrs	r3, r3, #21
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	b2da      	uxtb	r2, r3
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800924e:	0c9b      	lsrs	r3, r3, #18
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	b2da      	uxtb	r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009260:	0bdb      	lsrs	r3, r3, #15
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	b2da      	uxtb	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	7e1b      	ldrb	r3, [r3, #24]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	3302      	adds	r3, #2
 8009284:	2201      	movs	r2, #1
 8009286:	fa02 f303 	lsl.w	r3, r2, r3
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800928e:	fb03 f202 	mul.w	r2, r3, r2
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	7a1b      	ldrb	r3, [r3, #8]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	2201      	movs	r2, #1
 80092a2:	409a      	lsls	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80092b0:	0a52      	lsrs	r2, r2, #9
 80092b2:	fb03 f202 	mul.w	r2, r3, r2
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092c0:	655a      	str	r2, [r3, #84]	; 0x54
 80092c2:	e031      	b.n	8009328 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d11d      	bne.n	8009308 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	431a      	orrs	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	3301      	adds	r3, #1
 80092e8:	029a      	lsls	r2, r3, #10
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	655a      	str	r2, [r3, #84]	; 0x54
 8009306:	e00f      	b.n	8009328 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a58      	ldr	r2, [pc, #352]	; (8009470 <HAL_SD_GetCardCSD+0x344>)
 800930e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e09d      	b.n	8009464 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800932c:	0b9b      	lsrs	r3, r3, #14
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	b2da      	uxtb	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800933e:	09db      	lsrs	r3, r3, #7
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009346:	b2da      	uxtb	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009360:	0fdb      	lsrs	r3, r3, #31
 8009362:	b2da      	uxtb	r2, r3
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800936c:	0f5b      	lsrs	r3, r3, #29
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f003 0303 	and.w	r3, r3, #3
 8009374:	b2da      	uxtb	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937e:	0e9b      	lsrs	r3, r3, #26
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	b2da      	uxtb	r2, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009390:	0d9b      	lsrs	r3, r3, #22
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	b2da      	uxtb	r2, r3
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a2:	0d5b      	lsrs	r3, r3, #21
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d2:	0bdb      	lsrs	r3, r3, #15
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e6:	0b9b      	lsrs	r3, r3, #14
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fa:	0b5b      	lsrs	r3, r3, #13
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940e:	0b1b      	lsrs	r3, r3, #12
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	b2da      	uxtb	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009422:	0a9b      	lsrs	r3, r3, #10
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	b2da      	uxtb	r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	b2db      	uxtb	r3, r3
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	b2da      	uxtb	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009452:	b2da      	uxtb	r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	1fe00fff 	.word	0x1fe00fff

08009474 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b094      	sub	sp, #80	; 0x50
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b03      	cmp	r3, #3
 800948e:	d101      	bne.n	8009494 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0a7      	b.n	80095e4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009494:	f107 0308 	add.w	r3, r7, #8
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fb62 	bl	8009b64 <SD_SendSDStatus>
 80094a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80094a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d011      	beq.n	80094cc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a4f      	ldr	r2, [pc, #316]	; (80095ec <HAL_SD_GetCardStatus+0x178>)
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80094ca:	e070      	b.n	80095ae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	099b      	lsrs	r3, r3, #6
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	0e1b      	lsrs	r3, r3, #24
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4313      	orrs	r3, r2
 8009500:	b29a      	uxth	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	061a      	lsls	r2, r3, #24
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009512:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800951c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	b2da      	uxtb	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	0d1b      	lsrs	r3, r3, #20
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	b2da      	uxtb	r2, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	0c1b      	lsrs	r3, r3, #16
 800954e:	b29b      	uxth	r3, r3
 8009550:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009554:	b29a      	uxth	r2, r3
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	b29b      	uxth	r3, r3
 800955a:	b2db      	uxtb	r3, r3
 800955c:	b29b      	uxth	r3, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	b29a      	uxth	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	0a9b      	lsrs	r3, r3, #10
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009570:	b2da      	uxtb	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	0a1b      	lsrs	r3, r3, #8
 800957a:	b2db      	uxtb	r3, r3
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	b2da      	uxtb	r2, r3
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	091b      	lsrs	r3, r3, #4
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	b2da      	uxtb	r2, r3
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 030f 	and.w	r3, r3, #15
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	0e1b      	lsrs	r3, r3, #24
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fee6 	bl	800b388 <SDMMC_CmdBlockLength>
 80095bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00d      	beq.n	80095e0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a08      	ldr	r2, [pc, #32]	; (80095ec <HAL_SD_GetCardStatus+0x178>)
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80095e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3750      	adds	r7, #80	; 0x50
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	1fe00fff 	.word	0x1fe00fff

080095f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b08d      	sub	sp, #52	; 0x34
 800964c:	af02      	add	r7, sp, #8
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2203      	movs	r2, #3
 800965c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	2b03      	cmp	r3, #3
 8009666:	d02e      	beq.n	80096c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966e:	d106      	bne.n	800967e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	635a      	str	r2, [r3, #52]	; 0x34
 800967c:	e029      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009684:	d10a      	bne.n	800969c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fb64 	bl	8009d54 <SD_WideBus_Enable>
 800968c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	635a      	str	r2, [r3, #52]	; 0x34
 800969a:	e01a      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fba1 	bl	8009dea <SD_WideBus_Disable>
 80096a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	635a      	str	r2, [r3, #52]	; 0x34
 80096b6:	e00c      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	635a      	str	r2, [r3, #52]	; 0x34
 80096c4:	e005      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a5f      	ldr	r2, [pc, #380]	; (800985c <HAL_SD_ConfigWideBusOperation+0x214>)
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096e8:	e096      	b.n	8009818 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80096ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80096ee:	f04f 0100 	mov.w	r1, #0
 80096f2:	f7fd fdef 	bl	80072d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80096f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8083 	beq.w	8009806 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695a      	ldr	r2, [r3, #20]
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4950      	ldr	r1, [pc, #320]	; (8009860 <HAL_SD_ConfigWideBusOperation+0x218>)
 800971e:	fba1 1303 	umull	r1, r3, r1, r3
 8009722:	0e1b      	lsrs	r3, r3, #24
 8009724:	429a      	cmp	r2, r3
 8009726:	d303      	bcc.n	8009730 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	e05a      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009738:	d103      	bne.n	8009742 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	e051      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974a:	d126      	bne.n	800979a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10e      	bne.n	8009772 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4a43      	ldr	r2, [pc, #268]	; (8009864 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d906      	bls.n	800976a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4a40      	ldr	r2, [pc, #256]	; (8009860 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009760:	fba2 2303 	umull	r2, r3, r2, r3
 8009764:	0e5b      	lsrs	r3, r3, #25
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	e03d      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	e039      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	69fa      	ldr	r2, [r7, #28]
 800977a:	fbb2 f3f3 	udiv	r3, r2, r3
 800977e:	4a39      	ldr	r2, [pc, #228]	; (8009864 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d906      	bls.n	8009792 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4a36      	ldr	r2, [pc, #216]	; (8009860 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009788:	fba2 2303 	umull	r2, r3, r2, r3
 800978c:	0e5b      	lsrs	r3, r3, #25
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	e029      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	e025      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10e      	bne.n	80097c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4a30      	ldr	r2, [pc, #192]	; (8009868 <HAL_SD_ConfigWideBusOperation+0x220>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d906      	bls.n	80097b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	4a2c      	ldr	r2, [pc, #176]	; (8009860 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097ae:	fba2 2303 	umull	r2, r3, r2, r3
 80097b2:	0e1b      	lsrs	r3, r3, #24
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	e016      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	e012      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097cc:	4a26      	ldr	r2, [pc, #152]	; (8009868 <HAL_SD_ConfigWideBusOperation+0x220>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d906      	bls.n	80097e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4a22      	ldr	r2, [pc, #136]	; (8009860 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3
 80097da:	0e1b      	lsrs	r3, r3, #24
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e002      	b.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681c      	ldr	r4, [r3, #0]
 80097ea:	466a      	mov	r2, sp
 80097ec:	f107 0314 	add.w	r3, r7, #20
 80097f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80097f8:	f107 0308 	add.w	r3, r7, #8
 80097fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097fe:	4620      	mov	r0, r4
 8009800:	f001 fce4 	bl	800b1cc <SDMMC_Init>
 8009804:	e008      	b.n	8009818 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009820:	4618      	mov	r0, r3
 8009822:	f001 fdb1 	bl	800b388 <SDMMC_CmdBlockLength>
 8009826:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00c      	beq.n	8009848 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a0a      	ldr	r2, [pc, #40]	; (800985c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009854:	4618      	mov	r0, r3
 8009856:	372c      	adds	r7, #44	; 0x2c
 8009858:	46bd      	mov	sp, r7
 800985a:	bd90      	pop	{r4, r7, pc}
 800985c:	1fe00fff 	.word	0x1fe00fff
 8009860:	55e63b89 	.word	0x55e63b89
 8009864:	02faf080 	.word	0x02faf080
 8009868:	017d7840 	.word	0x017d7840

0800986c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa40 	bl	8009d04 <SD_SendStatus>
 8009884:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	0a5b      	lsrs	r3, r3, #9
 800989c:	f003 030f 	and.w	r3, r3, #15
 80098a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80098a2:	693b      	ldr	r3, [r7, #16]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b090      	sub	sp, #64	; 0x40
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80098b8:	f7f7 ff52 	bl	8001760 <HAL_GetTick>
 80098bc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 fcdb 	bl	800b27e <SDMMC_GetPowerState>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80098d2:	e0b5      	b.n	8009a40 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d02e      	beq.n	800993a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 ff26 	bl	800b732 <SDMMC_CmdSendCID>
 80098e6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <SD_InitCard+0x46>
    {
      return errorstate;
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	e0a6      	b.n	8009a40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2100      	movs	r1, #0
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 fd06 	bl	800b30a <SDMMC_GetResponse>
 80098fe:	4602      	mov	r2, r0
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2104      	movs	r1, #4
 800990a:	4618      	mov	r0, r3
 800990c:	f001 fcfd 	bl	800b30a <SDMMC_GetResponse>
 8009910:	4602      	mov	r2, r0
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2108      	movs	r1, #8
 800991c:	4618      	mov	r0, r3
 800991e:	f001 fcf4 	bl	800b30a <SDMMC_GetResponse>
 8009922:	4602      	mov	r2, r0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	210c      	movs	r1, #12
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fceb 	bl	800b30a <SDMMC_GetResponse>
 8009934:	4602      	mov	r2, r0
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	2b03      	cmp	r3, #3
 8009940:	d01d      	beq.n	800997e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009942:	e019      	b.n	8009978 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f107 020a 	add.w	r2, r7, #10
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f001 ff2e 	bl	800b7b0 <SDMMC_CmdSetRelAdd>
 8009954:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <SD_InitCard+0xb4>
      {
        return errorstate;
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	e06f      	b.n	8009a40 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009960:	f7f7 fefe 	bl	8001760 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	f241 3287 	movw	r2, #4999	; 0x1387
 800996e:	4293      	cmp	r3, r2
 8009970:	d902      	bls.n	8009978 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009972:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009976:	e063      	b.n	8009a40 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009978:	897b      	ldrh	r3, [r7, #10]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0e2      	beq.n	8009944 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	2b03      	cmp	r3, #3
 8009984:	d036      	beq.n	80099f4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009986:	897b      	ldrh	r3, [r7, #10]
 8009988:	461a      	mov	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	041b      	lsls	r3, r3, #16
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f001 fee8 	bl	800b770 <SDMMC_CmdSendCSD>
 80099a0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <SD_InitCard+0x100>
    {
      return errorstate;
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	e049      	b.n	8009a40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 fca9 	bl	800b30a <SDMMC_GetResponse>
 80099b8:	4602      	mov	r2, r0
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2104      	movs	r1, #4
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 fca0 	bl	800b30a <SDMMC_GetResponse>
 80099ca:	4602      	mov	r2, r0
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2108      	movs	r1, #8
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fc97 	bl	800b30a <SDMMC_GetResponse>
 80099dc:	4602      	mov	r2, r0
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	210c      	movs	r1, #12
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 fc8e 	bl	800b30a <SDMMC_GetResponse>
 80099ee:	4602      	mov	r2, r0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2104      	movs	r1, #4
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 fc85 	bl	800b30a <SDMMC_GetResponse>
 8009a00:	4603      	mov	r3, r0
 8009a02:	0d1a      	lsrs	r2, r3, #20
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a08:	f107 030c 	add.w	r3, r7, #12
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff fb8c 	bl	800912c <HAL_SD_GetCardCSD>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a1e:	e00f      	b.n	8009a40 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a28:	041b      	lsls	r3, r3, #16
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f001 fd97 	bl	800b560 <SDMMC_CmdSelDesel>
 8009a32:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <SD_InitCard+0x192>
  {
    return errorstate;
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3c:	e000      	b.n	8009a40 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3740      	adds	r7, #64	; 0x40
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 fda0 	bl	800b5a6 <SDMMC_CmdGoIdleState>
 8009a66:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	e072      	b.n	8009b58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 fdb3 	bl	800b5e2 <SDMMC_CmdOperCond>
 8009a7c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a84:	d10d      	bne.n	8009aa2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 fd88 	bl	800b5a6 <SDMMC_CmdGoIdleState>
 8009a96:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	e05a      	b.n	8009b58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d137      	bne.n	8009b20 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 fdb3 	bl	800b622 <SDMMC_CmdAppCommand>
 8009abc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d02d      	beq.n	8009b20 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ac8:	e046      	b.n	8009b58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 fda6 	bl	800b622 <SDMMC_CmdAppCommand>
 8009ad6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	e03a      	b.n	8009b58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	491e      	ldr	r1, [pc, #120]	; (8009b60 <SD_PowerON+0x118>)
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 fdbd 	bl	800b668 <SDMMC_CmdAppOperCommand>
 8009aee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009afa:	e02d      	b.n	8009b58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fc01 	bl	800b30a <SDMMC_GetResponse>
 8009b08:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	0fdb      	lsrs	r3, r3, #31
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <SD_PowerON+0xce>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <SD_PowerON+0xd0>
 8009b16:	2300      	movs	r3, #0
 8009b18:	613b      	str	r3, [r7, #16]

    count++;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d802      	bhi.n	8009b30 <SD_PowerON+0xe8>
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0cc      	beq.n	8009aca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d902      	bls.n	8009b40 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b3e:	e00b      	b.n	8009b58 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	c1100000 	.word	0xc1100000

08009b64 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08c      	sub	sp, #48	; 0x30
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b6e:	f7f7 fdf7 	bl	8001760 <HAL_GetTick>
 8009b72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 fbc3 	bl	800b30a <SDMMC_GetResponse>
 8009b84:	4603      	mov	r3, r0
 8009b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b8e:	d102      	bne.n	8009b96 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b94:	e0b0      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2140      	movs	r1, #64	; 0x40
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fbf3 	bl	800b388 <SDMMC_CmdBlockLength>
 8009ba2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	e0a0      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f001 fd2d 	bl	800b622 <SDMMC_CmdAppCommand>
 8009bc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d005      	beq.n	8009bdc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	e08d      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009be0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009be2:	2340      	movs	r3, #64	; 0x40
 8009be4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009be6:	2360      	movs	r3, #96	; 0x60
 8009be8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bea:	2302      	movs	r3, #2
 8009bec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f107 0208 	add.w	r2, r7, #8
 8009bfe:	4611      	mov	r1, r2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 fb95 	bl	800b330 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 fe15 	bl	800b83a <SDMMC_CmdStatusRegister>
 8009c10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d02b      	beq.n	8009c70 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	e069      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d013      	beq.n	8009c5a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009c32:	2300      	movs	r3, #0
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c36:	e00d      	b.n	8009c54 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 faef 	bl	800b220 <SDMMC_ReadFIFO>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	601a      	str	r2, [r3, #0]
        pData++;
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	3301      	adds	r3, #1
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	2b07      	cmp	r3, #7
 8009c58:	d9ee      	bls.n	8009c38 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c5a:	f7f7 fd81 	bl	8001760 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c68:	d102      	bne.n	8009c70 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c6e:	e043      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c76:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0d2      	beq.n	8009c24 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c84:	f003 0308 	and.w	r3, r3, #8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c8c:	2308      	movs	r3, #8
 8009c8e:	e033      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e02a      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d017      	beq.n	8009ce0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	e021      	b.n	8009cf8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fab1 	bl	800b220 <SDMMC_ReadFIFO>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	601a      	str	r2, [r3, #0]
    pData++;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cca:	f7f7 fd49 	bl	8001760 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd8:	d102      	bne.n	8009ce0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cde:	e00b      	b.n	8009cf8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e2      	bne.n	8009cb4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a03      	ldr	r2, [pc, #12]	; (8009d00 <SD_SendSDStatus+0x19c>)
 8009cf4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3730      	adds	r7, #48	; 0x30
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	18000f3a 	.word	0x18000f3a

08009d04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d102      	bne.n	8009d1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d18:	e018      	b.n	8009d4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	4619      	mov	r1, r3
 8009d26:	4610      	mov	r0, r2
 8009d28:	f001 fd64 	bl	800b7f4 <SDMMC_CmdSendStatus>
 8009d2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	e009      	b.n	8009d4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 fae3 	bl	800b30a <SDMMC_GetResponse>
 8009d44:	4602      	mov	r2, r0
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 facd 	bl	800b30a <SDMMC_GetResponse>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d7a:	d102      	bne.n	8009d82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d80:	e02f      	b.n	8009de2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d82:	f107 030c 	add.w	r3, r7, #12
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f879 	bl	8009e80 <SD_FindSCR>
 8009d8e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	e023      	b.n	8009de2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d01c      	beq.n	8009dde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dac:	041b      	lsls	r3, r3, #16
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f001 fc36 	bl	800b622 <SDMMC_CmdAppCommand>
 8009db6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	e00f      	b.n	8009de2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 fc6d 	bl	800b6a8 <SDMMC_CmdBusWidth>
 8009dce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	e003      	b.n	8009de2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e001      	b.n	8009de2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	2300      	movs	r3, #0
 8009df8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 fa82 	bl	800b30a <SDMMC_GetResponse>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e10:	d102      	bne.n	8009e18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e16:	e02f      	b.n	8009e78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e18:	f107 030c 	add.w	r3, r7, #12
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f82e 	bl	8009e80 <SD_FindSCR>
 8009e24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	e023      	b.n	8009e78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01c      	beq.n	8009e74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f001 fbeb 	bl	800b622 <SDMMC_CmdAppCommand>
 8009e4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	e00f      	b.n	8009e78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 fc22 	bl	800b6a8 <SDMMC_CmdBusWidth>
 8009e64:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	e003      	b.n	8009e78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	e001      	b.n	8009e78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08e      	sub	sp, #56	; 0x38
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e8a:	f7f7 fc69 	bl	8001760 <HAL_GetTick>
 8009e8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009e94:	2300      	movs	r3, #0
 8009e96:	60bb      	str	r3, [r7, #8]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2108      	movs	r1, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fa6e 	bl	800b388 <SDMMC_CmdBlockLength>
 8009eac:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	e0ad      	b.n	800a014 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec0:	041b      	lsls	r3, r3, #16
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f001 fbac 	bl	800b622 <SDMMC_CmdAppCommand>
 8009eca:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	e09e      	b.n	800a014 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009edc:	2308      	movs	r3, #8
 8009ede:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009ee0:	2330      	movs	r3, #48	; 0x30
 8009ee2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f107 0210 	add.w	r2, r7, #16
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 fa18 	bl	800b330 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 fbf2 	bl	800b6ee <SDMMC_CmdSendSCR>
 8009f0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d027      	beq.n	8009f62 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	e07e      	b.n	800a014 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d113      	bne.n	8009f4c <SD_FindSCR+0xcc>
 8009f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d110      	bne.n	8009f4c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 f976 	bl	800b220 <SDMMC_ReadFIFO>
 8009f34:	4603      	mov	r3, r0
 8009f36:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 f96f 	bl	800b220 <SDMMC_ReadFIFO>
 8009f42:	4603      	mov	r3, r0
 8009f44:	60fb      	str	r3, [r7, #12]
      index++;
 8009f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f48:	3301      	adds	r3, #1
 8009f4a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f4c:	f7f7 fc08 	bl	8001760 <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5a:	d102      	bne.n	8009f62 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f60:	e058      	b.n	800a014 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f68:	f240 532a 	movw	r3, #1322	; 0x52a
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0d1      	beq.n	8009f16 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	f003 0308 	and.w	r3, r3, #8
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2208      	movs	r2, #8
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f88:	2308      	movs	r3, #8
 8009f8a:	e043      	b.n	800a014 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e036      	b.n	800a014 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009fbc:	2320      	movs	r3, #32
 8009fbe:	e029      	b.n	800a014 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a15      	ldr	r2, [pc, #84]	; (800a01c <SD_FindSCR+0x19c>)
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	061a      	lsls	r2, r3, #24
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	021b      	lsls	r3, r3, #8
 8009fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fd4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	0a1b      	lsrs	r3, r3, #8
 8009fda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fde:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	0e1b      	lsrs	r3, r3, #24
 8009fe4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	601a      	str	r2, [r3, #0]
    scr++;
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	3304      	adds	r3, #4
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	061a      	lsls	r2, r3, #24
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	021b      	lsls	r3, r3, #8
 8009ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ffc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	0a1b      	lsrs	r3, r3, #8
 800a002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a006:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	0e1b      	lsrs	r3, r3, #24
 800a00c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3738      	adds	r7, #56	; 0x38
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	18000f3a 	.word	0x18000f3a

0800a020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e042      	b.n	800a0b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d106      	bne.n	800a04a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7f7 fa07 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2224      	movs	r2, #36	; 0x24
 800a04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0201 	bic.w	r2, r2, #1
 800a060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f82c 	bl	800a0c0 <UART_SetConfig>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e022      	b.n	800a0b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fd88 	bl	800ab90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a08e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a09e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0201 	orr.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fe0f 	bl	800acd4 <UART_CheckIdleState>
 800a0b6:	4603      	mov	r3, r0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c4:	b092      	sub	sp, #72	; 0x48
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	4bbe      	ldr	r3, [pc, #760]	; (800a3e8 <UART_SetConfig+0x328>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	6812      	ldr	r2, [r2, #0]
 800a0f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4ab3      	ldr	r2, [pc, #716]	; (800a3ec <UART_SetConfig+0x32c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d004      	beq.n	800a12c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a128:	4313      	orrs	r3, r2
 800a12a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689a      	ldr	r2, [r3, #8]
 800a132:	4baf      	ldr	r3, [pc, #700]	; (800a3f0 <UART_SetConfig+0x330>)
 800a134:	4013      	ands	r3, r2
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	6812      	ldr	r2, [r2, #0]
 800a13a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a13c:	430b      	orrs	r3, r1
 800a13e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	f023 010f 	bic.w	r1, r3, #15
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4aa6      	ldr	r2, [pc, #664]	; (800a3f4 <UART_SetConfig+0x334>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d177      	bne.n	800a250 <UART_SetConfig+0x190>
 800a160:	4ba5      	ldr	r3, [pc, #660]	; (800a3f8 <UART_SetConfig+0x338>)
 800a162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a168:	2b28      	cmp	r3, #40	; 0x28
 800a16a:	d86d      	bhi.n	800a248 <UART_SetConfig+0x188>
 800a16c:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0xb4>)
 800a16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a172:	bf00      	nop
 800a174:	0800a219 	.word	0x0800a219
 800a178:	0800a249 	.word	0x0800a249
 800a17c:	0800a249 	.word	0x0800a249
 800a180:	0800a249 	.word	0x0800a249
 800a184:	0800a249 	.word	0x0800a249
 800a188:	0800a249 	.word	0x0800a249
 800a18c:	0800a249 	.word	0x0800a249
 800a190:	0800a249 	.word	0x0800a249
 800a194:	0800a221 	.word	0x0800a221
 800a198:	0800a249 	.word	0x0800a249
 800a19c:	0800a249 	.word	0x0800a249
 800a1a0:	0800a249 	.word	0x0800a249
 800a1a4:	0800a249 	.word	0x0800a249
 800a1a8:	0800a249 	.word	0x0800a249
 800a1ac:	0800a249 	.word	0x0800a249
 800a1b0:	0800a249 	.word	0x0800a249
 800a1b4:	0800a229 	.word	0x0800a229
 800a1b8:	0800a249 	.word	0x0800a249
 800a1bc:	0800a249 	.word	0x0800a249
 800a1c0:	0800a249 	.word	0x0800a249
 800a1c4:	0800a249 	.word	0x0800a249
 800a1c8:	0800a249 	.word	0x0800a249
 800a1cc:	0800a249 	.word	0x0800a249
 800a1d0:	0800a249 	.word	0x0800a249
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a249 	.word	0x0800a249
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a249 	.word	0x0800a249
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	0800a249 	.word	0x0800a249
 800a1f0:	0800a249 	.word	0x0800a249
 800a1f4:	0800a239 	.word	0x0800a239
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a249 	.word	0x0800a249
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a249 	.word	0x0800a249
 800a208:	0800a249 	.word	0x0800a249
 800a20c:	0800a249 	.word	0x0800a249
 800a210:	0800a249 	.word	0x0800a249
 800a214:	0800a241 	.word	0x0800a241
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21e:	e222      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a220:	2304      	movs	r3, #4
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a226:	e21e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a228:	2308      	movs	r3, #8
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22e:	e21a      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a230:	2310      	movs	r3, #16
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a236:	e216      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a238:	2320      	movs	r3, #32
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23e:	e212      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a246:	e20e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a248:	2380      	movs	r3, #128	; 0x80
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24e:	e20a      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a69      	ldr	r2, [pc, #420]	; (800a3fc <UART_SetConfig+0x33c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d130      	bne.n	800a2bc <UART_SetConfig+0x1fc>
 800a25a:	4b67      	ldr	r3, [pc, #412]	; (800a3f8 <UART_SetConfig+0x338>)
 800a25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b05      	cmp	r3, #5
 800a264:	d826      	bhi.n	800a2b4 <UART_SetConfig+0x1f4>
 800a266:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <UART_SetConfig+0x1ac>)
 800a268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26c:	0800a285 	.word	0x0800a285
 800a270:	0800a28d 	.word	0x0800a28d
 800a274:	0800a295 	.word	0x0800a295
 800a278:	0800a29d 	.word	0x0800a29d
 800a27c:	0800a2a5 	.word	0x0800a2a5
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	2300      	movs	r3, #0
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28a:	e1ec      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a28c:	2304      	movs	r3, #4
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e1e8      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a294:	2308      	movs	r3, #8
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e1e4      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a29c:	2310      	movs	r3, #16
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e1e0      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e1dc      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e1d8      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a2b4:	2380      	movs	r3, #128	; 0x80
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e1d4      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a4f      	ldr	r2, [pc, #316]	; (800a400 <UART_SetConfig+0x340>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d130      	bne.n	800a328 <UART_SetConfig+0x268>
 800a2c6:	4b4c      	ldr	r3, [pc, #304]	; (800a3f8 <UART_SetConfig+0x338>)
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	d826      	bhi.n	800a320 <UART_SetConfig+0x260>
 800a2d2:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <UART_SetConfig+0x218>)
 800a2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d8:	0800a2f1 	.word	0x0800a2f1
 800a2dc:	0800a2f9 	.word	0x0800a2f9
 800a2e0:	0800a301 	.word	0x0800a301
 800a2e4:	0800a309 	.word	0x0800a309
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a319 	.word	0x0800a319
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f6:	e1b6      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fe:	e1b2      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a300:	2308      	movs	r3, #8
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e1ae      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a308:	2310      	movs	r3, #16
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e1aa      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a310:	2320      	movs	r3, #32
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e1a6      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a318:	2340      	movs	r3, #64	; 0x40
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e1a2      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a320:	2380      	movs	r3, #128	; 0x80
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e19e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a35      	ldr	r2, [pc, #212]	; (800a404 <UART_SetConfig+0x344>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d130      	bne.n	800a394 <UART_SetConfig+0x2d4>
 800a332:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <UART_SetConfig+0x338>)
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d826      	bhi.n	800a38c <UART_SetConfig+0x2cc>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <UART_SetConfig+0x284>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a35d 	.word	0x0800a35d
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	0800a36d 	.word	0x0800a36d
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a37d 	.word	0x0800a37d
 800a358:	0800a385 	.word	0x0800a385
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a362:	e180      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a364:	2304      	movs	r3, #4
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36a:	e17c      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a36c:	2308      	movs	r3, #8
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e178      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a374:	2310      	movs	r3, #16
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e174      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a37c:	2320      	movs	r3, #32
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e170      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a384:	2340      	movs	r3, #64	; 0x40
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e16c      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e168      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1b      	ldr	r2, [pc, #108]	; (800a408 <UART_SetConfig+0x348>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d142      	bne.n	800a424 <UART_SetConfig+0x364>
 800a39e:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <UART_SetConfig+0x338>)
 800a3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	d838      	bhi.n	800a41c <UART_SetConfig+0x35c>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <UART_SetConfig+0x2f0>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3c9 	.word	0x0800a3c9
 800a3b4:	0800a3d1 	.word	0x0800a3d1
 800a3b8:	0800a3d9 	.word	0x0800a3d9
 800a3bc:	0800a3e1 	.word	0x0800a3e1
 800a3c0:	0800a40d 	.word	0x0800a40d
 800a3c4:	0800a415 	.word	0x0800a415
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ce:	e14a      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e146      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a3d8:	2308      	movs	r3, #8
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e142      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e13e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a3e8:	cfff69f3 	.word	0xcfff69f3
 800a3ec:	58000c00 	.word	0x58000c00
 800a3f0:	11fff4ff 	.word	0x11fff4ff
 800a3f4:	40011000 	.word	0x40011000
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	40004400 	.word	0x40004400
 800a400:	40004800 	.word	0x40004800
 800a404:	40004c00 	.word	0x40004c00
 800a408:	40005000 	.word	0x40005000
 800a40c:	2320      	movs	r3, #32
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a412:	e128      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41a:	e124      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a41c:	2380      	movs	r3, #128	; 0x80
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e120      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4acb      	ldr	r2, [pc, #812]	; (800a758 <UART_SetConfig+0x698>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d176      	bne.n	800a51c <UART_SetConfig+0x45c>
 800a42e:	4bcb      	ldr	r3, [pc, #812]	; (800a75c <UART_SetConfig+0x69c>)
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a436:	2b28      	cmp	r3, #40	; 0x28
 800a438:	d86c      	bhi.n	800a514 <UART_SetConfig+0x454>
 800a43a:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <UART_SetConfig+0x380>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a4e5 	.word	0x0800a4e5
 800a444:	0800a515 	.word	0x0800a515
 800a448:	0800a515 	.word	0x0800a515
 800a44c:	0800a515 	.word	0x0800a515
 800a450:	0800a515 	.word	0x0800a515
 800a454:	0800a515 	.word	0x0800a515
 800a458:	0800a515 	.word	0x0800a515
 800a45c:	0800a515 	.word	0x0800a515
 800a460:	0800a4ed 	.word	0x0800a4ed
 800a464:	0800a515 	.word	0x0800a515
 800a468:	0800a515 	.word	0x0800a515
 800a46c:	0800a515 	.word	0x0800a515
 800a470:	0800a515 	.word	0x0800a515
 800a474:	0800a515 	.word	0x0800a515
 800a478:	0800a515 	.word	0x0800a515
 800a47c:	0800a515 	.word	0x0800a515
 800a480:	0800a4f5 	.word	0x0800a4f5
 800a484:	0800a515 	.word	0x0800a515
 800a488:	0800a515 	.word	0x0800a515
 800a48c:	0800a515 	.word	0x0800a515
 800a490:	0800a515 	.word	0x0800a515
 800a494:	0800a515 	.word	0x0800a515
 800a498:	0800a515 	.word	0x0800a515
 800a49c:	0800a515 	.word	0x0800a515
 800a4a0:	0800a4fd 	.word	0x0800a4fd
 800a4a4:	0800a515 	.word	0x0800a515
 800a4a8:	0800a515 	.word	0x0800a515
 800a4ac:	0800a515 	.word	0x0800a515
 800a4b0:	0800a515 	.word	0x0800a515
 800a4b4:	0800a515 	.word	0x0800a515
 800a4b8:	0800a515 	.word	0x0800a515
 800a4bc:	0800a515 	.word	0x0800a515
 800a4c0:	0800a505 	.word	0x0800a505
 800a4c4:	0800a515 	.word	0x0800a515
 800a4c8:	0800a515 	.word	0x0800a515
 800a4cc:	0800a515 	.word	0x0800a515
 800a4d0:	0800a515 	.word	0x0800a515
 800a4d4:	0800a515 	.word	0x0800a515
 800a4d8:	0800a515 	.word	0x0800a515
 800a4dc:	0800a515 	.word	0x0800a515
 800a4e0:	0800a50d 	.word	0x0800a50d
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ea:	e0bc      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f2:	e0b8      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fa:	e0b4      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a502:	e0b0      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a504:	2320      	movs	r3, #32
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50a:	e0ac      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a512:	e0a8      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51a:	e0a4      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a8f      	ldr	r2, [pc, #572]	; (800a760 <UART_SetConfig+0x6a0>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d130      	bne.n	800a588 <UART_SetConfig+0x4c8>
 800a526:	4b8d      	ldr	r3, [pc, #564]	; (800a75c <UART_SetConfig+0x69c>)
 800a528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	2b05      	cmp	r3, #5
 800a530:	d826      	bhi.n	800a580 <UART_SetConfig+0x4c0>
 800a532:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UART_SetConfig+0x478>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a551 	.word	0x0800a551
 800a53c:	0800a559 	.word	0x0800a559
 800a540:	0800a561 	.word	0x0800a561
 800a544:	0800a569 	.word	0x0800a569
 800a548:	0800a571 	.word	0x0800a571
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	2300      	movs	r3, #0
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a556:	e086      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a558:	2304      	movs	r3, #4
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e082      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a560:	2308      	movs	r3, #8
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e07e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a568:	2310      	movs	r3, #16
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e07a      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a570:	2320      	movs	r3, #32
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a576:	e076      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e072      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e06e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a75      	ldr	r2, [pc, #468]	; (800a764 <UART_SetConfig+0x6a4>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d130      	bne.n	800a5f4 <UART_SetConfig+0x534>
 800a592:	4b72      	ldr	r3, [pc, #456]	; (800a75c <UART_SetConfig+0x69c>)
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d826      	bhi.n	800a5ec <UART_SetConfig+0x52c>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <UART_SetConfig+0x4e4>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5bd 	.word	0x0800a5bd
 800a5a8:	0800a5c5 	.word	0x0800a5c5
 800a5ac:	0800a5cd 	.word	0x0800a5cd
 800a5b0:	0800a5d5 	.word	0x0800a5d5
 800a5b4:	0800a5dd 	.word	0x0800a5dd
 800a5b8:	0800a5e5 	.word	0x0800a5e5
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c2:	e050      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ca:	e04c      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e048      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5da:	e044      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5dc:	2320      	movs	r3, #32
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e2:	e040      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e03c      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5ec:	2380      	movs	r3, #128	; 0x80
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e038      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a5b      	ldr	r2, [pc, #364]	; (800a768 <UART_SetConfig+0x6a8>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d130      	bne.n	800a660 <UART_SetConfig+0x5a0>
 800a5fe:	4b57      	ldr	r3, [pc, #348]	; (800a75c <UART_SetConfig+0x69c>)
 800a600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b05      	cmp	r3, #5
 800a608:	d826      	bhi.n	800a658 <UART_SetConfig+0x598>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <UART_SetConfig+0x550>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a629 	.word	0x0800a629
 800a614:	0800a631 	.word	0x0800a631
 800a618:	0800a639 	.word	0x0800a639
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a649 	.word	0x0800a649
 800a624:	0800a651 	.word	0x0800a651
 800a628:	2302      	movs	r3, #2
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e01a      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a630:	2304      	movs	r3, #4
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e016      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a638:	2308      	movs	r3, #8
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e012      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a640:	2310      	movs	r3, #16
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e00e      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a648:	2320      	movs	r3, #32
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e00a      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e006      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a658:	2380      	movs	r3, #128	; 0x80
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e002      	b.n	800a666 <UART_SetConfig+0x5a6>
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a3f      	ldr	r2, [pc, #252]	; (800a768 <UART_SetConfig+0x6a8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	f040 80f8 	bne.w	800a862 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a672:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a676:	2b20      	cmp	r3, #32
 800a678:	dc46      	bgt.n	800a708 <UART_SetConfig+0x648>
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	f2c0 8082 	blt.w	800a784 <UART_SetConfig+0x6c4>
 800a680:	3b02      	subs	r3, #2
 800a682:	2b1e      	cmp	r3, #30
 800a684:	d87e      	bhi.n	800a784 <UART_SetConfig+0x6c4>
 800a686:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <UART_SetConfig+0x5cc>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a70f 	.word	0x0800a70f
 800a690:	0800a785 	.word	0x0800a785
 800a694:	0800a717 	.word	0x0800a717
 800a698:	0800a785 	.word	0x0800a785
 800a69c:	0800a785 	.word	0x0800a785
 800a6a0:	0800a785 	.word	0x0800a785
 800a6a4:	0800a727 	.word	0x0800a727
 800a6a8:	0800a785 	.word	0x0800a785
 800a6ac:	0800a785 	.word	0x0800a785
 800a6b0:	0800a785 	.word	0x0800a785
 800a6b4:	0800a785 	.word	0x0800a785
 800a6b8:	0800a785 	.word	0x0800a785
 800a6bc:	0800a785 	.word	0x0800a785
 800a6c0:	0800a785 	.word	0x0800a785
 800a6c4:	0800a737 	.word	0x0800a737
 800a6c8:	0800a785 	.word	0x0800a785
 800a6cc:	0800a785 	.word	0x0800a785
 800a6d0:	0800a785 	.word	0x0800a785
 800a6d4:	0800a785 	.word	0x0800a785
 800a6d8:	0800a785 	.word	0x0800a785
 800a6dc:	0800a785 	.word	0x0800a785
 800a6e0:	0800a785 	.word	0x0800a785
 800a6e4:	0800a785 	.word	0x0800a785
 800a6e8:	0800a785 	.word	0x0800a785
 800a6ec:	0800a785 	.word	0x0800a785
 800a6f0:	0800a785 	.word	0x0800a785
 800a6f4:	0800a785 	.word	0x0800a785
 800a6f8:	0800a785 	.word	0x0800a785
 800a6fc:	0800a785 	.word	0x0800a785
 800a700:	0800a785 	.word	0x0800a785
 800a704:	0800a777 	.word	0x0800a777
 800a708:	2b40      	cmp	r3, #64	; 0x40
 800a70a:	d037      	beq.n	800a77c <UART_SetConfig+0x6bc>
 800a70c:	e03a      	b.n	800a784 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a70e:	f7fd fb61 	bl	8007dd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a714:	e03c      	b.n	800a790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fd fb70 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a724:	e034      	b.n	800a790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a726:	f107 0318 	add.w	r3, r7, #24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fd fcbc 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a734:	e02c      	b.n	800a790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a736:	4b09      	ldr	r3, [pc, #36]	; (800a75c <UART_SetConfig+0x69c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a742:	4b06      	ldr	r3, [pc, #24]	; (800a75c <UART_SetConfig+0x69c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	4a07      	ldr	r2, [pc, #28]	; (800a76c <UART_SetConfig+0x6ac>)
 800a74e:	fa22 f303 	lsr.w	r3, r2, r3
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a754:	e01c      	b.n	800a790 <UART_SetConfig+0x6d0>
 800a756:	bf00      	nop
 800a758:	40011400 	.word	0x40011400
 800a75c:	58024400 	.word	0x58024400
 800a760:	40007800 	.word	0x40007800
 800a764:	40007c00 	.word	0x40007c00
 800a768:	58000c00 	.word	0x58000c00
 800a76c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a770:	4b9d      	ldr	r3, [pc, #628]	; (800a9e8 <UART_SetConfig+0x928>)
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a774:	e00c      	b.n	800a790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a776:	4b9d      	ldr	r3, [pc, #628]	; (800a9ec <UART_SetConfig+0x92c>)
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a77a:	e009      	b.n	800a790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a77c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a782:	e005      	b.n	800a790 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a78e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 81de 	beq.w	800ab54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	4a94      	ldr	r2, [pc, #592]	; (800a9f0 <UART_SetConfig+0x930>)
 800a79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d305      	bcc.n	800a7c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d903      	bls.n	800a7d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a7ce:	e1c1      	b.n	800ab54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	60bb      	str	r3, [r7, #8]
 800a7d6:	60fa      	str	r2, [r7, #12]
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	4a84      	ldr	r2, [pc, #528]	; (800a9f0 <UART_SetConfig+0x930>)
 800a7de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7f2:	f7f5 fd71 	bl	80002d8 <__aeabi_uldivmod>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	f04f 0200 	mov.w	r2, #0
 800a802:	f04f 0300 	mov.w	r3, #0
 800a806:	020b      	lsls	r3, r1, #8
 800a808:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a80c:	0202      	lsls	r2, r0, #8
 800a80e:	6979      	ldr	r1, [r7, #20]
 800a810:	6849      	ldr	r1, [r1, #4]
 800a812:	0849      	lsrs	r1, r1, #1
 800a814:	2000      	movs	r0, #0
 800a816:	460c      	mov	r4, r1
 800a818:	4605      	mov	r5, r0
 800a81a:	eb12 0804 	adds.w	r8, r2, r4
 800a81e:	eb43 0905 	adc.w	r9, r3, r5
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	469a      	mov	sl, r3
 800a82a:	4693      	mov	fp, r2
 800a82c:	4652      	mov	r2, sl
 800a82e:	465b      	mov	r3, fp
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f5 fd50 	bl	80002d8 <__aeabi_uldivmod>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4613      	mov	r3, r2
 800a83e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a846:	d308      	bcc.n	800a85a <UART_SetConfig+0x79a>
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a84e:	d204      	bcs.n	800a85a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a856:	60da      	str	r2, [r3, #12]
 800a858:	e17c      	b.n	800ab54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a860:	e178      	b.n	800ab54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a86a:	f040 80c5 	bne.w	800a9f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a86e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a872:	2b20      	cmp	r3, #32
 800a874:	dc48      	bgt.n	800a908 <UART_SetConfig+0x848>
 800a876:	2b00      	cmp	r3, #0
 800a878:	db7b      	blt.n	800a972 <UART_SetConfig+0x8b2>
 800a87a:	2b20      	cmp	r3, #32
 800a87c:	d879      	bhi.n	800a972 <UART_SetConfig+0x8b2>
 800a87e:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <UART_SetConfig+0x7c4>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a90f 	.word	0x0800a90f
 800a888:	0800a917 	.word	0x0800a917
 800a88c:	0800a973 	.word	0x0800a973
 800a890:	0800a973 	.word	0x0800a973
 800a894:	0800a91f 	.word	0x0800a91f
 800a898:	0800a973 	.word	0x0800a973
 800a89c:	0800a973 	.word	0x0800a973
 800a8a0:	0800a973 	.word	0x0800a973
 800a8a4:	0800a92f 	.word	0x0800a92f
 800a8a8:	0800a973 	.word	0x0800a973
 800a8ac:	0800a973 	.word	0x0800a973
 800a8b0:	0800a973 	.word	0x0800a973
 800a8b4:	0800a973 	.word	0x0800a973
 800a8b8:	0800a973 	.word	0x0800a973
 800a8bc:	0800a973 	.word	0x0800a973
 800a8c0:	0800a973 	.word	0x0800a973
 800a8c4:	0800a93f 	.word	0x0800a93f
 800a8c8:	0800a973 	.word	0x0800a973
 800a8cc:	0800a973 	.word	0x0800a973
 800a8d0:	0800a973 	.word	0x0800a973
 800a8d4:	0800a973 	.word	0x0800a973
 800a8d8:	0800a973 	.word	0x0800a973
 800a8dc:	0800a973 	.word	0x0800a973
 800a8e0:	0800a973 	.word	0x0800a973
 800a8e4:	0800a973 	.word	0x0800a973
 800a8e8:	0800a973 	.word	0x0800a973
 800a8ec:	0800a973 	.word	0x0800a973
 800a8f0:	0800a973 	.word	0x0800a973
 800a8f4:	0800a973 	.word	0x0800a973
 800a8f8:	0800a973 	.word	0x0800a973
 800a8fc:	0800a973 	.word	0x0800a973
 800a900:	0800a973 	.word	0x0800a973
 800a904:	0800a965 	.word	0x0800a965
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	d02e      	beq.n	800a96a <UART_SetConfig+0x8aa>
 800a90c:	e031      	b.n	800a972 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a90e:	f7fb fa6b 	bl	8005de8 <HAL_RCC_GetPCLK1Freq>
 800a912:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a914:	e033      	b.n	800a97e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a916:	f7fb fa7d 	bl	8005e14 <HAL_RCC_GetPCLK2Freq>
 800a91a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a91c:	e02f      	b.n	800a97e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a91e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a922:	4618      	mov	r0, r3
 800a924:	f7fd fa6c 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a92c:	e027      	b.n	800a97e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a92e:	f107 0318 	add.w	r3, r7, #24
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd fbb8 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a93c:	e01f      	b.n	800a97e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a93e:	4b2d      	ldr	r3, [pc, #180]	; (800a9f4 <UART_SetConfig+0x934>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a94a:	4b2a      	ldr	r3, [pc, #168]	; (800a9f4 <UART_SetConfig+0x934>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	08db      	lsrs	r3, r3, #3
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	4a24      	ldr	r2, [pc, #144]	; (800a9e8 <UART_SetConfig+0x928>)
 800a956:	fa22 f303 	lsr.w	r3, r2, r3
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a95c:	e00f      	b.n	800a97e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a95e:	4b22      	ldr	r3, [pc, #136]	; (800a9e8 <UART_SetConfig+0x928>)
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a962:	e00c      	b.n	800a97e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a964:	4b21      	ldr	r3, [pc, #132]	; (800a9ec <UART_SetConfig+0x92c>)
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a968:	e009      	b.n	800a97e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a970:	e005      	b.n	800a97e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a97c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 80e7 	beq.w	800ab54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	4a19      	ldr	r2, [pc, #100]	; (800a9f0 <UART_SetConfig+0x930>)
 800a98c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a990:	461a      	mov	r2, r3
 800a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a994:	fbb3 f3f2 	udiv	r3, r3, r2
 800a998:	005a      	lsls	r2, r3, #1
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	085b      	lsrs	r3, r3, #1
 800a9a0:	441a      	add	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	2b0f      	cmp	r3, #15
 800a9b0:	d916      	bls.n	800a9e0 <UART_SetConfig+0x920>
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9b8:	d212      	bcs.n	800a9e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f023 030f 	bic.w	r3, r3, #15
 800a9c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	085b      	lsrs	r3, r3, #1
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	e0b9      	b.n	800ab54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9e6:	e0b5      	b.n	800ab54 <UART_SetConfig+0xa94>
 800a9e8:	03d09000 	.word	0x03d09000
 800a9ec:	003d0900 	.word	0x003d0900
 800a9f0:	0800f748 	.word	0x0800f748
 800a9f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	dc49      	bgt.n	800aa94 <UART_SetConfig+0x9d4>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	db7c      	blt.n	800aafe <UART_SetConfig+0xa3e>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d87a      	bhi.n	800aafe <UART_SetConfig+0xa3e>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <UART_SetConfig+0x950>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa9b 	.word	0x0800aa9b
 800aa14:	0800aaa3 	.word	0x0800aaa3
 800aa18:	0800aaff 	.word	0x0800aaff
 800aa1c:	0800aaff 	.word	0x0800aaff
 800aa20:	0800aaab 	.word	0x0800aaab
 800aa24:	0800aaff 	.word	0x0800aaff
 800aa28:	0800aaff 	.word	0x0800aaff
 800aa2c:	0800aaff 	.word	0x0800aaff
 800aa30:	0800aabb 	.word	0x0800aabb
 800aa34:	0800aaff 	.word	0x0800aaff
 800aa38:	0800aaff 	.word	0x0800aaff
 800aa3c:	0800aaff 	.word	0x0800aaff
 800aa40:	0800aaff 	.word	0x0800aaff
 800aa44:	0800aaff 	.word	0x0800aaff
 800aa48:	0800aaff 	.word	0x0800aaff
 800aa4c:	0800aaff 	.word	0x0800aaff
 800aa50:	0800aacb 	.word	0x0800aacb
 800aa54:	0800aaff 	.word	0x0800aaff
 800aa58:	0800aaff 	.word	0x0800aaff
 800aa5c:	0800aaff 	.word	0x0800aaff
 800aa60:	0800aaff 	.word	0x0800aaff
 800aa64:	0800aaff 	.word	0x0800aaff
 800aa68:	0800aaff 	.word	0x0800aaff
 800aa6c:	0800aaff 	.word	0x0800aaff
 800aa70:	0800aaff 	.word	0x0800aaff
 800aa74:	0800aaff 	.word	0x0800aaff
 800aa78:	0800aaff 	.word	0x0800aaff
 800aa7c:	0800aaff 	.word	0x0800aaff
 800aa80:	0800aaff 	.word	0x0800aaff
 800aa84:	0800aaff 	.word	0x0800aaff
 800aa88:	0800aaff 	.word	0x0800aaff
 800aa8c:	0800aaff 	.word	0x0800aaff
 800aa90:	0800aaf1 	.word	0x0800aaf1
 800aa94:	2b40      	cmp	r3, #64	; 0x40
 800aa96:	d02e      	beq.n	800aaf6 <UART_SetConfig+0xa36>
 800aa98:	e031      	b.n	800aafe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa9a:	f7fb f9a5 	bl	8005de8 <HAL_RCC_GetPCLK1Freq>
 800aa9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aaa0:	e033      	b.n	800ab0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaa2:	f7fb f9b7 	bl	8005e14 <HAL_RCC_GetPCLK2Freq>
 800aaa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aaa8:	e02f      	b.n	800ab0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fd f9a6 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab8:	e027      	b.n	800ab0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaba:	f107 0318 	add.w	r3, r7, #24
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fd faf2 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac8:	e01f      	b.n	800ab0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaca:	4b2d      	ldr	r3, [pc, #180]	; (800ab80 <UART_SetConfig+0xac0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d009      	beq.n	800aaea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aad6:	4b2a      	ldr	r3, [pc, #168]	; (800ab80 <UART_SetConfig+0xac0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	08db      	lsrs	r3, r3, #3
 800aadc:	f003 0303 	and.w	r3, r3, #3
 800aae0:	4a28      	ldr	r2, [pc, #160]	; (800ab84 <UART_SetConfig+0xac4>)
 800aae2:	fa22 f303 	lsr.w	r3, r2, r3
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aae8:	e00f      	b.n	800ab0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aaea:	4b26      	ldr	r3, [pc, #152]	; (800ab84 <UART_SetConfig+0xac4>)
 800aaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaee:	e00c      	b.n	800ab0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaf0:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <UART_SetConfig+0xac8>)
 800aaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf4:	e009      	b.n	800ab0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafc:	e005      	b.n	800ab0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab08:	bf00      	nop
    }

    if (pclk != 0U)
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d021      	beq.n	800ab54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	4a1d      	ldr	r2, [pc, #116]	; (800ab8c <UART_SetConfig+0xacc>)
 800ab16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	085b      	lsrs	r3, r3, #1
 800ab28:	441a      	add	r2, r3
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	2b0f      	cmp	r3, #15
 800ab38:	d909      	bls.n	800ab4e <UART_SetConfig+0xa8e>
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab40:	d205      	bcs.n	800ab4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	60da      	str	r2, [r3, #12]
 800ab4c:	e002      	b.n	800ab54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2200      	movs	r2, #0
 800ab68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ab70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3748      	adds	r7, #72	; 0x48
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab7e:	bf00      	nop
 800ab80:	58024400 	.word	0x58024400
 800ab84:	03d09000 	.word	0x03d09000
 800ab88:	003d0900 	.word	0x003d0900
 800ab8c:	0800f748 	.word	0x0800f748

0800ab90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac02:	f003 0308 	and.w	r3, r3, #8
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac24:	f003 0310 	and.w	r3, r3, #16
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00a      	beq.n	800ac42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01a      	beq.n	800aca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac8e:	d10a      	bne.n	800aca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	605a      	str	r2, [r3, #4]
  }
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b098      	sub	sp, #96	; 0x60
 800acd8:	af02      	add	r7, sp, #8
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace4:	f7f6 fd3c 	bl	8001760 <HAL_GetTick>
 800ace8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 0308 	and.w	r3, r3, #8
 800acf4:	2b08      	cmp	r3, #8
 800acf6:	d12f      	bne.n	800ad58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad00:	2200      	movs	r2, #0
 800ad02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f88e 	bl	800ae28 <UART_WaitOnFlagUntilTimeout>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d022      	beq.n	800ad58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad26:	653b      	str	r3, [r7, #80]	; 0x50
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad30:	647b      	str	r3, [r7, #68]	; 0x44
 800ad32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e6      	bne.n	800ad12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2220      	movs	r2, #32
 800ad48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e063      	b.n	800ae20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	d149      	bne.n	800adfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 f857 	bl	800ae28 <UART_WaitOnFlagUntilTimeout>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d03c      	beq.n	800adfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	623b      	str	r3, [r7, #32]
   return(result);
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9e:	633b      	str	r3, [r7, #48]	; 0x30
 800ada0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	e841 2300 	strex	r3, r2, [r1]
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e6      	bne.n	800ad80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3308      	adds	r3, #8
 800adb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	e853 3f00 	ldrex	r3, [r3]
 800adc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f023 0301 	bic.w	r3, r3, #1
 800adc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3308      	adds	r3, #8
 800add0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800add2:	61fa      	str	r2, [r7, #28]
 800add4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add6:	69b9      	ldr	r1, [r7, #24]
 800add8:	69fa      	ldr	r2, [r7, #28]
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	617b      	str	r3, [r7, #20]
   return(result);
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1e5      	bne.n	800adb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e012      	b.n	800ae20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2220      	movs	r2, #32
 800ae06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3758      	adds	r7, #88	; 0x58
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	4613      	mov	r3, r2
 800ae36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae38:	e049      	b.n	800aece <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae40:	d045      	beq.n	800aece <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae42:	f7f6 fc8d 	bl	8001760 <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d302      	bcc.n	800ae58 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e048      	b.n	800aeee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0304 	and.w	r3, r3, #4
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d031      	beq.n	800aece <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	f003 0308 	and.w	r3, r3, #8
 800ae74:	2b08      	cmp	r3, #8
 800ae76:	d110      	bne.n	800ae9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f839 	bl	800aef8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2208      	movs	r2, #8
 800ae8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e029      	b.n	800aeee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aea8:	d111      	bne.n	800aece <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 f81f 	bl	800aef8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e00f      	b.n	800aeee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	69da      	ldr	r2, [r3, #28]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4013      	ands	r3, r2
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	bf0c      	ite	eq
 800aede:	2301      	moveq	r3, #1
 800aee0:	2300      	movne	r3, #0
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d0a6      	beq.n	800ae3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b095      	sub	sp, #84	; 0x54
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af1e:	643b      	str	r3, [r7, #64]	; 0x40
 800af20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e6      	bne.n	800af00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3308      	adds	r3, #8
 800af38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	e853 3f00 	ldrex	r3, [r3]
 800af40:	61fb      	str	r3, [r7, #28]
   return(result);
 800af42:	69fa      	ldr	r2, [r7, #28]
 800af44:	4b1e      	ldr	r3, [pc, #120]	; (800afc0 <UART_EndRxTransfer+0xc8>)
 800af46:	4013      	ands	r3, r2
 800af48:	64bb      	str	r3, [r7, #72]	; 0x48
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af5a:	e841 2300 	strex	r3, r2, [r1]
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1e5      	bne.n	800af32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d118      	bne.n	800afa0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	e853 3f00 	ldrex	r3, [r3]
 800af7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f023 0310 	bic.w	r3, r3, #16
 800af82:	647b      	str	r3, [r7, #68]	; 0x44
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af8c:	61bb      	str	r3, [r7, #24]
 800af8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af90:	6979      	ldr	r1, [r7, #20]
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	e841 2300 	strex	r3, r2, [r1]
 800af98:	613b      	str	r3, [r7, #16]
   return(result);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e6      	bne.n	800af6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800afb4:	bf00      	nop
 800afb6:	3754      	adds	r7, #84	; 0x54
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	effffffe 	.word	0xeffffffe

0800afc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d101      	bne.n	800afda <HAL_UARTEx_DisableFifoMode+0x16>
 800afd6:	2302      	movs	r3, #2
 800afd8:	e027      	b.n	800b02a <HAL_UARTEx_DisableFifoMode+0x66>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2224      	movs	r2, #36	; 0x24
 800afe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 0201 	bic.w	r2, r2, #1
 800b000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b046:	2b01      	cmp	r3, #1
 800b048:	d101      	bne.n	800b04e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b04a:	2302      	movs	r3, #2
 800b04c:	e02d      	b.n	800b0aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2224      	movs	r2, #36	; 0x24
 800b05a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0201 	bic.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f850 	bl	800b130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2220      	movs	r2, #32
 800b09c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e02d      	b.n	800b126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2224      	movs	r2, #36	; 0x24
 800b0d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0201 	bic.w	r2, r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f812 	bl	800b130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d108      	bne.n	800b152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b150:	e031      	b.n	800b1b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b152:	2310      	movs	r3, #16
 800b154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b156:	2310      	movs	r3, #16
 800b158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	0e5b      	lsrs	r3, r3, #25
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f003 0307 	and.w	r3, r3, #7
 800b168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	0f5b      	lsrs	r3, r3, #29
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	7b3a      	ldrb	r2, [r7, #12]
 800b17e:	4911      	ldr	r1, [pc, #68]	; (800b1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b180:	5c8a      	ldrb	r2, [r1, r2]
 800b182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b186:	7b3a      	ldrb	r2, [r7, #12]
 800b188:	490f      	ldr	r1, [pc, #60]	; (800b1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b18a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b190:	b29a      	uxth	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	7b7a      	ldrb	r2, [r7, #13]
 800b19c:	4909      	ldr	r1, [pc, #36]	; (800b1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b19e:	5c8a      	ldrb	r2, [r1, r2]
 800b1a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1a4:	7b7a      	ldrb	r2, [r7, #13]
 800b1a6:	4908      	ldr	r1, [pc, #32]	; (800b1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b1a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b1b6:	bf00      	nop
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	0800f760 	.word	0x0800f760
 800b1c8:	0800f768 	.word	0x0800f768

0800b1cc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	f107 001c 	add.w	r0, r7, #28
 800b1da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b1e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b1e6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b1ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b1ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b1f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	4b07      	ldr	r3, [pc, #28]	; (800b21c <SDMMC_Init+0x50>)
 800b200:	4013      	ands	r3, r2
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	b004      	add	sp, #16
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	ffc02c00 	.word	0xffc02c00

0800b220 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b22e:	4618      	mov	r0, r3
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f043 0203 	orr.w	r2, r3, #3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0303 	and.w	r3, r3, #3
}
 800b28e:	4618      	mov	r0, r3
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
	...

0800b29c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b2c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b2c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68da      	ldr	r2, [r3, #12]
 800b2d2:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <SDMMC_SendCommand+0x50>)
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	fffee0c0 	.word	0xfffee0c0

0800b2f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	b2db      	uxtb	r3, r3
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b085      	sub	sp, #20
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3314      	adds	r3, #20
 800b318:	461a      	mov	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	4413      	add	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b356:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b35c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b362:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b37a:	2300      	movs	r3, #0

}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b396:	2310      	movs	r3, #16
 800b398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b39a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3aa:	f107 0308 	add.w	r3, r7, #8
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ff73 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ba:	2110      	movs	r1, #16
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fa5f 	bl	800b880 <SDMMC_GetCmdResp1>
 800b3c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b088      	sub	sp, #32
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3dc:	2311      	movs	r3, #17
 800b3de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f0:	f107 0308 	add.w	r3, r7, #8
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff ff50 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b400:	2111      	movs	r1, #17
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa3c 	bl	800b880 <SDMMC_GetCmdResp1>
 800b408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40a:	69fb      	ldr	r3, [r7, #28]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3720      	adds	r7, #32
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b422:	2312      	movs	r3, #18
 800b424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b42a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b436:	f107 0308 	add.w	r3, r7, #8
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff ff2d 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b442:	f241 3288 	movw	r2, #5000	; 0x1388
 800b446:	2112      	movs	r1, #18
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa19 	bl	800b880 <SDMMC_GetCmdResp1>
 800b44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b450:	69fb      	ldr	r3, [r7, #28]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3720      	adds	r7, #32
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b088      	sub	sp, #32
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b468:	2318      	movs	r3, #24
 800b46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b46c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b47a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff ff0a 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b488:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48c:	2118      	movs	r1, #24
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f9f6 	bl	800b880 <SDMMC_GetCmdResp1>
 800b494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b496:	69fb      	ldr	r3, [r7, #28]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4ae:	2319      	movs	r3, #25
 800b4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4c2:	f107 0308 	add.w	r3, r7, #8
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff fee7 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4d2:	2119      	movs	r1, #25
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f9d3 	bl	800b880 <SDMMC_GetCmdResp1>
 800b4da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3720      	adds	r7, #32
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4f4:	230c      	movs	r3, #12
 800b4f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b506:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff feb8 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b52c:	4a0b      	ldr	r2, [pc, #44]	; (800b55c <SDMMC_CmdStopTransfer+0x74>)
 800b52e:	210c      	movs	r1, #12
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f9a5 	bl	800b880 <SDMMC_GetCmdResp1>
 800b536:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b54a:	d101      	bne.n	800b550 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b54c:	2300      	movs	r3, #0
 800b54e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b550:	69fb      	ldr	r3, [r7, #28]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	05f5e100 	.word	0x05f5e100

0800b560 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b56e:	2307      	movs	r3, #7
 800b570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b572:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b57c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b580:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b582:	f107 0308 	add.w	r3, r7, #8
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fe87 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b58e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b592:	2107      	movs	r1, #7
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f973 	bl	800b880 <SDMMC_GetCmdResp1>
 800b59a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b59c:	69fb      	ldr	r3, [r7, #28]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b088      	sub	sp, #32
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff fe66 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fb97 	bl	800bd04 <SDMMC_GetCmdError>
 800b5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b088      	sub	sp, #32
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5f0:	2308      	movs	r3, #8
 800b5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b604:	f107 0308 	add.w	r3, r7, #8
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fe46 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fb29 	bl	800bc68 <SDMMC_GetCmdResp7>
 800b616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b618:	69fb      	ldr	r3, [r7, #28]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3720      	adds	r7, #32
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b088      	sub	sp, #32
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b630:	2337      	movs	r3, #55	; 0x37
 800b632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b634:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b63a:	2300      	movs	r3, #0
 800b63c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b63e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b642:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b644:	f107 0308 	add.w	r3, r7, #8
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7ff fe26 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b650:	f241 3288 	movw	r2, #5000	; 0x1388
 800b654:	2137      	movs	r1, #55	; 0x37
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f912 	bl	800b880 <SDMMC_GetCmdResp1>
 800b65c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b65e:	69fb      	ldr	r3, [r7, #28]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b676:	2329      	movs	r3, #41	; 0x29
 800b678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b67a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b688:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b68a:	f107 0308 	add.w	r3, r7, #8
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff fe03 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa2e 	bl	800baf8 <SDMMC_GetCmdResp3>
 800b69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69e:	69fb      	ldr	r3, [r7, #28]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3720      	adds	r7, #32
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6b6:	2306      	movs	r3, #6
 800b6b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ca:	f107 0308 	add.w	r3, r7, #8
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fde3 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6da:	2106      	movs	r1, #6
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f8cf 	bl	800b880 <SDMMC_GetCmdResp1>
 800b6e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b088      	sub	sp, #32
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6fa:	2333      	movs	r3, #51	; 0x33
 800b6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b704:	2300      	movs	r3, #0
 800b706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b70c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b70e:	f107 0308 	add.w	r3, r7, #8
 800b712:	4619      	mov	r1, r3
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff fdc1 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b71a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71e:	2133      	movs	r1, #51	; 0x33
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f8ad 	bl	800b880 <SDMMC_GetCmdResp1>
 800b726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b728:	69fb      	ldr	r3, [r7, #28]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3720      	adds	r7, #32
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b088      	sub	sp, #32
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b73e:	2302      	movs	r3, #2
 800b740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b742:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b748:	2300      	movs	r3, #0
 800b74a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b752:	f107 0308 	add.w	r3, r7, #8
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff fd9f 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f980 	bl	800ba64 <SDMMC_GetCmdResp2>
 800b764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b77e:	2309      	movs	r3, #9
 800b780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b782:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b788:	2300      	movs	r3, #0
 800b78a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b78c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b790:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b792:	f107 0308 	add.w	r3, r7, #8
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff fd7f 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f960 	bl	800ba64 <SDMMC_GetCmdResp2>
 800b7a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff fd5f 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	2103      	movs	r1, #3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f9c8 	bl	800bb78 <SDMMC_GetCmdResp6>
 800b7e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3720      	adds	r7, #32
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b802:	230d      	movs	r3, #13
 800b804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b816:	f107 0308 	add.w	r3, r7, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fd3d 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b822:	f241 3288 	movw	r2, #5000	; 0x1388
 800b826:	210d      	movs	r1, #13
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f829 	bl	800b880 <SDMMC_GetCmdResp1>
 800b82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b830:	69fb      	ldr	r3, [r7, #28]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3720      	adds	r7, #32
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b088      	sub	sp, #32
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b846:	230d      	movs	r3, #13
 800b848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b84a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b84e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b850:	2300      	movs	r3, #0
 800b852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b858:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b85a:	f107 0308 	add.w	r3, r7, #8
 800b85e:	4619      	mov	r1, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff fd1b 	bl	800b29c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b866:	f241 3288 	movw	r2, #5000	; 0x1388
 800b86a:	210d      	movs	r1, #13
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f807 	bl	800b880 <SDMMC_GetCmdResp1>
 800b872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b874:	69fb      	ldr	r3, [r7, #28]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3720      	adds	r7, #32
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	460b      	mov	r3, r1
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b88e:	4b70      	ldr	r3, [pc, #448]	; (800ba50 <SDMMC_GetCmdResp1+0x1d0>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a70      	ldr	r2, [pc, #448]	; (800ba54 <SDMMC_GetCmdResp1+0x1d4>)
 800b894:	fba2 2303 	umull	r2, r3, r2, r3
 800b898:	0a5a      	lsrs	r2, r3, #9
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	fb02 f303 	mul.w	r3, r2, r3
 800b8a0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	61fa      	str	r2, [r7, #28]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8b0:	e0c9      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b8b8:	69ba      	ldr	r2, [r7, #24]
 800b8ba:	4b67      	ldr	r3, [pc, #412]	; (800ba58 <SDMMC_GetCmdResp1+0x1d8>)
 800b8bc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0ef      	beq.n	800b8a2 <SDMMC_GetCmdResp1+0x22>
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1ea      	bne.n	800b8a2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d004      	beq.n	800b8e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2204      	movs	r2, #4
 800b8dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8de:	2304      	movs	r3, #4
 800b8e0:	e0b1      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d004      	beq.n	800b8f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e0a6      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4a58      	ldr	r2, [pc, #352]	; (800ba5c <SDMMC_GetCmdResp1+0x1dc>)
 800b8fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7ff fcf6 	bl	800b2f0 <SDMMC_GetCommandResponse>
 800b904:	4603      	mov	r3, r0
 800b906:	461a      	mov	r2, r3
 800b908:	7afb      	ldrb	r3, [r7, #11]
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d001      	beq.n	800b912 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b90e:	2301      	movs	r3, #1
 800b910:	e099      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b912:	2100      	movs	r1, #0
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f7ff fcf8 	bl	800b30a <SDMMC_GetResponse>
 800b91a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	4b50      	ldr	r3, [pc, #320]	; (800ba60 <SDMMC_GetCmdResp1+0x1e0>)
 800b920:	4013      	ands	r3, r2
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
 800b928:	e08d      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	da02      	bge.n	800b936 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b934:	e087      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b940:	2340      	movs	r3, #64	; 0x40
 800b942:	e080      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b94e:	2380      	movs	r3, #128	; 0x80
 800b950:	e079      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b95c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b960:	e071      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b96c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b970:	e069      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b97c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b980:	e061      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b98c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b990:	e059      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b99c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a0:	e051      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9b0:	e049      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9c0:	e041      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9d0:	e039      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9e0:	e031      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9f0:	e029      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba00:	e021      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba10:	e019      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba20:	e011      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba30:	e009      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f003 0308 	and.w	r3, r3, #8
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba40:	e001      	b.n	800ba46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3720      	adds	r7, #32
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	24000000 	.word	0x24000000
 800ba54:	10624dd3 	.word	0x10624dd3
 800ba58:	00200045 	.word	0x00200045
 800ba5c:	002000c5 	.word	0x002000c5
 800ba60:	fdffe008 	.word	0xfdffe008

0800ba64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba6c:	4b1f      	ldr	r3, [pc, #124]	; (800baec <SDMMC_GetCmdResp2+0x88>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a1f      	ldr	r2, [pc, #124]	; (800baf0 <SDMMC_GetCmdResp2+0x8c>)
 800ba72:	fba2 2303 	umull	r2, r3, r2, r3
 800ba76:	0a5b      	lsrs	r3, r3, #9
 800ba78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7c:	fb02 f303 	mul.w	r3, r2, r3
 800ba80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	1e5a      	subs	r2, r3, #1
 800ba86:	60fa      	str	r2, [r7, #12]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba90:	e026      	b.n	800bae0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d0ef      	beq.n	800ba82 <SDMMC_GetCmdResp2+0x1e>
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1ea      	bne.n	800ba82 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab0:	f003 0304 	and.w	r3, r3, #4
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2204      	movs	r2, #4
 800babc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800babe:	2304      	movs	r3, #4
 800bac0:	e00e      	b.n	800bae0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e003      	b.n	800bae0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a06      	ldr	r2, [pc, #24]	; (800baf4 <SDMMC_GetCmdResp2+0x90>)
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	24000000 	.word	0x24000000
 800baf0:	10624dd3 	.word	0x10624dd3
 800baf4:	002000c5 	.word	0x002000c5

0800baf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb00:	4b1a      	ldr	r3, [pc, #104]	; (800bb6c <SDMMC_GetCmdResp3+0x74>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a1a      	ldr	r2, [pc, #104]	; (800bb70 <SDMMC_GetCmdResp3+0x78>)
 800bb06:	fba2 2303 	umull	r2, r3, r2, r3
 800bb0a:	0a5b      	lsrs	r3, r3, #9
 800bb0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb10:	fb02 f303 	mul.w	r3, r2, r3
 800bb14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	1e5a      	subs	r2, r3, #1
 800bb1a:	60fa      	str	r2, [r7, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb24:	e01b      	b.n	800bb5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0ef      	beq.n	800bb16 <SDMMC_GetCmdResp3+0x1e>
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1ea      	bne.n	800bb16 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb44:	f003 0304 	and.w	r3, r3, #4
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d004      	beq.n	800bb56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2204      	movs	r2, #4
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb52:	2304      	movs	r3, #4
 800bb54:	e003      	b.n	800bb5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a06      	ldr	r2, [pc, #24]	; (800bb74 <SDMMC_GetCmdResp3+0x7c>)
 800bb5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	24000000 	.word	0x24000000
 800bb70:	10624dd3 	.word	0x10624dd3
 800bb74:	002000c5 	.word	0x002000c5

0800bb78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	460b      	mov	r3, r1
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb86:	4b35      	ldr	r3, [pc, #212]	; (800bc5c <SDMMC_GetCmdResp6+0xe4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a35      	ldr	r2, [pc, #212]	; (800bc60 <SDMMC_GetCmdResp6+0xe8>)
 800bb8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb90:	0a5b      	lsrs	r3, r3, #9
 800bb92:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb96:	fb02 f303 	mul.w	r3, r2, r3
 800bb9a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	1e5a      	subs	r2, r3, #1
 800bba0:	61fa      	str	r2, [r7, #28]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d102      	bne.n	800bbac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbaa:	e052      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d0ef      	beq.n	800bb9c <SDMMC_GetCmdResp6+0x24>
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1ea      	bne.n	800bb9c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d004      	beq.n	800bbdc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2204      	movs	r2, #4
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbd8:	2304      	movs	r3, #4
 800bbda:	e03a      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d004      	beq.n	800bbf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2201      	movs	r2, #1
 800bbec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e02f      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff fb7c 	bl	800b2f0 <SDMMC_GetCommandResponse>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d001      	beq.n	800bc06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e025      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4a16      	ldr	r2, [pc, #88]	; (800bc64 <SDMMC_GetCmdResp6+0xec>)
 800bc0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff fb7b 	bl	800b30a <SDMMC_GetResponse>
 800bc14:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	0c1b      	lsrs	r3, r3, #16
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e011      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d002      	beq.n	800bc3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc3c:	e009      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc4c:	e001      	b.n	800bc52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3720      	adds	r7, #32
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	24000000 	.word	0x24000000
 800bc60:	10624dd3 	.word	0x10624dd3
 800bc64:	002000c5 	.word	0x002000c5

0800bc68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc70:	4b22      	ldr	r3, [pc, #136]	; (800bcfc <SDMMC_GetCmdResp7+0x94>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a22      	ldr	r2, [pc, #136]	; (800bd00 <SDMMC_GetCmdResp7+0x98>)
 800bc76:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7a:	0a5b      	lsrs	r3, r3, #9
 800bc7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc80:	fb02 f303 	mul.w	r3, r2, r3
 800bc84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	1e5a      	subs	r2, r3, #1
 800bc8a:	60fa      	str	r2, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc94:	e02c      	b.n	800bcf0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0ef      	beq.n	800bc86 <SDMMC_GetCmdResp7+0x1e>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1ea      	bne.n	800bc86 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2204      	movs	r2, #4
 800bcc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcc2:	2304      	movs	r3, #4
 800bcc4:	e014      	b.n	800bcf0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d004      	beq.n	800bcdc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e009      	b.n	800bcf0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2240      	movs	r2, #64	; 0x40
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcee:	2300      	movs	r3, #0

}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	24000000 	.word	0x24000000
 800bd00:	10624dd3 	.word	0x10624dd3

0800bd04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd0c:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <SDMMC_GetCmdError+0x50>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a11      	ldr	r2, [pc, #68]	; (800bd58 <SDMMC_GetCmdError+0x54>)
 800bd12:	fba2 2303 	umull	r2, r3, r2, r3
 800bd16:	0a5b      	lsrs	r3, r3, #9
 800bd18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd1c:	fb02 f303 	mul.w	r3, r2, r3
 800bd20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	1e5a      	subs	r2, r3, #1
 800bd26:	60fa      	str	r2, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd30:	e009      	b.n	800bd46 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0f1      	beq.n	800bd22 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a06      	ldr	r2, [pc, #24]	; (800bd5c <SDMMC_GetCmdError+0x58>)
 800bd42:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	24000000 	.word	0x24000000
 800bd58:	10624dd3 	.word	0x10624dd3
 800bd5c:	002000c5 	.word	0x002000c5

0800bd60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd64:	4904      	ldr	r1, [pc, #16]	; (800bd78 <MX_FATFS_Init+0x18>)
 800bd66:	4805      	ldr	r0, [pc, #20]	; (800bd7c <MX_FATFS_Init+0x1c>)
 800bd68:	f003 fb46 	bl	800f3f8 <FATFS_LinkDriver>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4b03      	ldr	r3, [pc, #12]	; (800bd80 <MX_FATFS_Init+0x20>)
 800bd72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd74:	bf00      	nop
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	2400172c 	.word	0x2400172c
 800bd7c:	0800f770 	.word	0x0800f770
 800bd80:	24001728 	.word	0x24001728

0800bd84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd84:	b480      	push	{r7}
 800bd86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd9e:	f000 f879 	bl	800be94 <BSP_SD_IsDetected>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d001      	beq.n	800bdac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bda8:	2302      	movs	r3, #2
 800bdaa:	e012      	b.n	800bdd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bdac:	480b      	ldr	r0, [pc, #44]	; (800bddc <BSP_SD_Init+0x48>)
 800bdae:	f7fc fd85 	bl	80088bc <HAL_SD_Init>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d109      	bne.n	800bdd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bdbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bdc0:	4806      	ldr	r0, [pc, #24]	; (800bddc <BSP_SD_Init+0x48>)
 800bdc2:	f7fd fc41 	bl	8009648 <HAL_SD_ConfigWideBusOperation>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	24000604 	.word	0x24000604

0800bde0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af02      	add	r7, sp, #8
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	4806      	ldr	r0, [pc, #24]	; (800be18 <BSP_SD_ReadBlocks+0x38>)
 800bdfe:	f7fc fe7d 	bl	8008afc <HAL_SD_ReadBlocks>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	24000604 	.word	0x24000604

0800be1c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af02      	add	r7, sp, #8
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	4806      	ldr	r0, [pc, #24]	; (800be54 <BSP_SD_WriteBlocks+0x38>)
 800be3a:	f7fc ffe9 	bl	8008e10 <HAL_SD_WriteBlocks>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	24000604 	.word	0x24000604

0800be58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be5c:	4805      	ldr	r0, [pc, #20]	; (800be74 <BSP_SD_GetCardState+0x1c>)
 800be5e:	f7fd fd05 	bl	800986c <HAL_SD_GetCardState>
 800be62:	4603      	mov	r3, r0
 800be64:	2b04      	cmp	r3, #4
 800be66:	bf14      	ite	ne
 800be68:	2301      	movne	r3, #1
 800be6a:	2300      	moveq	r3, #0
 800be6c:	b2db      	uxtb	r3, r3
}
 800be6e:	4618      	mov	r0, r3
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	24000604 	.word	0x24000604

0800be78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	4803      	ldr	r0, [pc, #12]	; (800be90 <BSP_SD_GetCardInfo+0x18>)
 800be84:	f7fd fbb4 	bl	80095f0 <HAL_SD_GetCardInfo>
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	24000604 	.word	0x24000604

0800be94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be9a:	2301      	movs	r3, #1
 800be9c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be9e:	f000 f80b 	bl	800beb8 <BSP_PlatformIsDetected>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bea8:	2300      	movs	r3, #0
 800beaa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	b2db      	uxtb	r3, r3
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bebe:	2301      	movs	r3, #1
 800bec0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bec6:	4806      	ldr	r0, [pc, #24]	; (800bee0 <BSP_PlatformIsDetected+0x28>)
 800bec8:	f7f8 fb3c 	bl	8004544 <HAL_GPIO_ReadPin>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bed2:	2300      	movs	r3, #0
 800bed4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bed6:	79fb      	ldrb	r3, [r7, #7]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	58022000 	.word	0x58022000

0800bee4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800beee:	4b0b      	ldr	r3, [pc, #44]	; (800bf1c <SD_CheckStatus+0x38>)
 800bef0:	2201      	movs	r2, #1
 800bef2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bef4:	f7ff ffb0 	bl	800be58 <BSP_SD_GetCardState>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d107      	bne.n	800bf0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800befe:	4b07      	ldr	r3, [pc, #28]	; (800bf1c <SD_CheckStatus+0x38>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f023 0301 	bic.w	r3, r3, #1
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	4b04      	ldr	r3, [pc, #16]	; (800bf1c <SD_CheckStatus+0x38>)
 800bf0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf0e:	4b03      	ldr	r3, [pc, #12]	; (800bf1c <SD_CheckStatus+0x38>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	b2db      	uxtb	r3, r3
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	24000045 	.word	0x24000045

0800bf20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <SD_initialize+0x38>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf30:	f7ff ff30 	bl	800bd94 <BSP_SD_Init>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d107      	bne.n	800bf4a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff ffd1 	bl	800bee4 <SD_CheckStatus>
 800bf42:	4603      	mov	r3, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	4b04      	ldr	r3, [pc, #16]	; (800bf58 <SD_initialize+0x38>)
 800bf48:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf4a:	4b03      	ldr	r3, [pc, #12]	; (800bf58 <SD_initialize+0x38>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b2db      	uxtb	r3, r3
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	24000045 	.word	0x24000045

0800bf5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff ffbb 	bl	800bee4 <SD_CheckStatus>
 800bf6e:	4603      	mov	r3, r0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	603b      	str	r3, [r7, #0]
 800bf84:	4603      	mov	r3, r0
 800bf86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	68b8      	ldr	r0, [r7, #8]
 800bf96:	f7ff ff23 	bl	800bde0 <BSP_SD_ReadBlocks>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d107      	bne.n	800bfb0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bfa0:	bf00      	nop
 800bfa2:	f7ff ff59 	bl	800be58 <BSP_SD_GetCardState>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1fa      	bne.n	800bfa2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b086      	sub	sp, #24
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	603b      	str	r3, [r7, #0]
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bfce:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	68b8      	ldr	r0, [r7, #8]
 800bfd8:	f7ff ff20 	bl	800be1c <BSP_SD_WriteBlocks>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d107      	bne.n	800bff2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bfe2:	bf00      	nop
 800bfe4:	f7ff ff38 	bl	800be58 <BSP_SD_GetCardState>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1fa      	bne.n	800bfe4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08c      	sub	sp, #48	; 0x30
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	603a      	str	r2, [r7, #0]
 800c006:	71fb      	strb	r3, [r7, #7]
 800c008:	460b      	mov	r3, r1
 800c00a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c012:	4b25      	ldr	r3, [pc, #148]	; (800c0a8 <SD_ioctl+0xac>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <SD_ioctl+0x28>
 800c020:	2303      	movs	r3, #3
 800c022:	e03c      	b.n	800c09e <SD_ioctl+0xa2>

  switch (cmd)
 800c024:	79bb      	ldrb	r3, [r7, #6]
 800c026:	2b03      	cmp	r3, #3
 800c028:	d834      	bhi.n	800c094 <SD_ioctl+0x98>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <SD_ioctl+0x34>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c041 	.word	0x0800c041
 800c034:	0800c049 	.word	0x0800c049
 800c038:	0800c061 	.word	0x0800c061
 800c03c:	0800c07b 	.word	0x0800c07b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c046:	e028      	b.n	800c09a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff ff13 	bl	800be78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c052:	6a3a      	ldr	r2, [r7, #32]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c05e:	e01c      	b.n	800c09a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff ff07 	bl	800be78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c078:	e00f      	b.n	800c09a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c07a:	f107 0308 	add.w	r3, r7, #8
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff fefa 	bl	800be78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	0a5a      	lsrs	r2, r3, #9
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c092:	e002      	b.n	800c09a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c094:	2304      	movs	r3, #4
 800c096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c09a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3730      	adds	r7, #48	; 0x30
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	24000045 	.word	0x24000045

0800c0ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	6039      	str	r1, [r7, #0]
 800c0b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c0b8:	88fb      	ldrh	r3, [r7, #6]
 800c0ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c0bc:	d802      	bhi.n	800c0c4 <ff_convert+0x18>
		c = chr;
 800c0be:	88fb      	ldrh	r3, [r7, #6]
 800c0c0:	81fb      	strh	r3, [r7, #14]
 800c0c2:	e025      	b.n	800c110 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00b      	beq.n	800c0e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	2bff      	cmp	r3, #255	; 0xff
 800c0ce:	d805      	bhi.n	800c0dc <ff_convert+0x30>
 800c0d0:	88fb      	ldrh	r3, [r7, #6]
 800c0d2:	3b80      	subs	r3, #128	; 0x80
 800c0d4:	4a12      	ldr	r2, [pc, #72]	; (800c120 <ff_convert+0x74>)
 800c0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0da:	e000      	b.n	800c0de <ff_convert+0x32>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	81fb      	strh	r3, [r7, #14]
 800c0e0:	e016      	b.n	800c110 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	81fb      	strh	r3, [r7, #14]
 800c0e6:	e009      	b.n	800c0fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c0e8:	89fb      	ldrh	r3, [r7, #14]
 800c0ea:	4a0d      	ldr	r2, [pc, #52]	; (800c120 <ff_convert+0x74>)
 800c0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0f0:	88fa      	ldrh	r2, [r7, #6]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d006      	beq.n	800c104 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c0f6:	89fb      	ldrh	r3, [r7, #14]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	81fb      	strh	r3, [r7, #14]
 800c0fc:	89fb      	ldrh	r3, [r7, #14]
 800c0fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c100:	d9f2      	bls.n	800c0e8 <ff_convert+0x3c>
 800c102:	e000      	b.n	800c106 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c104:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c106:	89fb      	ldrh	r3, [r7, #14]
 800c108:	3380      	adds	r3, #128	; 0x80
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c110:	89fb      	ldrh	r3, [r7, #14]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	0800f784 	.word	0x0800f784

0800c124 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c124:	b480      	push	{r7}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c12e:	88fb      	ldrh	r3, [r7, #6]
 800c130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c134:	d201      	bcs.n	800c13a <ff_wtoupper+0x16>
 800c136:	4b3e      	ldr	r3, [pc, #248]	; (800c230 <ff_wtoupper+0x10c>)
 800c138:	e000      	b.n	800c13c <ff_wtoupper+0x18>
 800c13a:	4b3e      	ldr	r3, [pc, #248]	; (800c234 <ff_wtoupper+0x110>)
 800c13c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	1c9a      	adds	r2, r3, #2
 800c142:	617a      	str	r2, [r7, #20]
 800c144:	881b      	ldrh	r3, [r3, #0]
 800c146:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c148:	8a7b      	ldrh	r3, [r7, #18]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d068      	beq.n	800c220 <ff_wtoupper+0xfc>
 800c14e:	88fa      	ldrh	r2, [r7, #6]
 800c150:	8a7b      	ldrh	r3, [r7, #18]
 800c152:	429a      	cmp	r2, r3
 800c154:	d364      	bcc.n	800c220 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	1c9a      	adds	r2, r3, #2
 800c15a:	617a      	str	r2, [r7, #20]
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	823b      	strh	r3, [r7, #16]
 800c160:	8a3b      	ldrh	r3, [r7, #16]
 800c162:	0a1b      	lsrs	r3, r3, #8
 800c164:	81fb      	strh	r3, [r7, #14]
 800c166:	8a3b      	ldrh	r3, [r7, #16]
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c16c:	88fa      	ldrh	r2, [r7, #6]
 800c16e:	8a79      	ldrh	r1, [r7, #18]
 800c170:	8a3b      	ldrh	r3, [r7, #16]
 800c172:	440b      	add	r3, r1
 800c174:	429a      	cmp	r2, r3
 800c176:	da49      	bge.n	800c20c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c178:	89fb      	ldrh	r3, [r7, #14]
 800c17a:	2b08      	cmp	r3, #8
 800c17c:	d84f      	bhi.n	800c21e <ff_wtoupper+0xfa>
 800c17e:	a201      	add	r2, pc, #4	; (adr r2, 800c184 <ff_wtoupper+0x60>)
 800c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c184:	0800c1a9 	.word	0x0800c1a9
 800c188:	0800c1bb 	.word	0x0800c1bb
 800c18c:	0800c1d1 	.word	0x0800c1d1
 800c190:	0800c1d9 	.word	0x0800c1d9
 800c194:	0800c1e1 	.word	0x0800c1e1
 800c198:	0800c1e9 	.word	0x0800c1e9
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c1f9 	.word	0x0800c1f9
 800c1a4:	0800c201 	.word	0x0800c201
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c1a8:	88fa      	ldrh	r2, [r7, #6]
 800c1aa:	8a7b      	ldrh	r3, [r7, #18]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	80fb      	strh	r3, [r7, #6]
 800c1b8:	e027      	b.n	800c20a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c1ba:	88fa      	ldrh	r2, [r7, #6]
 800c1bc:	8a7b      	ldrh	r3, [r7, #18]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	88fa      	ldrh	r2, [r7, #6]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	80fb      	strh	r3, [r7, #6]
 800c1ce:	e01c      	b.n	800c20a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c1d0:	88fb      	ldrh	r3, [r7, #6]
 800c1d2:	3b10      	subs	r3, #16
 800c1d4:	80fb      	strh	r3, [r7, #6]
 800c1d6:	e018      	b.n	800c20a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c1d8:	88fb      	ldrh	r3, [r7, #6]
 800c1da:	3b20      	subs	r3, #32
 800c1dc:	80fb      	strh	r3, [r7, #6]
 800c1de:	e014      	b.n	800c20a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c1e0:	88fb      	ldrh	r3, [r7, #6]
 800c1e2:	3b30      	subs	r3, #48	; 0x30
 800c1e4:	80fb      	strh	r3, [r7, #6]
 800c1e6:	e010      	b.n	800c20a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c1e8:	88fb      	ldrh	r3, [r7, #6]
 800c1ea:	3b1a      	subs	r3, #26
 800c1ec:	80fb      	strh	r3, [r7, #6]
 800c1ee:	e00c      	b.n	800c20a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c1f0:	88fb      	ldrh	r3, [r7, #6]
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	80fb      	strh	r3, [r7, #6]
 800c1f6:	e008      	b.n	800c20a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c1f8:	88fb      	ldrh	r3, [r7, #6]
 800c1fa:	3b50      	subs	r3, #80	; 0x50
 800c1fc:	80fb      	strh	r3, [r7, #6]
 800c1fe:	e004      	b.n	800c20a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c200:	88fb      	ldrh	r3, [r7, #6]
 800c202:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c206:	80fb      	strh	r3, [r7, #6]
 800c208:	bf00      	nop
			}
			break;
 800c20a:	e008      	b.n	800c21e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c20c:	89fb      	ldrh	r3, [r7, #14]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d195      	bne.n	800c13e <ff_wtoupper+0x1a>
 800c212:	8a3b      	ldrh	r3, [r7, #16]
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	4413      	add	r3, r2
 800c21a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c21c:	e78f      	b.n	800c13e <ff_wtoupper+0x1a>
			break;
 800c21e:	bf00      	nop
	}

	return chr;
 800c220:	88fb      	ldrh	r3, [r7, #6]
}
 800c222:	4618      	mov	r0, r3
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	0800f884 	.word	0x0800f884
 800c234:	0800fa78 	.word	0x0800fa78

0800c238 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c242:	79fb      	ldrb	r3, [r7, #7]
 800c244:	4a08      	ldr	r2, [pc, #32]	; (800c268 <disk_status+0x30>)
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	79fa      	ldrb	r2, [r7, #7]
 800c250:	4905      	ldr	r1, [pc, #20]	; (800c268 <disk_status+0x30>)
 800c252:	440a      	add	r2, r1
 800c254:	7a12      	ldrb	r2, [r2, #8]
 800c256:	4610      	mov	r0, r2
 800c258:	4798      	blx	r3
 800c25a:	4603      	mov	r3, r0
 800c25c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	24001758 	.word	0x24001758

0800c26c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	4603      	mov	r3, r0
 800c274:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	4a0d      	ldr	r2, [pc, #52]	; (800c2b4 <disk_initialize+0x48>)
 800c27e:	5cd3      	ldrb	r3, [r2, r3]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d111      	bne.n	800c2a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	4a0b      	ldr	r2, [pc, #44]	; (800c2b4 <disk_initialize+0x48>)
 800c288:	2101      	movs	r1, #1
 800c28a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	4a09      	ldr	r2, [pc, #36]	; (800c2b4 <disk_initialize+0x48>)
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	79fa      	ldrb	r2, [r7, #7]
 800c29a:	4906      	ldr	r1, [pc, #24]	; (800c2b4 <disk_initialize+0x48>)
 800c29c:	440a      	add	r2, r1
 800c29e:	7a12      	ldrb	r2, [r2, #8]
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	24001758 	.word	0x24001758

0800c2b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2b8:	b590      	push	{r4, r7, lr}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	4a0a      	ldr	r2, [pc, #40]	; (800c2f4 <disk_read+0x3c>)
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	689c      	ldr	r4, [r3, #8]
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	4a07      	ldr	r2, [pc, #28]	; (800c2f4 <disk_read+0x3c>)
 800c2d8:	4413      	add	r3, r2
 800c2da:	7a18      	ldrb	r0, [r3, #8]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	47a0      	blx	r4
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	371c      	adds	r7, #28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd90      	pop	{r4, r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	24001758 	.word	0x24001758

0800c2f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2f8:	b590      	push	{r4, r7, lr}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	4a0a      	ldr	r2, [pc, #40]	; (800c334 <disk_write+0x3c>)
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	68dc      	ldr	r4, [r3, #12]
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	4a07      	ldr	r2, [pc, #28]	; (800c334 <disk_write+0x3c>)
 800c318:	4413      	add	r3, r2
 800c31a:	7a18      	ldrb	r0, [r3, #8]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	47a0      	blx	r4
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]
  return res;
 800c328:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	371c      	adds	r7, #28
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd90      	pop	{r4, r7, pc}
 800c332:	bf00      	nop
 800c334:	24001758 	.word	0x24001758

0800c338 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	603a      	str	r2, [r7, #0]
 800c342:	71fb      	strb	r3, [r7, #7]
 800c344:	460b      	mov	r3, r1
 800c346:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	4a09      	ldr	r2, [pc, #36]	; (800c370 <disk_ioctl+0x38>)
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4413      	add	r3, r2
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	79fa      	ldrb	r2, [r7, #7]
 800c356:	4906      	ldr	r1, [pc, #24]	; (800c370 <disk_ioctl+0x38>)
 800c358:	440a      	add	r2, r1
 800c35a:	7a10      	ldrb	r0, [r2, #8]
 800c35c:	79b9      	ldrb	r1, [r7, #6]
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	4798      	blx	r3
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]
  return res;
 800c366:	7bfb      	ldrb	r3, [r7, #15]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	24001758 	.word	0x24001758

0800c374 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3301      	adds	r3, #1
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c384:	89fb      	ldrh	r3, [r7, #14]
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	b21a      	sxth	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	b21b      	sxth	r3, r3
 800c390:	4313      	orrs	r3, r2
 800c392:	b21b      	sxth	r3, r3
 800c394:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c396:	89fb      	ldrh	r3, [r7, #14]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3303      	adds	r3, #3
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	021b      	lsls	r3, r3, #8
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	3202      	adds	r2, #2
 800c3bc:	7812      	ldrb	r2, [r2, #0]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	021b      	lsls	r3, r3, #8
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	3201      	adds	r2, #1
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	021b      	lsls	r3, r3, #8
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7812      	ldrb	r2, [r2, #0]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b083      	sub	sp, #12
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	887a      	ldrh	r2, [r7, #2]
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	887b      	ldrh	r3, [r7, #2]
 800c404:	0a1b      	lsrs	r3, r3, #8
 800c406:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	887a      	ldrh	r2, [r7, #2]
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	701a      	strb	r2, [r3, #0]
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	1c5a      	adds	r2, r3, #1
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	b2d2      	uxtb	r2, r2
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	0a1b      	lsrs	r3, r3, #8
 800c43a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	607a      	str	r2, [r7, #4]
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	0a1b      	lsrs	r3, r3, #8
 800c44c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	b2d2      	uxtb	r2, r2
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	0a1b      	lsrs	r3, r3, #8
 800c45e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	1c5a      	adds	r2, r3, #1
 800c464:	607a      	str	r2, [r7, #4]
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	b2d2      	uxtb	r2, r2
 800c46a:	701a      	strb	r2, [r3, #0]
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00d      	beq.n	800c4ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c492:	693a      	ldr	r2, [r7, #16]
 800c494:	1c53      	adds	r3, r2, #1
 800c496:	613b      	str	r3, [r7, #16]
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	1c59      	adds	r1, r3, #1
 800c49c:	6179      	str	r1, [r7, #20]
 800c49e:	7812      	ldrb	r2, [r2, #0]
 800c4a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	607b      	str	r3, [r7, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1f1      	bne.n	800c492 <mem_cpy+0x1a>
	}
}
 800c4ae:	bf00      	nop
 800c4b0:	371c      	adds	r7, #28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c4ba:	b480      	push	{r7}
 800c4bc:	b087      	sub	sp, #28
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	1c5a      	adds	r2, r3, #1
 800c4ce:	617a      	str	r2, [r7, #20]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	607b      	str	r3, [r7, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1f3      	bne.n	800c4ca <mem_set+0x10>
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	371c      	adds	r7, #28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4f0:	b480      	push	{r7}
 800c4f2:	b089      	sub	sp, #36	; 0x24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	61fa      	str	r2, [r7, #28]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	61ba      	str	r2, [r7, #24]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	1acb      	subs	r3, r1, r3
 800c51c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3b01      	subs	r3, #1
 800c522:	607b      	str	r3, [r7, #4]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <mem_cmp+0x40>
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0eb      	beq.n	800c508 <mem_cmp+0x18>

	return r;
 800c530:	697b      	ldr	r3, [r7, #20]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3724      	adds	r7, #36	; 0x24
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c53e:	b480      	push	{r7}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c548:	e002      	b.n	800c550 <chk_chr+0x12>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3301      	adds	r3, #1
 800c54e:	607b      	str	r3, [r7, #4]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <chk_chr+0x26>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	461a      	mov	r2, r3
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	4293      	cmp	r3, r2
 800c562:	d1f2      	bne.n	800c54a <chk_chr+0xc>
	return *str;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	781b      	ldrb	r3, [r3, #0]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c57e:	2300      	movs	r3, #0
 800c580:	60bb      	str	r3, [r7, #8]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	e029      	b.n	800c5dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c588:	4a27      	ldr	r2, [pc, #156]	; (800c628 <chk_lock+0xb4>)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	4413      	add	r3, r2
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d01d      	beq.n	800c5d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c596:	4a24      	ldr	r2, [pc, #144]	; (800c628 <chk_lock+0xb4>)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	011b      	lsls	r3, r3, #4
 800c59c:	4413      	add	r3, r2
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d116      	bne.n	800c5d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c5a8:	4a1f      	ldr	r2, [pc, #124]	; (800c628 <chk_lock+0xb4>)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	011b      	lsls	r3, r3, #4
 800c5ae:	4413      	add	r3, r2
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d10c      	bne.n	800c5d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5bc:	4a1a      	ldr	r2, [pc, #104]	; (800c628 <chk_lock+0xb4>)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	011b      	lsls	r3, r3, #4
 800c5c2:	4413      	add	r3, r2
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d102      	bne.n	800c5d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5d0:	e007      	b.n	800c5e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d9d2      	bls.n	800c588 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d109      	bne.n	800c5fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d102      	bne.n	800c5f4 <chk_lock+0x80>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d101      	bne.n	800c5f8 <chk_lock+0x84>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	e010      	b.n	800c61a <chk_lock+0xa6>
 800c5f8:	2312      	movs	r3, #18
 800c5fa:	e00e      	b.n	800c61a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d108      	bne.n	800c614 <chk_lock+0xa0>
 800c602:	4a09      	ldr	r2, [pc, #36]	; (800c628 <chk_lock+0xb4>)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	011b      	lsls	r3, r3, #4
 800c608:	4413      	add	r3, r2
 800c60a:	330c      	adds	r3, #12
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c612:	d101      	bne.n	800c618 <chk_lock+0xa4>
 800c614:	2310      	movs	r3, #16
 800c616:	e000      	b.n	800c61a <chk_lock+0xa6>
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	24001738 	.word	0x24001738

0800c62c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c632:	2300      	movs	r3, #0
 800c634:	607b      	str	r3, [r7, #4]
 800c636:	e002      	b.n	800c63e <enq_lock+0x12>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3301      	adds	r3, #1
 800c63c:	607b      	str	r3, [r7, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d806      	bhi.n	800c652 <enq_lock+0x26>
 800c644:	4a09      	ldr	r2, [pc, #36]	; (800c66c <enq_lock+0x40>)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	4413      	add	r3, r2
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1f2      	bne.n	800c638 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b02      	cmp	r3, #2
 800c656:	bf14      	ite	ne
 800c658:	2301      	movne	r3, #1
 800c65a:	2300      	moveq	r3, #0
 800c65c:	b2db      	uxtb	r3, r3
}
 800c65e:	4618      	mov	r0, r3
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	24001738 	.word	0x24001738

0800c670 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c67a:	2300      	movs	r3, #0
 800c67c:	60fb      	str	r3, [r7, #12]
 800c67e:	e01f      	b.n	800c6c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c680:	4a41      	ldr	r2, [pc, #260]	; (800c788 <inc_lock+0x118>)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	4413      	add	r3, r2
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d113      	bne.n	800c6ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c692:	4a3d      	ldr	r2, [pc, #244]	; (800c788 <inc_lock+0x118>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	4413      	add	r3, r2
 800c69a:	3304      	adds	r3, #4
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d109      	bne.n	800c6ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c6a6:	4a38      	ldr	r2, [pc, #224]	; (800c788 <inc_lock+0x118>)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	4413      	add	r3, r2
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d006      	beq.n	800c6c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d9dc      	bls.n	800c680 <inc_lock+0x10>
 800c6c6:	e000      	b.n	800c6ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d132      	bne.n	800c736 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	e002      	b.n	800c6dc <inc_lock+0x6c>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d806      	bhi.n	800c6f0 <inc_lock+0x80>
 800c6e2:	4a29      	ldr	r2, [pc, #164]	; (800c788 <inc_lock+0x118>)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	011b      	lsls	r3, r3, #4
 800c6e8:	4413      	add	r3, r2
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1f2      	bne.n	800c6d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d101      	bne.n	800c6fa <inc_lock+0x8a>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e040      	b.n	800c77c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	4922      	ldr	r1, [pc, #136]	; (800c788 <inc_lock+0x118>)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	011b      	lsls	r3, r3, #4
 800c704:	440b      	add	r3, r1
 800c706:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	491e      	ldr	r1, [pc, #120]	; (800c788 <inc_lock+0x118>)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	011b      	lsls	r3, r3, #4
 800c712:	440b      	add	r3, r1
 800c714:	3304      	adds	r3, #4
 800c716:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	695a      	ldr	r2, [r3, #20]
 800c71c:	491a      	ldr	r1, [pc, #104]	; (800c788 <inc_lock+0x118>)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	011b      	lsls	r3, r3, #4
 800c722:	440b      	add	r3, r1
 800c724:	3308      	adds	r3, #8
 800c726:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c728:	4a17      	ldr	r2, [pc, #92]	; (800c788 <inc_lock+0x118>)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	4413      	add	r3, r2
 800c730:	330c      	adds	r3, #12
 800c732:	2200      	movs	r2, #0
 800c734:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d009      	beq.n	800c750 <inc_lock+0xe0>
 800c73c:	4a12      	ldr	r2, [pc, #72]	; (800c788 <inc_lock+0x118>)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	011b      	lsls	r3, r3, #4
 800c742:	4413      	add	r3, r2
 800c744:	330c      	adds	r3, #12
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <inc_lock+0xe0>
 800c74c:	2300      	movs	r3, #0
 800c74e:	e015      	b.n	800c77c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d108      	bne.n	800c768 <inc_lock+0xf8>
 800c756:	4a0c      	ldr	r2, [pc, #48]	; (800c788 <inc_lock+0x118>)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	4413      	add	r3, r2
 800c75e:	330c      	adds	r3, #12
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	b29a      	uxth	r2, r3
 800c766:	e001      	b.n	800c76c <inc_lock+0xfc>
 800c768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c76c:	4906      	ldr	r1, [pc, #24]	; (800c788 <inc_lock+0x118>)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	011b      	lsls	r3, r3, #4
 800c772:	440b      	add	r3, r1
 800c774:	330c      	adds	r3, #12
 800c776:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3301      	adds	r3, #1
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	24001738 	.word	0x24001738

0800c78c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3b01      	subs	r3, #1
 800c798:	607b      	str	r3, [r7, #4]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d825      	bhi.n	800c7ec <dec_lock+0x60>
		n = Files[i].ctr;
 800c7a0:	4a17      	ldr	r2, [pc, #92]	; (800c800 <dec_lock+0x74>)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	011b      	lsls	r3, r3, #4
 800c7a6:	4413      	add	r3, r2
 800c7a8:	330c      	adds	r3, #12
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
 800c7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7b4:	d101      	bne.n	800c7ba <dec_lock+0x2e>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c7ba:	89fb      	ldrh	r3, [r7, #14]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <dec_lock+0x3a>
 800c7c0:	89fb      	ldrh	r3, [r7, #14]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c7c6:	4a0e      	ldr	r2, [pc, #56]	; (800c800 <dec_lock+0x74>)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	011b      	lsls	r3, r3, #4
 800c7cc:	4413      	add	r3, r2
 800c7ce:	330c      	adds	r3, #12
 800c7d0:	89fa      	ldrh	r2, [r7, #14]
 800c7d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7d4:	89fb      	ldrh	r3, [r7, #14]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <dec_lock+0x5a>
 800c7da:	4a09      	ldr	r2, [pc, #36]	; (800c800 <dec_lock+0x74>)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	011b      	lsls	r3, r3, #4
 800c7e0:	4413      	add	r3, r2
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	737b      	strb	r3, [r7, #13]
 800c7ea:	e001      	b.n	800c7f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	24001738 	.word	0x24001738

0800c804 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c80c:	2300      	movs	r3, #0
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	e010      	b.n	800c834 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c812:	4a0d      	ldr	r2, [pc, #52]	; (800c848 <clear_lock+0x44>)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	011b      	lsls	r3, r3, #4
 800c818:	4413      	add	r3, r2
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d105      	bne.n	800c82e <clear_lock+0x2a>
 800c822:	4a09      	ldr	r2, [pc, #36]	; (800c848 <clear_lock+0x44>)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	011b      	lsls	r3, r3, #4
 800c828:	4413      	add	r3, r2
 800c82a:	2200      	movs	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3301      	adds	r3, #1
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d9eb      	bls.n	800c812 <clear_lock+0xe>
	}
}
 800c83a:	bf00      	nop
 800c83c:	bf00      	nop
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	24001738 	.word	0x24001738

0800c84c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	78db      	ldrb	r3, [r3, #3]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d034      	beq.n	800c8ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c864:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	7858      	ldrb	r0, [r3, #1]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c870:	2301      	movs	r3, #1
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	f7ff fd40 	bl	800c2f8 <disk_write>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c87e:	2301      	movs	r3, #1
 800c880:	73fb      	strb	r3, [r7, #15]
 800c882:	e022      	b.n	800c8ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	1ad2      	subs	r2, r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	429a      	cmp	r2, r3
 800c898:	d217      	bcs.n	800c8ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	789b      	ldrb	r3, [r3, #2]
 800c89e:	613b      	str	r3, [r7, #16]
 800c8a0:	e010      	b.n	800c8c4 <sync_window+0x78>
					wsect += fs->fsize;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	7858      	ldrb	r0, [r3, #1]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	f7ff fd1d 	bl	800c2f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	613b      	str	r3, [r7, #16]
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d8eb      	bhi.n	800c8a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d01b      	beq.n	800c924 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff ffad 	bl	800c84c <sync_window>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d113      	bne.n	800c924 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7858      	ldrb	r0, [r3, #1]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c906:	2301      	movs	r3, #1
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	f7ff fcd5 	bl	800c2b8 <disk_read>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d004      	beq.n	800c91e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c914:	f04f 33ff 	mov.w	r3, #4294967295
 800c918:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
	...

0800c930 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7ff ff87 	bl	800c84c <sync_window>
 800c93e:	4603      	mov	r3, r0
 800c940:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d158      	bne.n	800c9fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d148      	bne.n	800c9e2 <sync_fs+0xb2>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	791b      	ldrb	r3, [r3, #4]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d144      	bne.n	800c9e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3334      	adds	r3, #52	; 0x34
 800c95c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c960:	2100      	movs	r1, #0
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff fda9 	bl	800c4ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3334      	adds	r3, #52	; 0x34
 800c96c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c970:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fd38 	bl	800c3ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	4921      	ldr	r1, [pc, #132]	; (800ca04 <sync_fs+0xd4>)
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff fd4d 	bl	800c420 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3334      	adds	r3, #52	; 0x34
 800c98a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c98e:	491e      	ldr	r1, [pc, #120]	; (800ca08 <sync_fs+0xd8>)
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fd45 	bl	800c420 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3334      	adds	r3, #52	; 0x34
 800c99a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	f7ff fd3b 	bl	800c420 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3334      	adds	r3, #52	; 0x34
 800c9ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	f7ff fd31 	bl	800c420 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	7858      	ldrb	r0, [r3, #1]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	f7ff fc8e 	bl	800c2f8 <disk_write>
			fs->fsi_flag = 0;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	785b      	ldrb	r3, [r3, #1]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fca4 	bl	800c338 <disk_ioctl>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <sync_fs+0xca>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	41615252 	.word	0x41615252
 800ca08:	61417272 	.word	0x61417272

0800ca0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	3b02      	subs	r3, #2
 800ca1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	3b02      	subs	r3, #2
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d301      	bcc.n	800ca2c <clust2sect+0x20>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	e008      	b.n	800ca3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	895b      	ldrh	r3, [r3, #10]
 800ca30:	461a      	mov	r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	fb03 f202 	mul.w	r2, r3, r2
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	4413      	add	r3, r2
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	370c      	adds	r7, #12
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d904      	bls.n	800ca6a <get_fat+0x20>
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d302      	bcc.n	800ca70 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	617b      	str	r3, [r7, #20]
 800ca6e:	e08f      	b.n	800cb90 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca70:	f04f 33ff 	mov.w	r3, #4294967295
 800ca74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d062      	beq.n	800cb44 <get_fat+0xfa>
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	dc7c      	bgt.n	800cb7c <get_fat+0x132>
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d002      	beq.n	800ca8c <get_fat+0x42>
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d042      	beq.n	800cb10 <get_fat+0xc6>
 800ca8a:	e077      	b.n	800cb7c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	085b      	lsrs	r3, r3, #1
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4413      	add	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	0a5b      	lsrs	r3, r3, #9
 800caa2:	4413      	add	r3, r2
 800caa4:	4619      	mov	r1, r3
 800caa6:	6938      	ldr	r0, [r7, #16]
 800caa8:	f7ff ff14 	bl	800c8d4 <move_window>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d167      	bne.n	800cb82 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	60fa      	str	r2, [r7, #12]
 800cab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	4413      	add	r3, r2
 800cac0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cac4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	0a5b      	lsrs	r3, r3, #9
 800cace:	4413      	add	r3, r2
 800cad0:	4619      	mov	r1, r3
 800cad2:	6938      	ldr	r0, [r7, #16]
 800cad4:	f7ff fefe 	bl	800c8d4 <move_window>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d153      	bne.n	800cb86 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	4413      	add	r3, r2
 800cae8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	461a      	mov	r2, r3
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <get_fat+0xbc>
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	091b      	lsrs	r3, r3, #4
 800cb04:	e002      	b.n	800cb0c <get_fat+0xc2>
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb0c:	617b      	str	r3, [r7, #20]
			break;
 800cb0e:	e03f      	b.n	800cb90 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	4413      	add	r3, r2
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6938      	ldr	r0, [r7, #16]
 800cb1e:	f7ff fed9 	bl	800c8d4 <move_window>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d130      	bne.n	800cb8a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	005b      	lsls	r3, r3, #1
 800cb32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cb36:	4413      	add	r3, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff fc1b 	bl	800c374 <ld_word>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	617b      	str	r3, [r7, #20]
			break;
 800cb42:	e025      	b.n	800cb90 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	09db      	lsrs	r3, r3, #7
 800cb4c:	4413      	add	r3, r2
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6938      	ldr	r0, [r7, #16]
 800cb52:	f7ff febf 	bl	800c8d4 <move_window>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d118      	bne.n	800cb8e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cb6a:	4413      	add	r3, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fc19 	bl	800c3a4 <ld_dword>
 800cb72:	4603      	mov	r3, r0
 800cb74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb78:	617b      	str	r3, [r7, #20]
			break;
 800cb7a:	e009      	b.n	800cb90 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e006      	b.n	800cb90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb82:	bf00      	nop
 800cb84:	e004      	b.n	800cb90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb86:	bf00      	nop
 800cb88:	e002      	b.n	800cb90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb8a:	bf00      	nop
 800cb8c:	e000      	b.n	800cb90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb8e:	bf00      	nop
		}
	}

	return val;
 800cb90:	697b      	ldr	r3, [r7, #20]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cb9a:	b590      	push	{r4, r7, lr}
 800cb9c:	b089      	sub	sp, #36	; 0x24
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	60f8      	str	r0, [r7, #12]
 800cba2:	60b9      	str	r1, [r7, #8]
 800cba4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cba6:	2302      	movs	r3, #2
 800cba8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	f240 80d2 	bls.w	800cd56 <put_fat+0x1bc>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	699b      	ldr	r3, [r3, #24]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	f080 80cc 	bcs.w	800cd56 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	f000 8096 	beq.w	800ccf4 <put_fat+0x15a>
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	f300 80cd 	bgt.w	800cd68 <put_fat+0x1ce>
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d002      	beq.n	800cbd8 <put_fat+0x3e>
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d06e      	beq.n	800ccb4 <put_fat+0x11a>
 800cbd6:	e0c7      	b.n	800cd68 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	61bb      	str	r3, [r7, #24]
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	0a5b      	lsrs	r3, r3, #9
 800cbee:	4413      	add	r3, r2
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff fe6e 	bl	800c8d4 <move_window>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbfc:	7ffb      	ldrb	r3, [r7, #31]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f040 80ab 	bne.w	800cd5a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	1c59      	adds	r1, r3, #1
 800cc0e:	61b9      	str	r1, [r7, #24]
 800cc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc14:	4413      	add	r3, r2
 800cc16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00d      	beq.n	800cc3e <put_fat+0xa4>
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	b25b      	sxtb	r3, r3
 800cc28:	f003 030f 	and.w	r3, r3, #15
 800cc2c:	b25a      	sxtb	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	011b      	lsls	r3, r3, #4
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	4313      	orrs	r3, r2
 800cc38:	b25b      	sxtb	r3, r3
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	e001      	b.n	800cc42 <put_fat+0xa8>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	0a5b      	lsrs	r3, r3, #9
 800cc54:	4413      	add	r3, r2
 800cc56:	4619      	mov	r1, r3
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f7ff fe3b 	bl	800c8d4 <move_window>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc62:	7ffb      	ldrb	r3, [r7, #31]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d17a      	bne.n	800cd5e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc74:	4413      	add	r3, r2
 800cc76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <put_fat+0xf0>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	091b      	lsrs	r3, r3, #4
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	e00e      	b.n	800cca8 <put_fat+0x10e>
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	b25b      	sxtb	r3, r3
 800cc90:	f023 030f 	bic.w	r3, r3, #15
 800cc94:	b25a      	sxtb	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	0a1b      	lsrs	r3, r3, #8
 800cc9a:	b25b      	sxtb	r3, r3
 800cc9c:	f003 030f 	and.w	r3, r3, #15
 800cca0:	b25b      	sxtb	r3, r3
 800cca2:	4313      	orrs	r3, r2
 800cca4:	b25b      	sxtb	r3, r3
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	70da      	strb	r2, [r3, #3]
			break;
 800ccb2:	e059      	b.n	800cd68 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	0a1b      	lsrs	r3, r3, #8
 800ccbc:	4413      	add	r3, r2
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff fe07 	bl	800c8d4 <move_window>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d148      	bne.n	800cd62 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccde:	4413      	add	r3, r2
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	b292      	uxth	r2, r2
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fb7f 	bl	800c3ea <st_word>
			fs->wflag = 1;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	70da      	strb	r2, [r3, #3]
			break;
 800ccf2:	e039      	b.n	800cd68 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	09db      	lsrs	r3, r3, #7
 800ccfc:	4413      	add	r3, r2
 800ccfe:	4619      	mov	r1, r3
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f7ff fde7 	bl	800c8d4 <move_window>
 800cd06:	4603      	mov	r3, r0
 800cd08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd0a:	7ffb      	ldrb	r3, [r7, #31]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d12a      	bne.n	800cd66 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd24:	4413      	add	r3, r2
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fb3c 	bl	800c3a4 <ld_dword>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cd32:	4323      	orrs	r3, r4
 800cd34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd44:	4413      	add	r3, r2
 800cd46:	6879      	ldr	r1, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff fb69 	bl	800c420 <st_dword>
			fs->wflag = 1;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2201      	movs	r2, #1
 800cd52:	70da      	strb	r2, [r3, #3]
			break;
 800cd54:	e008      	b.n	800cd68 <put_fat+0x1ce>
		}
	}
 800cd56:	bf00      	nop
 800cd58:	e006      	b.n	800cd68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd5a:	bf00      	nop
 800cd5c:	e004      	b.n	800cd68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd5e:	bf00      	nop
 800cd60:	e002      	b.n	800cd68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd62:	bf00      	nop
 800cd64:	e000      	b.n	800cd68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd66:	bf00      	nop
	return res;
 800cd68:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3724      	adds	r7, #36	; 0x24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd90      	pop	{r4, r7, pc}

0800cd72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b088      	sub	sp, #32
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d904      	bls.n	800cd98 <remove_chain+0x26>
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d301      	bcc.n	800cd9c <remove_chain+0x2a>
 800cd98:	2302      	movs	r3, #2
 800cd9a:	e04b      	b.n	800ce34 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00c      	beq.n	800cdbc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	69b8      	ldr	r0, [r7, #24]
 800cdaa:	f7ff fef6 	bl	800cb9a <put_fat>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cdb2:	7ffb      	ldrb	r3, [r7, #31]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <remove_chain+0x4a>
 800cdb8:	7ffb      	ldrb	r3, [r7, #31]
 800cdba:	e03b      	b.n	800ce34 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7ff fe43 	bl	800ca4a <get_fat>
 800cdc4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d031      	beq.n	800ce30 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d101      	bne.n	800cdd6 <remove_chain+0x64>
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	e02e      	b.n	800ce34 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cddc:	d101      	bne.n	800cde2 <remove_chain+0x70>
 800cdde:	2301      	movs	r3, #1
 800cde0:	e028      	b.n	800ce34 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cde2:	2200      	movs	r2, #0
 800cde4:	68b9      	ldr	r1, [r7, #8]
 800cde6:	69b8      	ldr	r0, [r7, #24]
 800cde8:	f7ff fed7 	bl	800cb9a <put_fat>
 800cdec:	4603      	mov	r3, r0
 800cdee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cdf0:	7ffb      	ldrb	r3, [r7, #31]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <remove_chain+0x88>
 800cdf6:	7ffb      	ldrb	r3, [r7, #31]
 800cdf8:	e01c      	b.n	800ce34 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	695a      	ldr	r2, [r3, #20]
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	3b02      	subs	r3, #2
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d20b      	bcs.n	800ce20 <remove_chain+0xae>
			fs->free_clst++;
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	791b      	ldrb	r3, [r3, #4]
 800ce16:	f043 0301 	orr.w	r3, r3, #1
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d3c6      	bcc.n	800cdbc <remove_chain+0x4a>
 800ce2e:	e000      	b.n	800ce32 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ce30:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3720      	adds	r7, #32
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10d      	bne.n	800ce6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d004      	beq.n	800ce68 <create_chain+0x2c>
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	69ba      	ldr	r2, [r7, #24]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d31b      	bcc.n	800cea0 <create_chain+0x64>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	61bb      	str	r3, [r7, #24]
 800ce6c:	e018      	b.n	800cea0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff fdea 	bl	800ca4a <get_fat>
 800ce76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d801      	bhi.n	800ce82 <create_chain+0x46>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e070      	b.n	800cf64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce88:	d101      	bne.n	800ce8e <create_chain+0x52>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	e06a      	b.n	800cf64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d201      	bcs.n	800ce9c <create_chain+0x60>
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	e063      	b.n	800cf64 <create_chain+0x128>
		scl = clst;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	3301      	adds	r3, #1
 800cea8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	69fa      	ldr	r2, [r7, #28]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d307      	bcc.n	800cec4 <create_chain+0x88>
				ncl = 2;
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ceb8:	69fa      	ldr	r2, [r7, #28]
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d901      	bls.n	800cec4 <create_chain+0x88>
 800cec0:	2300      	movs	r3, #0
 800cec2:	e04f      	b.n	800cf64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fdbf 	bl	800ca4a <get_fat>
 800cecc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00e      	beq.n	800cef2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d003      	beq.n	800cee2 <create_chain+0xa6>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee0:	d101      	bne.n	800cee6 <create_chain+0xaa>
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	e03e      	b.n	800cf64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cee6:	69fa      	ldr	r2, [r7, #28]
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d1da      	bne.n	800cea4 <create_chain+0x68>
 800ceee:	2300      	movs	r3, #0
 800cef0:	e038      	b.n	800cf64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cef2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cef4:	f04f 32ff 	mov.w	r2, #4294967295
 800cef8:	69f9      	ldr	r1, [r7, #28]
 800cefa:	6938      	ldr	r0, [r7, #16]
 800cefc:	f7ff fe4d 	bl	800cb9a <put_fat>
 800cf00:	4603      	mov	r3, r0
 800cf02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cf04:	7dfb      	ldrb	r3, [r7, #23]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d109      	bne.n	800cf1e <create_chain+0xe2>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d006      	beq.n	800cf1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cf10:	69fa      	ldr	r2, [r7, #28]
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6938      	ldr	r0, [r7, #16]
 800cf16:	f7ff fe40 	bl	800cb9a <put_fat>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d116      	bne.n	800cf52 <create_chain+0x116>
		fs->last_clst = ncl;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	69fa      	ldr	r2, [r7, #28]
 800cf28:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	695a      	ldr	r2, [r3, #20]
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	3b02      	subs	r3, #2
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d804      	bhi.n	800cf42 <create_chain+0x106>
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	1e5a      	subs	r2, r3, #1
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	791b      	ldrb	r3, [r3, #4]
 800cf46:	f043 0301 	orr.w	r3, r3, #1
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	711a      	strb	r2, [r3, #4]
 800cf50:	e007      	b.n	800cf62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d102      	bne.n	800cf5e <create_chain+0x122>
 800cf58:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5c:	e000      	b.n	800cf60 <create_chain+0x124>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cf62:	69fb      	ldr	r3, [r7, #28]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	3304      	adds	r3, #4
 800cf82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	0a5b      	lsrs	r3, r3, #9
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	8952      	ldrh	r2, [r2, #10]
 800cf8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	1d1a      	adds	r2, r3, #4
 800cf96:	613a      	str	r2, [r7, #16]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <clmt_clust+0x3a>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e010      	b.n	800cfc8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d307      	bcc.n	800cfbe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	617b      	str	r3, [r7, #20]
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cfbc:	e7e9      	b.n	800cf92 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cfbe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	4413      	add	r3, r2
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	371c      	adds	r7, #28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfea:	d204      	bcs.n	800cff6 <dir_sdi+0x22>
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	f003 031f 	and.w	r3, r3, #31
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <dir_sdi+0x26>
		return FR_INT_ERR;
 800cff6:	2302      	movs	r3, #2
 800cff8:	e063      	b.n	800d0c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <dir_sdi+0x46>
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d902      	bls.n	800d01a <dir_sdi+0x46>
		clst = fs->dirbase;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d018:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10c      	bne.n	800d03a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	095b      	lsrs	r3, r3, #5
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	8912      	ldrh	r2, [r2, #8]
 800d028:	4293      	cmp	r3, r2
 800d02a:	d301      	bcc.n	800d030 <dir_sdi+0x5c>
 800d02c:	2302      	movs	r3, #2
 800d02e:	e048      	b.n	800d0c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	61da      	str	r2, [r3, #28]
 800d038:	e029      	b.n	800d08e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	895b      	ldrh	r3, [r3, #10]
 800d03e:	025b      	lsls	r3, r3, #9
 800d040:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d042:	e019      	b.n	800d078 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6979      	ldr	r1, [r7, #20]
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff fcfe 	bl	800ca4a <get_fat>
 800d04e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d056:	d101      	bne.n	800d05c <dir_sdi+0x88>
 800d058:	2301      	movs	r3, #1
 800d05a:	e032      	b.n	800d0c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d904      	bls.n	800d06c <dir_sdi+0x98>
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d301      	bcc.n	800d070 <dir_sdi+0x9c>
 800d06c:	2302      	movs	r3, #2
 800d06e:	e028      	b.n	800d0c2 <dir_sdi+0xee>
			ofs -= csz;
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d2e1      	bcs.n	800d044 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d080:	6979      	ldr	r1, [r7, #20]
 800d082:	6938      	ldr	r0, [r7, #16]
 800d084:	f7ff fcc2 	bl	800ca0c <clust2sect>
 800d088:	4602      	mov	r2, r0
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <dir_sdi+0xcc>
 800d09c:	2302      	movs	r3, #2
 800d09e:	e010      	b.n	800d0c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	69da      	ldr	r2, [r3, #28]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	0a5b      	lsrs	r3, r3, #9
 800d0a8:	441a      	add	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ba:	441a      	add	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3718      	adds	r7, #24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b086      	sub	sp, #24
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	3320      	adds	r3, #32
 800d0e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	69db      	ldr	r3, [r3, #28]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <dir_next+0x28>
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0f0:	d301      	bcc.n	800d0f6 <dir_next+0x2c>
 800d0f2:	2304      	movs	r3, #4
 800d0f4:	e0aa      	b.n	800d24c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f040 8098 	bne.w	800d232 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	1c5a      	adds	r2, r3, #1
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	095b      	lsrs	r3, r3, #5
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	8912      	ldrh	r2, [r2, #8]
 800d11c:	4293      	cmp	r3, r2
 800d11e:	f0c0 8088 	bcc.w	800d232 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	61da      	str	r2, [r3, #28]
 800d128:	2304      	movs	r3, #4
 800d12a:	e08f      	b.n	800d24c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	0a5b      	lsrs	r3, r3, #9
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	8952      	ldrh	r2, [r2, #10]
 800d134:	3a01      	subs	r2, #1
 800d136:	4013      	ands	r3, r2
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d17a      	bne.n	800d232 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7ff fc80 	bl	800ca4a <get_fat>
 800d14a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d801      	bhi.n	800d156 <dir_next+0x8c>
 800d152:	2302      	movs	r3, #2
 800d154:	e07a      	b.n	800d24c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15c:	d101      	bne.n	800d162 <dir_next+0x98>
 800d15e:	2301      	movs	r3, #1
 800d160:	e074      	b.n	800d24c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	697a      	ldr	r2, [r7, #20]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d358      	bcc.n	800d21e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d104      	bne.n	800d17c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	61da      	str	r2, [r3, #28]
 800d178:	2304      	movs	r3, #4
 800d17a:	e067      	b.n	800d24c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	4619      	mov	r1, r3
 800d184:	4610      	mov	r0, r2
 800d186:	f7ff fe59 	bl	800ce3c <create_chain>
 800d18a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <dir_next+0xcc>
 800d192:	2307      	movs	r3, #7
 800d194:	e05a      	b.n	800d24c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d101      	bne.n	800d1a0 <dir_next+0xd6>
 800d19c:	2302      	movs	r3, #2
 800d19e:	e055      	b.n	800d24c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	d101      	bne.n	800d1ac <dir_next+0xe2>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e04f      	b.n	800d24c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f7ff fb4d 	bl	800c84c <sync_window>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <dir_next+0xf2>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e047      	b.n	800d24c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3334      	adds	r3, #52	; 0x34
 800d1c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff f977 	bl	800c4ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	613b      	str	r3, [r7, #16]
 800d1d0:	6979      	ldr	r1, [r7, #20]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff fc1a 	bl	800ca0c <clust2sect>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	631a      	str	r2, [r3, #48]	; 0x30
 800d1de:	e012      	b.n	800d206 <dir_next+0x13c>
						fs->wflag = 1;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f7ff fb30 	bl	800c84c <sync_window>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <dir_next+0x12c>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e02a      	b.n	800d24c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	631a      	str	r2, [r3, #48]	; 0x30
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	895b      	ldrh	r3, [r3, #10]
 800d20a:	461a      	mov	r2, r3
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	4293      	cmp	r3, r2
 800d210:	d3e6      	bcc.n	800d1e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	1ad2      	subs	r2, r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d224:	6979      	ldr	r1, [r7, #20]
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f7ff fbf0 	bl	800ca0c <clust2sect>
 800d22c:	4602      	mov	r2, r0
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d244:	441a      	add	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d264:	2100      	movs	r1, #0
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff feb4 	bl	800cfd4 <dir_sdi>
 800d26c:	4603      	mov	r3, r0
 800d26e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d270:	7dfb      	ldrb	r3, [r7, #23]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d12b      	bne.n	800d2ce <dir_alloc+0x7a>
		n = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	4619      	mov	r1, r3
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff fb27 	bl	800c8d4 <move_window>
 800d286:	4603      	mov	r3, r0
 800d288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d11d      	bne.n	800d2cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a1b      	ldr	r3, [r3, #32]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	2be5      	cmp	r3, #229	; 0xe5
 800d298:	d004      	beq.n	800d2a4 <dir_alloc+0x50>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d107      	bne.n	800d2b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	613b      	str	r3, [r7, #16]
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d102      	bne.n	800d2b8 <dir_alloc+0x64>
 800d2b2:	e00c      	b.n	800d2ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ff05 	bl	800d0ca <dir_next>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0d7      	beq.n	800d27a <dir_alloc+0x26>
 800d2ca:	e000      	b.n	800d2ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d2cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b04      	cmp	r3, #4
 800d2d2:	d101      	bne.n	800d2d8 <dir_alloc+0x84>
 800d2d4:	2307      	movs	r3, #7
 800d2d6:	75fb      	strb	r3, [r7, #23]
	return res;
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	331a      	adds	r3, #26
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff f83f 	bl	800c374 <ld_word>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d109      	bne.n	800d316 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	3314      	adds	r3, #20
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff f834 	bl	800c374 <ld_word>
 800d30c:	4603      	mov	r3, r0
 800d30e:	041b      	lsls	r3, r3, #16
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	4313      	orrs	r3, r2
 800d314:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d316:	68fb      	ldr	r3, [r7, #12]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	331a      	adds	r3, #26
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	b292      	uxth	r2, r2
 800d334:	4611      	mov	r1, r2
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff f857 	bl	800c3ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b03      	cmp	r3, #3
 800d342:	d109      	bne.n	800d358 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	f103 0214 	add.w	r2, r3, #20
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	0c1b      	lsrs	r3, r3, #16
 800d34e:	b29b      	uxth	r3, r3
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f7ff f849 	bl	800c3ea <st_word>
	}
}
 800d358:	bf00      	nop
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	331a      	adds	r3, #26
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff f800 	bl	800c374 <ld_word>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <cmp_lfn+0x1e>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e059      	b.n	800d432 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d386:	1e5a      	subs	r2, r3, #1
 800d388:	4613      	mov	r3, r2
 800d38a:	005b      	lsls	r3, r3, #1
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d394:	2301      	movs	r3, #1
 800d396:	81fb      	strh	r3, [r7, #14]
 800d398:	2300      	movs	r3, #0
 800d39a:	613b      	str	r3, [r7, #16]
 800d39c:	e033      	b.n	800d406 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d39e:	4a27      	ldr	r2, [pc, #156]	; (800d43c <cmp_lfn+0xdc>)
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe ffe1 	bl	800c374 <ld_word>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d3b6:	89fb      	ldrh	r3, [r7, #14]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d01a      	beq.n	800d3f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	2bfe      	cmp	r3, #254	; 0xfe
 800d3c0:	d812      	bhi.n	800d3e8 <cmp_lfn+0x88>
 800d3c2:	89bb      	ldrh	r3, [r7, #12]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fead 	bl	800c124 <ff_wtoupper>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	461c      	mov	r4, r3
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	1c5a      	adds	r2, r3, #1
 800d3d2:	617a      	str	r2, [r7, #20]
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	4413      	add	r3, r2
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe fea1 	bl	800c124 <ff_wtoupper>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	d001      	beq.n	800d3ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	e022      	b.n	800d432 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d3ec:	89bb      	ldrh	r3, [r7, #12]
 800d3ee:	81fb      	strh	r3, [r7, #14]
 800d3f0:	e006      	b.n	800d400 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d3f2:	89bb      	ldrh	r3, [r7, #12]
 800d3f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d001      	beq.n	800d400 <cmp_lfn+0xa0>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	e018      	b.n	800d432 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	3301      	adds	r3, #1
 800d404:	613b      	str	r3, [r7, #16]
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2b0c      	cmp	r3, #12
 800d40a:	d9c8      	bls.n	800d39e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00b      	beq.n	800d430 <cmp_lfn+0xd0>
 800d418:	89fb      	ldrh	r3, [r7, #14]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d008      	beq.n	800d430 <cmp_lfn+0xd0>
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <cmp_lfn+0xd0>
 800d42c:	2300      	movs	r3, #0
 800d42e:	e000      	b.n	800d432 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d430:	2301      	movs	r3, #1
}
 800d432:	4618      	mov	r0, r3
 800d434:	371c      	adds	r7, #28
 800d436:	46bd      	mov	sp, r7
 800d438:	bd90      	pop	{r4, r7, pc}
 800d43a:	bf00      	nop
 800d43c:	0800fbb4 	.word	0x0800fbb4

0800d440 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	4611      	mov	r1, r2
 800d44c:	461a      	mov	r2, r3
 800d44e:	460b      	mov	r3, r1
 800d450:	71fb      	strb	r3, [r7, #7]
 800d452:	4613      	mov	r3, r2
 800d454:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	330d      	adds	r3, #13
 800d45a:	79ba      	ldrb	r2, [r7, #6]
 800d45c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	330b      	adds	r3, #11
 800d462:	220f      	movs	r2, #15
 800d464:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	330c      	adds	r3, #12
 800d46a:	2200      	movs	r2, #0
 800d46c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	331a      	adds	r3, #26
 800d472:	2100      	movs	r1, #0
 800d474:	4618      	mov	r0, r3
 800d476:	f7fe ffb8 	bl	800c3ea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	1e5a      	subs	r2, r3, #1
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	4413      	add	r3, r2
 800d488:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	82fb      	strh	r3, [r7, #22]
 800d48e:	2300      	movs	r3, #0
 800d490:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d492:	8afb      	ldrh	r3, [r7, #22]
 800d494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d498:	4293      	cmp	r3, r2
 800d49a:	d007      	beq.n	800d4ac <put_lfn+0x6c>
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	1c5a      	adds	r2, r3, #1
 800d4a0:	61fa      	str	r2, [r7, #28]
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4ac:	4a17      	ldr	r2, [pc, #92]	; (800d50c <put_lfn+0xcc>)
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	8afa      	ldrh	r2, [r7, #22]
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe ff93 	bl	800c3ea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4c4:	8afb      	ldrh	r3, [r7, #22]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <put_lfn+0x90>
 800d4ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	61bb      	str	r3, [r7, #24]
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	2b0c      	cmp	r3, #12
 800d4da:	d9da      	bls.n	800d492 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d4dc:	8afb      	ldrh	r3, [r7, #22]
 800d4de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d006      	beq.n	800d4f4 <put_lfn+0xb4>
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	005b      	lsls	r3, r3, #1
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <put_lfn+0xbc>
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	79fa      	ldrb	r2, [r7, #7]
 800d500:	701a      	strb	r2, [r3, #0]
}
 800d502:	bf00      	nop
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	0800fbb4 	.word	0x0800fbb4

0800d510 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08c      	sub	sp, #48	; 0x30
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d51e:	220b      	movs	r2, #11
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7fe ffa8 	bl	800c478 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2b05      	cmp	r3, #5
 800d52c:	d929      	bls.n	800d582 <gen_numname+0x72>
		sr = seq;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d532:	e020      	b.n	800d576 <gen_numname+0x66>
			wc = *lfn++;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	1c9a      	adds	r2, r3, #2
 800d538:	607a      	str	r2, [r7, #4]
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d53e:	2300      	movs	r3, #0
 800d540:	62bb      	str	r3, [r7, #40]	; 0x28
 800d542:	e015      	b.n	800d570 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	005a      	lsls	r2, r3, #1
 800d548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	4413      	add	r3, r2
 800d550:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d554:	085b      	lsrs	r3, r3, #1
 800d556:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <gen_numname+0x5a>
 800d562:	69fa      	ldr	r2, [r7, #28]
 800d564:	4b30      	ldr	r3, [pc, #192]	; (800d628 <gen_numname+0x118>)
 800d566:	4053      	eors	r3, r2
 800d568:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56c:	3301      	adds	r3, #1
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	2b0f      	cmp	r3, #15
 800d574:	d9e6      	bls.n	800d544 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1da      	bne.n	800d534 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d582:	2307      	movs	r3, #7
 800d584:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	f003 030f 	and.w	r3, r3, #15
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	3330      	adds	r3, #48	; 0x30
 800d592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d59a:	2b39      	cmp	r3, #57	; 0x39
 800d59c:	d904      	bls.n	800d5a8 <gen_numname+0x98>
 800d59e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5a2:	3307      	adds	r3, #7
 800d5a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	1e5a      	subs	r2, r3, #1
 800d5ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5ae:	3330      	adds	r3, #48	; 0x30
 800d5b0:	443b      	add	r3, r7
 800d5b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d5b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	091b      	lsrs	r3, r3, #4
 800d5be:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1df      	bne.n	800d586 <gen_numname+0x76>
	ns[i] = '~';
 800d5c6:	f107 0214 	add.w	r2, r7, #20
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	4413      	add	r3, r2
 800d5ce:	227e      	movs	r2, #126	; 0x7e
 800d5d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d5d6:	e002      	b.n	800d5de <gen_numname+0xce>
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	3301      	adds	r3, #1
 800d5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d205      	bcs.n	800d5f2 <gen_numname+0xe2>
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	4413      	add	r3, r2
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	d1f2      	bne.n	800d5d8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	2b07      	cmp	r3, #7
 800d5f6:	d807      	bhi.n	800d608 <gen_numname+0xf8>
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5fe:	3330      	adds	r3, #48	; 0x30
 800d600:	443b      	add	r3, r7
 800d602:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d606:	e000      	b.n	800d60a <gen_numname+0xfa>
 800d608:	2120      	movs	r1, #32
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	627a      	str	r2, [r7, #36]	; 0x24
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	4413      	add	r3, r2
 800d614:	460a      	mov	r2, r1
 800d616:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	2b07      	cmp	r3, #7
 800d61c:	d9e9      	bls.n	800d5f2 <gen_numname+0xe2>
}
 800d61e:	bf00      	nop
 800d620:	bf00      	nop
 800d622:	3730      	adds	r7, #48	; 0x30
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	00011021 	.word	0x00011021

0800d62c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d638:	230b      	movs	r3, #11
 800d63a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	0852      	lsrs	r2, r2, #1
 800d642:	01db      	lsls	r3, r3, #7
 800d644:	4313      	orrs	r3, r2
 800d646:	b2da      	uxtb	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	1c59      	adds	r1, r3, #1
 800d64c:	6079      	str	r1, [r7, #4]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	4413      	add	r3, r2
 800d652:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	3b01      	subs	r3, #1
 800d658:	60bb      	str	r3, [r7, #8]
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1ed      	bne.n	800d63c <sum_sfn+0x10>
	return sum;
 800d660:	7bfb      	ldrb	r3, [r7, #15]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b086      	sub	sp, #24
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d67c:	2100      	movs	r1, #0
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7ff fca8 	bl	800cfd4 <dir_sdi>
 800d684:	4603      	mov	r3, r0
 800d686:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d688:	7dfb      	ldrb	r3, [r7, #23]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d001      	beq.n	800d692 <dir_find+0x24>
 800d68e:	7dfb      	ldrb	r3, [r7, #23]
 800d690:	e0a9      	b.n	800d7e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d692:	23ff      	movs	r3, #255	; 0xff
 800d694:	753b      	strb	r3, [r7, #20]
 800d696:	7d3b      	ldrb	r3, [r7, #20]
 800d698:	757b      	strb	r3, [r7, #21]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	69db      	ldr	r3, [r3, #28]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6938      	ldr	r0, [r7, #16]
 800d6aa:	f7ff f913 	bl	800c8d4 <move_window>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f040 8090 	bne.w	800d7da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d6c2:	7dbb      	ldrb	r3, [r7, #22]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <dir_find+0x60>
 800d6c8:	2304      	movs	r3, #4
 800d6ca:	75fb      	strb	r3, [r7, #23]
 800d6cc:	e08a      	b.n	800d7e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	330b      	adds	r3, #11
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6da:	73fb      	strb	r3, [r7, #15]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7bfa      	ldrb	r2, [r7, #15]
 800d6e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d6e2:	7dbb      	ldrb	r3, [r7, #22]
 800d6e4:	2be5      	cmp	r3, #229	; 0xe5
 800d6e6:	d007      	beq.n	800d6f8 <dir_find+0x8a>
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ea:	f003 0308 	and.w	r3, r3, #8
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d009      	beq.n	800d706 <dir_find+0x98>
 800d6f2:	7bfb      	ldrb	r3, [r7, #15]
 800d6f4:	2b0f      	cmp	r3, #15
 800d6f6:	d006      	beq.n	800d706 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	757b      	strb	r3, [r7, #21]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	631a      	str	r2, [r3, #48]	; 0x30
 800d704:	e05e      	b.n	800d7c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	2b0f      	cmp	r3, #15
 800d70a:	d136      	bne.n	800d77a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d154      	bne.n	800d7c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d71a:	7dbb      	ldrb	r3, [r7, #22]
 800d71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00d      	beq.n	800d740 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a1b      	ldr	r3, [r3, #32]
 800d728:	7b5b      	ldrb	r3, [r3, #13]
 800d72a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d72c:	7dbb      	ldrb	r3, [r7, #22]
 800d72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d732:	75bb      	strb	r3, [r7, #22]
 800d734:	7dbb      	ldrb	r3, [r7, #22]
 800d736:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	695a      	ldr	r2, [r3, #20]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d740:	7dba      	ldrb	r2, [r7, #22]
 800d742:	7d7b      	ldrb	r3, [r7, #21]
 800d744:	429a      	cmp	r2, r3
 800d746:	d115      	bne.n	800d774 <dir_find+0x106>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1b      	ldr	r3, [r3, #32]
 800d74c:	330d      	adds	r3, #13
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	7d3a      	ldrb	r2, [r7, #20]
 800d752:	429a      	cmp	r2, r3
 800d754:	d10e      	bne.n	800d774 <dir_find+0x106>
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	68da      	ldr	r2, [r3, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	4619      	mov	r1, r3
 800d760:	4610      	mov	r0, r2
 800d762:	f7ff fdfd 	bl	800d360 <cmp_lfn>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d003      	beq.n	800d774 <dir_find+0x106>
 800d76c:	7d7b      	ldrb	r3, [r7, #21]
 800d76e:	3b01      	subs	r3, #1
 800d770:	b2db      	uxtb	r3, r3
 800d772:	e000      	b.n	800d776 <dir_find+0x108>
 800d774:	23ff      	movs	r3, #255	; 0xff
 800d776:	757b      	strb	r3, [r7, #21]
 800d778:	e024      	b.n	800d7c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d77a:	7d7b      	ldrb	r3, [r7, #21]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <dir_find+0x126>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a1b      	ldr	r3, [r3, #32]
 800d784:	4618      	mov	r0, r3
 800d786:	f7ff ff51 	bl	800d62c <sum_sfn>
 800d78a:	4603      	mov	r3, r0
 800d78c:	461a      	mov	r2, r3
 800d78e:	7d3b      	ldrb	r3, [r7, #20]
 800d790:	4293      	cmp	r3, r2
 800d792:	d024      	beq.n	800d7de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10a      	bne.n	800d7b8 <dir_find+0x14a>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a18      	ldr	r0, [r3, #32]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	3324      	adds	r3, #36	; 0x24
 800d7aa:	220b      	movs	r2, #11
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	f7fe fe9f 	bl	800c4f0 <mem_cmp>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d014      	beq.n	800d7e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d7b8:	23ff      	movs	r3, #255	; 0xff
 800d7ba:	757b      	strb	r3, [r7, #21]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff fc7f 	bl	800d0ca <dir_next>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d7d0:	7dfb      	ldrb	r3, [r7, #23]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f43f af65 	beq.w	800d6a2 <dir_find+0x34>
 800d7d8:	e004      	b.n	800d7e4 <dir_find+0x176>
		if (res != FR_OK) break;
 800d7da:	bf00      	nop
 800d7dc:	e002      	b.n	800d7e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d7de:	bf00      	nop
 800d7e0:	e000      	b.n	800d7e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d7e2:	bf00      	nop

	return res;
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
	...

0800d7f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08c      	sub	sp, #48	; 0x30
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d804:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <dir_register+0x20>
 800d80c:	2306      	movs	r3, #6
 800d80e:	e0e0      	b.n	800d9d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d810:	2300      	movs	r3, #0
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
 800d814:	e002      	b.n	800d81c <dir_register+0x2c>
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	3301      	adds	r3, #1
 800d81a:	627b      	str	r3, [r7, #36]	; 0x24
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	68da      	ldr	r2, [r3, #12]
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	4413      	add	r3, r2
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1f4      	bne.n	800d816 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d832:	f107 030c 	add.w	r3, r7, #12
 800d836:	220c      	movs	r2, #12
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fe fe1d 	bl	800c478 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	2b00      	cmp	r3, #0
 800d846:	d032      	beq.n	800d8ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2240      	movs	r2, #64	; 0x40
 800d84c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d850:	2301      	movs	r3, #1
 800d852:	62bb      	str	r3, [r7, #40]	; 0x28
 800d854:	e016      	b.n	800d884 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	68da      	ldr	r2, [r3, #12]
 800d860:	f107 010c 	add.w	r1, r7, #12
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	f7ff fe53 	bl	800d510 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff feff 	bl	800d66e <dir_find>
 800d870:	4603      	mov	r3, r0
 800d872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d106      	bne.n	800d88c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	3301      	adds	r3, #1
 800d882:	62bb      	str	r3, [r7, #40]	; 0x28
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	2b63      	cmp	r3, #99	; 0x63
 800d888:	d9e5      	bls.n	800d856 <dir_register+0x66>
 800d88a:	e000      	b.n	800d88e <dir_register+0x9e>
			if (res != FR_OK) break;
 800d88c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	2b64      	cmp	r3, #100	; 0x64
 800d892:	d101      	bne.n	800d898 <dir_register+0xa8>
 800d894:	2307      	movs	r3, #7
 800d896:	e09c      	b.n	800d9d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d89c:	2b04      	cmp	r3, #4
 800d89e:	d002      	beq.n	800d8a6 <dir_register+0xb6>
 800d8a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8a4:	e095      	b.n	800d9d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d8a6:	7dfa      	ldrb	r2, [r7, #23]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
 800d8b0:	f003 0302 	and.w	r3, r3, #2
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d007      	beq.n	800d8c8 <dir_register+0xd8>
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	330c      	adds	r3, #12
 800d8bc:	4a47      	ldr	r2, [pc, #284]	; (800d9dc <dir_register+0x1ec>)
 800d8be:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c2:	089b      	lsrs	r3, r3, #2
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	e000      	b.n	800d8ca <dir_register+0xda>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d8cc:	6a39      	ldr	r1, [r7, #32]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff fcc0 	bl	800d254 <dir_alloc>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d8da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d148      	bne.n	800d974 <dir_register+0x184>
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	623b      	str	r3, [r7, #32]
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d042      	beq.n	800d974 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	695a      	ldr	r2, [r3, #20]
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	015b      	lsls	r3, r3, #5
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7ff fb6a 	bl	800cfd4 <dir_sdi>
 800d900:	4603      	mov	r3, r0
 800d902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d132      	bne.n	800d974 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3324      	adds	r3, #36	; 0x24
 800d912:	4618      	mov	r0, r3
 800d914:	f7ff fe8a 	bl	800d62c <sum_sfn>
 800d918:	4603      	mov	r3, r0
 800d91a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	4619      	mov	r1, r3
 800d922:	69f8      	ldr	r0, [r7, #28]
 800d924:	f7fe ffd6 	bl	800c8d4 <move_window>
 800d928:	4603      	mov	r3, r0
 800d92a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d92e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d932:	2b00      	cmp	r3, #0
 800d934:	d11d      	bne.n	800d972 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	68d8      	ldr	r0, [r3, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a19      	ldr	r1, [r3, #32]
 800d93e:	6a3b      	ldr	r3, [r7, #32]
 800d940:	b2da      	uxtb	r2, r3
 800d942:	7efb      	ldrb	r3, [r7, #27]
 800d944:	f7ff fd7c 	bl	800d440 <put_lfn>
				fs->wflag = 1;
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	2201      	movs	r2, #1
 800d94c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d94e:	2100      	movs	r1, #0
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff fbba 	bl	800d0ca <dir_next>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d95c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d960:	2b00      	cmp	r3, #0
 800d962:	d107      	bne.n	800d974 <dir_register+0x184>
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	3b01      	subs	r3, #1
 800d968:	623b      	str	r3, [r7, #32]
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1d5      	bne.n	800d91c <dir_register+0x12c>
 800d970:	e000      	b.n	800d974 <dir_register+0x184>
				if (res != FR_OK) break;
 800d972:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d128      	bne.n	800d9ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	4619      	mov	r1, r3
 800d982:	69f8      	ldr	r0, [r7, #28]
 800d984:	f7fe ffa6 	bl	800c8d4 <move_window>
 800d988:	4603      	mov	r3, r0
 800d98a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d98e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d992:	2b00      	cmp	r3, #0
 800d994:	d11b      	bne.n	800d9ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	2220      	movs	r2, #32
 800d99c:	2100      	movs	r1, #0
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe fd8b 	bl	800c4ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a18      	ldr	r0, [r3, #32]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	3324      	adds	r3, #36	; 0x24
 800d9ac:	220b      	movs	r2, #11
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f7fe fd62 	bl	800c478 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	330c      	adds	r3, #12
 800d9c0:	f002 0218 	and.w	r2, r2, #24
 800d9c4:	b2d2      	uxtb	r2, r2
 800d9c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3730      	adds	r7, #48	; 0x30
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	4ec4ec4f 	.word	0x4ec4ec4f

0800d9e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08a      	sub	sp, #40	; 0x28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	613b      	str	r3, [r7, #16]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	617b      	str	r3, [r7, #20]
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	61ba      	str	r2, [r7, #24]
 800da06:	693a      	ldr	r2, [r7, #16]
 800da08:	4413      	add	r3, r2
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800da0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da10:	2b1f      	cmp	r3, #31
 800da12:	d940      	bls.n	800da96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800da14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da16:	2b2f      	cmp	r3, #47	; 0x2f
 800da18:	d006      	beq.n	800da28 <create_name+0x48>
 800da1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da1c:	2b5c      	cmp	r3, #92	; 0x5c
 800da1e:	d110      	bne.n	800da42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da20:	e002      	b.n	800da28 <create_name+0x48>
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	3301      	adds	r3, #1
 800da26:	61bb      	str	r3, [r7, #24]
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	4413      	add	r3, r2
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b2f      	cmp	r3, #47	; 0x2f
 800da32:	d0f6      	beq.n	800da22 <create_name+0x42>
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	4413      	add	r3, r2
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b5c      	cmp	r3, #92	; 0x5c
 800da3e:	d0f0      	beq.n	800da22 <create_name+0x42>
			break;
 800da40:	e02a      	b.n	800da98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2bfe      	cmp	r3, #254	; 0xfe
 800da46:	d901      	bls.n	800da4c <create_name+0x6c>
 800da48:	2306      	movs	r3, #6
 800da4a:	e17d      	b.n	800dd48 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800da4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800da52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da54:	2101      	movs	r1, #1
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe fb28 	bl	800c0ac <ff_convert>
 800da5c:	4603      	mov	r3, r0
 800da5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800da60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <create_name+0x8a>
 800da66:	2306      	movs	r3, #6
 800da68:	e16e      	b.n	800dd48 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da6c:	2b7f      	cmp	r3, #127	; 0x7f
 800da6e:	d809      	bhi.n	800da84 <create_name+0xa4>
 800da70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da72:	4619      	mov	r1, r3
 800da74:	488d      	ldr	r0, [pc, #564]	; (800dcac <create_name+0x2cc>)
 800da76:	f7fe fd62 	bl	800c53e <chk_chr>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <create_name+0xa4>
 800da80:	2306      	movs	r3, #6
 800da82:	e161      	b.n	800dd48 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	617a      	str	r2, [r7, #20]
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	4413      	add	r3, r2
 800da90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da94:	e7b4      	b.n	800da00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	441a      	add	r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800daa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daa4:	2b1f      	cmp	r3, #31
 800daa6:	d801      	bhi.n	800daac <create_name+0xcc>
 800daa8:	2304      	movs	r3, #4
 800daaa:	e000      	b.n	800daae <create_name+0xce>
 800daac:	2300      	movs	r3, #0
 800daae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dab2:	e011      	b.n	800dad8 <create_name+0xf8>
		w = lfn[di - 1];
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800daba:	4413      	add	r3, r2
 800dabc:	005b      	lsls	r3, r3, #1
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	4413      	add	r3, r2
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dac8:	2b20      	cmp	r3, #32
 800daca:	d002      	beq.n	800dad2 <create_name+0xf2>
 800dacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dace:	2b2e      	cmp	r3, #46	; 0x2e
 800dad0:	d106      	bne.n	800dae0 <create_name+0x100>
		di--;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1ea      	bne.n	800dab4 <create_name+0xd4>
 800dade:	e000      	b.n	800dae2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dae0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	4413      	add	r3, r2
 800daea:	2200      	movs	r2, #0
 800daec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <create_name+0x118>
 800daf4:	2306      	movs	r3, #6
 800daf6:	e127      	b.n	800dd48 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	3324      	adds	r3, #36	; 0x24
 800dafc:	220b      	movs	r2, #11
 800dafe:	2120      	movs	r1, #32
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fcda 	bl	800c4ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800db06:	2300      	movs	r3, #0
 800db08:	61bb      	str	r3, [r7, #24]
 800db0a:	e002      	b.n	800db12 <create_name+0x132>
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	3301      	adds	r3, #1
 800db10:	61bb      	str	r3, [r7, #24]
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4413      	add	r3, r2
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	2b20      	cmp	r3, #32
 800db1e:	d0f5      	beq.n	800db0c <create_name+0x12c>
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	4413      	add	r3, r2
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	2b2e      	cmp	r3, #46	; 0x2e
 800db2c:	d0ee      	beq.n	800db0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d009      	beq.n	800db48 <create_name+0x168>
 800db34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db38:	f043 0303 	orr.w	r3, r3, #3
 800db3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800db40:	e002      	b.n	800db48 <create_name+0x168>
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	3b01      	subs	r3, #1
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d009      	beq.n	800db62 <create_name+0x182>
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db54:	4413      	add	r3, r2
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	4413      	add	r3, r2
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	2b2e      	cmp	r3, #46	; 0x2e
 800db60:	d1ef      	bne.n	800db42 <create_name+0x162>

	i = b = 0; ni = 8;
 800db62:	2300      	movs	r3, #0
 800db64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db68:	2300      	movs	r3, #0
 800db6a:	623b      	str	r3, [r7, #32]
 800db6c:	2308      	movs	r3, #8
 800db6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	61ba      	str	r2, [r7, #24]
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	4413      	add	r3, r2
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 8090 	beq.w	800dca8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db8a:	2b20      	cmp	r3, #32
 800db8c:	d006      	beq.n	800db9c <create_name+0x1bc>
 800db8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db90:	2b2e      	cmp	r3, #46	; 0x2e
 800db92:	d10a      	bne.n	800dbaa <create_name+0x1ca>
 800db94:	69ba      	ldr	r2, [r7, #24]
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d006      	beq.n	800dbaa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800db9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba0:	f043 0303 	orr.w	r3, r3, #3
 800dba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dba8:	e07d      	b.n	800dca6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d203      	bcs.n	800dbba <create_name+0x1da>
 800dbb2:	69ba      	ldr	r2, [r7, #24]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d123      	bne.n	800dc02 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	2b0b      	cmp	r3, #11
 800dbbe:	d106      	bne.n	800dbce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc4:	f043 0303 	orr.w	r3, r3, #3
 800dbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbcc:	e075      	b.n	800dcba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dbce:	69ba      	ldr	r2, [r7, #24]
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d005      	beq.n	800dbe2 <create_name+0x202>
 800dbd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbda:	f043 0303 	orr.w	r3, r3, #3
 800dbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dbe2:	69ba      	ldr	r2, [r7, #24]
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d866      	bhi.n	800dcb8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	2308      	movs	r3, #8
 800dbf0:	623b      	str	r3, [r7, #32]
 800dbf2:	230b      	movs	r3, #11
 800dbf4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dbf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc00:	e051      	b.n	800dca6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dc02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc04:	2b7f      	cmp	r3, #127	; 0x7f
 800dc06:	d914      	bls.n	800dc32 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dc08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fe fa4d 	bl	800c0ac <ff_convert>
 800dc12:	4603      	mov	r3, r0
 800dc14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dc16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d004      	beq.n	800dc26 <create_name+0x246>
 800dc1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc1e:	3b80      	subs	r3, #128	; 0x80
 800dc20:	4a23      	ldr	r2, [pc, #140]	; (800dcb0 <create_name+0x2d0>)
 800dc22:	5cd3      	ldrb	r3, [r2, r3]
 800dc24:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc2a:	f043 0302 	orr.w	r3, r3, #2
 800dc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d007      	beq.n	800dc48 <create_name+0x268>
 800dc38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	481d      	ldr	r0, [pc, #116]	; (800dcb4 <create_name+0x2d4>)
 800dc3e:	f7fe fc7e 	bl	800c53e <chk_chr>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d008      	beq.n	800dc5a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dc48:	235f      	movs	r3, #95	; 0x5f
 800dc4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc50:	f043 0303 	orr.w	r3, r3, #3
 800dc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc58:	e01b      	b.n	800dc92 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dc5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc5c:	2b40      	cmp	r3, #64	; 0x40
 800dc5e:	d909      	bls.n	800dc74 <create_name+0x294>
 800dc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc62:	2b5a      	cmp	r3, #90	; 0x5a
 800dc64:	d806      	bhi.n	800dc74 <create_name+0x294>
					b |= 2;
 800dc66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc6a:	f043 0302 	orr.w	r3, r3, #2
 800dc6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc72:	e00e      	b.n	800dc92 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dc74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc76:	2b60      	cmp	r3, #96	; 0x60
 800dc78:	d90b      	bls.n	800dc92 <create_name+0x2b2>
 800dc7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7c:	2b7a      	cmp	r3, #122	; 0x7a
 800dc7e:	d808      	bhi.n	800dc92 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc84:	f043 0301 	orr.w	r3, r3, #1
 800dc88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8e:	3b20      	subs	r3, #32
 800dc90:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc92:	6a3b      	ldr	r3, [r7, #32]
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	623a      	str	r2, [r7, #32]
 800dc98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc9a:	b2d1      	uxtb	r1, r2
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	4413      	add	r3, r2
 800dca0:	460a      	mov	r2, r1
 800dca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dca6:	e763      	b.n	800db70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dca8:	bf00      	nop
 800dcaa:	e006      	b.n	800dcba <create_name+0x2da>
 800dcac:	0800f6e8 	.word	0x0800f6e8
 800dcb0:	0800fb34 	.word	0x0800fb34
 800dcb4:	0800f6f4 	.word	0x0800f6f4
			if (si > di) break;			/* No extension */
 800dcb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcc0:	2be5      	cmp	r3, #229	; 0xe5
 800dcc2:	d103      	bne.n	800dccc <create_name+0x2ec>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2205      	movs	r2, #5
 800dcc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	2b08      	cmp	r3, #8
 800dcd0:	d104      	bne.n	800dcdc <create_name+0x2fc>
 800dcd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dcdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dce0:	f003 030c 	and.w	r3, r3, #12
 800dce4:	2b0c      	cmp	r3, #12
 800dce6:	d005      	beq.n	800dcf4 <create_name+0x314>
 800dce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcec:	f003 0303 	and.w	r3, r3, #3
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d105      	bne.n	800dd00 <create_name+0x320>
 800dcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf8:	f043 0302 	orr.w	r3, r3, #2
 800dcfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dd00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd04:	f003 0302 	and.w	r3, r3, #2
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d117      	bne.n	800dd3c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dd0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd10:	f003 0303 	and.w	r3, r3, #3
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d105      	bne.n	800dd24 <create_name+0x344>
 800dd18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd1c:	f043 0310 	orr.w	r3, r3, #16
 800dd20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd28:	f003 030c 	and.w	r3, r3, #12
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	d105      	bne.n	800dd3c <create_name+0x35c>
 800dd30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd34:	f043 0308 	orr.w	r3, r3, #8
 800dd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dd46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3728      	adds	r7, #40	; 0x28
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd64:	e002      	b.n	800dd6c <follow_path+0x1c>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	603b      	str	r3, [r7, #0]
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b2f      	cmp	r3, #47	; 0x2f
 800dd72:	d0f8      	beq.n	800dd66 <follow_path+0x16>
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b5c      	cmp	r3, #92	; 0x5c
 800dd7a:	d0f4      	beq.n	800dd66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b1f      	cmp	r3, #31
 800dd88:	d80a      	bhi.n	800dda0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2280      	movs	r2, #128	; 0x80
 800dd8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dd92:	2100      	movs	r1, #0
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff f91d 	bl	800cfd4 <dir_sdi>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	75fb      	strb	r3, [r7, #23]
 800dd9e:	e043      	b.n	800de28 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dda0:	463b      	mov	r3, r7
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff fe1b 	bl	800d9e0 <create_name>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d134      	bne.n	800de1e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fc5a 	bl	800d66e <dir_find>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ddc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddc6:	7dfb      	ldrb	r3, [r7, #23]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00a      	beq.n	800dde2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	2b04      	cmp	r3, #4
 800ddd0:	d127      	bne.n	800de22 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddd2:	7afb      	ldrb	r3, [r7, #11]
 800ddd4:	f003 0304 	and.w	r3, r3, #4
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d122      	bne.n	800de22 <follow_path+0xd2>
 800dddc:	2305      	movs	r3, #5
 800ddde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dde0:	e01f      	b.n	800de22 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dde2:	7afb      	ldrb	r3, [r7, #11]
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11c      	bne.n	800de26 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	799b      	ldrb	r3, [r3, #6]
 800ddf0:	f003 0310 	and.w	r3, r3, #16
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ddf8:	2305      	movs	r3, #5
 800ddfa:	75fb      	strb	r3, [r7, #23]
 800ddfc:	e014      	b.n	800de28 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	695b      	ldr	r3, [r3, #20]
 800de08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de0c:	4413      	add	r3, r2
 800de0e:	4619      	mov	r1, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7ff fa66 	bl	800d2e2 <ld_clust>
 800de16:	4602      	mov	r2, r0
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de1c:	e7c0      	b.n	800dda0 <follow_path+0x50>
			if (res != FR_OK) break;
 800de1e:	bf00      	nop
 800de20:	e002      	b.n	800de28 <follow_path+0xd8>
				break;
 800de22:	bf00      	nop
 800de24:	e000      	b.n	800de28 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de26:	bf00      	nop
			}
		}
	}

	return res;
 800de28:	7dfb      	ldrb	r3, [r7, #23]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de32:	b480      	push	{r7}
 800de34:	b087      	sub	sp, #28
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de3a:	f04f 33ff 	mov.w	r3, #4294967295
 800de3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d031      	beq.n	800deac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e002      	b.n	800de56 <get_ldnumber+0x24>
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	3301      	adds	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b1f      	cmp	r3, #31
 800de5c:	d903      	bls.n	800de66 <get_ldnumber+0x34>
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b3a      	cmp	r3, #58	; 0x3a
 800de64:	d1f4      	bne.n	800de50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b3a      	cmp	r3, #58	; 0x3a
 800de6c:	d11c      	bne.n	800dea8 <get_ldnumber+0x76>
			tp = *path;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	1c5a      	adds	r2, r3, #1
 800de78:	60fa      	str	r2, [r7, #12]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	3b30      	subs	r3, #48	; 0x30
 800de7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b09      	cmp	r3, #9
 800de84:	d80e      	bhi.n	800dea4 <get_ldnumber+0x72>
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d10a      	bne.n	800dea4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d107      	bne.n	800dea4 <get_ldnumber+0x72>
					vol = (int)i;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	3301      	adds	r3, #1
 800de9c:	617b      	str	r3, [r7, #20]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	e002      	b.n	800deae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dea8:	2300      	movs	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800deac:	693b      	ldr	r3, [r7, #16]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
	...

0800debc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	70da      	strb	r2, [r3, #3]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7fe fcfc 	bl	800c8d4 <move_window>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <check_fs+0x2a>
 800dee2:	2304      	movs	r3, #4
 800dee4:	e038      	b.n	800df58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3334      	adds	r3, #52	; 0x34
 800deea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800deee:	4618      	mov	r0, r3
 800def0:	f7fe fa40 	bl	800c374 <ld_word>
 800def4:	4603      	mov	r3, r0
 800def6:	461a      	mov	r2, r3
 800def8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800defc:	429a      	cmp	r2, r3
 800defe:	d001      	beq.n	800df04 <check_fs+0x48>
 800df00:	2303      	movs	r3, #3
 800df02:	e029      	b.n	800df58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df0a:	2be9      	cmp	r3, #233	; 0xe9
 800df0c:	d009      	beq.n	800df22 <check_fs+0x66>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df14:	2beb      	cmp	r3, #235	; 0xeb
 800df16:	d11e      	bne.n	800df56 <check_fs+0x9a>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df1e:	2b90      	cmp	r3, #144	; 0x90
 800df20:	d119      	bne.n	800df56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3334      	adds	r3, #52	; 0x34
 800df26:	3336      	adds	r3, #54	; 0x36
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fe fa3b 	bl	800c3a4 <ld_dword>
 800df2e:	4603      	mov	r3, r0
 800df30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df34:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <check_fs+0xa4>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d101      	bne.n	800df3e <check_fs+0x82>
 800df3a:	2300      	movs	r3, #0
 800df3c:	e00c      	b.n	800df58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3334      	adds	r3, #52	; 0x34
 800df42:	3352      	adds	r3, #82	; 0x52
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe fa2d 	bl	800c3a4 <ld_dword>
 800df4a:	4603      	mov	r3, r0
 800df4c:	4a05      	ldr	r2, [pc, #20]	; (800df64 <check_fs+0xa8>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d101      	bne.n	800df56 <check_fs+0x9a>
 800df52:	2300      	movs	r3, #0
 800df54:	e000      	b.n	800df58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df56:	2302      	movs	r3, #2
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	00544146 	.word	0x00544146
 800df64:	33544146 	.word	0x33544146

0800df68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b096      	sub	sp, #88	; 0x58
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	4613      	mov	r3, r2
 800df74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f7ff ff58 	bl	800de32 <get_ldnumber>
 800df82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df86:	2b00      	cmp	r3, #0
 800df88:	da01      	bge.n	800df8e <find_volume+0x26>
 800df8a:	230b      	movs	r3, #11
 800df8c:	e22d      	b.n	800e3ea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df8e:	4aa1      	ldr	r2, [pc, #644]	; (800e214 <find_volume+0x2ac>)
 800df90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <find_volume+0x3a>
 800df9e:	230c      	movs	r3, #12
 800dfa0:	e223      	b.n	800e3ea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfa6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	f023 0301 	bic.w	r3, r3, #1
 800dfae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d01a      	beq.n	800dfee <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	785b      	ldrb	r3, [r3, #1]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe f93b 	bl	800c238 <disk_status>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10c      	bne.n	800dfee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d007      	beq.n	800dfea <find_volume+0x82>
 800dfda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfde:	f003 0304 	and.w	r3, r3, #4
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfe6:	230a      	movs	r3, #10
 800dfe8:	e1ff      	b.n	800e3ea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dfea:	2300      	movs	r3, #0
 800dfec:	e1fd      	b.n	800e3ea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff0:	2200      	movs	r2, #0
 800dff2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	785b      	ldrb	r3, [r3, #1]
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe f933 	bl	800c26c <disk_initialize>
 800e006:	4603      	mov	r3, r0
 800e008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e00c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e018:	2303      	movs	r3, #3
 800e01a:	e1e6      	b.n	800e3ea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e01c:	79fb      	ldrb	r3, [r7, #7]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d007      	beq.n	800e032 <find_volume+0xca>
 800e022:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e026:	f003 0304 	and.w	r3, r3, #4
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e02e:	230a      	movs	r3, #10
 800e030:	e1db      	b.n	800e3ea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e036:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e03a:	f7ff ff3f 	bl	800debc <check_fs>
 800e03e:	4603      	mov	r3, r0
 800e040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e048:	2b02      	cmp	r3, #2
 800e04a:	d149      	bne.n	800e0e0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e04c:	2300      	movs	r3, #0
 800e04e:	643b      	str	r3, [r7, #64]	; 0x40
 800e050:	e01e      	b.n	800e090 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e054:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e05a:	011b      	lsls	r3, r3, #4
 800e05c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e060:	4413      	add	r3, r2
 800e062:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e066:	3304      	adds	r3, #4
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d006      	beq.n	800e07c <find_volume+0x114>
 800e06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e070:	3308      	adds	r3, #8
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe f996 	bl	800c3a4 <ld_dword>
 800e078:	4602      	mov	r2, r0
 800e07a:	e000      	b.n	800e07e <find_volume+0x116>
 800e07c:	2200      	movs	r2, #0
 800e07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	3358      	adds	r3, #88	; 0x58
 800e084:	443b      	add	r3, r7
 800e086:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e08c:	3301      	adds	r3, #1
 800e08e:	643b      	str	r3, [r7, #64]	; 0x40
 800e090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e092:	2b03      	cmp	r3, #3
 800e094:	d9dd      	bls.n	800e052 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e096:	2300      	movs	r3, #0
 800e098:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <find_volume+0x13e>
 800e0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	3358      	adds	r3, #88	; 0x58
 800e0ac:	443b      	add	r3, r7
 800e0ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d005      	beq.n	800e0c6 <find_volume+0x15e>
 800e0ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0be:	f7ff fefd 	bl	800debc <check_fs>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	e000      	b.n	800e0c8 <find_volume+0x160>
 800e0c6:	2303      	movs	r3, #3
 800e0c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d905      	bls.n	800e0e0 <find_volume+0x178>
 800e0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	643b      	str	r3, [r7, #64]	; 0x40
 800e0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d9e2      	bls.n	800e0a6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0e4:	2b04      	cmp	r3, #4
 800e0e6:	d101      	bne.n	800e0ec <find_volume+0x184>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e17e      	b.n	800e3ea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d901      	bls.n	800e0f8 <find_volume+0x190>
 800e0f4:	230d      	movs	r3, #13
 800e0f6:	e178      	b.n	800e3ea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fa:	3334      	adds	r3, #52	; 0x34
 800e0fc:	330b      	adds	r3, #11
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe f938 	bl	800c374 <ld_word>
 800e104:	4603      	mov	r3, r0
 800e106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e10a:	d001      	beq.n	800e110 <find_volume+0x1a8>
 800e10c:	230d      	movs	r3, #13
 800e10e:	e16c      	b.n	800e3ea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	3334      	adds	r3, #52	; 0x34
 800e114:	3316      	adds	r3, #22
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe f92c 	bl	800c374 <ld_word>
 800e11c:	4603      	mov	r3, r0
 800e11e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e122:	2b00      	cmp	r3, #0
 800e124:	d106      	bne.n	800e134 <find_volume+0x1cc>
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	3334      	adds	r3, #52	; 0x34
 800e12a:	3324      	adds	r3, #36	; 0x24
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe f939 	bl	800c3a4 <ld_dword>
 800e132:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e138:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e142:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	789b      	ldrb	r3, [r3, #2]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d005      	beq.n	800e158 <find_volume+0x1f0>
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	789b      	ldrb	r3, [r3, #2]
 800e150:	2b02      	cmp	r3, #2
 800e152:	d001      	beq.n	800e158 <find_volume+0x1f0>
 800e154:	230d      	movs	r3, #13
 800e156:	e148      	b.n	800e3ea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	789b      	ldrb	r3, [r3, #2]
 800e15c:	461a      	mov	r2, r3
 800e15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e160:	fb02 f303 	mul.w	r3, r2, r3
 800e164:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	895b      	ldrh	r3, [r3, #10]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d008      	beq.n	800e18c <find_volume+0x224>
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	895b      	ldrh	r3, [r3, #10]
 800e17e:	461a      	mov	r2, r3
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	895b      	ldrh	r3, [r3, #10]
 800e184:	3b01      	subs	r3, #1
 800e186:	4013      	ands	r3, r2
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <find_volume+0x228>
 800e18c:	230d      	movs	r3, #13
 800e18e:	e12c      	b.n	800e3ea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e192:	3334      	adds	r3, #52	; 0x34
 800e194:	3311      	adds	r3, #17
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe f8ec 	bl	800c374 <ld_word>
 800e19c:	4603      	mov	r3, r0
 800e19e:	461a      	mov	r2, r3
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	f003 030f 	and.w	r3, r3, #15
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <find_volume+0x24e>
 800e1b2:	230d      	movs	r3, #13
 800e1b4:	e119      	b.n	800e3ea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b8:	3334      	adds	r3, #52	; 0x34
 800e1ba:	3313      	adds	r3, #19
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe f8d9 	bl	800c374 <ld_word>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <find_volume+0x272>
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ce:	3334      	adds	r3, #52	; 0x34
 800e1d0:	3320      	adds	r3, #32
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe f8e6 	bl	800c3a4 <ld_dword>
 800e1d8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	3334      	adds	r3, #52	; 0x34
 800e1de:	330e      	adds	r3, #14
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe f8c7 	bl	800c374 <ld_word>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <find_volume+0x28c>
 800e1f0:	230d      	movs	r3, #13
 800e1f2:	e0fa      	b.n	800e3ea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1f8:	4413      	add	r3, r2
 800e1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1fc:	8912      	ldrh	r2, [r2, #8]
 800e1fe:	0912      	lsrs	r2, r2, #4
 800e200:	b292      	uxth	r2, r2
 800e202:	4413      	add	r3, r2
 800e204:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d204      	bcs.n	800e218 <find_volume+0x2b0>
 800e20e:	230d      	movs	r3, #13
 800e210:	e0eb      	b.n	800e3ea <find_volume+0x482>
 800e212:	bf00      	nop
 800e214:	24001730 	.word	0x24001730
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e220:	8952      	ldrh	r2, [r2, #10]
 800e222:	fbb3 f3f2 	udiv	r3, r3, r2
 800e226:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d101      	bne.n	800e232 <find_volume+0x2ca>
 800e22e:	230d      	movs	r3, #13
 800e230:	e0db      	b.n	800e3ea <find_volume+0x482>
		fmt = FS_FAT32;
 800e232:	2303      	movs	r3, #3
 800e234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e23e:	4293      	cmp	r3, r2
 800e240:	d802      	bhi.n	800e248 <find_volume+0x2e0>
 800e242:	2302      	movs	r3, #2
 800e244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e24e:	4293      	cmp	r3, r2
 800e250:	d802      	bhi.n	800e258 <find_volume+0x2f0>
 800e252:	2301      	movs	r3, #1
 800e254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	1c9a      	adds	r2, r3, #2
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e264:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e266:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e26a:	441a      	add	r2, r3
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	441a      	add	r2, r3
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e27a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d11e      	bne.n	800e2c0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	3334      	adds	r3, #52	; 0x34
 800e286:	332a      	adds	r3, #42	; 0x2a
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe f873 	bl	800c374 <ld_word>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <find_volume+0x330>
 800e294:	230d      	movs	r3, #13
 800e296:	e0a8      	b.n	800e3ea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	891b      	ldrh	r3, [r3, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <find_volume+0x33c>
 800e2a0:	230d      	movs	r3, #13
 800e2a2:	e0a2      	b.n	800e3ea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a6:	3334      	adds	r3, #52	; 0x34
 800e2a8:	332c      	adds	r3, #44	; 0x2c
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe f87a 	bl	800c3a4 <ld_dword>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e2be:	e01f      	b.n	800e300 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	891b      	ldrh	r3, [r3, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <find_volume+0x364>
 800e2c8:	230d      	movs	r3, #13
 800e2ca:	e08e      	b.n	800e3ea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2d2:	441a      	add	r2, r3
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	d103      	bne.n	800e2e8 <find_volume+0x380>
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	e00a      	b.n	800e2fe <find_volume+0x396>
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	699a      	ldr	r2, [r3, #24]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	4413      	add	r3, r2
 800e2f2:	085a      	lsrs	r2, r3, #1
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	699b      	ldr	r3, [r3, #24]
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	69da      	ldr	r2, [r3, #28]
 800e304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e306:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e30a:	0a5b      	lsrs	r3, r3, #9
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d201      	bcs.n	800e314 <find_volume+0x3ac>
 800e310:	230d      	movs	r3, #13
 800e312:	e06a      	b.n	800e3ea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e316:	f04f 32ff 	mov.w	r2, #4294967295
 800e31a:	615a      	str	r2, [r3, #20]
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	695a      	ldr	r2, [r3, #20]
 800e320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e322:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	2280      	movs	r2, #128	; 0x80
 800e328:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e32a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d149      	bne.n	800e3c6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	3334      	adds	r3, #52	; 0x34
 800e336:	3330      	adds	r3, #48	; 0x30
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe f81b 	bl	800c374 <ld_word>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b01      	cmp	r3, #1
 800e342:	d140      	bne.n	800e3c6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e346:	3301      	adds	r3, #1
 800e348:	4619      	mov	r1, r3
 800e34a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e34c:	f7fe fac2 	bl	800c8d4 <move_window>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d137      	bne.n	800e3c6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e358:	2200      	movs	r2, #0
 800e35a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	3334      	adds	r3, #52	; 0x34
 800e360:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e364:	4618      	mov	r0, r3
 800e366:	f7fe f805 	bl	800c374 <ld_word>
 800e36a:	4603      	mov	r3, r0
 800e36c:	461a      	mov	r2, r3
 800e36e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e372:	429a      	cmp	r2, r3
 800e374:	d127      	bne.n	800e3c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	3334      	adds	r3, #52	; 0x34
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fe f812 	bl	800c3a4 <ld_dword>
 800e380:	4603      	mov	r3, r0
 800e382:	4a1c      	ldr	r2, [pc, #112]	; (800e3f4 <find_volume+0x48c>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d11e      	bne.n	800e3c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	3334      	adds	r3, #52	; 0x34
 800e38c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe f807 	bl	800c3a4 <ld_dword>
 800e396:	4603      	mov	r3, r0
 800e398:	4a17      	ldr	r2, [pc, #92]	; (800e3f8 <find_volume+0x490>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d113      	bne.n	800e3c6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	3334      	adds	r3, #52	; 0x34
 800e3a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd fffc 	bl	800c3a4 <ld_dword>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	3334      	adds	r3, #52	; 0x34
 800e3b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fd fff2 	bl	800c3a4 <ld_dword>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e3cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <find_volume+0x494>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	4b09      	ldr	r3, [pc, #36]	; (800e3fc <find_volume+0x494>)
 800e3d8:	801a      	strh	r2, [r3, #0]
 800e3da:	4b08      	ldr	r3, [pc, #32]	; (800e3fc <find_volume+0x494>)
 800e3dc:	881a      	ldrh	r2, [r3, #0]
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3e4:	f7fe fa0e 	bl	800c804 <clear_lock>
#endif
	return FR_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3758      	adds	r7, #88	; 0x58
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	41615252 	.word	0x41615252
 800e3f8:	61417272 	.word	0x61417272
 800e3fc:	24001734 	.word	0x24001734

0800e400 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e40a:	2309      	movs	r3, #9
 800e40c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01c      	beq.n	800e44e <validate+0x4e>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d018      	beq.n	800e44e <validate+0x4e>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d013      	beq.n	800e44e <validate+0x4e>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	889a      	ldrh	r2, [r3, #4]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	88db      	ldrh	r3, [r3, #6]
 800e430:	429a      	cmp	r2, r3
 800e432:	d10c      	bne.n	800e44e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	785b      	ldrb	r3, [r3, #1]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fd fefc 	bl	800c238 <disk_status>
 800e440:	4603      	mov	r3, r0
 800e442:	f003 0301 	and.w	r3, r3, #1
 800e446:	2b00      	cmp	r3, #0
 800e448:	d101      	bne.n	800e44e <validate+0x4e>
			res = FR_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e44e:	7bfb      	ldrb	r3, [r7, #15]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <validate+0x5a>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	e000      	b.n	800e45c <validate+0x5c>
 800e45a:	2300      	movs	r3, #0
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	6013      	str	r3, [r2, #0]
	return res;
 800e460:	7bfb      	ldrb	r3, [r7, #15]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e47e:	f107 0310 	add.w	r3, r7, #16
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff fcd5 	bl	800de32 <get_ldnumber>
 800e488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	da01      	bge.n	800e494 <f_mount+0x28>
 800e490:	230b      	movs	r3, #11
 800e492:	e02b      	b.n	800e4ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e494:	4a17      	ldr	r2, [pc, #92]	; (800e4f4 <f_mount+0x88>)
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e49c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d005      	beq.n	800e4b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4a4:	69b8      	ldr	r0, [r7, #24]
 800e4a6:	f7fe f9ad 	bl	800c804 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	490d      	ldr	r1, [pc, #52]	; (800e4f4 <f_mount+0x88>)
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <f_mount+0x66>
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d001      	beq.n	800e4d6 <f_mount+0x6a>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	e00a      	b.n	800e4ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4d6:	f107 010c 	add.w	r1, r7, #12
 800e4da:	f107 0308 	add.w	r3, r7, #8
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fd41 	bl	800df68 <find_volume>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3720      	adds	r7, #32
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	24001730 	.word	0x24001730

0800e4f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b09a      	sub	sp, #104	; 0x68
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	4613      	mov	r3, r2
 800e504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <f_open+0x18>
 800e50c:	2309      	movs	r3, #9
 800e50e:	e1bd      	b.n	800e88c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e518:	79fa      	ldrb	r2, [r7, #7]
 800e51a:	f107 0110 	add.w	r1, r7, #16
 800e51e:	f107 0308 	add.w	r3, r7, #8
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fd20 	bl	800df68 <find_volume>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e52e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e532:	2b00      	cmp	r3, #0
 800e534:	f040 81a1 	bne.w	800e87a <f_open+0x382>
		dj.obj.fs = fs;
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800e53c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e540:	f000 ff69 	bl	800f416 <ff_memalloc>
 800e544:	65b8      	str	r0, [r7, #88]	; 0x58
 800e546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <f_open+0x58>
 800e54c:	2311      	movs	r3, #17
 800e54e:	e19d      	b.n	800e88c <f_open+0x394>
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e554:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	f107 0314 	add.w	r3, r7, #20
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f7ff fbf6 	bl	800dd50 <follow_path>
 800e564:	4603      	mov	r3, r0
 800e566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e56a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d11a      	bne.n	800e5a8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e572:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e576:	b25b      	sxtb	r3, r3
 800e578:	2b00      	cmp	r3, #0
 800e57a:	da03      	bge.n	800e584 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800e57c:	2306      	movs	r3, #6
 800e57e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e582:	e011      	b.n	800e5a8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e584:	79fb      	ldrb	r3, [r7, #7]
 800e586:	f023 0301 	bic.w	r3, r3, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	bf14      	ite	ne
 800e58e:	2301      	movne	r3, #1
 800e590:	2300      	moveq	r3, #0
 800e592:	b2db      	uxtb	r3, r3
 800e594:	461a      	mov	r2, r3
 800e596:	f107 0314 	add.w	r3, r7, #20
 800e59a:	4611      	mov	r1, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fd ffe9 	bl	800c574 <chk_lock>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	f003 031c 	and.w	r3, r3, #28
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d07f      	beq.n	800e6b2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800e5b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d017      	beq.n	800e5ea <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d10e      	bne.n	800e5e0 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5c2:	f7fe f833 	bl	800c62c <enq_lock>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <f_open+0xe2>
 800e5cc:	f107 0314 	add.w	r3, r7, #20
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff f90d 	bl	800d7f0 <dir_register>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	e000      	b.n	800e5dc <f_open+0xe4>
 800e5da:	2312      	movs	r3, #18
 800e5dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5e0:	79fb      	ldrb	r3, [r7, #7]
 800e5e2:	f043 0308 	orr.w	r3, r3, #8
 800e5e6:	71fb      	strb	r3, [r7, #7]
 800e5e8:	e010      	b.n	800e60c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5ea:	7ebb      	ldrb	r3, [r7, #26]
 800e5ec:	f003 0311 	and.w	r3, r3, #17
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d003      	beq.n	800e5fc <f_open+0x104>
					res = FR_DENIED;
 800e5f4:	2307      	movs	r3, #7
 800e5f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5fa:	e007      	b.n	800e60c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5fc:	79fb      	ldrb	r3, [r7, #7]
 800e5fe:	f003 0304 	and.w	r3, r3, #4
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <f_open+0x114>
 800e606:	2308      	movs	r3, #8
 800e608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e60c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e610:	2b00      	cmp	r3, #0
 800e612:	d168      	bne.n	800e6e6 <f_open+0x1ee>
 800e614:	79fb      	ldrb	r3, [r7, #7]
 800e616:	f003 0308 	and.w	r3, r3, #8
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d063      	beq.n	800e6e6 <f_open+0x1ee>
				dw = GET_FATTIME();
 800e61e:	f7fd fbb1 	bl	800bd84 <get_fattime>
 800e622:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e626:	330e      	adds	r3, #14
 800e628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fd fef8 	bl	800c420 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e632:	3316      	adds	r3, #22
 800e634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e636:	4618      	mov	r0, r3
 800e638:	f7fd fef2 	bl	800c420 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63e:	330b      	adds	r3, #11
 800e640:	2220      	movs	r2, #32
 800e642:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e648:	4611      	mov	r1, r2
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fe49 	bl	800d2e2 <ld_clust>
 800e650:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e656:	2200      	movs	r2, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fe fe61 	bl	800d320 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e660:	331c      	adds	r3, #28
 800e662:	2100      	movs	r1, #0
 800e664:	4618      	mov	r0, r3
 800e666:	f7fd fedb 	bl	800c420 <st_dword>
					fs->wflag = 1;
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	2201      	movs	r2, #1
 800e66e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e672:	2b00      	cmp	r3, #0
 800e674:	d037      	beq.n	800e6e6 <f_open+0x1ee>
						dw = fs->winsect;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800e67c:	f107 0314 	add.w	r3, r7, #20
 800e680:	2200      	movs	r2, #0
 800e682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e684:	4618      	mov	r0, r3
 800e686:	f7fe fb74 	bl	800cd72 <remove_chain>
 800e68a:	4603      	mov	r3, r0
 800e68c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e694:	2b00      	cmp	r3, #0
 800e696:	d126      	bne.n	800e6e6 <f_open+0x1ee>
							res = move_window(fs, dw);
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fe f919 	bl	800c8d4 <move_window>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6ac:	3a01      	subs	r2, #1
 800e6ae:	611a      	str	r2, [r3, #16]
 800e6b0:	e019      	b.n	800e6e6 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d115      	bne.n	800e6e6 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6ba:	7ebb      	ldrb	r3, [r7, #26]
 800e6bc:	f003 0310 	and.w	r3, r3, #16
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <f_open+0x1d4>
					res = FR_NO_FILE;
 800e6c4:	2304      	movs	r3, #4
 800e6c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6ca:	e00c      	b.n	800e6e6 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6cc:	79fb      	ldrb	r3, [r7, #7]
 800e6ce:	f003 0302 	and.w	r3, r3, #2
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d007      	beq.n	800e6e6 <f_open+0x1ee>
 800e6d6:	7ebb      	ldrb	r3, [r7, #26]
 800e6d8:	f003 0301 	and.w	r3, r3, #1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <f_open+0x1ee>
						res = FR_DENIED;
 800e6e0:	2307      	movs	r3, #7
 800e6e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d128      	bne.n	800e740 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	f003 0308 	and.w	r3, r3, #8
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <f_open+0x208>
				mode |= FA_MODIFIED;
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6fe:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	f023 0301 	bic.w	r3, r3, #1
 800e714:	2b00      	cmp	r3, #0
 800e716:	bf14      	ite	ne
 800e718:	2301      	movne	r3, #1
 800e71a:	2300      	moveq	r3, #0
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	461a      	mov	r2, r3
 800e720:	f107 0314 	add.w	r3, r7, #20
 800e724:	4611      	mov	r1, r2
 800e726:	4618      	mov	r0, r3
 800e728:	f7fd ffa2 	bl	800c670 <inc_lock>
 800e72c:	4602      	mov	r2, r0
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <f_open+0x248>
 800e73a:	2302      	movs	r3, #2
 800e73c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e740:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e744:	2b00      	cmp	r3, #0
 800e746:	f040 8095 	bne.w	800e874 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e74e:	4611      	mov	r1, r2
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe fdc6 	bl	800d2e2 <ld_clust>
 800e756:	4602      	mov	r2, r0
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	331c      	adds	r3, #28
 800e760:	4618      	mov	r0, r3
 800e762:	f7fd fe1f 	bl	800c3a4 <ld_dword>
 800e766:	4602      	mov	r2, r0
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	88da      	ldrh	r2, [r3, #6]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	79fa      	ldrb	r2, [r7, #7]
 800e784:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2200      	movs	r2, #0
 800e790:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3330      	adds	r3, #48	; 0x30
 800e79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fd fe89 	bl	800c4ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	f003 0320 	and.w	r3, r3, #32
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d060      	beq.n	800e874 <f_open+0x37c>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d05c      	beq.n	800e874 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	68da      	ldr	r2, [r3, #12]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	895b      	ldrh	r3, [r3, #10]
 800e7c6:	025b      	lsls	r3, r3, #9
 800e7c8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7d6:	e016      	b.n	800e806 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fe f934 	bl	800ca4a <get_fat>
 800e7e2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e7e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d802      	bhi.n	800e7f0 <f_open+0x2f8>
 800e7ea:	2302      	movs	r3, #2
 800e7ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f6:	d102      	bne.n	800e7fe <f_open+0x306>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d103      	bne.n	800e816 <f_open+0x31e>
 800e80e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e812:	429a      	cmp	r2, r3
 800e814:	d8e0      	bhi.n	800e7d8 <f_open+0x2e0>
				}
				fp->clust = clst;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e81a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e81c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e820:	2b00      	cmp	r3, #0
 800e822:	d127      	bne.n	800e874 <f_open+0x37c>
 800e824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d022      	beq.n	800e874 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e832:	4618      	mov	r0, r3
 800e834:	f7fe f8ea 	bl	800ca0c <clust2sect>
 800e838:	64b8      	str	r0, [r7, #72]	; 0x48
 800e83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d103      	bne.n	800e848 <f_open+0x350>
						res = FR_INT_ERR;
 800e840:	2302      	movs	r3, #2
 800e842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e846:	e015      	b.n	800e874 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e84a:	0a5a      	lsrs	r2, r3, #9
 800e84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e84e:	441a      	add	r2, r3
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	7858      	ldrb	r0, [r3, #1]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6a1a      	ldr	r2, [r3, #32]
 800e862:	2301      	movs	r3, #1
 800e864:	f7fd fd28 	bl	800c2b8 <disk_read>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d002      	beq.n	800e874 <f_open+0x37c>
 800e86e:	2301      	movs	r3, #1
 800e870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800e874:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e876:	f000 fdda 	bl	800f42e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e87a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d002      	beq.n	800e888 <f_open+0x390>
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e888:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3768      	adds	r7, #104	; 0x68
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08e      	sub	sp, #56	; 0x38
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f107 0214 	add.w	r2, r7, #20
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7ff fda3 	bl	800e400 <validate>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d107      	bne.n	800e8d8 <f_read+0x44>
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	7d5b      	ldrb	r3, [r3, #21]
 800e8cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e8d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <f_read+0x4a>
 800e8d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8dc:	e115      	b.n	800eb0a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	7d1b      	ldrb	r3, [r3, #20]
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <f_read+0x5a>
 800e8ea:	2307      	movs	r3, #7
 800e8ec:	e10d      	b.n	800eb0a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	68da      	ldr	r2, [r3, #12]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	f240 80fe 	bls.w	800eb00 <f_read+0x26c>
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e908:	e0fa      	b.n	800eb00 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e912:	2b00      	cmp	r3, #0
 800e914:	f040 80c6 	bne.w	800eaa4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	0a5b      	lsrs	r3, r3, #9
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	8952      	ldrh	r2, [r2, #10]
 800e922:	3a01      	subs	r2, #1
 800e924:	4013      	ands	r3, r2
 800e926:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d12f      	bne.n	800e98e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d103      	bne.n	800e93e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	633b      	str	r3, [r7, #48]	; 0x30
 800e93c:	e013      	b.n	800e966 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e942:	2b00      	cmp	r3, #0
 800e944:	d007      	beq.n	800e956 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	4619      	mov	r1, r3
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f7fe fb0d 	bl	800cf6c <clmt_clust>
 800e952:	6338      	str	r0, [r7, #48]	; 0x30
 800e954:	e007      	b.n	800e966 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	69db      	ldr	r3, [r3, #28]
 800e95c:	4619      	mov	r1, r3
 800e95e:	4610      	mov	r0, r2
 800e960:	f7fe f873 	bl	800ca4a <get_fat>
 800e964:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d804      	bhi.n	800e976 <f_read+0xe2>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2202      	movs	r2, #2
 800e970:	755a      	strb	r2, [r3, #21]
 800e972:	2302      	movs	r3, #2
 800e974:	e0c9      	b.n	800eb0a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97c:	d104      	bne.n	800e988 <f_read+0xf4>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2201      	movs	r2, #1
 800e982:	755a      	strb	r2, [r3, #21]
 800e984:	2301      	movs	r3, #1
 800e986:	e0c0      	b.n	800eb0a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e98c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	69db      	ldr	r3, [r3, #28]
 800e994:	4619      	mov	r1, r3
 800e996:	4610      	mov	r0, r2
 800e998:	f7fe f838 	bl	800ca0c <clust2sect>
 800e99c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d104      	bne.n	800e9ae <f_read+0x11a>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	755a      	strb	r2, [r3, #21]
 800e9aa:	2302      	movs	r3, #2
 800e9ac:	e0ad      	b.n	800eb0a <f_read+0x276>
			sect += csect;
 800e9ae:	69ba      	ldr	r2, [r7, #24]
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	0a5b      	lsrs	r3, r3, #9
 800e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d039      	beq.n	800ea36 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9c2:	69fa      	ldr	r2, [r7, #28]
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	4413      	add	r3, r2
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	8952      	ldrh	r2, [r2, #10]
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d905      	bls.n	800e9dc <f_read+0x148>
					cc = fs->csize - csect;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	895b      	ldrh	r3, [r3, #10]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	7858      	ldrb	r0, [r3, #1]
 800e9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e6:	f7fd fc67 	bl	800c2b8 <disk_read>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d004      	beq.n	800e9fa <f_read+0x166>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	755a      	strb	r2, [r3, #21]
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e087      	b.n	800eb0a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	7d1b      	ldrb	r3, [r3, #20]
 800e9fe:	b25b      	sxtb	r3, r3
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	da14      	bge.n	800ea2e <f_read+0x19a>
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6a1a      	ldr	r2, [r3, #32]
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d90d      	bls.n	800ea2e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	6a1a      	ldr	r2, [r3, #32]
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	025b      	lsls	r3, r3, #9
 800ea1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea1e:	18d0      	adds	r0, r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	3330      	adds	r3, #48	; 0x30
 800ea24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea28:	4619      	mov	r1, r3
 800ea2a:	f7fd fd25 	bl	800c478 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea30:	025b      	lsls	r3, r3, #9
 800ea32:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea34:	e050      	b.n	800ead8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	6a1b      	ldr	r3, [r3, #32]
 800ea3a:	69ba      	ldr	r2, [r7, #24]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d02e      	beq.n	800ea9e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	7d1b      	ldrb	r3, [r3, #20]
 800ea44:	b25b      	sxtb	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	da18      	bge.n	800ea7c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	7858      	ldrb	r0, [r3, #1]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6a1a      	ldr	r2, [r3, #32]
 800ea58:	2301      	movs	r3, #1
 800ea5a:	f7fd fc4d 	bl	800c2f8 <disk_write>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d004      	beq.n	800ea6e <f_read+0x1da>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2201      	movs	r2, #1
 800ea68:	755a      	strb	r2, [r3, #21]
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e04d      	b.n	800eb0a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	7d1b      	ldrb	r3, [r3, #20]
 800ea72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	7858      	ldrb	r0, [r3, #1]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea86:	2301      	movs	r3, #1
 800ea88:	69ba      	ldr	r2, [r7, #24]
 800ea8a:	f7fd fc15 	bl	800c2b8 <disk_read>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d004      	beq.n	800ea9e <f_read+0x20a>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2201      	movs	r2, #1
 800ea98:	755a      	strb	r2, [r3, #21]
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e035      	b.n	800eb0a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	69ba      	ldr	r2, [r7, #24]
 800eaa2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eab0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d901      	bls.n	800eabe <f_read+0x22a>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	699b      	ldr	r3, [r3, #24]
 800eac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eacc:	4413      	add	r3, r2
 800eace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ead0:	4619      	mov	r1, r3
 800ead2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ead4:	f7fd fcd0 	bl	800c478 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ead8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eadc:	4413      	add	r3, r2
 800eade:	627b      	str	r3, [r7, #36]	; 0x24
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	699a      	ldr	r2, [r3, #24]
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	441a      	add	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	619a      	str	r2, [r3, #24]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf2:	441a      	add	r2, r3
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f47f af01 	bne.w	800e90a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3738      	adds	r7, #56	; 0x38
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b08c      	sub	sp, #48	; 0x30
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
 800eb1e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2200      	movs	r2, #0
 800eb28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f107 0210 	add.w	r2, r7, #16
 800eb30:	4611      	mov	r1, r2
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7ff fc64 	bl	800e400 <validate>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d107      	bne.n	800eb56 <f_write+0x44>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	7d5b      	ldrb	r3, [r3, #21]
 800eb4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <f_write+0x4a>
 800eb56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb5a:	e14b      	b.n	800edf4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	7d1b      	ldrb	r3, [r3, #20]
 800eb60:	f003 0302 	and.w	r3, r3, #2
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <f_write+0x5a>
 800eb68:	2307      	movs	r3, #7
 800eb6a:	e143      	b.n	800edf4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	699a      	ldr	r2, [r3, #24]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	441a      	add	r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	699b      	ldr	r3, [r3, #24]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	f080 812d 	bcs.w	800edd8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	43db      	mvns	r3, r3
 800eb84:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800eb86:	e127      	b.n	800edd8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f040 80e3 	bne.w	800ed5c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	699b      	ldr	r3, [r3, #24]
 800eb9a:	0a5b      	lsrs	r3, r3, #9
 800eb9c:	693a      	ldr	r2, [r7, #16]
 800eb9e:	8952      	ldrh	r2, [r2, #10]
 800eba0:	3a01      	subs	r2, #1
 800eba2:	4013      	ands	r3, r2
 800eba4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d143      	bne.n	800ec34 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	699b      	ldr	r3, [r3, #24]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10c      	bne.n	800ebce <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d11a      	bne.n	800ebf6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe f939 	bl	800ce3c <create_chain>
 800ebca:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebcc:	e013      	b.n	800ebf6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d007      	beq.n	800ebe6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	4619      	mov	r1, r3
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f7fe f9c5 	bl	800cf6c <clmt_clust>
 800ebe2:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebe4:	e007      	b.n	800ebf6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	69db      	ldr	r3, [r3, #28]
 800ebec:	4619      	mov	r1, r3
 800ebee:	4610      	mov	r0, r2
 800ebf0:	f7fe f924 	bl	800ce3c <create_chain>
 800ebf4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f000 80f2 	beq.w	800ede2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d104      	bne.n	800ec0e <f_write+0xfc>
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2202      	movs	r2, #2
 800ec08:	755a      	strb	r2, [r3, #21]
 800ec0a:	2302      	movs	r3, #2
 800ec0c:	e0f2      	b.n	800edf4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec14:	d104      	bne.n	800ec20 <f_write+0x10e>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	755a      	strb	r2, [r3, #21]
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e0e9      	b.n	800edf4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec24:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d102      	bne.n	800ec34 <f_write+0x122>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec32:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	7d1b      	ldrb	r3, [r3, #20]
 800ec38:	b25b      	sxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	da18      	bge.n	800ec70 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	7858      	ldrb	r0, [r3, #1]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6a1a      	ldr	r2, [r3, #32]
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f7fd fb53 	bl	800c2f8 <disk_write>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d004      	beq.n	800ec62 <f_write+0x150>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	755a      	strb	r2, [r3, #21]
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e0c8      	b.n	800edf4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	7d1b      	ldrb	r3, [r3, #20]
 800ec66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec70:	693a      	ldr	r2, [r7, #16]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	69db      	ldr	r3, [r3, #28]
 800ec76:	4619      	mov	r1, r3
 800ec78:	4610      	mov	r0, r2
 800ec7a:	f7fd fec7 	bl	800ca0c <clust2sect>
 800ec7e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d104      	bne.n	800ec90 <f_write+0x17e>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2202      	movs	r2, #2
 800ec8a:	755a      	strb	r2, [r3, #21]
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	e0b1      	b.n	800edf4 <f_write+0x2e2>
			sect += csect;
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	4413      	add	r3, r2
 800ec96:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	0a5b      	lsrs	r3, r3, #9
 800ec9c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d03c      	beq.n	800ed1e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	4413      	add	r3, r2
 800ecaa:	693a      	ldr	r2, [r7, #16]
 800ecac:	8952      	ldrh	r2, [r2, #10]
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d905      	bls.n	800ecbe <f_write+0x1ac>
					cc = fs->csize - csect;
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	895b      	ldrh	r3, [r3, #10]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	7858      	ldrb	r0, [r3, #1]
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	697a      	ldr	r2, [r7, #20]
 800ecc6:	69f9      	ldr	r1, [r7, #28]
 800ecc8:	f7fd fb16 	bl	800c2f8 <disk_write>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d004      	beq.n	800ecdc <f_write+0x1ca>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	755a      	strb	r2, [r3, #21]
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e08b      	b.n	800edf4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6a1a      	ldr	r2, [r3, #32]
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	6a3a      	ldr	r2, [r7, #32]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d915      	bls.n	800ed16 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6a1a      	ldr	r2, [r3, #32]
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	025b      	lsls	r3, r3, #9
 800ecfa:	69fa      	ldr	r2, [r7, #28]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed02:	4619      	mov	r1, r3
 800ed04:	f7fd fbb8 	bl	800c478 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	7d1b      	ldrb	r3, [r3, #20]
 800ed0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	025b      	lsls	r3, r3, #9
 800ed1a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ed1c:	e03f      	b.n	800ed9e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d016      	beq.n	800ed56 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	699a      	ldr	r2, [r3, #24]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d210      	bcs.n	800ed56 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	7858      	ldrb	r0, [r3, #1]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed3e:	2301      	movs	r3, #1
 800ed40:	697a      	ldr	r2, [r7, #20]
 800ed42:	f7fd fab9 	bl	800c2b8 <disk_read>
 800ed46:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d004      	beq.n	800ed56 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	755a      	strb	r2, [r3, #21]
 800ed52:	2301      	movs	r3, #1
 800ed54:	e04e      	b.n	800edf4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ed68:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ed6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d901      	bls.n	800ed76 <f_write+0x264>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	699b      	ldr	r3, [r3, #24]
 800ed80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed84:	4413      	add	r3, r2
 800ed86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed88:	69f9      	ldr	r1, [r7, #28]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fd fb74 	bl	800c478 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	7d1b      	ldrb	r3, [r3, #20]
 800ed94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ed9e:	69fa      	ldr	r2, [r7, #28]
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	4413      	add	r3, r2
 800eda4:	61fb      	str	r3, [r7, #28]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	699a      	ldr	r2, [r3, #24]
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	441a      	add	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	619a      	str	r2, [r3, #24]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	429a      	cmp	r2, r3
 800edbc:	bf38      	it	cc
 800edbe:	461a      	movcc	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	60da      	str	r2, [r3, #12]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	441a      	add	r2, r3
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	601a      	str	r2, [r3, #0]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f47f aed4 	bne.w	800eb88 <f_write+0x76>
 800ede0:	e000      	b.n	800ede4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ede2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	7d1b      	ldrb	r3, [r3, #20]
 800ede8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edec:	b2da      	uxtb	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3730      	adds	r7, #48	; 0x30
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f107 0208 	add.w	r2, r7, #8
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff faf7 	bl	800e400 <validate>
 800ee12:	4603      	mov	r3, r0
 800ee14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d168      	bne.n	800eeee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d062      	beq.n	800eeee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7d1b      	ldrb	r3, [r3, #20]
 800ee2c:	b25b      	sxtb	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	da15      	bge.n	800ee5e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	7858      	ldrb	r0, [r3, #1]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a1a      	ldr	r2, [r3, #32]
 800ee40:	2301      	movs	r3, #1
 800ee42:	f7fd fa59 	bl	800c2f8 <disk_write>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <f_sync+0x54>
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e04f      	b.n	800eef0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	7d1b      	ldrb	r3, [r3, #20]
 800ee54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ee5e:	f7fc ff91 	bl	800bd84 <get_fattime>
 800ee62:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee64:	68ba      	ldr	r2, [r7, #8]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	f7fd fd31 	bl	800c8d4 <move_window>
 800ee72:	4603      	mov	r3, r0
 800ee74:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee76:	7dfb      	ldrb	r3, [r7, #23]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d138      	bne.n	800eeee <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee80:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	330b      	adds	r3, #11
 800ee86:	781a      	ldrb	r2, [r3, #0]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	330b      	adds	r3, #11
 800ee8c:	f042 0220 	orr.w	r2, r2, #32
 800ee90:	b2d2      	uxtb	r2, r2
 800ee92:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6818      	ldr	r0, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	68f9      	ldr	r1, [r7, #12]
 800eea0:	f7fe fa3e 	bl	800d320 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f103 021c 	add.w	r2, r3, #28
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	f7fd fab5 	bl	800c420 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	3316      	adds	r3, #22
 800eeba:	6939      	ldr	r1, [r7, #16]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fd faaf 	bl	800c420 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	3312      	adds	r3, #18
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fd fa8e 	bl	800c3ea <st_word>
					fs->wflag = 1;
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2201      	movs	r2, #1
 800eed2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fd fd2a 	bl	800c930 <sync_fs>
 800eedc:	4603      	mov	r3, r0
 800eede:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	7d1b      	ldrb	r3, [r3, #20]
 800eee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3718      	adds	r7, #24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff ff7b 	bl	800edfc <f_sync>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d118      	bne.n	800ef42 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f107 0208 	add.w	r2, r7, #8
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff fa71 	bl	800e400 <validate>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10c      	bne.n	800ef42 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fd fc2d 	bl	800c78c <dec_lock>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d102      	bne.n	800ef42 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b090      	sub	sp, #64	; 0x40
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f107 0208 	add.w	r2, r7, #8
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7ff fa4e 	bl	800e400 <validate>
 800ef64:	4603      	mov	r3, r0
 800ef66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d103      	bne.n	800ef7a <f_lseek+0x2e>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	7d5b      	ldrb	r3, [r3, #21]
 800ef76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ef7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <f_lseek+0x3c>
 800ef82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef86:	e1e6      	b.n	800f356 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 80d1 	beq.w	800f134 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef98:	d15a      	bne.n	800f050 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	1d1a      	adds	r2, r3, #4
 800efa4:	627a      	str	r2, [r7, #36]	; 0x24
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	2302      	movs	r3, #2
 800efac:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800efb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d03a      	beq.n	800f030 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	613b      	str	r3, [r7, #16]
 800efbe:	2300      	movs	r3, #0
 800efc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	3302      	adds	r3, #2
 800efc6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efce:	3301      	adds	r3, #1
 800efd0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fd fd37 	bl	800ca4a <get_fat>
 800efdc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d804      	bhi.n	800efee <f_lseek+0xa2>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2202      	movs	r2, #2
 800efe8:	755a      	strb	r2, [r3, #21]
 800efea:	2302      	movs	r3, #2
 800efec:	e1b3      	b.n	800f356 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff4:	d104      	bne.n	800f000 <f_lseek+0xb4>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2201      	movs	r2, #1
 800effa:	755a      	strb	r2, [r3, #21]
 800effc:	2301      	movs	r3, #1
 800effe:	e1aa      	b.n	800f356 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3301      	adds	r3, #1
 800f004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f006:	429a      	cmp	r2, r3
 800f008:	d0de      	beq.n	800efc8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d809      	bhi.n	800f026 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	627a      	str	r2, [r7, #36]	; 0x24
 800f018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f01a:	601a      	str	r2, [r3, #0]
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	1d1a      	adds	r2, r3, #4
 800f020:	627a      	str	r2, [r7, #36]	; 0x24
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	699b      	ldr	r3, [r3, #24]
 800f02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d3c4      	bcc.n	800efba <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f036:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d803      	bhi.n	800f048 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	2200      	movs	r2, #0
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	e184      	b.n	800f352 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f048:	2311      	movs	r3, #17
 800f04a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f04e:	e180      	b.n	800f352 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	429a      	cmp	r2, r3
 800f058:	d902      	bls.n	800f060 <f_lseek+0x114>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 8172 	beq.w	800f352 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	3b01      	subs	r3, #1
 800f072:	4619      	mov	r1, r3
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7fd ff79 	bl	800cf6c <clmt_clust>
 800f07a:	4602      	mov	r2, r0
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	69db      	ldr	r3, [r3, #28]
 800f086:	4619      	mov	r1, r3
 800f088:	4610      	mov	r0, r2
 800f08a:	f7fd fcbf 	bl	800ca0c <clust2sect>
 800f08e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d104      	bne.n	800f0a0 <f_lseek+0x154>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2202      	movs	r2, #2
 800f09a:	755a      	strb	r2, [r3, #21]
 800f09c:	2302      	movs	r3, #2
 800f09e:	e15a      	b.n	800f356 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	0a5b      	lsrs	r3, r3, #9
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	8952      	ldrh	r2, [r2, #10]
 800f0aa:	3a01      	subs	r2, #1
 800f0ac:	4013      	ands	r3, r2
 800f0ae:	69ba      	ldr	r2, [r7, #24]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f000 8148 	beq.w	800f352 <f_lseek+0x406>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a1b      	ldr	r3, [r3, #32]
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	f000 8142 	beq.w	800f352 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7d1b      	ldrb	r3, [r3, #20]
 800f0d2:	b25b      	sxtb	r3, r3
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	da18      	bge.n	800f10a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	7858      	ldrb	r0, [r3, #1]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a1a      	ldr	r2, [r3, #32]
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	f7fd f906 	bl	800c2f8 <disk_write>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d004      	beq.n	800f0fc <f_lseek+0x1b0>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	755a      	strb	r2, [r3, #21]
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e12c      	b.n	800f356 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7d1b      	ldrb	r3, [r3, #20]
 800f100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f104:	b2da      	uxtb	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	7858      	ldrb	r0, [r3, #1]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f114:	2301      	movs	r3, #1
 800f116:	69ba      	ldr	r2, [r7, #24]
 800f118:	f7fd f8ce 	bl	800c2b8 <disk_read>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d004      	beq.n	800f12c <f_lseek+0x1e0>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	755a      	strb	r2, [r3, #21]
 800f128:	2301      	movs	r3, #1
 800f12a:	e114      	b.n	800f356 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	69ba      	ldr	r2, [r7, #24]
 800f130:	621a      	str	r2, [r3, #32]
 800f132:	e10e      	b.n	800f352 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d908      	bls.n	800f150 <f_lseek+0x204>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	7d1b      	ldrb	r3, [r3, #20]
 800f142:	f003 0302 	and.w	r3, r3, #2
 800f146:	2b00      	cmp	r3, #0
 800f148:	d102      	bne.n	800f150 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	699b      	ldr	r3, [r3, #24]
 800f154:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f156:	2300      	movs	r3, #0
 800f158:	637b      	str	r3, [r7, #52]	; 0x34
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f15e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 80a7 	beq.w	800f2b6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	895b      	ldrh	r3, [r3, #10]
 800f16c:	025b      	lsls	r3, r3, #9
 800f16e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d01b      	beq.n	800f1ae <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	1e5a      	subs	r2, r3, #1
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	1e59      	subs	r1, r3, #1
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d30f      	bcc.n	800f1ae <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	1e5a      	subs	r2, r3, #1
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	425b      	negs	r3, r3
 800f196:	401a      	ands	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	699b      	ldr	r3, [r3, #24]
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	69db      	ldr	r3, [r3, #28]
 800f1aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1ac:	e022      	b.n	800f1f4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	689b      	ldr	r3, [r3, #8]
 800f1b2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d119      	bne.n	800f1ee <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fd fe3c 	bl	800ce3c <create_chain>
 800f1c4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d104      	bne.n	800f1d6 <f_lseek+0x28a>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2202      	movs	r2, #2
 800f1d0:	755a      	strb	r2, [r3, #21]
 800f1d2:	2302      	movs	r3, #2
 800f1d4:	e0bf      	b.n	800f356 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1dc:	d104      	bne.n	800f1e8 <f_lseek+0x29c>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	755a      	strb	r2, [r3, #21]
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e0b6      	b.n	800f356 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ec:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1f2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d05d      	beq.n	800f2b6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f1fa:	e03a      	b.n	800f272 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f1fc:	683a      	ldr	r2, [r7, #0]
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	603b      	str	r3, [r7, #0]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	441a      	add	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7d1b      	ldrb	r3, [r3, #20]
 800f214:	f003 0302 	and.w	r3, r3, #2
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00b      	beq.n	800f234 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd fe0b 	bl	800ce3c <create_chain>
 800f226:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d108      	bne.n	800f240 <f_lseek+0x2f4>
							ofs = 0; break;
 800f22e:	2300      	movs	r3, #0
 800f230:	603b      	str	r3, [r7, #0]
 800f232:	e022      	b.n	800f27a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fd fc06 	bl	800ca4a <get_fat>
 800f23e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f246:	d104      	bne.n	800f252 <f_lseek+0x306>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2201      	movs	r2, #1
 800f24c:	755a      	strb	r2, [r3, #21]
 800f24e:	2301      	movs	r3, #1
 800f250:	e081      	b.n	800f356 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f254:	2b01      	cmp	r3, #1
 800f256:	d904      	bls.n	800f262 <f_lseek+0x316>
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	699b      	ldr	r3, [r3, #24]
 800f25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f25e:	429a      	cmp	r2, r3
 800f260:	d304      	bcc.n	800f26c <f_lseek+0x320>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2202      	movs	r2, #2
 800f266:	755a      	strb	r2, [r3, #21]
 800f268:	2302      	movs	r3, #2
 800f26a:	e074      	b.n	800f356 <f_lseek+0x40a>
					fp->clust = clst;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f270:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	429a      	cmp	r2, r3
 800f278:	d8c0      	bhi.n	800f1fc <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	441a      	add	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d012      	beq.n	800f2b6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f294:	4618      	mov	r0, r3
 800f296:	f7fd fbb9 	bl	800ca0c <clust2sect>
 800f29a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d104      	bne.n	800f2ac <f_lseek+0x360>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	755a      	strb	r2, [r3, #21]
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	e054      	b.n	800f356 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	0a5b      	lsrs	r3, r3, #9
 800f2b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2b2:	4413      	add	r3, r2
 800f2b4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	699a      	ldr	r2, [r3, #24]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d90a      	bls.n	800f2d8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	699a      	ldr	r2, [r3, #24]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	7d1b      	ldrb	r3, [r3, #20]
 800f2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	699b      	ldr	r3, [r3, #24]
 800f2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d036      	beq.n	800f352 <f_lseek+0x406>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6a1b      	ldr	r3, [r3, #32]
 800f2e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d031      	beq.n	800f352 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	7d1b      	ldrb	r3, [r3, #20]
 800f2f2:	b25b      	sxtb	r3, r3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	da18      	bge.n	800f32a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	7858      	ldrb	r0, [r3, #1]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a1a      	ldr	r2, [r3, #32]
 800f306:	2301      	movs	r3, #1
 800f308:	f7fc fff6 	bl	800c2f8 <disk_write>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d004      	beq.n	800f31c <f_lseek+0x3d0>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2201      	movs	r2, #1
 800f316:	755a      	strb	r2, [r3, #21]
 800f318:	2301      	movs	r3, #1
 800f31a:	e01c      	b.n	800f356 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	7d1b      	ldrb	r3, [r3, #20]
 800f320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f324:	b2da      	uxtb	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	7858      	ldrb	r0, [r3, #1]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f334:	2301      	movs	r3, #1
 800f336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f338:	f7fc ffbe 	bl	800c2b8 <disk_read>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d004      	beq.n	800f34c <f_lseek+0x400>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2201      	movs	r2, #1
 800f346:	755a      	strb	r2, [r3, #21]
 800f348:	2301      	movs	r3, #1
 800f34a:	e004      	b.n	800f356 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f350:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f352:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f356:	4618      	mov	r0, r3
 800f358:	3740      	adds	r7, #64	; 0x40
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
	...

0800f360 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f360:	b480      	push	{r7}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	4613      	mov	r3, r2
 800f36c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f36e:	2301      	movs	r3, #1
 800f370:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f372:	2300      	movs	r3, #0
 800f374:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f376:	4b1f      	ldr	r3, [pc, #124]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f378:	7a5b      	ldrb	r3, [r3, #9]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d131      	bne.n	800f3e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f380:	4b1c      	ldr	r3, [pc, #112]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f382:	7a5b      	ldrb	r3, [r3, #9]
 800f384:	b2db      	uxtb	r3, r3
 800f386:	461a      	mov	r2, r3
 800f388:	4b1a      	ldr	r3, [pc, #104]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f38a:	2100      	movs	r1, #0
 800f38c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f38e:	4b19      	ldr	r3, [pc, #100]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f390:	7a5b      	ldrb	r3, [r3, #9]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	4a17      	ldr	r2, [pc, #92]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f39e:	4b15      	ldr	r3, [pc, #84]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f3a0:	7a5b      	ldrb	r3, [r3, #9]
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	4b13      	ldr	r3, [pc, #76]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f3a8:	4413      	add	r3, r2
 800f3aa:	79fa      	ldrb	r2, [r7, #7]
 800f3ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f3ae:	4b11      	ldr	r3, [pc, #68]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f3b0:	7a5b      	ldrb	r3, [r3, #9]
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	1c5a      	adds	r2, r3, #1
 800f3b6:	b2d1      	uxtb	r1, r2
 800f3b8:	4a0e      	ldr	r2, [pc, #56]	; (800f3f4 <FATFS_LinkDriverEx+0x94>)
 800f3ba:	7251      	strb	r1, [r2, #9]
 800f3bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f3be:	7dbb      	ldrb	r3, [r7, #22]
 800f3c0:	3330      	adds	r3, #48	; 0x30
 800f3c2:	b2da      	uxtb	r2, r3
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	223a      	movs	r2, #58	; 0x3a
 800f3ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	3302      	adds	r3, #2
 800f3d4:	222f      	movs	r2, #47	; 0x2f
 800f3d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	3303      	adds	r3, #3
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	371c      	adds	r7, #28
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	24001758 	.word	0x24001758

0800f3f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f402:	2200      	movs	r2, #0
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f7ff ffaa 	bl	800f360 <FATFS_LinkDriverEx>
 800f40c:	4603      	mov	r3, r0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 f83a 	bl	800f498 <malloc>
 800f424:	4603      	mov	r3, r0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b082      	sub	sp, #8
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f836 	bl	800f4a8 <free>
}
 800f43c:	bf00      	nop
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <__errno>:
 800f444:	4b01      	ldr	r3, [pc, #4]	; (800f44c <__errno+0x8>)
 800f446:	6818      	ldr	r0, [r3, #0]
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	24000048 	.word	0x24000048

0800f450 <__libc_init_array>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	4d0d      	ldr	r5, [pc, #52]	; (800f488 <__libc_init_array+0x38>)
 800f454:	4c0d      	ldr	r4, [pc, #52]	; (800f48c <__libc_init_array+0x3c>)
 800f456:	1b64      	subs	r4, r4, r5
 800f458:	10a4      	asrs	r4, r4, #2
 800f45a:	2600      	movs	r6, #0
 800f45c:	42a6      	cmp	r6, r4
 800f45e:	d109      	bne.n	800f474 <__libc_init_array+0x24>
 800f460:	4d0b      	ldr	r5, [pc, #44]	; (800f490 <__libc_init_array+0x40>)
 800f462:	4c0c      	ldr	r4, [pc, #48]	; (800f494 <__libc_init_array+0x44>)
 800f464:	f000 f92e 	bl	800f6c4 <_init>
 800f468:	1b64      	subs	r4, r4, r5
 800f46a:	10a4      	asrs	r4, r4, #2
 800f46c:	2600      	movs	r6, #0
 800f46e:	42a6      	cmp	r6, r4
 800f470:	d105      	bne.n	800f47e <__libc_init_array+0x2e>
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	f855 3b04 	ldr.w	r3, [r5], #4
 800f478:	4798      	blx	r3
 800f47a:	3601      	adds	r6, #1
 800f47c:	e7ee      	b.n	800f45c <__libc_init_array+0xc>
 800f47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f482:	4798      	blx	r3
 800f484:	3601      	adds	r6, #1
 800f486:	e7f2      	b.n	800f46e <__libc_init_array+0x1e>
 800f488:	0800fbcc 	.word	0x0800fbcc
 800f48c:	0800fbcc 	.word	0x0800fbcc
 800f490:	0800fbcc 	.word	0x0800fbcc
 800f494:	0800fbd0 	.word	0x0800fbd0

0800f498 <malloc>:
 800f498:	4b02      	ldr	r3, [pc, #8]	; (800f4a4 <malloc+0xc>)
 800f49a:	4601      	mov	r1, r0
 800f49c:	6818      	ldr	r0, [r3, #0]
 800f49e:	f000 b87f 	b.w	800f5a0 <_malloc_r>
 800f4a2:	bf00      	nop
 800f4a4:	24000048 	.word	0x24000048

0800f4a8 <free>:
 800f4a8:	4b02      	ldr	r3, [pc, #8]	; (800f4b4 <free+0xc>)
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	f000 b80b 	b.w	800f4c8 <_free_r>
 800f4b2:	bf00      	nop
 800f4b4:	24000048 	.word	0x24000048

0800f4b8 <memset>:
 800f4b8:	4402      	add	r2, r0
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d100      	bne.n	800f4c2 <memset+0xa>
 800f4c0:	4770      	bx	lr
 800f4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f4c6:	e7f9      	b.n	800f4bc <memset+0x4>

0800f4c8 <_free_r>:
 800f4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4ca:	2900      	cmp	r1, #0
 800f4cc:	d044      	beq.n	800f558 <_free_r+0x90>
 800f4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d2:	9001      	str	r0, [sp, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f4da:	bfb8      	it	lt
 800f4dc:	18e4      	addlt	r4, r4, r3
 800f4de:	f000 f8e3 	bl	800f6a8 <__malloc_lock>
 800f4e2:	4a1e      	ldr	r2, [pc, #120]	; (800f55c <_free_r+0x94>)
 800f4e4:	9801      	ldr	r0, [sp, #4]
 800f4e6:	6813      	ldr	r3, [r2, #0]
 800f4e8:	b933      	cbnz	r3, 800f4f8 <_free_r+0x30>
 800f4ea:	6063      	str	r3, [r4, #4]
 800f4ec:	6014      	str	r4, [r2, #0]
 800f4ee:	b003      	add	sp, #12
 800f4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4f4:	f000 b8de 	b.w	800f6b4 <__malloc_unlock>
 800f4f8:	42a3      	cmp	r3, r4
 800f4fa:	d908      	bls.n	800f50e <_free_r+0x46>
 800f4fc:	6825      	ldr	r5, [r4, #0]
 800f4fe:	1961      	adds	r1, r4, r5
 800f500:	428b      	cmp	r3, r1
 800f502:	bf01      	itttt	eq
 800f504:	6819      	ldreq	r1, [r3, #0]
 800f506:	685b      	ldreq	r3, [r3, #4]
 800f508:	1949      	addeq	r1, r1, r5
 800f50a:	6021      	streq	r1, [r4, #0]
 800f50c:	e7ed      	b.n	800f4ea <_free_r+0x22>
 800f50e:	461a      	mov	r2, r3
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	b10b      	cbz	r3, 800f518 <_free_r+0x50>
 800f514:	42a3      	cmp	r3, r4
 800f516:	d9fa      	bls.n	800f50e <_free_r+0x46>
 800f518:	6811      	ldr	r1, [r2, #0]
 800f51a:	1855      	adds	r5, r2, r1
 800f51c:	42a5      	cmp	r5, r4
 800f51e:	d10b      	bne.n	800f538 <_free_r+0x70>
 800f520:	6824      	ldr	r4, [r4, #0]
 800f522:	4421      	add	r1, r4
 800f524:	1854      	adds	r4, r2, r1
 800f526:	42a3      	cmp	r3, r4
 800f528:	6011      	str	r1, [r2, #0]
 800f52a:	d1e0      	bne.n	800f4ee <_free_r+0x26>
 800f52c:	681c      	ldr	r4, [r3, #0]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	6053      	str	r3, [r2, #4]
 800f532:	4421      	add	r1, r4
 800f534:	6011      	str	r1, [r2, #0]
 800f536:	e7da      	b.n	800f4ee <_free_r+0x26>
 800f538:	d902      	bls.n	800f540 <_free_r+0x78>
 800f53a:	230c      	movs	r3, #12
 800f53c:	6003      	str	r3, [r0, #0]
 800f53e:	e7d6      	b.n	800f4ee <_free_r+0x26>
 800f540:	6825      	ldr	r5, [r4, #0]
 800f542:	1961      	adds	r1, r4, r5
 800f544:	428b      	cmp	r3, r1
 800f546:	bf04      	itt	eq
 800f548:	6819      	ldreq	r1, [r3, #0]
 800f54a:	685b      	ldreq	r3, [r3, #4]
 800f54c:	6063      	str	r3, [r4, #4]
 800f54e:	bf04      	itt	eq
 800f550:	1949      	addeq	r1, r1, r5
 800f552:	6021      	streq	r1, [r4, #0]
 800f554:	6054      	str	r4, [r2, #4]
 800f556:	e7ca      	b.n	800f4ee <_free_r+0x26>
 800f558:	b003      	add	sp, #12
 800f55a:	bd30      	pop	{r4, r5, pc}
 800f55c:	24001764 	.word	0x24001764

0800f560 <sbrk_aligned>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	4e0e      	ldr	r6, [pc, #56]	; (800f59c <sbrk_aligned+0x3c>)
 800f564:	460c      	mov	r4, r1
 800f566:	6831      	ldr	r1, [r6, #0]
 800f568:	4605      	mov	r5, r0
 800f56a:	b911      	cbnz	r1, 800f572 <sbrk_aligned+0x12>
 800f56c:	f000 f88c 	bl	800f688 <_sbrk_r>
 800f570:	6030      	str	r0, [r6, #0]
 800f572:	4621      	mov	r1, r4
 800f574:	4628      	mov	r0, r5
 800f576:	f000 f887 	bl	800f688 <_sbrk_r>
 800f57a:	1c43      	adds	r3, r0, #1
 800f57c:	d00a      	beq.n	800f594 <sbrk_aligned+0x34>
 800f57e:	1cc4      	adds	r4, r0, #3
 800f580:	f024 0403 	bic.w	r4, r4, #3
 800f584:	42a0      	cmp	r0, r4
 800f586:	d007      	beq.n	800f598 <sbrk_aligned+0x38>
 800f588:	1a21      	subs	r1, r4, r0
 800f58a:	4628      	mov	r0, r5
 800f58c:	f000 f87c 	bl	800f688 <_sbrk_r>
 800f590:	3001      	adds	r0, #1
 800f592:	d101      	bne.n	800f598 <sbrk_aligned+0x38>
 800f594:	f04f 34ff 	mov.w	r4, #4294967295
 800f598:	4620      	mov	r0, r4
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	24001768 	.word	0x24001768

0800f5a0 <_malloc_r>:
 800f5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a4:	1ccd      	adds	r5, r1, #3
 800f5a6:	f025 0503 	bic.w	r5, r5, #3
 800f5aa:	3508      	adds	r5, #8
 800f5ac:	2d0c      	cmp	r5, #12
 800f5ae:	bf38      	it	cc
 800f5b0:	250c      	movcc	r5, #12
 800f5b2:	2d00      	cmp	r5, #0
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	db01      	blt.n	800f5bc <_malloc_r+0x1c>
 800f5b8:	42a9      	cmp	r1, r5
 800f5ba:	d905      	bls.n	800f5c8 <_malloc_r+0x28>
 800f5bc:	230c      	movs	r3, #12
 800f5be:	603b      	str	r3, [r7, #0]
 800f5c0:	2600      	movs	r6, #0
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c8:	4e2e      	ldr	r6, [pc, #184]	; (800f684 <_malloc_r+0xe4>)
 800f5ca:	f000 f86d 	bl	800f6a8 <__malloc_lock>
 800f5ce:	6833      	ldr	r3, [r6, #0]
 800f5d0:	461c      	mov	r4, r3
 800f5d2:	bb34      	cbnz	r4, 800f622 <_malloc_r+0x82>
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	4638      	mov	r0, r7
 800f5d8:	f7ff ffc2 	bl	800f560 <sbrk_aligned>
 800f5dc:	1c43      	adds	r3, r0, #1
 800f5de:	4604      	mov	r4, r0
 800f5e0:	d14d      	bne.n	800f67e <_malloc_r+0xde>
 800f5e2:	6834      	ldr	r4, [r6, #0]
 800f5e4:	4626      	mov	r6, r4
 800f5e6:	2e00      	cmp	r6, #0
 800f5e8:	d140      	bne.n	800f66c <_malloc_r+0xcc>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	4631      	mov	r1, r6
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	eb04 0803 	add.w	r8, r4, r3
 800f5f4:	f000 f848 	bl	800f688 <_sbrk_r>
 800f5f8:	4580      	cmp	r8, r0
 800f5fa:	d13a      	bne.n	800f672 <_malloc_r+0xd2>
 800f5fc:	6821      	ldr	r1, [r4, #0]
 800f5fe:	3503      	adds	r5, #3
 800f600:	1a6d      	subs	r5, r5, r1
 800f602:	f025 0503 	bic.w	r5, r5, #3
 800f606:	3508      	adds	r5, #8
 800f608:	2d0c      	cmp	r5, #12
 800f60a:	bf38      	it	cc
 800f60c:	250c      	movcc	r5, #12
 800f60e:	4629      	mov	r1, r5
 800f610:	4638      	mov	r0, r7
 800f612:	f7ff ffa5 	bl	800f560 <sbrk_aligned>
 800f616:	3001      	adds	r0, #1
 800f618:	d02b      	beq.n	800f672 <_malloc_r+0xd2>
 800f61a:	6823      	ldr	r3, [r4, #0]
 800f61c:	442b      	add	r3, r5
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	e00e      	b.n	800f640 <_malloc_r+0xa0>
 800f622:	6822      	ldr	r2, [r4, #0]
 800f624:	1b52      	subs	r2, r2, r5
 800f626:	d41e      	bmi.n	800f666 <_malloc_r+0xc6>
 800f628:	2a0b      	cmp	r2, #11
 800f62a:	d916      	bls.n	800f65a <_malloc_r+0xba>
 800f62c:	1961      	adds	r1, r4, r5
 800f62e:	42a3      	cmp	r3, r4
 800f630:	6025      	str	r5, [r4, #0]
 800f632:	bf18      	it	ne
 800f634:	6059      	strne	r1, [r3, #4]
 800f636:	6863      	ldr	r3, [r4, #4]
 800f638:	bf08      	it	eq
 800f63a:	6031      	streq	r1, [r6, #0]
 800f63c:	5162      	str	r2, [r4, r5]
 800f63e:	604b      	str	r3, [r1, #4]
 800f640:	4638      	mov	r0, r7
 800f642:	f104 060b 	add.w	r6, r4, #11
 800f646:	f000 f835 	bl	800f6b4 <__malloc_unlock>
 800f64a:	f026 0607 	bic.w	r6, r6, #7
 800f64e:	1d23      	adds	r3, r4, #4
 800f650:	1af2      	subs	r2, r6, r3
 800f652:	d0b6      	beq.n	800f5c2 <_malloc_r+0x22>
 800f654:	1b9b      	subs	r3, r3, r6
 800f656:	50a3      	str	r3, [r4, r2]
 800f658:	e7b3      	b.n	800f5c2 <_malloc_r+0x22>
 800f65a:	6862      	ldr	r2, [r4, #4]
 800f65c:	42a3      	cmp	r3, r4
 800f65e:	bf0c      	ite	eq
 800f660:	6032      	streq	r2, [r6, #0]
 800f662:	605a      	strne	r2, [r3, #4]
 800f664:	e7ec      	b.n	800f640 <_malloc_r+0xa0>
 800f666:	4623      	mov	r3, r4
 800f668:	6864      	ldr	r4, [r4, #4]
 800f66a:	e7b2      	b.n	800f5d2 <_malloc_r+0x32>
 800f66c:	4634      	mov	r4, r6
 800f66e:	6876      	ldr	r6, [r6, #4]
 800f670:	e7b9      	b.n	800f5e6 <_malloc_r+0x46>
 800f672:	230c      	movs	r3, #12
 800f674:	603b      	str	r3, [r7, #0]
 800f676:	4638      	mov	r0, r7
 800f678:	f000 f81c 	bl	800f6b4 <__malloc_unlock>
 800f67c:	e7a1      	b.n	800f5c2 <_malloc_r+0x22>
 800f67e:	6025      	str	r5, [r4, #0]
 800f680:	e7de      	b.n	800f640 <_malloc_r+0xa0>
 800f682:	bf00      	nop
 800f684:	24001764 	.word	0x24001764

0800f688 <_sbrk_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d06      	ldr	r5, [pc, #24]	; (800f6a4 <_sbrk_r+0x1c>)
 800f68c:	2300      	movs	r3, #0
 800f68e:	4604      	mov	r4, r0
 800f690:	4608      	mov	r0, r1
 800f692:	602b      	str	r3, [r5, #0]
 800f694:	f7f1 ff7e 	bl	8001594 <_sbrk>
 800f698:	1c43      	adds	r3, r0, #1
 800f69a:	d102      	bne.n	800f6a2 <_sbrk_r+0x1a>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	b103      	cbz	r3, 800f6a2 <_sbrk_r+0x1a>
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
 800f6a4:	2400176c 	.word	0x2400176c

0800f6a8 <__malloc_lock>:
 800f6a8:	4801      	ldr	r0, [pc, #4]	; (800f6b0 <__malloc_lock+0x8>)
 800f6aa:	f000 b809 	b.w	800f6c0 <__retarget_lock_acquire_recursive>
 800f6ae:	bf00      	nop
 800f6b0:	24001770 	.word	0x24001770

0800f6b4 <__malloc_unlock>:
 800f6b4:	4801      	ldr	r0, [pc, #4]	; (800f6bc <__malloc_unlock+0x8>)
 800f6b6:	f000 b804 	b.w	800f6c2 <__retarget_lock_release_recursive>
 800f6ba:	bf00      	nop
 800f6bc:	24001770 	.word	0x24001770

0800f6c0 <__retarget_lock_acquire_recursive>:
 800f6c0:	4770      	bx	lr

0800f6c2 <__retarget_lock_release_recursive>:
 800f6c2:	4770      	bx	lr

0800f6c4 <_init>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	bf00      	nop
 800f6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ca:	bc08      	pop	{r3}
 800f6cc:	469e      	mov	lr, r3
 800f6ce:	4770      	bx	lr

0800f6d0 <_fini>:
 800f6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d2:	bf00      	nop
 800f6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6d6:	bc08      	pop	{r3}
 800f6d8:	469e      	mov	lr, r3
 800f6da:	4770      	bx	lr


stm32h7disco-i2s-baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f438  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800f6d0  0800f6d0  0001f6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbbc  0800fbbc  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbbc  0800fbbc  0001fbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbc4  0800fbc4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbc4  0800fbc4  0001fbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbc8  0800fbc8  0001fbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  24000000  0800fbcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c8  240000b0  0800fc7c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001778  0800fc7c  00021778  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd3c  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f6  00000000  00000000  0003be1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  00040ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000431d4  00000000  00000000  00041e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204a0  00000000  00000000  00084fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f276  00000000  00000000  000a547c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002446f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005774  00000000  00000000  00244744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b0 	.word	0x240000b0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f6b8 	.word	0x0800f6b8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000b4 	.word	0x240000b4
 80002d4:	0800f6b8 	.word	0x0800f6b8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <sd_card_init>:
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
static uint8_t first_play = 0;
void sd_card_init()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	4907      	ldr	r1, [pc, #28]	; (800072c <sd_card_init+0x24>)
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <sd_card_init+0x28>)
 8000712:	f00d fea5 	bl	800e460 <f_mount>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <sd_card_init+0x2c>)
 800071c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <sd_card_init+0x2c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <sd_card_init+0x20>
	{
//		printf("error in mounting an sd card: %d \n", sd_result);
		while(1);
 8000726:	e7fe      	b.n	8000726 <sd_card_init+0x1e>
	}
//	else
//	{
//		printf("succeded in mounting an sd card \n");
//	}
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	24001730 	.word	0x24001730
 8000730:	240000d0 	.word	0x240000d0
 8000734:	240000cc 	.word	0x240000cc

08000738 <start_recording>:

void start_recording(uint32_t frequency)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	int file_number_digits = file_counter;
 8000740:	4b44      	ldr	r3, [pc, #272]	; (8000854 <start_recording+0x11c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b41      	ldr	r3, [pc, #260]	; (8000858 <start_recording+0x120>)
 8000752:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	0a1b      	lsrs	r3, r3, #8
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <start_recording+0x120>)
 800075c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	0c1b      	lsrs	r3, r3, #16
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <start_recording+0x120>)
 8000766:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0e1b      	lsrs	r3, r3, #24
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <start_recording+0x120>)
 8000770:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b38      	ldr	r3, [pc, #224]	; (8000858 <start_recording+0x120>)
 8000778:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b35      	ldr	r3, [pc, #212]	; (8000858 <start_recording+0x120>)
 8000782:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	0c1b      	lsrs	r3, r3, #16
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <start_recording+0x120>)
 800078c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	0e1b      	lsrs	r3, r3, #24
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <start_recording+0x120>)
 8000796:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48;
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <start_recording+0x124>)
 800079c:	fb83 1302 	smull	r1, r3, r3, r2
 80007a0:	1099      	asrs	r1, r3, #2
 80007a2:	17d3      	asrs	r3, r2, #31
 80007a4:	1ac9      	subs	r1, r1, r3
 80007a6:	460b      	mov	r3, r1
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	440b      	add	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	1ad1      	subs	r1, r2, r3
 80007b0:	b2cb      	uxtb	r3, r1
 80007b2:	3330      	adds	r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <start_recording+0x128>)
 80007b8:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4a27      	ldr	r2, [pc, #156]	; (800085c <start_recording+0x124>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <start_recording+0x124>)
 80007ce:	fb83 1302 	smull	r1, r3, r3, r2
 80007d2:	1099      	asrs	r1, r3, #2
 80007d4:	17d3      	asrs	r3, r2, #31
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1ad1      	subs	r1, r2, r3
 80007e2:	b2cb      	uxtb	r3, r1
 80007e4:	3330      	adds	r3, #48	; 0x30
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <start_recording+0x128>)
 80007ea:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <start_recording+0x124>)
 80007f0:	fb82 1203 	smull	r1, r2, r2, r3
 80007f4:	1092      	asrs	r2, r2, #2
 80007f6:	17db      	asrs	r3, r3, #31
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <start_recording+0x124>)
 8000800:	fb83 1302 	smull	r1, r3, r3, r2
 8000804:	1099      	asrs	r1, r3, #2
 8000806:	17d3      	asrs	r3, r2, #31
 8000808:	1ac9      	subs	r1, r1, r3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad1      	subs	r1, r2, r3
 8000814:	b2cb      	uxtb	r3, r1
 8000816:	3330      	adds	r3, #48	; 0x30
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <start_recording+0x128>)
 800081c:	709a      	strb	r2, [r3, #2]
//	printf("file name %s \n", file_name);
	file_counter++;
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <start_recording+0x11c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <start_recording+0x11c>)
 8000828:	701a      	strb	r2, [r3, #0]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 800082a:	220a      	movs	r2, #10
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <start_recording+0x128>)
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <start_recording+0x12c>)
 8000830:	f00d fe5c 	bl	800e4ec <f_open>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <start_recording+0x130>)
 800083a:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <start_recording+0x130>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d000      	beq.n	8000846 <start_recording+0x10e>
	{
//		printf("error in creating a file: %d \n", sd_result);
		while(1);
 8000844:	e7fe      	b.n	8000844 <start_recording+0x10c>
	}
//	else
//	{
//		printf("succeeded in opening a file \n");
//	}
	wav_file_size = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <start_recording+0x134>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]


}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	24000034 	.word	0x24000034
 8000858:	24000008 	.word	0x24000008
 800085c:	66666667 	.word	0x66666667
 8000860:	24000038 	.word	0x24000038
 8000864:	24000304 	.word	0x24000304
 8000868:	240000cc 	.word	0x240000cc
 800086c:	24000534 	.word	0x24000534

08000870 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
//	printf("w\n");
	if(first_time == 0)
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <write2wave_file+0x70>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d113      	bne.n	80008ac <write2wave_file+0x3c>
	{
		for(int i = 0; i < 44; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e00a      	b.n	80008a0 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	4914      	ldr	r1, [pc, #80]	; (80008e4 <write2wave_file+0x74>)
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	440a      	add	r2, r1
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b2b      	cmp	r3, #43	; 0x2b
 80008a4:	ddf1      	ble.n	800088a <write2wave_file+0x1a>
		}
		first_time = 1;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <write2wave_file+0x70>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 80008ac:	887a      	ldrh	r2, [r7, #2]
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <write2wave_file+0x78>)
 80008b6:	f00e f926 	bl	800eb06 <f_write>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <write2wave_file+0x7c>)
 80008c0:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <write2wave_file+0x7c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <write2wave_file+0x5c>
	{
//		printf("error in writing to the file: %d \n", sd_result);
		while(1);
 80008ca:	e7fe      	b.n	80008ca <write2wave_file+0x5a>
	}
	wav_file_size += data_size;
 80008cc:	887a      	ldrh	r2, [r7, #2]
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <write2wave_file+0x80>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <write2wave_file+0x80>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	24000538 	.word	0x24000538
 80008e4:	24000008 	.word	0x24000008
 80008e8:	24000304 	.word	0x24000304
 80008ec:	240000cc 	.word	0x240000cc
 80008f0:	24000534 	.word	0x24000534

080008f4 <stop_recording>:

void stop_recording()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <stop_recording+0xb0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b08      	subs	r3, #8
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <stop_recording+0xb0>)
 8000902:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <stop_recording+0xb0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <stop_recording+0xb4>)
 800090c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <stop_recording+0xb0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	0a1b      	lsrs	r3, r3, #8
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <stop_recording+0xb4>)
 8000918:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <stop_recording+0xb0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	0c1b      	lsrs	r3, r3, #16
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <stop_recording+0xb4>)
 8000924:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <stop_recording+0xb0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	0e1b      	lsrs	r3, r3, #24
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <stop_recording+0xb4>)
 8000930:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <stop_recording+0xb0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3b24      	subs	r3, #36	; 0x24
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <stop_recording+0xb0>)
 800093a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <stop_recording+0xb0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <stop_recording+0xb4>)
 8000944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <stop_recording+0xb0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <stop_recording+0xb4>)
 8000952:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <stop_recording+0xb0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <stop_recording+0xb4>)
 8000960:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <stop_recording+0xb0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	0e1b      	lsrs	r3, r3, #24
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <stop_recording+0xb4>)
 800096e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <stop_recording+0xb8>)
 8000976:	f00e fae3 	bl	800ef40 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800097a:	1dbb      	adds	r3, r7, #6
 800097c:	222c      	movs	r2, #44	; 0x2c
 800097e:	490a      	ldr	r1, [pc, #40]	; (80009a8 <stop_recording+0xb4>)
 8000980:	480a      	ldr	r0, [pc, #40]	; (80009ac <stop_recording+0xb8>)
 8000982:	f00e f8c0 	bl	800eb06 <f_write>
	if(sd_result != 0)
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <stop_recording+0xbc>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d000      	beq.n	8000990 <stop_recording+0x9c>
	{
//		printf("error in updating the first sector: %d \n", sd_result);
		while(1);
 800098e:	e7fe      	b.n	800098e <stop_recording+0x9a>
	}
	f_close(&wavFile);
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <stop_recording+0xb8>)
 8000992:	f00e faab 	bl	800eeec <f_close>
	first_time = 0;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <stop_recording+0xc0>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
//	printf("closed the file \n");
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	24000534 	.word	0x24000534
 80009a8:	24000008 	.word	0x24000008
 80009ac:	24000304 	.word	0x24000304
 80009b0:	240000cc 	.word	0x240000cc
 80009b4:	24000538 	.word	0x24000538

080009b8 <play_record>:

void play_record(uint8_t *data, uint16_t data_size){
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
	FRESULT fr = FR_NOT_READY;
 80009c4:	2303      	movs	r3, #3
 80009c6:	77fb      	strb	r3, [r7, #31]
	UINT bytesRead = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]

	char folderPath[] = "0:sample.wav";
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <play_record+0x64>)
 80009ce:	f107 0408 	add.w	r4, r7, #8
 80009d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d4:	c407      	stmia	r4!, {r0, r1, r2}
 80009d6:	7023      	strb	r3, [r4, #0]
	if(first_play == 0){
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <play_record+0x68>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d112      	bne.n	8000a06 <play_record+0x4e>
		fr = f_open(&wavFile, folderPath, FA_READ);
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2201      	movs	r2, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <play_record+0x6c>)
 80009ea:	f00d fd7f 	bl	800e4ec <f_open>
 80009ee:	4603      	mov	r3, r0
 80009f0:	77fb      	strb	r3, [r7, #31]

		if (fr == FR_OK)
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <play_record+0x48>
		{
		  f_lseek(&wavFile, 44);
 80009f8:	212c      	movs	r1, #44	; 0x2c
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <play_record+0x6c>)
 80009fc:	f00e faa0 	bl	800ef40 <f_lseek>
		}
		first_play = 1;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <play_record+0x68>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
	}

	f_read(&wavFile, data, data_size, &bytesRead);
 8000a06:	887a      	ldrh	r2, [r7, #2]
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <play_record+0x6c>)
 8000a10:	f00d ff3a 	bl	800e888 <f_read>
}
 8000a14:	bf00      	nop
 8000a16:	3724      	adds	r7, #36	; 0x24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	0800f6d0 	.word	0x0800f6d0
 8000a20:	24000539 	.word	0x24000539
 8000a24:	24000304 	.word	0x24000304

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a32:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a34:	bf00      	nop
 8000a36:	4b98      	ldr	r3, [pc, #608]	; (8000c98 <main+0x270>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <main+0x24>
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	60fa      	str	r2, [r7, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dcf4      	bgt.n	8000a36 <main+0xe>
  if ( timeout < 0 )
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da01      	bge.n	8000a56 <main+0x2e>
  {
  Error_Handler();
 8000a52:	f000 fb53 	bl	80010fc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f000 fdf7 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f93b 	bl	8000cd4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <main+0x270>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a8c      	ldr	r2, [pc, #560]	; (8000c98 <main+0x270>)
 8000a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b8a      	ldr	r3, [pc, #552]	; (8000c98 <main+0x270>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f003 fd73 	bl	8004568 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	f003 fd89 	bl	800459c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a90:	bf00      	nop
 8000a92:	4b81      	ldr	r3, [pc, #516]	; (8000c98 <main+0x270>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d104      	bne.n	8000aa8 <main+0x80>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	1e5a      	subs	r2, r3, #1
 8000aa2:	60fa      	str	r2, [r7, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dcf4      	bgt.n	8000a92 <main+0x6a>
if ( timeout < 0 )
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da01      	bge.n	8000ab2 <main+0x8a>
{
Error_Handler();
 8000aae:	f000 fb25 	bl	80010fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab2:	f000 fa59 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab6:	f000 fa37 	bl	8000f28 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000aba:	f000 f9c5 	bl	8000e48 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000abe:	f000 f9e7 	bl	8000e90 <MX_USART1_UART_Init>
  MX_I2S1_Init();
 8000ac2:	f000 f98d 	bl	8000de0 <MX_I2S1_Init>
  MX_FATFS_Init();
 8000ac6:	f00b f945 	bl	800bd54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ace:	f000 fe4d 	bl	800176c <HAL_Delay>
  sd_card_init();
 8000ad2:	f7ff fe19 	bl	8000708 <sd_card_init>
  HAL_Delay(500);
 8000ad6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ada:	f000 fe47 	bl	800176c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // RECORD BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000ade:	2108      	movs	r1, #8
 8000ae0:	486e      	ldr	r0, [pc, #440]	; (8000c9c <main+0x274>)
 8000ae2:	f003 fd29 	bl	8004538 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10e      	bne.n	8000b0a <main+0xe2>
		  recordBtnState++;
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <main+0x278>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b6a      	ldr	r3, [pc, #424]	; (8000ca0 <main+0x278>)
 8000af6:	801a      	strh	r2, [r3, #0]
		  if(recordBtnState > 1000)
 8000af8:	4b69      	ldr	r3, [pc, #420]	; (8000ca0 <main+0x278>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b00:	d903      	bls.n	8000b0a <main+0xe2>
			  recordBtnState = 1000;
 8000b02:	4b67      	ldr	r3, [pc, #412]	; (8000ca0 <main+0x278>)
 8000b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b08:	801a      	strh	r2, [r3, #0]
	  }
	  if(recordBtnState == 1000 && recordBtnPrevState != HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)){
 8000b0a:	4b65      	ldr	r3, [pc, #404]	; (8000ca0 <main+0x278>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b12:	d10f      	bne.n	8000b34 <main+0x10c>
 8000b14:	2108      	movs	r1, #8
 8000b16:	4861      	ldr	r0, [pc, #388]	; (8000c9c <main+0x274>)
 8000b18:	f003 fd0e 	bl	8004538 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <main+0x27c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d005      	beq.n	8000b34 <main+0x10c>
		  recordBtnState = 0;
 8000b28:	4b5d      	ldr	r3, [pc, #372]	; (8000ca0 <main+0x278>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	801a      	strh	r2, [r3, #0]
		  recordBtnPressed = 1;
 8000b2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <main+0x280>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	  }
	  recordBtnPrevState = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000b34:	2108      	movs	r1, #8
 8000b36:	4859      	ldr	r0, [pc, #356]	; (8000c9c <main+0x274>)
 8000b38:	f003 fcfe 	bl	8004538 <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <main+0x27c>)
 8000b42:	701a      	strb	r2, [r3, #0]

	  // PLAY BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == 0){
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	4855      	ldr	r0, [pc, #340]	; (8000c9c <main+0x274>)
 8000b48:	f003 fcf6 	bl	8004538 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10e      	bne.n	8000b70 <main+0x148>
		  playBtnState++;
 8000b52:	4b56      	ldr	r3, [pc, #344]	; (8000cac <main+0x284>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b54      	ldr	r3, [pc, #336]	; (8000cac <main+0x284>)
 8000b5c:	801a      	strh	r2, [r3, #0]
		  if(playBtnState > 1000)
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <main+0x284>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b66:	d903      	bls.n	8000b70 <main+0x148>
			  playBtnState = 1000;
 8000b68:	4b50      	ldr	r3, [pc, #320]	; (8000cac <main+0x284>)
 8000b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b6e:	801a      	strh	r2, [r3, #0]
	  }
	  if(playBtnState == 1000 && playBtnPrevState != HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin)){
 8000b70:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <main+0x284>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b78:	d10f      	bne.n	8000b9a <main+0x172>
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	4847      	ldr	r0, [pc, #284]	; (8000c9c <main+0x274>)
 8000b7e:	f003 fcdb 	bl	8004538 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <main+0x288>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d005      	beq.n	8000b9a <main+0x172>
		  playBtnState = 0;
 8000b8e:	4b47      	ldr	r3, [pc, #284]	; (8000cac <main+0x284>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	801a      	strh	r2, [r3, #0]
		  playBtnPressed = 1;
 8000b94:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <main+0x28c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
	  }
	  playBtnPrevState = HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin);
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	483f      	ldr	r0, [pc, #252]	; (8000c9c <main+0x274>)
 8000b9e:	f003 fccb 	bl	8004538 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <main+0x288>)
 8000ba8:	701a      	strb	r2, [r3, #0]


	  if(recordBtnPressed){
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <main+0x280>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <main+0x1c0>
		  recordStartStop ^= 0x01;
 8000bb2:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <main+0x290>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	; (8000cb8 <main+0x290>)
 8000bbe:	701a      	strb	r2, [r3, #0]
		  if(recordStartStop){
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <main+0x290>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00a      	beq.n	8000bde <main+0x1b6>
			  start_recording(I2S_AUDIOFREQ_32K);
 8000bc8:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000bcc:	f7ff fdb4 	bl	8000738 <start_recording>
			  HAL_I2S_Receive_DMA(&hi2s1, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 8000bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd4:	4939      	ldr	r1, [pc, #228]	; (8000cbc <main+0x294>)
 8000bd6:	483a      	ldr	r0, [pc, #232]	; (8000cc0 <main+0x298>)
 8000bd8:	f003 fefc 	bl	80049d4 <HAL_I2S_Receive_DMA>
 8000bdc:	e004      	b.n	8000be8 <main+0x1c0>
		  }
		  else{
			  HAL_I2S_DMAStop(&hi2s1);
 8000bde:	4838      	ldr	r0, [pc, #224]	; (8000cc0 <main+0x298>)
 8000be0:	f003 ff9a 	bl	8004b18 <HAL_I2S_DMAStop>
			  stop_recording();
 8000be4:	f7ff fe86 	bl	80008f4 <stop_recording>
		  }
	  }

	  if(playBtnPressed){
 8000be8:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <main+0x28c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <main+0x1ce>
		  playStartStop = 1;
 8000bf0:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <main+0x29c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
	  }

	  if(recordStartStop == 1 && half_i2s == 1){
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <main+0x290>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d10c      	bne.n	8000c18 <main+0x1f0>
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <main+0x2a0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d107      	bne.n	8000c18 <main+0x1f0>
		  write2wave_file(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT);
 8000c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0c:	482b      	ldr	r0, [pc, #172]	; (8000cbc <main+0x294>)
 8000c0e:	f7ff fe2f 	bl	8000870 <write2wave_file>
		  half_i2s = 0;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <main+0x2a0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	  }
	  if(recordStartStop == 1 && full_i2s == 1){
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <main+0x290>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10d      	bne.n	8000c3c <main+0x214>
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <main+0x2a4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <main+0x214>
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <main+0x2a8>)
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe1d 	bl	8000870 <write2wave_file>
		  full_i2s = 0;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <main+0x2a4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	  }

	  if(playStartStop){
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <main+0x29c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d021      	beq.n	8000c88 <main+0x260>
		  play_record(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT*2);
 8000c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c48:	481c      	ldr	r0, [pc, #112]	; (8000cbc <main+0x294>)
 8000c4a:	f7ff feb5 	bl	80009b8 <play_record>
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	e00d      	b.n	8000c70 <main+0x248>
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	005a      	lsls	r2, r3, #1
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4917      	ldr	r1, [pc, #92]	; (8000cbc <main+0x294>)
 8000c60:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <main+0x294>)
 8000c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c76:	dbed      	blt.n	8000c54 <main+0x22c>
		  HAL_I2S_Transmit(&hi2s1, data_i2s, WAV_WRITE_SAMPLE_COUNT, 1000);
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	490e      	ldr	r1, [pc, #56]	; (8000cbc <main+0x294>)
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <main+0x298>)
 8000c84:	f003 fdc0 	bl	8004808 <HAL_I2S_Transmit>
	  }

	  recordBtnPressed = 0;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <main+0x280>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	  playBtnPressed = 0;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <main+0x28c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000c94:	e723      	b.n	8000ade <main+0xb6>
 8000c96:	bf00      	nop
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58022800 	.word	0x58022800
 8000ca0:	2400071a 	.word	0x2400071a
 8000ca4:	24000719 	.word	0x24000719
 8000ca8:	24000718 	.word	0x24000718
 8000cac:	2400071e 	.word	0x2400071e
 8000cb0:	2400071d 	.word	0x2400071d
 8000cb4:	2400071c 	.word	0x2400071c
 8000cb8:	24001722 	.word	0x24001722
 8000cbc:	24000720 	.word	0x24000720
 8000cc0:	2400053c 	.word	0x2400053c
 8000cc4:	24001723 	.word	0x24001723
 8000cc8:	24001720 	.word	0x24001720
 8000ccc:	24001721 	.word	0x24001721
 8000cd0:	24000f20 	.word	0x24000f20

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09c      	sub	sp, #112	; 0x70
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	224c      	movs	r2, #76	; 0x4c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00e fbe2 	bl	800f4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00e fbdc 	bl	800f4ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f003 fff3 	bl	8004ce0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <SystemClock_Config+0x104>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <SystemClock_Config+0x104>)
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <SystemClock_Config+0x104>)
 8000d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <SystemClock_Config+0x108>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <SystemClock_Config+0x108>)
 8000d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <SystemClock_Config+0x108>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2c:	bf00      	nop
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <SystemClock_Config+0x108>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3a:	d1f8      	bne.n	8000d2e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4a:	2340      	movs	r3, #64	; 0x40
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 f808 	bl	8004d94 <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d8a:	f000 f9b7 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8e:	233f      	movs	r3, #63	; 0x3f
 8000d90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	2303      	movs	r3, #3
 8000d94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000da2:	2340      	movs	r3, #64	; 0x40
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000daa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2102      	movs	r1, #2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fc47 	bl	8005648 <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000dc0:	f000 f99c 	bl	80010fc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000dc4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f004 fdf2 	bl	80059b4 <HAL_RCC_MCOConfig>
}
 8000dd0:	bf00      	nop
 8000dd2:	3770      	adds	r7, #112	; 0x70
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58000400 	.word	0x58000400
 8000ddc:	58024800 	.word	0x58024800

08000de0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <MX_I2S1_Init+0x64>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e06:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_I2S1_Init+0x60>)
 8000e2c:	f003 fbca 	bl	80045c4 <HAL_I2S_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000e36:	f000 f961 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2400053c 	.word	0x2400053c
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <MX_SDMMC1_SD_Init+0x44>)
 8000e50:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e64:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e6e:	2208      	movs	r2, #8
 8000e70:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_SDMMC1_SD_Init+0x40>)
 8000e74:	f007 fd1c 	bl	80088b0 <HAL_SD_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e7e:	f000 f93d 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	24000608 	.word	0x24000608
 8000e8c:	52007000 	.word	0x52007000

08000e90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <MX_USART1_UART_Init+0x94>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000eda:	f009 f89b 	bl	800a014 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 f90a 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000eec:	f00a f89d 	bl	800b02a <HAL_UARTEx_SetTxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f000 f901 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000efe:	f00a f8d2 	bl	800b0a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f000 f8f8 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_USART1_UART_Init+0x90>)
 8000f0e:	f00a f853 	bl	800afb8 <HAL_UARTEx_DisableFifoMode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f8f0 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24000684 	.word	0x24000684
 8000f24:	40011000 	.word	0x40011000

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_DMA_Init+0x3c>)
 8000f30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <MX_DMA_Init+0x3c>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_DMA_Init+0x3c>)
 8000f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	200b      	movs	r0, #11
 8000f52:	f000 fd16 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f56:	200b      	movs	r0, #11
 8000f58:	f000 fd2d 	bl	80019b6 <HAL_NVIC_EnableIRQ>

}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58024400 	.word	0x58024400

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b47      	ldr	r3, [pc, #284]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b43      	ldr	r3, [pc, #268]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a42      	ldr	r2, [pc, #264]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	4a3a      	ldr	r2, [pc, #232]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	4a33      	ldr	r2, [pc, #204]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_GPIO_Init+0x144>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <MX_GPIO_Init+0x144>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <MX_GPIO_Init+0x144>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <MX_GPIO_Init+0x144>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	4a24      	ldr	r2, [pc, #144]	; (80010ac <MX_GPIO_Init+0x144>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_GPIO_Init+0x144>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_GPIO_Init+0x144>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_GPIO_Init+0x144>)
 800103a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_GPIO_Init+0x144>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin JOY_UP_Pin JOY_DOWN_Pin
                           JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin
 8001050:	237c      	movs	r3, #124	; 0x7c
 8001052:	61fb      	str	r3, [r7, #28]
                          |JOY_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4813      	ldr	r0, [pc, #76]	; (80010b0 <MX_GPIO_Init+0x148>)
 8001064:	f003 f8b8 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_GPIO_Init+0x14c>)
 800107e:	f003 f8ab 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_GPIO_Init+0x150>)
 80010a0:	f003 f89a 	bl	80041d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	; 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58022800 	.word	0x58022800
 80010b4:	58022000 	.word	0x58022000
 80010b8:	58020000 	.word	0x58020000

080010bc <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
//void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	full_i2s = 1;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_I2S_RxCpltCallback+0x1c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	24001721 	.word	0x24001721

080010dc <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
//void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	half_i2s = 1;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	24001720 	.word	0x24001720

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_MspInit+0x30>)
 8001110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001114:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x30>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x30>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	58024400 	.word	0x58024400

0800113c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0be      	sub	sp, #248	; 0xf8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	22c8      	movs	r2, #200	; 0xc8
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00e f9a5 	bl	800f4ac <memset>
  if(hi2s->Instance==SPI1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a62      	ldr	r2, [pc, #392]	; (80012f0 <HAL_I2S_MspInit+0x1b4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	f040 80bd 	bne.w	80012e8 <HAL_I2S_MspInit+0x1ac>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800116e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800117a:	2300      	movs	r3, #0
 800117c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fe56 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 800118e:	f7ff ffb5 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001192:	4b58      	ldr	r3, [pc, #352]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 8001194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001198:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 800119a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_I2S_MspInit+0x1b8>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    PB3 (JTDO/TRACESWO)     ------> I2S1_CK
    PD7     ------> I2S1_SDO
    PA6     ------> I2S1_SDI
    PA4     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800120a:	2308      	movs	r3, #8
 800120c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001222:	2305      	movs	r3, #5
 8001224:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800122c:	4619      	mov	r1, r3
 800122e:	4832      	ldr	r0, [pc, #200]	; (80012f8 <HAL_I2S_MspInit+0x1bc>)
 8001230:	f002 ffd2 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124c:	2305      	movs	r3, #5
 800124e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001256:	4619      	mov	r1, r3
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <HAL_I2S_MspInit+0x1c0>)
 800125a:	f002 ffbd 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4;
 800125e:	2350      	movs	r3, #80	; 0x50
 8001260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001276:	2305      	movs	r3, #5
 8001278:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001280:	4619      	mov	r1, r3
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <HAL_I2S_MspInit+0x1c4>)
 8001284:	f002 ffa8 	bl	80041d8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_I2S_MspInit+0x1cc>)
 800128c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 8001290:	2225      	movs	r2, #37	; 0x25
 8001292:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012ce:	f000 fb8d 	bl	80019ec <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2S_MspInit+0x1a0>
    {
      Error_Handler();
 80012d8:	f7ff ff10 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012e0:	649a      	str	r2, [r3, #72]	; 0x48
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_I2S_MspInit+0x1c8>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	37f8      	adds	r7, #248	; 0xf8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40013000 	.word	0x40013000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020400 	.word	0x58020400
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58020000 	.word	0x58020000
 8001304:	24000590 	.word	0x24000590
 8001308:	40020010 	.word	0x40020010

0800130c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0be      	sub	sp, #248	; 0xf8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	22c8      	movs	r2, #200	; 0xc8
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00e f8bd 	bl	800f4ac <memset>
  if(hsd->Instance==SDMMC1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a41      	ldr	r2, [pc, #260]	; (800143c <HAL_SD_MspInit+0x130>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d17a      	bne.n	8001432 <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800133c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800134c:	230c      	movs	r3, #12
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800135c:	23c0      	movs	r3, #192	; 0xc0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001360:	2320      	movs	r3, #32
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	4618      	mov	r0, r3
 8001374:	f004 fd5e 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 800137e:	f7ff febd 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_SD_MspInit+0x134>)
 8001384:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <HAL_SD_MspInit+0x134>)
 800138a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_SD_MspInit+0x134>)
 8001394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_SD_MspInit+0x134>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_SD_MspInit+0x134>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_SD_MspInit+0x134>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_SD_MspInit+0x134>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_SD_MspInit+0x134>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_SD_MspInit+0x134>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 80013dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013f6:	230c      	movs	r3, #12
 80013f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001400:	4619      	mov	r1, r3
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <HAL_SD_MspInit+0x138>)
 8001404:	f002 fee8 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001408:	2304      	movs	r3, #4
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001420:	230c      	movs	r3, #12
 8001422:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800142a:	4619      	mov	r1, r3
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_SD_MspInit+0x13c>)
 800142e:	f002 fed3 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	37f8      	adds	r7, #248	; 0xf8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	52007000 	.word	0x52007000
 8001440:	58024400 	.word	0x58024400
 8001444:	58020800 	.word	0x58020800
 8001448:	58020c00 	.word	0x58020c00

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0bc      	sub	sp, #240	; 0xf0
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	22c8      	movs	r2, #200	; 0xc8
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00e f81d 	bl	800f4ac <memset>
  if(huart->Instance==USART1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_UART_MspInit+0xc8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d146      	bne.n	800150a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800147c:	f04f 0201 	mov.w	r2, #1
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fcce 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800149e:	f7ff fe2d 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f8:	2307      	movs	r3, #7
 80014fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <HAL_UART_MspInit+0xd0>)
 8001506:	f002 fe67 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	37f0      	adds	r7, #240	; 0xf0
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40011000 	.word	0x40011000
 8001518:	58024400 	.word	0x58024400
 800151c:	58020000 	.word	0x58020000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f8de 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Stream0_IRQHandler+0x10>)
 800157a:	f001 fb1b 	bl	8002bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000590 	.word	0x24000590

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f00d ff3e 	bl	800f438 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	24080000 	.word	0x24080000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	24001724 	.word	0x24001724
 80015f0:	24001778 	.word	0x24001778

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f8:	f7fe fff0 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f00d ff0f 	bl	800f444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff f9ff 	bl	8000a28 <main>
  bx  lr
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001630:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001634:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8001638:	0800fbcc 	.word	0x0800fbcc
  ldr r2, =_sbss
 800163c:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8001640:	24001778 	.word	0x24001778

08001644 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC3_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f98c 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001654:	f004 fa18 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	4913      	ldr	r1, [pc, #76]	; (80016b4 <HAL_Init+0x6c>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_Init+0x6c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_Init+0x70>)
 800168a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_Init+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f814 	bl	80016c0 <HAL_InitTick>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e002      	b.n	80016a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a2:	f7ff fd31 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024400 	.word	0x58024400
 80016b4:	0800f728 	.word	0x0800f728
 80016b8:	24000004 	.word	0x24000004
 80016bc:	24000000 	.word	0x24000000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_InitTick+0x60>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e021      	b.n	8001718 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_InitTick+0x64>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f971 	bl	80019d2 <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f93b 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x68>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	24000048 	.word	0x24000048
 8001724:	24000000 	.word	0x24000000
 8001728:	24000044 	.word	0x24000044

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	24000048 	.word	0x24000048
 8001750:	24001728 	.word	0x24001728

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	24001728 	.word	0x24001728

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000048 	.word	0x24000048

080017b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetREVID+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0c1b      	lsrs	r3, r3, #16
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	5c001000 	.word	0x5c001000

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <__NVIC_SetPriorityGrouping+0x40>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x40>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00
 8001810:	05fa0000 	.word	0x05fa0000

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff40 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff90 	bl	80018c0 <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5f 	bl	800186c <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff33 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa4 	bl	8001928 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff feae 	bl	8001754 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e316      	b.n	8002032 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a66      	ldr	r2, [pc, #408]	; (8001ba4 <HAL_DMA_Init+0x1b8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d04a      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_DMA_Init+0x1bc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d045      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a63      	ldr	r2, [pc, #396]	; (8001bac <HAL_DMA_Init+0x1c0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d040      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a62      	ldr	r2, [pc, #392]	; (8001bb0 <HAL_DMA_Init+0x1c4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d03b      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a60      	ldr	r2, [pc, #384]	; (8001bb4 <HAL_DMA_Init+0x1c8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d036      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5f      	ldr	r2, [pc, #380]	; (8001bb8 <HAL_DMA_Init+0x1cc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d031      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_DMA_Init+0x1d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d02c      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_DMA_Init+0x1d4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d027      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5a      	ldr	r2, [pc, #360]	; (8001bc4 <HAL_DMA_Init+0x1d8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d022      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a59      	ldr	r2, [pc, #356]	; (8001bc8 <HAL_DMA_Init+0x1dc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d01d      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_DMA_Init+0x1e0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d018      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_DMA_Init+0x1e4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_DMA_Init+0x1e8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00e      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_DMA_Init+0x1ec>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_DMA_Init+0x1f0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d004      	beq.n	8001aa4 <HAL_DMA_Init+0xb8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <HAL_DMA_Init+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Init+0xbc>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_DMA_Init+0xbe>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 813b 	beq.w	8001d26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <HAL_DMA_Init+0x1b8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d04a      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <HAL_DMA_Init+0x1bc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d045      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_DMA_Init+0x1c0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d040      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a33      	ldr	r2, [pc, #204]	; (8001bb0 <HAL_DMA_Init+0x1c4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d03b      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <HAL_DMA_Init+0x1c8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d036      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a30      	ldr	r2, [pc, #192]	; (8001bb8 <HAL_DMA_Init+0x1cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d031      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2e      	ldr	r2, [pc, #184]	; (8001bbc <HAL_DMA_Init+0x1d0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02c      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <HAL_DMA_Init+0x1d4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d027      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2b      	ldr	r2, [pc, #172]	; (8001bc4 <HAL_DMA_Init+0x1d8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d022      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2a      	ldr	r2, [pc, #168]	; (8001bc8 <HAL_DMA_Init+0x1dc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d01d      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <HAL_DMA_Init+0x1e0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d018      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_DMA_Init+0x1e4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <HAL_DMA_Init+0x1e8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <HAL_DMA_Init+0x1ec>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <HAL_DMA_Init+0x1f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_DMA_Init+0x174>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <HAL_DMA_Init+0x1f4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <HAL_DMA_Init+0x186>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_DMA_Init+0x196>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b82:	e02f      	b.n	8001be4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b84:	f7ff fde6 	bl	8001754 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d928      	bls.n	8001be4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2220      	movs	r2, #32
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e246      	b.n	8002032 <HAL_DMA_Init+0x646>
 8001ba4:	40020010 	.word	0x40020010
 8001ba8:	40020028 	.word	0x40020028
 8001bac:	40020040 	.word	0x40020040
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	40020070 	.word	0x40020070
 8001bb8:	40020088 	.word	0x40020088
 8001bbc:	400200a0 	.word	0x400200a0
 8001bc0:	400200b8 	.word	0x400200b8
 8001bc4:	40020410 	.word	0x40020410
 8001bc8:	40020428 	.word	0x40020428
 8001bcc:	40020440 	.word	0x40020440
 8001bd0:	40020458 	.word	0x40020458
 8001bd4:	40020470 	.word	0x40020470
 8001bd8:	40020488 	.word	0x40020488
 8001bdc:	400204a0 	.word	0x400204a0
 8001be0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1c8      	bne.n	8001b84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <HAL_DMA_Init+0x420>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d107      	bne.n	8001c48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4313      	orrs	r3, r2
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c48:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <HAL_DMA_Init+0x424>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <HAL_DMA_Init+0x428>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c54:	d328      	bcc.n	8001ca8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b28      	cmp	r3, #40	; 0x28
 8001c5c:	d903      	bls.n	8001c66 <HAL_DMA_Init+0x27a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b2e      	cmp	r3, #46	; 0x2e
 8001c64:	d917      	bls.n	8001c96 <HAL_DMA_Init+0x2aa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c6c:	d903      	bls.n	8001c76 <HAL_DMA_Init+0x28a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b42      	cmp	r3, #66	; 0x42
 8001c74:	d90f      	bls.n	8001c96 <HAL_DMA_Init+0x2aa>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b46      	cmp	r3, #70	; 0x46
 8001c7c:	d903      	bls.n	8001c86 <HAL_DMA_Init+0x29a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b48      	cmp	r3, #72	; 0x48
 8001c84:	d907      	bls.n	8001c96 <HAL_DMA_Init+0x2aa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8001c8c:	d905      	bls.n	8001c9a <HAL_DMA_Init+0x2ae>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b52      	cmp	r3, #82	; 0x52
 8001c94:	d801      	bhi.n	8001c9a <HAL_DMA_Init+0x2ae>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_DMA_Init+0x2b0>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ca6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0307 	bic.w	r3, r3, #7
 8001cbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d117      	bne.n	8001d02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f002 f8ed 	bl	8003ec4 <DMA_CheckFifoParam>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e197      	b.n	8002032 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f002 f828 	bl	8003d60 <DMA_CalcBaseAndBitshift>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	e0cd      	b.n	8001ec2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_DMA_Init+0x42c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d022      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <HAL_DMA_Init+0x430>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01d      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_DMA_Init+0x434>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d018      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <HAL_DMA_Init+0x438>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_DMA_Init+0x43c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00e      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <HAL_DMA_Init+0x440>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d009      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_DMA_Init+0x444>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d004      	beq.n	8001d76 <HAL_DMA_Init+0x38a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_DMA_Init+0x448>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_DMA_Init+0x38e>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_DMA_Init+0x390>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8097 	beq.w	8001eb0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_DMA_Init+0x42c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d021      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_DMA_Init+0x430>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01c      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_DMA_Init+0x434>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d017      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_DMA_Init+0x438>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d012      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_DMA_Init+0x43c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_DMA_Init+0x440>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d008      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_DMA_Init+0x444>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Init+0x3e4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_DMA_Init+0x448>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_DMA_Init+0x44c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d020      	beq.n	8001e3c <HAL_DMA_Init+0x450>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d102      	bne.n	8001e08 <HAL_DMA_Init+0x41c>
 8001e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e06:	e01a      	b.n	8001e3e <HAL_DMA_Init+0x452>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e018      	b.n	8001e3e <HAL_DMA_Init+0x452>
 8001e0c:	fe10803f 	.word	0xfe10803f
 8001e10:	5c001000 	.word	0x5c001000
 8001e14:	ffff0000 	.word	0xffff0000
 8001e18:	58025408 	.word	0x58025408
 8001e1c:	5802541c 	.word	0x5802541c
 8001e20:	58025430 	.word	0x58025430
 8001e24:	58025444 	.word	0x58025444
 8001e28:	58025458 	.word	0x58025458
 8001e2c:	5802546c 	.word	0x5802546c
 8001e30:	58025480 	.word	0x58025480
 8001e34:	58025494 	.word	0x58025494
 8001e38:	fffe000f 	.word	0xfffe000f
 8001e3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68d2      	ldr	r2, [r2, #12]
 8001e42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b6e      	ldr	r3, [pc, #440]	; (800203c <HAL_DMA_Init+0x650>)
 8001e84:	4413      	add	r3, r2
 8001e86:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_DMA_Init+0x654>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f001 ff63 	bl	8003d60 <DMA_CalcBaseAndBitshift>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	e008      	b.n	8001ec2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0b7      	b.n	8002032 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5f      	ldr	r2, [pc, #380]	; (8002044 <HAL_DMA_Init+0x658>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d072      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <HAL_DMA_Init+0x65c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d06d      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5c      	ldr	r2, [pc, #368]	; (800204c <HAL_DMA_Init+0x660>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d068      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5a      	ldr	r2, [pc, #360]	; (8002050 <HAL_DMA_Init+0x664>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d063      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a59      	ldr	r2, [pc, #356]	; (8002054 <HAL_DMA_Init+0x668>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d05e      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_DMA_Init+0x66c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d059      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_DMA_Init+0x670>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d054      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_DMA_Init+0x674>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d04f      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a53      	ldr	r2, [pc, #332]	; (8002064 <HAL_DMA_Init+0x678>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_DMA_Init+0x67c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a50      	ldr	r2, [pc, #320]	; (800206c <HAL_DMA_Init+0x680>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_DMA_Init+0x684>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_DMA_Init+0x688>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	; (8002078 <HAL_DMA_Init+0x68c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a4a      	ldr	r2, [pc, #296]	; (800207c <HAL_DMA_Init+0x690>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_DMA_Init+0x694>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a47      	ldr	r2, [pc, #284]	; (8002084 <HAL_DMA_Init+0x698>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a45      	ldr	r2, [pc, #276]	; (8002088 <HAL_DMA_Init+0x69c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a44      	ldr	r2, [pc, #272]	; (800208c <HAL_DMA_Init+0x6a0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a42      	ldr	r2, [pc, #264]	; (8002090 <HAL_DMA_Init+0x6a4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a41      	ldr	r2, [pc, #260]	; (8002094 <HAL_DMA_Init+0x6a8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <HAL_DMA_Init+0x6ac>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3e      	ldr	r2, [pc, #248]	; (800209c <HAL_DMA_Init+0x6b0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_Init+0x5c6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a3c      	ldr	r2, [pc, #240]	; (80020a0 <HAL_DMA_Init+0x6b4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Init+0x5ca>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_Init+0x5cc>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d032      	beq.n	8002022 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f001 fffd 	bl	8003fbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b80      	cmp	r3, #128	; 0x80
 8001fc8:	d102      	bne.n	8001fd0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fe4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_DMA_Init+0x624>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d80c      	bhi.n	8002010 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f002 f87a 	bl	80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	e008      	b.n	8002022 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	a7fdabf8 	.word	0xa7fdabf8
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	40020010 	.word	0x40020010
 8002048:	40020028 	.word	0x40020028
 800204c:	40020040 	.word	0x40020040
 8002050:	40020058 	.word	0x40020058
 8002054:	40020070 	.word	0x40020070
 8002058:	40020088 	.word	0x40020088
 800205c:	400200a0 	.word	0x400200a0
 8002060:	400200b8 	.word	0x400200b8
 8002064:	40020410 	.word	0x40020410
 8002068:	40020428 	.word	0x40020428
 800206c:	40020440 	.word	0x40020440
 8002070:	40020458 	.word	0x40020458
 8002074:	40020470 	.word	0x40020470
 8002078:	40020488 	.word	0x40020488
 800207c:	400204a0 	.word	0x400204a0
 8002080:	400204b8 	.word	0x400204b8
 8002084:	58025408 	.word	0x58025408
 8002088:	5802541c 	.word	0x5802541c
 800208c:	58025430 	.word	0x58025430
 8002090:	58025444 	.word	0x58025444
 8002094:	58025458 	.word	0x58025458
 8002098:	5802546c 	.word	0x5802546c
 800209c:	58025480 	.word	0x58025480
 80020a0:	58025494 	.word	0x58025494

080020a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e226      	b.n	800250e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_DMA_Start_IT+0x2a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e21f      	b.n	800250e <HAL_DMA_Start_IT+0x46a>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	f040 820a 	bne.w	80024f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a68      	ldr	r2, [pc, #416]	; (8002298 <HAL_DMA_Start_IT+0x1f4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d04a      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a66      	ldr	r2, [pc, #408]	; (800229c <HAL_DMA_Start_IT+0x1f8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d045      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a65      	ldr	r2, [pc, #404]	; (80022a0 <HAL_DMA_Start_IT+0x1fc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d040      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a63      	ldr	r2, [pc, #396]	; (80022a4 <HAL_DMA_Start_IT+0x200>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d03b      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a62      	ldr	r2, [pc, #392]	; (80022a8 <HAL_DMA_Start_IT+0x204>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d036      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a60      	ldr	r2, [pc, #384]	; (80022ac <HAL_DMA_Start_IT+0x208>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d031      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5f      	ldr	r2, [pc, #380]	; (80022b0 <HAL_DMA_Start_IT+0x20c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d02c      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5d      	ldr	r2, [pc, #372]	; (80022b4 <HAL_DMA_Start_IT+0x210>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d027      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5c      	ldr	r2, [pc, #368]	; (80022b8 <HAL_DMA_Start_IT+0x214>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d022      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5a      	ldr	r2, [pc, #360]	; (80022bc <HAL_DMA_Start_IT+0x218>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01d      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a59      	ldr	r2, [pc, #356]	; (80022c0 <HAL_DMA_Start_IT+0x21c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d018      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_DMA_Start_IT+0x220>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_DMA_Start_IT+0x224>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00e      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a54      	ldr	r2, [pc, #336]	; (80022cc <HAL_DMA_Start_IT+0x228>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a53      	ldr	r2, [pc, #332]	; (80022d0 <HAL_DMA_Start_IT+0x22c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_Start_IT+0xee>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_DMA_Start_IT+0x230>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <HAL_DMA_Start_IT+0x100>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_DMA_Start_IT+0x110>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f001 fc24 	bl	8003a08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_DMA_Start_IT+0x1f4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d04a      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a33      	ldr	r2, [pc, #204]	; (800229c <HAL_DMA_Start_IT+0x1f8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d045      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a31      	ldr	r2, [pc, #196]	; (80022a0 <HAL_DMA_Start_IT+0x1fc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d040      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <HAL_DMA_Start_IT+0x200>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d03b      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_DMA_Start_IT+0x204>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d036      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <HAL_DMA_Start_IT+0x208>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d031      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_DMA_Start_IT+0x20c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02c      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_Start_IT+0x210>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d027      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_DMA_Start_IT+0x214>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d022      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_Start_IT+0x218>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d01d      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_DMA_Start_IT+0x21c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d018      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_Start_IT+0x220>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_DMA_Start_IT+0x224>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00e      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_Start_IT+0x228>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_DMA_Start_IT+0x22c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_DMA_Start_IT+0x1bc>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_DMA_Start_IT+0x230>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_DMA_Start_IT+0x1c0>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_DMA_Start_IT+0x1c2>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d036      	beq.n	80022d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 021e 	bic.w	r2, r3, #30
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0216 	orr.w	r2, r2, #22
 800227c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d03e      	beq.n	8002304 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0208 	orr.w	r2, r2, #8
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e035      	b.n	8002304 <HAL_DMA_Start_IT+0x260>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020e 	bic.w	r2, r3, #14
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 020a 	orr.w	r2, r2, #10
 80022ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a83      	ldr	r2, [pc, #524]	; (8002518 <HAL_DMA_Start_IT+0x474>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d072      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a82      	ldr	r2, [pc, #520]	; (800251c <HAL_DMA_Start_IT+0x478>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d06d      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a80      	ldr	r2, [pc, #512]	; (8002520 <HAL_DMA_Start_IT+0x47c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d068      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7f      	ldr	r2, [pc, #508]	; (8002524 <HAL_DMA_Start_IT+0x480>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d063      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7d      	ldr	r2, [pc, #500]	; (8002528 <HAL_DMA_Start_IT+0x484>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d05e      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7c      	ldr	r2, [pc, #496]	; (800252c <HAL_DMA_Start_IT+0x488>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d059      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7a      	ldr	r2, [pc, #488]	; (8002530 <HAL_DMA_Start_IT+0x48c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d054      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a79      	ldr	r2, [pc, #484]	; (8002534 <HAL_DMA_Start_IT+0x490>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d04f      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a77      	ldr	r2, [pc, #476]	; (8002538 <HAL_DMA_Start_IT+0x494>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04a      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a76      	ldr	r2, [pc, #472]	; (800253c <HAL_DMA_Start_IT+0x498>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d045      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a74      	ldr	r2, [pc, #464]	; (8002540 <HAL_DMA_Start_IT+0x49c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d040      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a73      	ldr	r2, [pc, #460]	; (8002544 <HAL_DMA_Start_IT+0x4a0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d03b      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a71      	ldr	r2, [pc, #452]	; (8002548 <HAL_DMA_Start_IT+0x4a4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d036      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_DMA_Start_IT+0x4a8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_DMA_Start_IT+0x4ac>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02c      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6d      	ldr	r2, [pc, #436]	; (8002554 <HAL_DMA_Start_IT+0x4b0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d027      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a6b      	ldr	r2, [pc, #428]	; (8002558 <HAL_DMA_Start_IT+0x4b4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6a      	ldr	r2, [pc, #424]	; (800255c <HAL_DMA_Start_IT+0x4b8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01d      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a68      	ldr	r2, [pc, #416]	; (8002560 <HAL_DMA_Start_IT+0x4bc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a67      	ldr	r2, [pc, #412]	; (8002564 <HAL_DMA_Start_IT+0x4c0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_DMA_Start_IT+0x4c4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a64      	ldr	r2, [pc, #400]	; (800256c <HAL_DMA_Start_IT+0x4c8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a62      	ldr	r2, [pc, #392]	; (8002570 <HAL_DMA_Start_IT+0x4cc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Start_IT+0x350>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a61      	ldr	r2, [pc, #388]	; (8002574 <HAL_DMA_Start_IT+0x4d0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Start_IT+0x354>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_DMA_Start_IT+0x356>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01a      	beq.n	8002434 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002432:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a37      	ldr	r2, [pc, #220]	; (8002518 <HAL_DMA_Start_IT+0x474>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d04a      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <HAL_DMA_Start_IT+0x478>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d045      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a34      	ldr	r2, [pc, #208]	; (8002520 <HAL_DMA_Start_IT+0x47c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d040      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a33      	ldr	r2, [pc, #204]	; (8002524 <HAL_DMA_Start_IT+0x480>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d03b      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <HAL_DMA_Start_IT+0x484>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d036      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_DMA_Start_IT+0x488>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d031      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <HAL_DMA_Start_IT+0x48c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02c      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_DMA_Start_IT+0x490>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d027      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_DMA_Start_IT+0x494>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d022      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_DMA_Start_IT+0x498>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d01d      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_DMA_Start_IT+0x49c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d018      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a27      	ldr	r2, [pc, #156]	; (8002544 <HAL_DMA_Start_IT+0x4a0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d013      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_DMA_Start_IT+0x4a4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00e      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_DMA_Start_IT+0x4a8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d009      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_DMA_Start_IT+0x4ac>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_Start_IT+0x430>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_DMA_Start_IT+0x4b0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <HAL_DMA_Start_IT+0x442>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e012      	b.n	800250c <HAL_DMA_Start_IT+0x468>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e009      	b.n	800250c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800250c:	7dfb      	ldrb	r3, [r7, #23]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40020010 	.word	0x40020010
 800251c:	40020028 	.word	0x40020028
 8002520:	40020040 	.word	0x40020040
 8002524:	40020058 	.word	0x40020058
 8002528:	40020070 	.word	0x40020070
 800252c:	40020088 	.word	0x40020088
 8002530:	400200a0 	.word	0x400200a0
 8002534:	400200b8 	.word	0x400200b8
 8002538:	40020410 	.word	0x40020410
 800253c:	40020428 	.word	0x40020428
 8002540:	40020440 	.word	0x40020440
 8002544:	40020458 	.word	0x40020458
 8002548:	40020470 	.word	0x40020470
 800254c:	40020488 	.word	0x40020488
 8002550:	400204a0 	.word	0x400204a0
 8002554:	400204b8 	.word	0x400204b8
 8002558:	58025408 	.word	0x58025408
 800255c:	5802541c 	.word	0x5802541c
 8002560:	58025430 	.word	0x58025430
 8002564:	58025444 	.word	0x58025444
 8002568:	58025458 	.word	0x58025458
 800256c:	5802546c 	.word	0x5802546c
 8002570:	58025480 	.word	0x58025480
 8002574:	58025494 	.word	0x58025494

08002578 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff f8e8 	bl	8001754 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e2dc      	b.n	8002b4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d008      	beq.n	80025ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e2cd      	b.n	8002b4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a76      	ldr	r2, [pc, #472]	; (800278c <HAL_DMA_Abort+0x214>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d04a      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a74      	ldr	r2, [pc, #464]	; (8002790 <HAL_DMA_Abort+0x218>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d045      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a73      	ldr	r2, [pc, #460]	; (8002794 <HAL_DMA_Abort+0x21c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d040      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a71      	ldr	r2, [pc, #452]	; (8002798 <HAL_DMA_Abort+0x220>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d03b      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a70      	ldr	r2, [pc, #448]	; (800279c <HAL_DMA_Abort+0x224>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d036      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6e      	ldr	r2, [pc, #440]	; (80027a0 <HAL_DMA_Abort+0x228>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d031      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6d      	ldr	r2, [pc, #436]	; (80027a4 <HAL_DMA_Abort+0x22c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d02c      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6b      	ldr	r2, [pc, #428]	; (80027a8 <HAL_DMA_Abort+0x230>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d027      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6a      	ldr	r2, [pc, #424]	; (80027ac <HAL_DMA_Abort+0x234>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_DMA_Abort+0x238>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01d      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a67      	ldr	r2, [pc, #412]	; (80027b4 <HAL_DMA_Abort+0x23c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d018      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <HAL_DMA_Abort+0x240>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a64      	ldr	r2, [pc, #400]	; (80027bc <HAL_DMA_Abort+0x244>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00e      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a62      	ldr	r2, [pc, #392]	; (80027c0 <HAL_DMA_Abort+0x248>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d009      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_DMA_Abort+0x24c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_DMA_Abort+0xd6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5f      	ldr	r2, [pc, #380]	; (80027c8 <HAL_DMA_Abort+0x250>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_DMA_Abort+0xda>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_DMA_Abort+0xdc>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 021e 	bic.w	r2, r2, #30
 8002666:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002676:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e00a      	b.n	8002696 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020e 	bic.w	r2, r2, #14
 800268e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3c      	ldr	r2, [pc, #240]	; (800278c <HAL_DMA_Abort+0x214>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d072      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <HAL_DMA_Abort+0x218>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d06d      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a39      	ldr	r2, [pc, #228]	; (8002794 <HAL_DMA_Abort+0x21c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d068      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a37      	ldr	r2, [pc, #220]	; (8002798 <HAL_DMA_Abort+0x220>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d063      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <HAL_DMA_Abort+0x224>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d05e      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_DMA_Abort+0x228>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d059      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <HAL_DMA_Abort+0x22c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d054      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a31      	ldr	r2, [pc, #196]	; (80027a8 <HAL_DMA_Abort+0x230>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d04f      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a30      	ldr	r2, [pc, #192]	; (80027ac <HAL_DMA_Abort+0x234>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04a      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_DMA_Abort+0x238>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d045      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <HAL_DMA_Abort+0x23c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d040      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_DMA_Abort+0x240>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d03b      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <HAL_DMA_Abort+0x244>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d036      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_DMA_Abort+0x248>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <HAL_DMA_Abort+0x24c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d02c      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <HAL_DMA_Abort+0x250>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d027      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <HAL_DMA_Abort+0x254>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d022      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_DMA_Abort+0x258>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01d      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <HAL_DMA_Abort+0x25c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d018      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_DMA_Abort+0x260>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_DMA_Abort+0x264>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_DMA_Abort+0x268>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_DMA_Abort+0x26c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_DMA_Abort+0x270>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d132      	bne.n	80027ec <HAL_DMA_Abort+0x274>
 8002786:	2301      	movs	r3, #1
 8002788:	e031      	b.n	80027ee <HAL_DMA_Abort+0x276>
 800278a:	bf00      	nop
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
 80027cc:	58025408 	.word	0x58025408
 80027d0:	5802541c 	.word	0x5802541c
 80027d4:	58025430 	.word	0x58025430
 80027d8:	58025444 	.word	0x58025444
 80027dc:	58025458 	.word	0x58025458
 80027e0:	5802546c 	.word	0x5802546c
 80027e4:	58025480 	.word	0x58025480
 80027e8:	58025494 	.word	0x58025494
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002800:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6d      	ldr	r2, [pc, #436]	; (80029bc <HAL_DMA_Abort+0x444>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d04a      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6b      	ldr	r2, [pc, #428]	; (80029c0 <HAL_DMA_Abort+0x448>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d045      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <HAL_DMA_Abort+0x44c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d040      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a68      	ldr	r2, [pc, #416]	; (80029c8 <HAL_DMA_Abort+0x450>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d03b      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_DMA_Abort+0x454>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d036      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_DMA_Abort+0x458>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a64      	ldr	r2, [pc, #400]	; (80029d4 <HAL_DMA_Abort+0x45c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d02c      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a62      	ldr	r2, [pc, #392]	; (80029d8 <HAL_DMA_Abort+0x460>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d027      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a61      	ldr	r2, [pc, #388]	; (80029dc <HAL_DMA_Abort+0x464>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5f      	ldr	r2, [pc, #380]	; (80029e0 <HAL_DMA_Abort+0x468>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01d      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5e      	ldr	r2, [pc, #376]	; (80029e4 <HAL_DMA_Abort+0x46c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d018      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_DMA_Abort+0x470>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5b      	ldr	r2, [pc, #364]	; (80029ec <HAL_DMA_Abort+0x474>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a59      	ldr	r2, [pc, #356]	; (80029f0 <HAL_DMA_Abort+0x478>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_DMA_Abort+0x47c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d004      	beq.n	80028a2 <HAL_DMA_Abort+0x32a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_DMA_Abort+0x480>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d108      	bne.n	80028b4 <HAL_DMA_Abort+0x33c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e007      	b.n	80028c4 <HAL_DMA_Abort+0x34c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028c4:	e013      	b.n	80028ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c6:	f7fe ff45 	bl	8001754 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d90c      	bls.n	80028ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e12d      	b.n	8002b4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e5      	bne.n	80028c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2f      	ldr	r2, [pc, #188]	; (80029bc <HAL_DMA_Abort+0x444>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d04a      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_DMA_Abort+0x448>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d045      	beq.n	800299a <HAL_DMA_Abort+0x422>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <HAL_DMA_Abort+0x44c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d040      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_DMA_Abort+0x450>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d03b      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_DMA_Abort+0x454>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d036      	beq.n	800299a <HAL_DMA_Abort+0x422>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_DMA_Abort+0x458>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <HAL_DMA_Abort+0x45c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d02c      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <HAL_DMA_Abort+0x460>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d027      	beq.n	800299a <HAL_DMA_Abort+0x422>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a23      	ldr	r2, [pc, #140]	; (80029dc <HAL_DMA_Abort+0x464>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_DMA_Abort+0x468>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01d      	beq.n	800299a <HAL_DMA_Abort+0x422>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_DMA_Abort+0x46c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d018      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <HAL_DMA_Abort+0x470>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_DMA_Abort+0x474>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00e      	beq.n	800299a <HAL_DMA_Abort+0x422>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <HAL_DMA_Abort+0x478>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <HAL_DMA_Abort+0x47c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_DMA_Abort+0x422>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_DMA_Abort+0x480>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_DMA_Abort+0x426>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_DMA_Abort+0x428>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02b      	beq.n	80029fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	223f      	movs	r2, #63	; 0x3f
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	e02a      	b.n	8002a12 <HAL_DMA_Abort+0x49a>
 80029bc:	40020010 	.word	0x40020010
 80029c0:	40020028 	.word	0x40020028
 80029c4:	40020040 	.word	0x40020040
 80029c8:	40020058 	.word	0x40020058
 80029cc:	40020070 	.word	0x40020070
 80029d0:	40020088 	.word	0x40020088
 80029d4:	400200a0 	.word	0x400200a0
 80029d8:	400200b8 	.word	0x400200b8
 80029dc:	40020410 	.word	0x40020410
 80029e0:	40020428 	.word	0x40020428
 80029e4:	40020440 	.word	0x40020440
 80029e8:	40020458 	.word	0x40020458
 80029ec:	40020470 	.word	0x40020470
 80029f0:	40020488 	.word	0x40020488
 80029f4:	400204a0 	.word	0x400204a0
 80029f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4f      	ldr	r2, [pc, #316]	; (8002b54 <HAL_DMA_Abort+0x5dc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d072      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <HAL_DMA_Abort+0x5e0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d06d      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_DMA_Abort+0x5e4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d068      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a4a      	ldr	r2, [pc, #296]	; (8002b60 <HAL_DMA_Abort+0x5e8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d063      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a49      	ldr	r2, [pc, #292]	; (8002b64 <HAL_DMA_Abort+0x5ec>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d05e      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_DMA_Abort+0x5f0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d059      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_DMA_Abort+0x5f4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d054      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a44      	ldr	r2, [pc, #272]	; (8002b70 <HAL_DMA_Abort+0x5f8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d04f      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <HAL_DMA_Abort+0x5fc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d04a      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a41      	ldr	r2, [pc, #260]	; (8002b78 <HAL_DMA_Abort+0x600>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d045      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a40      	ldr	r2, [pc, #256]	; (8002b7c <HAL_DMA_Abort+0x604>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d040      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <HAL_DMA_Abort+0x608>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d03b      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <HAL_DMA_Abort+0x60c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d036      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <HAL_DMA_Abort+0x610>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_DMA_Abort+0x614>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d02c      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_DMA_Abort+0x618>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d027      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <HAL_DMA_Abort+0x61c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <HAL_DMA_Abort+0x620>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01d      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <HAL_DMA_Abort+0x624>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <HAL_DMA_Abort+0x628>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <HAL_DMA_Abort+0x62c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_DMA_Abort+0x630>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_DMA_Abort+0x634>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_DMA_Abort+0x638>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Abort+0x58e>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_DMA_Abort+0x590>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d015      	beq.n	8002b38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40020028 	.word	0x40020028
 8002b5c:	40020040 	.word	0x40020040
 8002b60:	40020058 	.word	0x40020058
 8002b64:	40020070 	.word	0x40020070
 8002b68:	40020088 	.word	0x40020088
 8002b6c:	400200a0 	.word	0x400200a0
 8002b70:	400200b8 	.word	0x400200b8
 8002b74:	40020410 	.word	0x40020410
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40020440 	.word	0x40020440
 8002b80:	40020458 	.word	0x40020458
 8002b84:	40020470 	.word	0x40020470
 8002b88:	40020488 	.word	0x40020488
 8002b8c:	400204a0 	.word	0x400204a0
 8002b90:	400204b8 	.word	0x400204b8
 8002b94:	58025408 	.word	0x58025408
 8002b98:	5802541c 	.word	0x5802541c
 8002b9c:	58025430 	.word	0x58025430
 8002ba0:	58025444 	.word	0x58025444
 8002ba4:	58025458 	.word	0x58025458
 8002ba8:	5802546c 	.word	0x5802546c
 8002bac:	58025480 	.word	0x58025480
 8002bb0:	58025494 	.word	0x58025494

08002bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc0:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_DMA_IRQHandler+0x1ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a67      	ldr	r2, [pc, #412]	; (8002d64 <HAL_DMA_IRQHandler+0x1b0>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a9b      	lsrs	r3, r3, #10
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5f      	ldr	r2, [pc, #380]	; (8002d68 <HAL_DMA_IRQHandler+0x1b4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04a      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_DMA_IRQHandler+0x1b8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d045      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	; (8002d70 <HAL_DMA_IRQHandler+0x1bc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d040      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a5a      	ldr	r2, [pc, #360]	; (8002d74 <HAL_DMA_IRQHandler+0x1c0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a59      	ldr	r2, [pc, #356]	; (8002d78 <HAL_DMA_IRQHandler+0x1c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d036      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_DMA_IRQHandler+0x1c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_DMA_IRQHandler+0x1cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d02c      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a54      	ldr	r2, [pc, #336]	; (8002d84 <HAL_DMA_IRQHandler+0x1d0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d027      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a53      	ldr	r2, [pc, #332]	; (8002d88 <HAL_DMA_IRQHandler+0x1d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a51      	ldr	r2, [pc, #324]	; (8002d8c <HAL_DMA_IRQHandler+0x1d8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01d      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_DMA_IRQHandler+0x1dc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4e      	ldr	r2, [pc, #312]	; (8002d94 <HAL_DMA_IRQHandler+0x1e0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a4d      	ldr	r2, [pc, #308]	; (8002d98 <HAL_DMA_IRQHandler+0x1e4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_DMA_IRQHandler+0x1e8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_DMA_IRQHandler+0x1ec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xd2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a48      	ldr	r2, [pc, #288]	; (8002da4 <HAL_DMA_IRQHandler+0x1f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_DMA_IRQHandler+0xd6>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_DMA_IRQHandler+0xd8>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 842b 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a2 	beq.w	8002dec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2e      	ldr	r2, [pc, #184]	; (8002d68 <HAL_DMA_IRQHandler+0x1b4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d04a      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_DMA_IRQHandler+0x1b8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d045      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_DMA_IRQHandler+0x1bc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d040      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <HAL_DMA_IRQHandler+0x1c0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d03b      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_DMA_IRQHandler+0x1c4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d036      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <HAL_DMA_IRQHandler+0x1c8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a25      	ldr	r2, [pc, #148]	; (8002d80 <HAL_DMA_IRQHandler+0x1cc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02c      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <HAL_DMA_IRQHandler+0x1d0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d027      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_DMA_IRQHandler+0x1d4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d022      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <HAL_DMA_IRQHandler+0x1d8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d01d      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_DMA_IRQHandler+0x1dc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d018      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_DMA_IRQHandler+0x1e0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d013      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_DMA_IRQHandler+0x1e4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00e      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_DMA_IRQHandler+0x1e8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_DMA_IRQHandler+0x1ec>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x194>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d12f      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x1f4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e02e      	b.n	8002dbc <HAL_DMA_IRQHandler+0x208>
 8002d5e:	bf00      	nop
 8002d60:	24000000 	.word	0x24000000
 8002d64:	1b4e81b5 	.word	0x1b4e81b5
 8002d68:	40020010 	.word	0x40020010
 8002d6c:	40020028 	.word	0x40020028
 8002d70:	40020040 	.word	0x40020040
 8002d74:	40020058 	.word	0x40020058
 8002d78:	40020070 	.word	0x40020070
 8002d7c:	40020088 	.word	0x40020088
 8002d80:	400200a0 	.word	0x400200a0
 8002d84:	400200b8 	.word	0x400200b8
 8002d88:	40020410 	.word	0x40020410
 8002d8c:	40020428 	.word	0x40020428
 8002d90:	40020440 	.word	0x40020440
 8002d94:	40020458 	.word	0x40020458
 8002d98:	40020470 	.word	0x40020470
 8002d9c:	40020488 	.word	0x40020488
 8002da0:	400204a0 	.word	0x400204a0
 8002da4:	400204b8 	.word	0x400204b8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0204 	bic.w	r2, r2, #4
 8002dce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2208      	movs	r2, #8
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d06e      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_DMA_IRQHandler+0x3f8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a67      	ldr	r2, [pc, #412]	; (8002fb0 <HAL_DMA_IRQHandler+0x3fc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_DMA_IRQHandler+0x400>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a64      	ldr	r2, [pc, #400]	; (8002fb8 <HAL_DMA_IRQHandler+0x404>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a63      	ldr	r2, [pc, #396]	; (8002fbc <HAL_DMA_IRQHandler+0x408>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a61      	ldr	r2, [pc, #388]	; (8002fc0 <HAL_DMA_IRQHandler+0x40c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a60      	ldr	r2, [pc, #384]	; (8002fc4 <HAL_DMA_IRQHandler+0x410>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <HAL_DMA_IRQHandler+0x414>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a5d      	ldr	r2, [pc, #372]	; (8002fcc <HAL_DMA_IRQHandler+0x418>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5b      	ldr	r2, [pc, #364]	; (8002fd0 <HAL_DMA_IRQHandler+0x41c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <HAL_DMA_IRQHandler+0x420>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_DMA_IRQHandler+0x424>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a57      	ldr	r2, [pc, #348]	; (8002fdc <HAL_DMA_IRQHandler+0x428>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a55      	ldr	r2, [pc, #340]	; (8002fe0 <HAL_DMA_IRQHandler+0x42c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a54      	ldr	r2, [pc, #336]	; (8002fe4 <HAL_DMA_IRQHandler+0x430>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2ee>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_DMA_IRQHandler+0x434>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x304>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e003      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x30c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2201      	movs	r2, #1
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f043 0202 	orr.w	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2204      	movs	r2, #4
 8002eea:	409a      	lsls	r2, r3
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 808f 	beq.w	8003014 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <HAL_DMA_IRQHandler+0x3f8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d04a      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <HAL_DMA_IRQHandler+0x3fc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d045      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <HAL_DMA_IRQHandler+0x400>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_DMA_IRQHandler+0x404>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d03b      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <HAL_DMA_IRQHandler+0x408>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d036      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <HAL_DMA_IRQHandler+0x40c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d031      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <HAL_DMA_IRQHandler+0x410>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d02c      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <HAL_DMA_IRQHandler+0x414>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d027      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <HAL_DMA_IRQHandler+0x418>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_DMA_IRQHandler+0x41c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01d      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_DMA_IRQHandler+0x420>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d018      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_DMA_IRQHandler+0x424>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_DMA_IRQHandler+0x428>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_DMA_IRQHandler+0x42c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_DMA_IRQHandler+0x430>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x3e2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_DMA_IRQHandler+0x434>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d12a      	bne.n	8002fec <HAL_DMA_IRQHandler+0x438>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e023      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x440>
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2204      	movs	r2, #4
 8003002:	409a      	lsls	r2, r3
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2210      	movs	r2, #16
 800301e:	409a      	lsls	r2, r3
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a6 	beq.w	8003176 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a85      	ldr	r2, [pc, #532]	; (8003244 <HAL_DMA_IRQHandler+0x690>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d04a      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a83      	ldr	r2, [pc, #524]	; (8003248 <HAL_DMA_IRQHandler+0x694>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d045      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a82      	ldr	r2, [pc, #520]	; (800324c <HAL_DMA_IRQHandler+0x698>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d040      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_DMA_IRQHandler+0x69c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d03b      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7f      	ldr	r2, [pc, #508]	; (8003254 <HAL_DMA_IRQHandler+0x6a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d036      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a7d      	ldr	r2, [pc, #500]	; (8003258 <HAL_DMA_IRQHandler+0x6a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d031      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7c      	ldr	r2, [pc, #496]	; (800325c <HAL_DMA_IRQHandler+0x6a8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d02c      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a7a      	ldr	r2, [pc, #488]	; (8003260 <HAL_DMA_IRQHandler+0x6ac>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d027      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a79      	ldr	r2, [pc, #484]	; (8003264 <HAL_DMA_IRQHandler+0x6b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_DMA_IRQHandler+0x6b4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01d      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a76      	ldr	r2, [pc, #472]	; (800326c <HAL_DMA_IRQHandler+0x6b8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d018      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a74      	ldr	r2, [pc, #464]	; (8003270 <HAL_DMA_IRQHandler+0x6bc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a73      	ldr	r2, [pc, #460]	; (8003274 <HAL_DMA_IRQHandler+0x6c0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a71      	ldr	r2, [pc, #452]	; (8003278 <HAL_DMA_IRQHandler+0x6c4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a70      	ldr	r2, [pc, #448]	; (800327c <HAL_DMA_IRQHandler+0x6c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_DMA_IRQHandler+0x516>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_DMA_IRQHandler+0x6cc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10a      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x52c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e009      	b.n	80030f4 <HAL_DMA_IRQHandler+0x540>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03e      	beq.n	8003176 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2210      	movs	r2, #16
 8003102:	409a      	lsls	r2, r3
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d018      	beq.n	8003148 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d024      	beq.n	8003176 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
 8003134:	e01f      	b.n	8003176 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01b      	beq.n	8003176 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e016      	b.n	8003176 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2220      	movs	r2, #32
 8003180:	409a      	lsls	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8110 	beq.w	80033ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <HAL_DMA_IRQHandler+0x690>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <HAL_DMA_IRQHandler+0x694>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a29      	ldr	r2, [pc, #164]	; (800324c <HAL_DMA_IRQHandler+0x698>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a28      	ldr	r2, [pc, #160]	; (8003250 <HAL_DMA_IRQHandler+0x69c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <HAL_DMA_IRQHandler+0x6a0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a25      	ldr	r2, [pc, #148]	; (8003258 <HAL_DMA_IRQHandler+0x6a4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a23      	ldr	r2, [pc, #140]	; (800325c <HAL_DMA_IRQHandler+0x6a8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a22      	ldr	r2, [pc, #136]	; (8003260 <HAL_DMA_IRQHandler+0x6ac>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a20      	ldr	r2, [pc, #128]	; (8003264 <HAL_DMA_IRQHandler+0x6b0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_DMA_IRQHandler+0x6b4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_DMA_IRQHandler+0x6b8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_DMA_IRQHandler+0x6bc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_DMA_IRQHandler+0x6c0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a19      	ldr	r2, [pc, #100]	; (8003278 <HAL_DMA_IRQHandler+0x6c4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_DMA_IRQHandler+0x6c8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x678>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <HAL_DMA_IRQHandler+0x6cc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d12b      	bne.n	8003284 <HAL_DMA_IRQHandler+0x6d0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e02a      	b.n	8003298 <HAL_DMA_IRQHandler+0x6e4>
 8003242:	bf00      	nop
 8003244:	40020010 	.word	0x40020010
 8003248:	40020028 	.word	0x40020028
 800324c:	40020040 	.word	0x40020040
 8003250:	40020058 	.word	0x40020058
 8003254:	40020070 	.word	0x40020070
 8003258:	40020088 	.word	0x40020088
 800325c:	400200a0 	.word	0x400200a0
 8003260:	400200b8 	.word	0x400200b8
 8003264:	40020410 	.word	0x40020410
 8003268:	40020428 	.word	0x40020428
 800326c:	40020440 	.word	0x40020440
 8003270:	40020458 	.word	0x40020458
 8003274:	40020470 	.word	0x40020470
 8003278:	40020488 	.word	0x40020488
 800327c:	400204a0 	.word	0x400204a0
 8003280:	400204b8 	.word	0x400204b8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8087 	beq.w	80033ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2220      	movs	r2, #32
 80032a8:	409a      	lsls	r2, r3
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d139      	bne.n	800332e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0216 	bic.w	r2, r2, #22
 80032c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_DMA_IRQHandler+0x736>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	223f      	movs	r2, #63	; 0x3f
 8003304:	409a      	lsls	r2, r3
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 834a 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
          }
          return;
 800332c:	e344      	b.n	80039b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d018      	beq.n	800336e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	2b00      	cmp	r3, #0
 8003350:	d02c      	beq.n	80033ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
 800335a:	e027      	b.n	80033ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d023      	beq.n	80033ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
 800336c:	e01e      	b.n	80033ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10f      	bne.n	800339c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0210 	bic.w	r2, r2, #16
 800338a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8306 	beq.w	80039c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8088 	beq.w	80034d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2204      	movs	r2, #4
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7a      	ldr	r2, [pc, #488]	; (80035bc <HAL_DMA_IRQHandler+0xa08>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d04a      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a79      	ldr	r2, [pc, #484]	; (80035c0 <HAL_DMA_IRQHandler+0xa0c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d045      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a77      	ldr	r2, [pc, #476]	; (80035c4 <HAL_DMA_IRQHandler+0xa10>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d040      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a76      	ldr	r2, [pc, #472]	; (80035c8 <HAL_DMA_IRQHandler+0xa14>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d03b      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a74      	ldr	r2, [pc, #464]	; (80035cc <HAL_DMA_IRQHandler+0xa18>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d036      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a73      	ldr	r2, [pc, #460]	; (80035d0 <HAL_DMA_IRQHandler+0xa1c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d031      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a71      	ldr	r2, [pc, #452]	; (80035d4 <HAL_DMA_IRQHandler+0xa20>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02c      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a70      	ldr	r2, [pc, #448]	; (80035d8 <HAL_DMA_IRQHandler+0xa24>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d027      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6e      	ldr	r2, [pc, #440]	; (80035dc <HAL_DMA_IRQHandler+0xa28>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6d      	ldr	r2, [pc, #436]	; (80035e0 <HAL_DMA_IRQHandler+0xa2c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6b      	ldr	r2, [pc, #428]	; (80035e4 <HAL_DMA_IRQHandler+0xa30>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_DMA_IRQHandler+0xa34>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a68      	ldr	r2, [pc, #416]	; (80035ec <HAL_DMA_IRQHandler+0xa38>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a67      	ldr	r2, [pc, #412]	; (80035f0 <HAL_DMA_IRQHandler+0xa3c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_DMA_IRQHandler+0xa40>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_DMA_IRQHandler+0x8b8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a64      	ldr	r2, [pc, #400]	; (80035f8 <HAL_DMA_IRQHandler+0xa44>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <HAL_DMA_IRQHandler+0x8ca>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e007      	b.n	800348e <HAL_DMA_IRQHandler+0x8da>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3301      	adds	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	429a      	cmp	r2, r3
 8003498:	d307      	bcc.n	80034aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f2      	bne.n	800348e <HAL_DMA_IRQHandler+0x8da>
 80034a8:	e000      	b.n	80034ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80034c2:	e003      	b.n	80034cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8272 	beq.w	80039c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e26c      	b.n	80039c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a43      	ldr	r2, [pc, #268]	; (80035fc <HAL_DMA_IRQHandler+0xa48>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a42      	ldr	r2, [pc, #264]	; (8003600 <HAL_DMA_IRQHandler+0xa4c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_DMA_IRQHandler+0xa50>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <HAL_DMA_IRQHandler+0xa54>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3d      	ldr	r2, [pc, #244]	; (800360c <HAL_DMA_IRQHandler+0xa58>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <HAL_DMA_IRQHandler+0xa5c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_DMA_IRQHandler+0xa60>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_IRQHandler+0x984>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a39      	ldr	r2, [pc, #228]	; (8003618 <HAL_DMA_IRQHandler+0xa64>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_DMA_IRQHandler+0x988>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_DMA_IRQHandler+0x98a>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 823f 	beq.w	80039c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2204      	movs	r2, #4
 8003556:	409a      	lsls	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80cd 	beq.w	80036fc <HAL_DMA_IRQHandler+0xb48>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80c7 	beq.w	80036fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2204      	movs	r2, #4
 8003578:	409a      	lsls	r2, r3
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d049      	beq.n	800361c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8210 	beq.w	80039bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035a4:	e20a      	b.n	80039bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8206 	beq.w	80039bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b8:	e200      	b.n	80039bc <HAL_DMA_IRQHandler+0xe08>
 80035ba:	bf00      	nop
 80035bc:	40020010 	.word	0x40020010
 80035c0:	40020028 	.word	0x40020028
 80035c4:	40020040 	.word	0x40020040
 80035c8:	40020058 	.word	0x40020058
 80035cc:	40020070 	.word	0x40020070
 80035d0:	40020088 	.word	0x40020088
 80035d4:	400200a0 	.word	0x400200a0
 80035d8:	400200b8 	.word	0x400200b8
 80035dc:	40020410 	.word	0x40020410
 80035e0:	40020428 	.word	0x40020428
 80035e4:	40020440 	.word	0x40020440
 80035e8:	40020458 	.word	0x40020458
 80035ec:	40020470 	.word	0x40020470
 80035f0:	40020488 	.word	0x40020488
 80035f4:	400204a0 	.word	0x400204a0
 80035f8:	400204b8 	.word	0x400204b8
 80035fc:	58025408 	.word	0x58025408
 8003600:	5802541c 	.word	0x5802541c
 8003604:	58025430 	.word	0x58025430
 8003608:	58025444 	.word	0x58025444
 800360c:	58025458 	.word	0x58025458
 8003610:	5802546c 	.word	0x5802546c
 8003614:	58025480 	.word	0x58025480
 8003618:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d160      	bne.n	80036e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7f      	ldr	r2, [pc, #508]	; (8003828 <HAL_DMA_IRQHandler+0xc74>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d04a      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7d      	ldr	r2, [pc, #500]	; (800382c <HAL_DMA_IRQHandler+0xc78>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d045      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7c      	ldr	r2, [pc, #496]	; (8003830 <HAL_DMA_IRQHandler+0xc7c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d040      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7a      	ldr	r2, [pc, #488]	; (8003834 <HAL_DMA_IRQHandler+0xc80>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d03b      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a79      	ldr	r2, [pc, #484]	; (8003838 <HAL_DMA_IRQHandler+0xc84>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d036      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a77      	ldr	r2, [pc, #476]	; (800383c <HAL_DMA_IRQHandler+0xc88>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d031      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a76      	ldr	r2, [pc, #472]	; (8003840 <HAL_DMA_IRQHandler+0xc8c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d02c      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a74      	ldr	r2, [pc, #464]	; (8003844 <HAL_DMA_IRQHandler+0xc90>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d027      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a73      	ldr	r2, [pc, #460]	; (8003848 <HAL_DMA_IRQHandler+0xc94>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a71      	ldr	r2, [pc, #452]	; (800384c <HAL_DMA_IRQHandler+0xc98>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01d      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a70      	ldr	r2, [pc, #448]	; (8003850 <HAL_DMA_IRQHandler+0xc9c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6e      	ldr	r2, [pc, #440]	; (8003854 <HAL_DMA_IRQHandler+0xca0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6d      	ldr	r2, [pc, #436]	; (8003858 <HAL_DMA_IRQHandler+0xca4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6b      	ldr	r2, [pc, #428]	; (800385c <HAL_DMA_IRQHandler+0xca8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6a      	ldr	r2, [pc, #424]	; (8003860 <HAL_DMA_IRQHandler+0xcac>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xb12>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a68      	ldr	r2, [pc, #416]	; (8003864 <HAL_DMA_IRQHandler+0xcb0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d108      	bne.n	80036d8 <HAL_DMA_IRQHandler+0xb24>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0208 	bic.w	r2, r2, #8
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e007      	b.n	80036e8 <HAL_DMA_IRQHandler+0xb34>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8165 	beq.w	80039bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036fa:	e15f      	b.n	80039bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2202      	movs	r2, #2
 8003706:	409a      	lsls	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80c5 	beq.w	800389c <HAL_DMA_IRQHandler+0xce8>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80bf 	beq.w	800389c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2202      	movs	r2, #2
 8003728:	409a      	lsls	r2, r3
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 813a 	beq.w	80039c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003754:	e134      	b.n	80039c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8130 	beq.w	80039c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003768:	e12a      	b.n	80039c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 8089 	bne.w	8003888 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <HAL_DMA_IRQHandler+0xc74>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04a      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <HAL_DMA_IRQHandler+0xc78>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d045      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a28      	ldr	r2, [pc, #160]	; (8003830 <HAL_DMA_IRQHandler+0xc7c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d040      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_DMA_IRQHandler+0xc80>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d03b      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <HAL_DMA_IRQHandler+0xc84>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d036      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_DMA_IRQHandler+0xc88>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a22      	ldr	r2, [pc, #136]	; (8003840 <HAL_DMA_IRQHandler+0xc8c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d02c      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a20      	ldr	r2, [pc, #128]	; (8003844 <HAL_DMA_IRQHandler+0xc90>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d027      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_DMA_IRQHandler+0xc94>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_DMA_IRQHandler+0xc98>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_DMA_IRQHandler+0xc9c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_DMA_IRQHandler+0xca0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_DMA_IRQHandler+0xca4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <HAL_DMA_IRQHandler+0xca8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a16      	ldr	r2, [pc, #88]	; (8003860 <HAL_DMA_IRQHandler+0xcac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_IRQHandler+0xc62>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <HAL_DMA_IRQHandler+0xcb0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d128      	bne.n	8003868 <HAL_DMA_IRQHandler+0xcb4>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0214 	bic.w	r2, r2, #20
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e027      	b.n	8003878 <HAL_DMA_IRQHandler+0xcc4>
 8003828:	40020010 	.word	0x40020010
 800382c:	40020028 	.word	0x40020028
 8003830:	40020040 	.word	0x40020040
 8003834:	40020058 	.word	0x40020058
 8003838:	40020070 	.word	0x40020070
 800383c:	40020088 	.word	0x40020088
 8003840:	400200a0 	.word	0x400200a0
 8003844:	400200b8 	.word	0x400200b8
 8003848:	40020410 	.word	0x40020410
 800384c:	40020428 	.word	0x40020428
 8003850:	40020440 	.word	0x40020440
 8003854:	40020458 	.word	0x40020458
 8003858:	40020470 	.word	0x40020470
 800385c:	40020488 	.word	0x40020488
 8003860:	400204a0 	.word	0x400204a0
 8003864:	400204b8 	.word	0x400204b8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 020a 	bic.w	r2, r2, #10
 8003876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8097 	beq.w	80039c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800389a:	e091      	b.n	80039c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2208      	movs	r2, #8
 80038a6:	409a      	lsls	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8088 	beq.w	80039c2 <HAL_DMA_IRQHandler+0xe0e>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8082 	beq.w	80039c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a41      	ldr	r2, [pc, #260]	; (80039c8 <HAL_DMA_IRQHandler+0xe14>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d04a      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a3f      	ldr	r2, [pc, #252]	; (80039cc <HAL_DMA_IRQHandler+0xe18>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d045      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a3e      	ldr	r2, [pc, #248]	; (80039d0 <HAL_DMA_IRQHandler+0xe1c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d040      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3c      	ldr	r2, [pc, #240]	; (80039d4 <HAL_DMA_IRQHandler+0xe20>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d03b      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_DMA_IRQHandler+0xe24>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d036      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a39      	ldr	r2, [pc, #228]	; (80039dc <HAL_DMA_IRQHandler+0xe28>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d031      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a38      	ldr	r2, [pc, #224]	; (80039e0 <HAL_DMA_IRQHandler+0xe2c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d02c      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a36      	ldr	r2, [pc, #216]	; (80039e4 <HAL_DMA_IRQHandler+0xe30>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d027      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <HAL_DMA_IRQHandler+0xe34>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d022      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a33      	ldr	r2, [pc, #204]	; (80039ec <HAL_DMA_IRQHandler+0xe38>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01d      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_DMA_IRQHandler+0xe3c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d018      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_DMA_IRQHandler+0xe40>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <HAL_DMA_IRQHandler+0xe44>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00e      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2d      	ldr	r2, [pc, #180]	; (80039fc <HAL_DMA_IRQHandler+0xe48>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d009      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <HAL_DMA_IRQHandler+0xe4c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_DMA_IRQHandler+0xdaa>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_DMA_IRQHandler+0xe50>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <HAL_DMA_IRQHandler+0xdbc>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 021c 	bic.w	r2, r2, #28
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e007      	b.n	8003980 <HAL_DMA_IRQHandler+0xdcc>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020e 	bic.w	r2, r2, #14
 800397e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	e004      	b.n	80039c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039c2:	3728      	adds	r7, #40	; 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40020010 	.word	0x40020010
 80039cc:	40020028 	.word	0x40020028
 80039d0:	40020040 	.word	0x40020040
 80039d4:	40020058 	.word	0x40020058
 80039d8:	40020070 	.word	0x40020070
 80039dc:	40020088 	.word	0x40020088
 80039e0:	400200a0 	.word	0x400200a0
 80039e4:	400200b8 	.word	0x400200b8
 80039e8:	40020410 	.word	0x40020410
 80039ec:	40020428 	.word	0x40020428
 80039f0:	40020440 	.word	0x40020440
 80039f4:	40020458 	.word	0x40020458
 80039f8:	40020470 	.word	0x40020470
 80039fc:	40020488 	.word	0x40020488
 8003a00:	400204a0 	.word	0x400204a0
 8003a04:	400204b8 	.word	0x400204b8

08003a08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7f      	ldr	r2, [pc, #508]	; (8003c24 <DMA_SetConfig+0x21c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d072      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a7d      	ldr	r2, [pc, #500]	; (8003c28 <DMA_SetConfig+0x220>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d06d      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <DMA_SetConfig+0x224>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d068      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7a      	ldr	r2, [pc, #488]	; (8003c30 <DMA_SetConfig+0x228>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d063      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a79      	ldr	r2, [pc, #484]	; (8003c34 <DMA_SetConfig+0x22c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d05e      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a77      	ldr	r2, [pc, #476]	; (8003c38 <DMA_SetConfig+0x230>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d059      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a76      	ldr	r2, [pc, #472]	; (8003c3c <DMA_SetConfig+0x234>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d054      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a74      	ldr	r2, [pc, #464]	; (8003c40 <DMA_SetConfig+0x238>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d04f      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a73      	ldr	r2, [pc, #460]	; (8003c44 <DMA_SetConfig+0x23c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04a      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a71      	ldr	r2, [pc, #452]	; (8003c48 <DMA_SetConfig+0x240>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d045      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a70      	ldr	r2, [pc, #448]	; (8003c4c <DMA_SetConfig+0x244>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d040      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6e      	ldr	r2, [pc, #440]	; (8003c50 <DMA_SetConfig+0x248>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d03b      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6d      	ldr	r2, [pc, #436]	; (8003c54 <DMA_SetConfig+0x24c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d036      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6b      	ldr	r2, [pc, #428]	; (8003c58 <DMA_SetConfig+0x250>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d031      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6a      	ldr	r2, [pc, #424]	; (8003c5c <DMA_SetConfig+0x254>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02c      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a68      	ldr	r2, [pc, #416]	; (8003c60 <DMA_SetConfig+0x258>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a67      	ldr	r2, [pc, #412]	; (8003c64 <DMA_SetConfig+0x25c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <DMA_SetConfig+0x260>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a64      	ldr	r2, [pc, #400]	; (8003c6c <DMA_SetConfig+0x264>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a62      	ldr	r2, [pc, #392]	; (8003c70 <DMA_SetConfig+0x268>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a61      	ldr	r2, [pc, #388]	; (8003c74 <DMA_SetConfig+0x26c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5f      	ldr	r2, [pc, #380]	; (8003c78 <DMA_SetConfig+0x270>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5e      	ldr	r2, [pc, #376]	; (8003c7c <DMA_SetConfig+0x274>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <DMA_SetConfig+0x10a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <DMA_SetConfig+0x278>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <DMA_SetConfig+0x10e>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <DMA_SetConfig+0x110>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <DMA_SetConfig+0x21c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d04a      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a38      	ldr	r2, [pc, #224]	; (8003c28 <DMA_SetConfig+0x220>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d045      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a36      	ldr	r2, [pc, #216]	; (8003c2c <DMA_SetConfig+0x224>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d040      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a35      	ldr	r2, [pc, #212]	; (8003c30 <DMA_SetConfig+0x228>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d03b      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a33      	ldr	r2, [pc, #204]	; (8003c34 <DMA_SetConfig+0x22c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d036      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <DMA_SetConfig+0x230>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d031      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a30      	ldr	r2, [pc, #192]	; (8003c3c <DMA_SetConfig+0x234>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d02c      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2f      	ldr	r2, [pc, #188]	; (8003c40 <DMA_SetConfig+0x238>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d027      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <DMA_SetConfig+0x23c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <DMA_SetConfig+0x240>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01d      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <DMA_SetConfig+0x244>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d018      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <DMA_SetConfig+0x248>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <DMA_SetConfig+0x24c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <DMA_SetConfig+0x250>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <DMA_SetConfig+0x254>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <DMA_SetConfig+0x1d0>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <DMA_SetConfig+0x258>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <DMA_SetConfig+0x1d4>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <DMA_SetConfig+0x1d6>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d059      	beq.n	8003c96 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	223f      	movs	r2, #63	; 0x3f
 8003bec:	409a      	lsls	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d138      	bne.n	8003c84 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c22:	e086      	b.n	8003d32 <DMA_SetConfig+0x32a>
 8003c24:	40020010 	.word	0x40020010
 8003c28:	40020028 	.word	0x40020028
 8003c2c:	40020040 	.word	0x40020040
 8003c30:	40020058 	.word	0x40020058
 8003c34:	40020070 	.word	0x40020070
 8003c38:	40020088 	.word	0x40020088
 8003c3c:	400200a0 	.word	0x400200a0
 8003c40:	400200b8 	.word	0x400200b8
 8003c44:	40020410 	.word	0x40020410
 8003c48:	40020428 	.word	0x40020428
 8003c4c:	40020440 	.word	0x40020440
 8003c50:	40020458 	.word	0x40020458
 8003c54:	40020470 	.word	0x40020470
 8003c58:	40020488 	.word	0x40020488
 8003c5c:	400204a0 	.word	0x400204a0
 8003c60:	400204b8 	.word	0x400204b8
 8003c64:	58025408 	.word	0x58025408
 8003c68:	5802541c 	.word	0x5802541c
 8003c6c:	58025430 	.word	0x58025430
 8003c70:	58025444 	.word	0x58025444
 8003c74:	58025458 	.word	0x58025458
 8003c78:	5802546c 	.word	0x5802546c
 8003c7c:	58025480 	.word	0x58025480
 8003c80:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
}
 8003c94:	e04d      	b.n	8003d32 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <DMA_SetConfig+0x338>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <DMA_SetConfig+0x33c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <DMA_SetConfig+0x340>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a24      	ldr	r2, [pc, #144]	; (8003d4c <DMA_SetConfig+0x344>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <DMA_SetConfig+0x348>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <DMA_SetConfig+0x34c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <DMA_SetConfig+0x350>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <DMA_SetConfig+0x2de>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <DMA_SetConfig+0x354>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <DMA_SetConfig+0x2e2>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <DMA_SetConfig+0x2e4>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d108      	bne.n	8003d22 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	60da      	str	r2, [r3, #12]
}
 8003d20:	e007      	b.n	8003d32 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	58025408 	.word	0x58025408
 8003d44:	5802541c 	.word	0x5802541c
 8003d48:	58025430 	.word	0x58025430
 8003d4c:	58025444 	.word	0x58025444
 8003d50:	58025458 	.word	0x58025458
 8003d54:	5802546c 	.word	0x5802546c
 8003d58:	58025480 	.word	0x58025480
 8003d5c:	58025494 	.word	0x58025494

08003d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <DMA_CalcBaseAndBitshift+0x118>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04a      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d045      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3f      	ldr	r2, [pc, #252]	; (8003e80 <DMA_CalcBaseAndBitshift+0x120>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d040      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a3e      	ldr	r2, [pc, #248]	; (8003e84 <DMA_CalcBaseAndBitshift+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d03b      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <DMA_CalcBaseAndBitshift+0x128>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d036      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <DMA_CalcBaseAndBitshift+0x12c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d031      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <DMA_CalcBaseAndBitshift+0x130>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <DMA_CalcBaseAndBitshift+0x134>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d027      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a36      	ldr	r2, [pc, #216]	; (8003e98 <DMA_CalcBaseAndBitshift+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d022      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a35      	ldr	r2, [pc, #212]	; (8003e9c <DMA_CalcBaseAndBitshift+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d01d      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x140>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a32      	ldr	r2, [pc, #200]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x144>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x148>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2f      	ldr	r2, [pc, #188]	; (8003eac <DMA_CalcBaseAndBitshift+0x14c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x150>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x154>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <DMA_CalcBaseAndBitshift+0xac>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <DMA_CalcBaseAndBitshift+0xae>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d024      	beq.n	8003e5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3b10      	subs	r3, #16
 8003e1a:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x158>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <DMA_CalcBaseAndBitshift+0x15c>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d908      	bls.n	8003e4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	659a      	str	r2, [r3, #88]	; 0x58
 8003e4a:	e00d      	b.n	8003e68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6593      	str	r3, [r2, #88]	; 0x58
 8003e5a:	e005      	b.n	8003e68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40020010 	.word	0x40020010
 8003e7c:	40020028 	.word	0x40020028
 8003e80:	40020040 	.word	0x40020040
 8003e84:	40020058 	.word	0x40020058
 8003e88:	40020070 	.word	0x40020070
 8003e8c:	40020088 	.word	0x40020088
 8003e90:	400200a0 	.word	0x400200a0
 8003e94:	400200b8 	.word	0x400200b8
 8003e98:	40020410 	.word	0x40020410
 8003e9c:	40020428 	.word	0x40020428
 8003ea0:	40020440 	.word	0x40020440
 8003ea4:	40020458 	.word	0x40020458
 8003ea8:	40020470 	.word	0x40020470
 8003eac:	40020488 	.word	0x40020488
 8003eb0:	400204a0 	.word	0x400204a0
 8003eb4:	400204b8 	.word	0x400204b8
 8003eb8:	aaaaaaab 	.word	0xaaaaaaab
 8003ebc:	0800f738 	.word	0x0800f738
 8003ec0:	fffffc00 	.word	0xfffffc00

08003ec4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d120      	bne.n	8003f1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d858      	bhi.n	8003f92 <DMA_CheckFifoParam+0xce>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <DMA_CheckFifoParam+0x24>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f93 	.word	0x08003f93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d048      	beq.n	8003f96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f08:	e045      	b.n	8003f96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f12:	d142      	bne.n	8003f9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f18:	e03f      	b.n	8003f9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f22:	d123      	bne.n	8003f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d838      	bhi.n	8003f9e <DMA_CheckFifoParam+0xda>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <DMA_CheckFifoParam+0x70>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f4b 	.word	0x08003f4b
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003f5d 	.word	0x08003f5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
        break;
 8003f48:	e030      	b.n	8003fac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d025      	beq.n	8003fa2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f5a:	e022      	b.n	8003fa2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f64:	d11f      	bne.n	8003fa6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f6a:	e01c      	b.n	8003fa6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d902      	bls.n	8003f7a <DMA_CheckFifoParam+0xb6>
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d003      	beq.n	8003f80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f78:	e018      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f7e:	e015      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f90:	e00b      	b.n	8003faa <DMA_CheckFifoParam+0xe6>
        break;
 8003f92:	bf00      	nop
 8003f94:	e00a      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003f96:	bf00      	nop
 8003f98:	e008      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e006      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e004      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
    break;
 8003faa:	bf00      	nop
    }
  }

  return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	; (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3b08      	subs	r3, #8
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004048:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004058:	e024      	b.n	80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3b10      	subs	r3, #16
 8004062:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d806      	bhi.n	8004082 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d902      	bls.n	8004082 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004094:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2201      	movs	r2, #1
 800409e:	409a      	lsls	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	58025408 	.word	0x58025408
 80040b4:	5802541c 	.word	0x5802541c
 80040b8:	58025430 	.word	0x58025430
 80040bc:	58025444 	.word	0x58025444
 80040c0:	58025458 	.word	0x58025458
 80040c4:	5802546c 	.word	0x5802546c
 80040c8:	58025480 	.word	0x58025480
 80040cc:	58025494 	.word	0x58025494
 80040d0:	cccccccd 	.word	0xcccccccd
 80040d4:	16009600 	.word	0x16009600
 80040d8:	58025880 	.word	0x58025880
 80040dc:	aaaaaaab 	.word	0xaaaaaaab
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	4002040f 	.word	0x4002040f
 80040e8:	10008200 	.word	0x10008200
 80040ec:	40020880 	.word	0x40020880

080040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04a      	beq.n	800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d847      	bhi.n	800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a25      	ldr	r2, [pc, #148]	; (80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a24      	ldr	r2, [pc, #144]	; (80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a15      	ldr	r2, [pc, #84]	; (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004178:	671a      	str	r2, [r3, #112]	; 0x70
 800417a:	e009      	b.n	8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	461a      	mov	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800418e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b01      	subs	r3, #1
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	58025408 	.word	0x58025408
 80041ac:	5802541c 	.word	0x5802541c
 80041b0:	58025430 	.word	0x58025430
 80041b4:	58025444 	.word	0x58025444
 80041b8:	58025458 	.word	0x58025458
 80041bc:	5802546c 	.word	0x5802546c
 80041c0:	58025480 	.word	0x58025480
 80041c4:	58025494 	.word	0x58025494
 80041c8:	1600963f 	.word	0x1600963f
 80041cc:	58025940 	.word	0x58025940
 80041d0:	1000823f 	.word	0x1000823f
 80041d4:	40020940 	.word	0x40020940

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041e6:	4b89      	ldr	r3, [pc, #548]	; (800440c <HAL_GPIO_Init+0x234>)
 80041e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041ea:	e194      	b.n	8004516 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8186 	beq.w	8004510 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d005      	beq.n	800421c <HAL_GPIO_Init+0x44>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d130      	bne.n	800427e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004252:	2201      	movs	r2, #1
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0201 	and.w	r2, r3, #1
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d017      	beq.n	80042ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	2203      	movs	r2, #3
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d123      	bne.n	800430e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	08da      	lsrs	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	220f      	movs	r2, #15
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	08da      	lsrs	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3208      	adds	r2, #8
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80e0 	beq.w	8004510 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004350:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <HAL_GPIO_Init+0x238>)
 8004352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004356:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <HAL_GPIO_Init+0x238>)
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_GPIO_Init+0x238>)
 8004362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <HAL_GPIO_Init+0x23c>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <HAL_GPIO_Init+0x240>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d052      	beq.n	8004440 <HAL_GPIO_Init+0x268>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_GPIO_Init+0x244>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_GPIO_Init+0x22e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_GPIO_Init+0x248>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02b      	beq.n	8004402 <HAL_GPIO_Init+0x22a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_GPIO_Init+0x24c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d025      	beq.n	80043fe <HAL_GPIO_Init+0x226>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_GPIO_Init+0x250>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <HAL_GPIO_Init+0x222>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_GPIO_Init+0x254>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d019      	beq.n	80043f6 <HAL_GPIO_Init+0x21e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <HAL_GPIO_Init+0x258>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a19      	ldr	r2, [pc, #100]	; (8004434 <HAL_GPIO_Init+0x25c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00d      	beq.n	80043ee <HAL_GPIO_Init+0x216>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <HAL_GPIO_Init+0x260>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <HAL_GPIO_Init+0x212>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_GPIO_Init+0x264>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_GPIO_Init+0x20e>
 80043e2:	2309      	movs	r3, #9
 80043e4:	e02d      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043e6:	230a      	movs	r3, #10
 80043e8:	e02b      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043ea:	2308      	movs	r3, #8
 80043ec:	e029      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e027      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043f2:	2306      	movs	r3, #6
 80043f4:	e025      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043f6:	2305      	movs	r3, #5
 80043f8:	e023      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e021      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043fe:	2303      	movs	r3, #3
 8004400:	e01f      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 8004402:	2302      	movs	r3, #2
 8004404:	e01d      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 8004406:	2301      	movs	r3, #1
 8004408:	e01b      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 800440a:	bf00      	nop
 800440c:	58000080 	.word	0x58000080
 8004410:	58024400 	.word	0x58024400
 8004414:	58000400 	.word	0x58000400
 8004418:	58020000 	.word	0x58020000
 800441c:	58020400 	.word	0x58020400
 8004420:	58020800 	.word	0x58020800
 8004424:	58020c00 	.word	0x58020c00
 8004428:	58021000 	.word	0x58021000
 800442c:	58021400 	.word	0x58021400
 8004430:	58021800 	.word	0x58021800
 8004434:	58021c00 	.word	0x58021c00
 8004438:	58022000 	.word	0x58022000
 800443c:	58022400 	.word	0x58022400
 8004440:	2300      	movs	r3, #0
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	f002 0203 	and.w	r2, r2, #3
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	4093      	lsls	r3, r2
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004452:	4938      	ldr	r1, [pc, #224]	; (8004534 <HAL_GPIO_Init+0x35c>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	3301      	adds	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f ae63 	bne.w	80041ec <HAL_GPIO_Init+0x14>
  }
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	3724      	adds	r7, #36	; 0x24
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	58000400 	.word	0x58000400

08004538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	887b      	ldrh	r3, [r7, #2]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	e001      	b.n	800455a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004570:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_HSEM_FastTake+0x2c>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3320      	adds	r3, #32
 8004576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457a:	4a07      	ldr	r2, [pc, #28]	; (8004598 <HAL_HSEM_FastTake+0x30>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	58026400 	.word	0x58026400
 8004598:	80000300 	.word	0x80000300

0800459c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80045a6:	4906      	ldr	r1, [pc, #24]	; (80045c0 <HAL_HSEM_Release+0x24>)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	58026400 	.word	0x58026400

080045c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e10d      	b.n	80047f2 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fda6 	bl	800113c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b04      	cmp	r3, #4
 8004624:	d008      	beq.n	8004638 <HAL_I2S_Init+0x74>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b06      	cmp	r3, #6
 800462c:	d004      	beq.n	8004638 <HAL_I2S_Init+0x74>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b0a      	cmp	r3, #10
 8004634:	f040 8087 	bne.w	8004746 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d05a      	beq.n	80046f6 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004648:	2302      	movs	r3, #2
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e001      	b.n	8004652 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b30      	cmp	r3, #48	; 0x30
 8004658:	d003      	beq.n	8004662 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800465e:	2bb0      	cmp	r3, #176	; 0xb0
 8004660:	d102      	bne.n	8004668 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004662:	2301      	movs	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e001      	b.n	800466c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800466c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	f002 fe28 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004678:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004682:	d113      	bne.n	80046ac <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	fbb2 f2f3 	udiv	r2, r2, r3
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	461a      	mov	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	3305      	adds	r3, #5
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	e014      	b.n	80046d6 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80046ac:	2220      	movs	r2, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d2:	3305      	adds	r3, #5
 80046d4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a48      	ldr	r2, [pc, #288]	; (80047fc <HAL_I2S_Init+0x238>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e003      	b.n	80046fe <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80046f6:	2302      	movs	r3, #2
 80046f8:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d102      	bne.n	800470a <HAL_I2S_Init+0x146>
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d002      	beq.n	8004710 <HAL_I2S_Init+0x14c>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2bff      	cmp	r3, #255	; 0xff
 800470e:	d907      	bls.n	8004720 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	f043 0210 	orr.w	r2, r3, #16
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e068      	b.n	80047f2 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8004726:	2301      	movs	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004730:	4b33      	ldr	r3, [pc, #204]	; (8004800 <HAL_I2S_Init+0x23c>)
 8004732:	4013      	ands	r3, r2
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	0411      	lsls	r1, r2, #16
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	0612      	lsls	r2, r2, #24
 800473c:	4311      	orrs	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	430b      	orrs	r3, r1
 8004744:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800474c:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <HAL_I2S_Init+0x240>)
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6851      	ldr	r1, [r2, #4]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6892      	ldr	r2, [r2, #8]
 8004758:	4311      	orrs	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68d2      	ldr	r2, [r2, #12]
 800475e:	4311      	orrs	r1, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6992      	ldr	r2, [r2, #24]
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6a12      	ldr	r2, [r2, #32]
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6912      	ldr	r2, [r2, #16]
 8004776:	430a      	orrs	r2, r1
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f640 72f8 	movw	r2, #4088	; 0xff8
 800478c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800479c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d007      	beq.n	80047cc <HAL_I2S_Init+0x208>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d003      	beq.n	80047cc <HAL_I2S_Init+0x208>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b0a      	cmp	r3, #10
 80047ca:	d10a      	bne.n	80047e2 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	cccccccd 	.word	0xcccccccd
 8004800:	fe00ffff 	.word	0xfe00ffff
 8004804:	fdff9040 	.word	0xfdff9040

08004808 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->TXDR));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3320      	adds	r3, #32
 800481e:	617b      	str	r3, [r7, #20]
#endif /* __GNUC__ */
  uint32_t tickstart;

  if ((pData == NULL) || (Size == 0UL))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_I2S_Transmit+0x24>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_I2S_Transmit+0x28>
  {
    return  HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0cd      	b.n	80049cc <HAL_I2S_Transmit+0x1c4>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <HAL_I2S_Transmit+0x38>
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
 800483e:	e0c5      	b.n	80049cc <HAL_I2S_Transmit+0x1c4>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_I2S_Transmit+0x48>
 800484c:	2302      	movs	r3, #2
 800484e:	e0bd      	b.n	80049cc <HAL_I2S_Transmit+0x1c4>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004858:	f7fc ff7c 	bl	8001754 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2203      	movs	r2, #3
 8004862:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Initialize fields not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t) 0UL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t) 0UL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d007      	beq.n	80048ae <HAL_I2S_Transmit+0xa6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]


  /* Wait until TXP flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, tickstart, Timeout) != HAL_OK)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2201      	movs	r2, #1
 80048c6:	2102      	movs	r1, #2
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f9d3 	bl	8004c74 <I2S_WaitFlagStateUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d06d      	beq.n	80049b0 <HAL_I2S_Transmit+0x1a8>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e06b      	b.n	80049cc <HAL_I2S_Transmit+0x1c4>
  }

  while (hi2s->TxXferCount > 0UL)
  {
    if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fc:	d004      	beq.n	8004908 <HAL_I2S_Transmit+0x100>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004906:	d112      	bne.n	800492e <HAL_I2S_Transmit+0x126>
    {
      /* Transmit data in 32 Bit mode */
      hi2s->Instance->TXDR = *((const uint32_t *)hi2s->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	621a      	str	r2, [r3, #32]
      hi2s->pTxBuffPtr += 2;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	865a      	strh	r2, [r3, #50]	; 0x32
 800492c:	e010      	b.n	8004950 <HAL_I2S_Transmit+0x148>
    }
    else
    {
      /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hi2s->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	881a      	ldrh	r2, [r3, #0]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hi2s->Instance->TXDR) = *((const uint16_t *)hi2s->pTxBuffPtr);
#endif /* __GNUC__ */

      hi2s->pTxBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    /* Wait until TXP flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, tickstart, Timeout) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2201      	movs	r2, #1
 8004958:	2102      	movs	r1, #2
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f98a 	bl	8004c74 <I2S_WaitFlagStateUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00f      	beq.n	8004986 <HAL_I2S_Transmit+0x17e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	651a      	str	r2, [r3, #80]	; 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      __HAL_UNLOCK(hi2s);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e022      	b.n	80049cc <HAL_I2S_Transmit+0x1c4>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	d10d      	bne.n	80049b0 <HAL_I2S_Transmit+0x1a8>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0220 	orr.w	r2, r2, #32
 80049a2:	619a      	str	r2, [r3, #24]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	f043 0204 	orr.w	r2, r3, #4
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	651a      	str	r2, [r3, #80]	; 0x50
  while (hi2s->TxXferCount > 0UL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d19c      	bne.n	80048f4 <HAL_I2S_Transmit+0xec>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  __HAL_UNLOCK(hi2s);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_I2S_Receive_DMA+0x1e>
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e086      	b.n	8004b04 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	e07e      	b.n	8004b04 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_I2S_Receive_DMA+0x42>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e076      	b.n	8004b04 <HAL_I2S_Receive_DMA+0x130>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2204      	movs	r2, #4
 8004a22:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a54:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <HAL_I2S_Receive_DMA+0x138>)
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <HAL_I2S_Receive_DMA+0x13c>)
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_I2S_Receive_DMA+0x140>)
 8004a66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3330      	adds	r3, #48	; 0x30
 8004a72:	4619      	mov	r1, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004a80:	f7fd fb10 	bl	80020a4 <HAL_DMA_Start_IT>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d011      	beq.n	8004aae <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	f043 0208 	orr.w	r2, r3, #8
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	e02a      	b.n	8004b04 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d107      	bne.n	8004aea <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	08004c0d 	.word	0x08004c0d
 8004b10:	08004bcb 	.word	0x08004bcb
 8004b14:	08004c29 	.word	0x08004c29

08004b18 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b32:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b42:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00f      	beq.n	8004b6c <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fd fd11 	bl	8002578 <HAL_DMA_Abort>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	f043 0208 	orr.w	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00f      	beq.n	8004b94 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd fcfd 	bl	8002578 <HAL_DMA_Abort>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	f043 0208 	orr.w	r2, r3, #8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10e      	bne.n	8004bfe <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bee:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7fc fa5c 	bl	80010bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7fc fa5e 	bl	80010dc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004c44:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	f043 0208 	orr.w	r2, r3, #8
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ffa5 	bl	8004bb6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Tickstart, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004c84:	e018      	b.n	8004cb8 <I2S_WaitFlagStateUntilTimeout+0x44>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d014      	beq.n	8004cb8 <I2S_WaitFlagStateUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0UL))
 8004c8e:	f7fc fd61 	bl	8001754 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d902      	bls.n	8004ca4 <I2S_WaitFlagStateUntilTimeout+0x30>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <I2S_WaitFlagStateUntilTimeout+0x44>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e00f      	b.n	8004cd8 <I2S_WaitFlagStateUntilTimeout+0x64>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d1d7      	bne.n	8004c86 <I2S_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004ce8:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d00a      	beq.n	8004d0a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d001      	beq.n	8004d06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e040      	b.n	8004d88 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e03e      	b.n	8004d88 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d0a:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004d12:	491f      	ldr	r1, [pc, #124]	; (8004d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d1a:	f7fc fd1b 	bl	8001754 <HAL_GetTick>
 8004d1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d20:	e009      	b.n	8004d36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d22:	f7fc fd17 	bl	8001754 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d30:	d901      	bls.n	8004d36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e028      	b.n	8004d88 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d42:	d1ee      	bne.n	8004d22 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b1e      	cmp	r3, #30
 8004d48:	d008      	beq.n	8004d5c <HAL_PWREx_ConfigSupply+0x7c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d4e:	d005      	beq.n	8004d5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b1d      	cmp	r3, #29
 8004d54:	d002      	beq.n	8004d5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b2d      	cmp	r3, #45	; 0x2d
 8004d5a:	d114      	bne.n	8004d86 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004d5c:	f7fc fcfa 	bl	8001754 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d62:	e009      	b.n	8004d78 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d64:	f7fc fcf6 	bl	8001754 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d72:	d901      	bls.n	8004d78 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d1ee      	bne.n	8004d64 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	58024800 	.word	0x58024800

08004d94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f000 bc48 	b.w	8005638 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8088 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db6:	4b99      	ldr	r3, [pc, #612]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dc0:	4b96      	ldr	r3, [pc, #600]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d007      	beq.n	8004ddc <HAL_RCC_OscConfig+0x48>
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b18      	cmp	r3, #24
 8004dd0:	d111      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62>
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	4b8f      	ldr	r3, [pc, #572]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d06d      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x130>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d169      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f000 bc21 	b.w	8005638 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_OscConfig+0x7a>
 8004e00:	4b86      	ldr	r3, [pc, #536]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a85      	ldr	r2, [pc, #532]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	e02e      	b.n	8004e6c <HAL_RCC_OscConfig+0xd8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x9c>
 8004e16:	4b81      	ldr	r3, [pc, #516]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a80      	ldr	r2, [pc, #512]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b7e      	ldr	r3, [pc, #504]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7d      	ldr	r2, [pc, #500]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e01d      	b.n	8004e6c <HAL_RCC_OscConfig+0xd8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0xc0>
 8004e3a:	4b78      	ldr	r3, [pc, #480]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a77      	ldr	r2, [pc, #476]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4b75      	ldr	r3, [pc, #468]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a74      	ldr	r2, [pc, #464]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e00b      	b.n	8004e6c <HAL_RCC_OscConfig+0xd8>
 8004e54:	4b71      	ldr	r3, [pc, #452]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a70      	ldr	r2, [pc, #448]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	4b6e      	ldr	r3, [pc, #440]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a6d      	ldr	r2, [pc, #436]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d013      	beq.n	8004e9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fc fc6e 	bl	8001754 <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fc fc6a 	bl	8001754 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e3d4      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0xe8>
 8004e9a:	e014      	b.n	8004ec6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fc fc5a 	bl	8001754 <HAL_GetTick>
 8004ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fc fc56 	bl	8001754 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e3c0      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x110>
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80ca 	beq.w	8005068 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed4:	4b51      	ldr	r3, [pc, #324]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004edc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ede:	4b4f      	ldr	r3, [pc, #316]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_RCC_OscConfig+0x166>
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	2b18      	cmp	r3, #24
 8004eee:	d156      	bne.n	8004f9e <HAL_RCC_OscConfig+0x20a>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d151      	bne.n	8004f9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004efa:	4b48      	ldr	r3, [pc, #288]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_RCC_OscConfig+0x17e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e392      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f12:	4b42      	ldr	r3, [pc, #264]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 0219 	bic.w	r2, r3, #25
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	493f      	ldr	r1, [pc, #252]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fc fc16 	bl	8001754 <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2c:	f7fc fc12 	bl	8001754 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e37c      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	f7fc fc33 	bl	80017b4 <HAL_GetREVID>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d817      	bhi.n	8004f88 <HAL_RCC_OscConfig+0x1f4>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d108      	bne.n	8004f72 <HAL_RCC_OscConfig+0x1de>
 8004f60:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f68:	4a2c      	ldr	r2, [pc, #176]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f70:	e07a      	b.n	8005068 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b2a      	ldr	r3, [pc, #168]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	031b      	lsls	r3, r3, #12
 8004f80:	4926      	ldr	r1, [pc, #152]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f86:	e06f      	b.n	8005068 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	4921      	ldr	r1, [pc, #132]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f9c:	e064      	b.n	8005068 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d047      	beq.n	8005036 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 0219 	bic.w	r2, r3, #25
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	491a      	ldr	r1, [pc, #104]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fc fbcc 	bl	8001754 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc0:	f7fc fbc8 	bl	8001754 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e332      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	f7fc fbe9 	bl	80017b4 <HAL_GetREVID>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d819      	bhi.n	8005020 <HAL_RCC_OscConfig+0x28c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d108      	bne.n	8005006 <HAL_RCC_OscConfig+0x272>
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ffc:	4a07      	ldr	r2, [pc, #28]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005002:	6053      	str	r3, [r2, #4]
 8005004:	e030      	b.n	8005068 <HAL_RCC_OscConfig+0x2d4>
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	031b      	lsls	r3, r3, #12
 8005014:	4901      	ldr	r1, [pc, #4]	; (800501c <HAL_RCC_OscConfig+0x288>)
 8005016:	4313      	orrs	r3, r2
 8005018:	604b      	str	r3, [r1, #4]
 800501a:	e025      	b.n	8005068 <HAL_RCC_OscConfig+0x2d4>
 800501c:	58024400 	.word	0x58024400
 8005020:	4b9a      	ldr	r3, [pc, #616]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	4997      	ldr	r1, [pc, #604]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	e018      	b.n	8005068 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005036:	4b95      	ldr	r3, [pc, #596]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a94      	ldr	r2, [pc, #592]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fc fb87 	bl	8001754 <HAL_GetTick>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504a:	f7fc fb83 	bl	8001754 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e2ed      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800505c:	4b8b      	ldr	r3, [pc, #556]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f0      	bne.n	800504a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a9 	beq.w	80051c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005076:	4b85      	ldr	r3, [pc, #532]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800507e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005080:	4b82      	ldr	r3, [pc, #520]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d007      	beq.n	800509c <HAL_RCC_OscConfig+0x308>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b18      	cmp	r3, #24
 8005090:	d13a      	bne.n	8005108 <HAL_RCC_OscConfig+0x374>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d135      	bne.n	8005108 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800509c:	4b7b      	ldr	r3, [pc, #492]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_OscConfig+0x320>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e2c1      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050b4:	f7fc fb7e 	bl	80017b4 <HAL_GetREVID>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80050be:	4293      	cmp	r3, r2
 80050c0:	d817      	bhi.n	80050f2 <HAL_RCC_OscConfig+0x35e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d108      	bne.n	80050dc <HAL_RCC_OscConfig+0x348>
 80050ca:	4b70      	ldr	r3, [pc, #448]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80050d2:	4a6e      	ldr	r2, [pc, #440]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050da:	e075      	b.n	80051c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050dc:	4b6b      	ldr	r3, [pc, #428]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	069b      	lsls	r3, r3, #26
 80050ea:	4968      	ldr	r1, [pc, #416]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050f0:	e06a      	b.n	80051c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050f2:	4b66      	ldr	r3, [pc, #408]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	061b      	lsls	r3, r3, #24
 8005100:	4962      	ldr	r1, [pc, #392]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005102:	4313      	orrs	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005106:	e05f      	b.n	80051c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d042      	beq.n	8005196 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005110:	4b5e      	ldr	r3, [pc, #376]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5d      	ldr	r2, [pc, #372]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fc fb1a 	bl	8001754 <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005124:	f7fc fb16 	bl	8001754 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e280      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005136:	4b55      	ldr	r3, [pc, #340]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005142:	f7fc fb37 	bl	80017b4 <HAL_GetREVID>
 8005146:	4603      	mov	r3, r0
 8005148:	f241 0203 	movw	r2, #4099	; 0x1003
 800514c:	4293      	cmp	r3, r2
 800514e:	d817      	bhi.n	8005180 <HAL_RCC_OscConfig+0x3ec>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	2b20      	cmp	r3, #32
 8005156:	d108      	bne.n	800516a <HAL_RCC_OscConfig+0x3d6>
 8005158:	4b4c      	ldr	r3, [pc, #304]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005160:	4a4a      	ldr	r2, [pc, #296]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005166:	6053      	str	r3, [r2, #4]
 8005168:	e02e      	b.n	80051c8 <HAL_RCC_OscConfig+0x434>
 800516a:	4b48      	ldr	r3, [pc, #288]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	069b      	lsls	r3, r3, #26
 8005178:	4944      	ldr	r1, [pc, #272]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
 800517e:	e023      	b.n	80051c8 <HAL_RCC_OscConfig+0x434>
 8005180:	4b42      	ldr	r3, [pc, #264]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	061b      	lsls	r3, r3, #24
 800518e:	493f      	ldr	r1, [pc, #252]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005190:	4313      	orrs	r3, r2
 8005192:	60cb      	str	r3, [r1, #12]
 8005194:	e018      	b.n	80051c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3c      	ldr	r2, [pc, #240]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800519c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fc fad7 	bl	8001754 <HAL_GetTick>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051aa:	f7fc fad3 	bl	8001754 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e23d      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051bc:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d036      	beq.n	8005242 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d019      	beq.n	8005210 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7fc fab4 	bl	8001754 <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fc fab0 	bl	8001754 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e21a      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005202:	4b22      	ldr	r3, [pc, #136]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x45c>
 800520e:	e018      	b.n	8005242 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005214:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fc fa9a 	bl	8001754 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005224:	f7fc fa96 	bl	8001754 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e200      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d039      	beq.n	80052c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01c      	beq.n	8005290 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a0c      	ldr	r2, [pc, #48]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800525c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005262:	f7fc fa77 	bl	8001754 <HAL_GetTick>
 8005266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800526a:	f7fc fa73 	bl	8001754 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1dd      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x4d6>
 8005288:	e01b      	b.n	80052c2 <HAL_RCC_OscConfig+0x52e>
 800528a:	bf00      	nop
 800528c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005290:	4b9b      	ldr	r3, [pc, #620]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a9a      	ldr	r2, [pc, #616]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800529a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800529c:	f7fc fa5a 	bl	8001754 <HAL_GetTick>
 80052a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052a4:	f7fc fa56 	bl	8001754 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e1c0      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052b6:	4b92      	ldr	r3, [pc, #584]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8081 	beq.w	80053d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052d0:	4b8c      	ldr	r3, [pc, #560]	; (8005504 <HAL_RCC_OscConfig+0x770>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a8b      	ldr	r2, [pc, #556]	; (8005504 <HAL_RCC_OscConfig+0x770>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052dc:	f7fc fa3a 	bl	8001754 <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e4:	f7fc fa36 	bl	8001754 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e1a0      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052f6:	4b83      	ldr	r3, [pc, #524]	; (8005504 <HAL_RCC_OscConfig+0x770>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d106      	bne.n	8005318 <HAL_RCC_OscConfig+0x584>
 800530a:	4b7d      	ldr	r3, [pc, #500]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a7c      	ldr	r2, [pc, #496]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	e02d      	b.n	8005374 <HAL_RCC_OscConfig+0x5e0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10c      	bne.n	800533a <HAL_RCC_OscConfig+0x5a6>
 8005320:	4b77      	ldr	r3, [pc, #476]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	4a76      	ldr	r2, [pc, #472]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	6713      	str	r3, [r2, #112]	; 0x70
 800532c:	4b74      	ldr	r3, [pc, #464]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	4a73      	ldr	r2, [pc, #460]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005332:	f023 0304 	bic.w	r3, r3, #4
 8005336:	6713      	str	r3, [r2, #112]	; 0x70
 8005338:	e01c      	b.n	8005374 <HAL_RCC_OscConfig+0x5e0>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b05      	cmp	r3, #5
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x5c8>
 8005342:	4b6f      	ldr	r3, [pc, #444]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005348:	f043 0304 	orr.w	r3, r3, #4
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
 800534e:	4b6c      	ldr	r3, [pc, #432]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a6b      	ldr	r2, [pc, #428]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6713      	str	r3, [r2, #112]	; 0x70
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0x5e0>
 800535c:	4b68      	ldr	r3, [pc, #416]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	4a67      	ldr	r2, [pc, #412]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	6713      	str	r3, [r2, #112]	; 0x70
 8005368:	4b65      	ldr	r3, [pc, #404]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a64      	ldr	r2, [pc, #400]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800536e:	f023 0304 	bic.w	r3, r3, #4
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d015      	beq.n	80053a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc f9ea 	bl	8001754 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005382:	e00a      	b.n	800539a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fc f9e6 	bl	8001754 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e14e      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800539a:	4b59      	ldr	r3, [pc, #356]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ee      	beq.n	8005384 <HAL_RCC_OscConfig+0x5f0>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fc f9d4 	bl	8001754 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fc f9d0 	bl	8001754 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e138      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053c6:	4b4e      	ldr	r3, [pc, #312]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1ee      	bne.n	80053b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 812d 	beq.w	8005636 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053dc:	4b48      	ldr	r3, [pc, #288]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e4:	2b18      	cmp	r3, #24
 80053e6:	f000 80bd 	beq.w	8005564 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	f040 809e 	bne.w	8005530 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f4:	4b42      	ldr	r3, [pc, #264]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a41      	ldr	r2, [pc, #260]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80053fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fc f9a8 	bl	8001754 <HAL_GetTick>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005408:	f7fc f9a4 	bl	8001754 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e10e      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800542a:	4b37      	ldr	r3, [pc, #220]	; (8005508 <HAL_RCC_OscConfig+0x774>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	430a      	orrs	r2, r1
 800543a:	4931      	ldr	r1, [pc, #196]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800543c:	4313      	orrs	r3, r2
 800543e:	628b      	str	r3, [r1, #40]	; 0x28
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	3b01      	subs	r3, #1
 8005446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	3b01      	subs	r3, #1
 8005450:	025b      	lsls	r3, r3, #9
 8005452:	b29b      	uxth	r3, r3
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	3b01      	subs	r3, #1
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	3b01      	subs	r3, #1
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005470:	4923      	ldr	r1, [pc, #140]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005476:	4b22      	ldr	r3, [pc, #136]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	4a21      	ldr	r2, [pc, #132]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <HAL_RCC_OscConfig+0x778>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800548e:	00d2      	lsls	r2, r2, #3
 8005490:	491b      	ldr	r1, [pc, #108]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005496:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	f023 020c 	bic.w	r2, r3, #12
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	4917      	ldr	r1, [pc, #92]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054a8:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f023 0202 	bic.w	r2, r3, #2
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	4912      	ldr	r1, [pc, #72]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80054de:	4b08      	ldr	r3, [pc, #32]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	4a07      	ldr	r2, [pc, #28]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <HAL_RCC_OscConfig+0x76c>)
 80054f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fc f92d 	bl	8001754 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054fc:	e011      	b.n	8005522 <HAL_RCC_OscConfig+0x78e>
 80054fe:	bf00      	nop
 8005500:	58024400 	.word	0x58024400
 8005504:	58024800 	.word	0x58024800
 8005508:	fffffc0c 	.word	0xfffffc0c
 800550c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005510:	f7fc f920 	bl	8001754 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e08a      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005522:	4b47      	ldr	r3, [pc, #284]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x77c>
 800552e:	e082      	b.n	8005636 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005530:	4b43      	ldr	r3, [pc, #268]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a42      	ldr	r2, [pc, #264]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fc f90a 	bl	8001754 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005544:	f7fc f906 	bl	8001754 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e070      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005556:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x7b0>
 8005562:	e068      	b.n	8005636 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005564:	4b36      	ldr	r3, [pc, #216]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800556a:	4b35      	ldr	r3, [pc, #212]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	d031      	beq.n	80055dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f003 0203 	and.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d12a      	bne.n	80055dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005592:	429a      	cmp	r2, r3
 8005594:	d122      	bne.n	80055dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d11a      	bne.n	80055dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	0a5b      	lsrs	r3, r3, #9
 80055aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d111      	bne.n	80055dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d108      	bne.n	80055dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0e1b      	lsrs	r3, r3, #24
 80055ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e02b      	b.n	8005638 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80055e0:	4b17      	ldr	r3, [pc, #92]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d01f      	beq.n	8005636 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	4a11      	ldr	r2, [pc, #68]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005602:	f7fc f8a7 	bl	8001754 <HAL_GetTick>
 8005606:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005608:	bf00      	nop
 800560a:	f7fc f8a3 	bl	8001754 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	4293      	cmp	r3, r2
 8005614:	d0f9      	beq.n	800560a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_RCC_OscConfig+0x8b0>)
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005622:	00d2      	lsls	r2, r2, #3
 8005624:	4906      	ldr	r1, [pc, #24]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005626:	4313      	orrs	r3, r2
 8005628:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4a04      	ldr	r2, [pc, #16]	; (8005640 <HAL_RCC_OscConfig+0x8ac>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	58024400 	.word	0x58024400
 8005644:	ffff0007 	.word	0xffff0007

08005648 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e19c      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800565c:	4b8a      	ldr	r3, [pc, #552]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d910      	bls.n	800568c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b87      	ldr	r3, [pc, #540]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 020f 	bic.w	r2, r3, #15
 8005672:	4985      	ldr	r1, [pc, #532]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b83      	ldr	r3, [pc, #524]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e184      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	4b7b      	ldr	r3, [pc, #492]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d908      	bls.n	80056ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056a8:	4b78      	ldr	r3, [pc, #480]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	4975      	ldr	r1, [pc, #468]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	4b70      	ldr	r3, [pc, #448]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d908      	bls.n	80056e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056d6:	4b6d      	ldr	r3, [pc, #436]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	496a      	ldr	r1, [pc, #424]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	4b64      	ldr	r3, [pc, #400]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005700:	429a      	cmp	r2, r3
 8005702:	d908      	bls.n	8005716 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	495e      	ldr	r1, [pc, #376]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005712:	4313      	orrs	r3, r2
 8005714:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	4b59      	ldr	r3, [pc, #356]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800572e:	429a      	cmp	r2, r3
 8005730:	d908      	bls.n	8005744 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005732:	4b56      	ldr	r3, [pc, #344]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4953      	ldr	r1, [pc, #332]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005740:	4313      	orrs	r3, r2
 8005742:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	4b4d      	ldr	r3, [pc, #308]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	429a      	cmp	r2, r3
 800575e:	d908      	bls.n	8005772 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005760:	4b4a      	ldr	r3, [pc, #296]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f023 020f 	bic.w	r2, r3, #15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4947      	ldr	r1, [pc, #284]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 800576e:	4313      	orrs	r3, r2
 8005770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d055      	beq.n	800582a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800577e:	4b43      	ldr	r3, [pc, #268]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4940      	ldr	r1, [pc, #256]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 800578c:	4313      	orrs	r3, r2
 800578e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005798:	4b3c      	ldr	r3, [pc, #240]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d121      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0f6      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057b0:	4b36      	ldr	r3, [pc, #216]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d115      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0ea      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057c8:	4b30      	ldr	r3, [pc, #192]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0de      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057d8:	4b2c      	ldr	r3, [pc, #176]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0d6      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f023 0207 	bic.w	r2, r3, #7
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4925      	ldr	r1, [pc, #148]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fa:	f7fb ffab 	bl	8001754 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005800:	e00a      	b.n	8005818 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005802:	f7fb ffa7 	bl	8001754 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0be      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005818:	4b1c      	ldr	r3, [pc, #112]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	429a      	cmp	r2, r3
 8005828:	d1eb      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d010      	beq.n	8005858 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	429a      	cmp	r2, r3
 8005844:	d208      	bcs.n	8005858 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f023 020f 	bic.w	r2, r3, #15
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	490e      	ldr	r1, [pc, #56]	; (800588c <HAL_RCC_ClockConfig+0x244>)
 8005854:	4313      	orrs	r3, r2
 8005856:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d214      	bcs.n	8005890 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b08      	ldr	r3, [pc, #32]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f023 020f 	bic.w	r2, r3, #15
 800586e:	4906      	ldr	r1, [pc, #24]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005876:	4b04      	ldr	r3, [pc, #16]	; (8005888 <HAL_RCC_ClockConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e086      	b.n	8005996 <HAL_RCC_ClockConfig+0x34e>
 8005888:	52002000 	.word	0x52002000
 800588c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d208      	bcs.n	80058be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058ac:	4b3c      	ldr	r3, [pc, #240]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4939      	ldr	r1, [pc, #228]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	4b34      	ldr	r3, [pc, #208]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d208      	bcs.n	80058ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058da:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	492e      	ldr	r1, [pc, #184]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	4b28      	ldr	r3, [pc, #160]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005904:	429a      	cmp	r2, r3
 8005906:	d208      	bcs.n	800591a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005908:	4b25      	ldr	r3, [pc, #148]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	4922      	ldr	r1, [pc, #136]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 8005916:	4313      	orrs	r3, r2
 8005918:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d010      	beq.n	8005948 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005932:	429a      	cmp	r2, r3
 8005934:	d208      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005936:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	4917      	ldr	r1, [pc, #92]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 8005944:	4313      	orrs	r3, r2
 8005946:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005948:	f000 f89e 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	4912      	ldr	r1, [pc, #72]	; (80059a4 <HAL_RCC_ClockConfig+0x35c>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <HAL_RCC_ClockConfig+0x358>)
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	4a0d      	ldr	r2, [pc, #52]	; (80059a4 <HAL_RCC_ClockConfig+0x35c>)
 8005970:	5cd3      	ldrb	r3, [r2, r3]
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <HAL_RCC_ClockConfig+0x360>)
 800597e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005980:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <HAL_RCC_ClockConfig+0x364>)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_RCC_ClockConfig+0x368>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7fb fe98 	bl	80016c0 <HAL_InitTick>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
 80059a4:	0800f728 	.word	0x0800f728
 80059a8:	24000004 	.word	0x24000004
 80059ac:	24000000 	.word	0x24000000
 80059b0:	24000044 	.word	0x24000044

080059b4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d12a      	bne.n	8005a1c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 80059c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059cc:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059d6:	4b29      	ldr	r3, [pc, #164]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 80059d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80059e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ea:	2302      	movs	r3, #2
 80059ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ee:	2303      	movs	r3, #3
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80059fa:	f107 031c 	add.w	r3, r7, #28
 80059fe:	4619      	mov	r1, r3
 8005a00:	481f      	ldr	r0, [pc, #124]	; (8005a80 <HAL_RCC_MCOConfig+0xcc>)
 8005a02:	f7fe fbe9 	bl	80041d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a06:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	430b      	orrs	r3, r1
 8005a14:	4919      	ldr	r1, [pc, #100]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005a1a:	e02a      	b.n	8005a72 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a24:	f043 0304 	orr.w	r3, r3, #4
 8005a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a2c:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a40:	2302      	movs	r3, #2
 8005a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a44:	2303      	movs	r3, #3
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005a50:	f107 031c 	add.w	r3, r7, #28
 8005a54:	4619      	mov	r1, r3
 8005a56:	480b      	ldr	r0, [pc, #44]	; (8005a84 <HAL_RCC_MCOConfig+0xd0>)
 8005a58:	f7fe fbbe 	bl	80041d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	01d9      	lsls	r1, r3, #7
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	4903      	ldr	r1, [pc, #12]	; (8005a7c <HAL_RCC_MCOConfig+0xc8>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	610b      	str	r3, [r1, #16]
}
 8005a72:	bf00      	nop
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	58024400 	.word	0x58024400
 8005a80:	58020000 	.word	0x58020000
 8005a84:	58020800 	.word	0x58020800

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	; 0x24
 8005a8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a8e:	4bb3      	ldr	r3, [pc, #716]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a96:	2b18      	cmp	r3, #24
 8005a98:	f200 8155 	bhi.w	8005d46 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005b09 	.word	0x08005b09
 8005aa8:	08005d47 	.word	0x08005d47
 8005aac:	08005d47 	.word	0x08005d47
 8005ab0:	08005d47 	.word	0x08005d47
 8005ab4:	08005d47 	.word	0x08005d47
 8005ab8:	08005d47 	.word	0x08005d47
 8005abc:	08005d47 	.word	0x08005d47
 8005ac0:	08005d47 	.word	0x08005d47
 8005ac4:	08005b2f 	.word	0x08005b2f
 8005ac8:	08005d47 	.word	0x08005d47
 8005acc:	08005d47 	.word	0x08005d47
 8005ad0:	08005d47 	.word	0x08005d47
 8005ad4:	08005d47 	.word	0x08005d47
 8005ad8:	08005d47 	.word	0x08005d47
 8005adc:	08005d47 	.word	0x08005d47
 8005ae0:	08005d47 	.word	0x08005d47
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005d47 	.word	0x08005d47
 8005aec:	08005d47 	.word	0x08005d47
 8005af0:	08005d47 	.word	0x08005d47
 8005af4:	08005d47 	.word	0x08005d47
 8005af8:	08005d47 	.word	0x08005d47
 8005afc:	08005d47 	.word	0x08005d47
 8005b00:	08005d47 	.word	0x08005d47
 8005b04:	08005b3b 	.word	0x08005b3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b08:	4b94      	ldr	r3, [pc, #592]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b14:	4b91      	ldr	r3, [pc, #580]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	08db      	lsrs	r3, r3, #3
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	4a90      	ldr	r2, [pc, #576]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b26:	e111      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b28:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b2a:	61bb      	str	r3, [r7, #24]
      break;
 8005b2c:	e10e      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b2e:	4b8d      	ldr	r3, [pc, #564]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b30:	61bb      	str	r3, [r7, #24]
      break;
 8005b32:	e10b      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b34:	4b8c      	ldr	r3, [pc, #560]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b36:	61bb      	str	r3, [r7, #24]
      break;
 8005b38:	e108      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b3a:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b44:	4b85      	ldr	r3, [pc, #532]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b50:	4b82      	ldr	r3, [pc, #520]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b5a:	4b80      	ldr	r3, [pc, #512]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	08db      	lsrs	r3, r3, #3
 8005b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80e1 	beq.w	8005d40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	f000 8083 	beq.w	8005c8c <HAL_RCC_GetSysClockFreq+0x204>
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	f200 80a1 	bhi.w	8005cd0 <HAL_RCC_GetSysClockFreq+0x248>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x114>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d056      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b9a:	e099      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b9c:	4b6f      	ldr	r3, [pc, #444]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d02d      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	4a6b      	ldr	r2, [pc, #428]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd2:	4b62      	ldr	r3, [pc, #392]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005be6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c02:	e087      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c16:	4b51      	ldr	r3, [pc, #324]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c46:	e065      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5a:	4b40      	ldr	r3, [pc, #256]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c8a:	e043      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cce:	e021      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005d74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	0a5b      	lsrs	r3, r3, #9
 8005d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1e:	3301      	adds	r3, #1
 8005d20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d38:	ee17 3a90 	vmov	r3, s15
 8005d3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d3e:	e005      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
      break;
 8005d44:	e002      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d48:	61bb      	str	r3, [r7, #24]
      break;
 8005d4a:	bf00      	nop
  }

  return sysclockfreq;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3724      	adds	r7, #36	; 0x24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	017d7840 	.word	0x017d7840
 8005d6c:	46000000 	.word	0x46000000
 8005d70:	4c742400 	.word	0x4c742400
 8005d74:	4a742400 	.word	0x4a742400
 8005d78:	4bbebc20 	.word	0x4bbebc20

08005d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d82:	f7ff fe81 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <HAL_RCC_GetHCLKFreq+0x50>)
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	0a1b      	lsrs	r3, r3, #8
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	490f      	ldr	r1, [pc, #60]	; (8005dd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d94:	5ccb      	ldrb	r3, [r1, r3]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <HAL_RCC_GetHCLKFreq+0x50>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005daa:	5cd3      	ldrb	r3, [r2, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005db8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005dc0:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	0800f728 	.word	0x0800f728
 8005dd4:	24000004 	.word	0x24000004
 8005dd8:	24000000 	.word	0x24000000

08005ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005de0:	f7ff ffcc 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	4904      	ldr	r1, [pc, #16]	; (8005e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	58024400 	.word	0x58024400
 8005e04:	0800f728 	.word	0x0800f728

08005e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e0c:	f7ff ffb6 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005e10:	4602      	mov	r2, r0
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	4904      	ldr	r1, [pc, #16]	; (8005e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e1e:	5ccb      	ldrb	r3, [r1, r3]
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	0800f728 	.word	0x0800f728

08005e34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e38:	b0cc      	sub	sp, #304	; 0x130
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005e58:	2500      	movs	r5, #0
 8005e5a:	ea54 0305 	orrs.w	r3, r4, r5
 8005e5e:	d049      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e6a:	d02f      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e70:	d828      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e76:	d01a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7c:	d822      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d007      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e88:	e01c      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8a:	4bb8      	ldr	r3, [pc, #736]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	4ab7      	ldr	r2, [pc, #732]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e96:	e01a      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f002 fba1 	bl	80085e8 <RCCEx_PLL2_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eac:	e00f      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eb2:	3328      	adds	r3, #40	; 0x28
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f002 fc48 	bl	800874c <RCCEx_PLL3_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ec2:	e004      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ece:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ed6:	4ba5      	ldr	r3, [pc, #660]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee4:	4aa1      	ldr	r2, [pc, #644]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	6513      	str	r3, [r2, #80]	; 0x50
 8005eea:	e003      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ef0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005f00:	f04f 0900 	mov.w	r9, #0
 8005f04:	ea58 0309 	orrs.w	r3, r8, r9
 8005f08:	d047      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d82a      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f31 	.word	0x08005f31
 8005f20:	08005f3f 	.word	0x08005f3f
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005f73 	.word	0x08005f73
 8005f2c:	08005f73 	.word	0x08005f73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f30:	4b8e      	ldr	r3, [pc, #568]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a8d      	ldr	r2, [pc, #564]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f3c:	e01a      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f42:	3308      	adds	r3, #8
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f002 fb4e 	bl	80085e8 <RCCEx_PLL2_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f52:	e00f      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f58:	3328      	adds	r3, #40	; 0x28
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f002 fbf5 	bl	800874c <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f68:	e004      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f70:	e000      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f7c:	4b7b      	ldr	r3, [pc, #492]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f80:	f023 0107 	bic.w	r1, r3, #7
 8005f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8a:	4a78      	ldr	r2, [pc, #480]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6513      	str	r3, [r2, #80]	; 0x50
 8005f90:	e003      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005fa6:	f04f 0b00 	mov.w	fp, #0
 8005faa:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fae:	d04c      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fba:	d030      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc0:	d829      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fc4:	d02d      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fc8:	d825      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d018      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d821      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d007      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005fda:	e01c      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fdc:	4b63      	ldr	r3, [pc, #396]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4a62      	ldr	r2, [pc, #392]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e01c      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fee:	3308      	adds	r3, #8
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f002 faf8 	bl	80085e8 <RCCEx_PLL2_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ffe:	e011      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006004:	3328      	adds	r3, #40	; 0x28
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f002 fb9f 	bl	800874c <RCCEx_PLL3_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006014:	e006      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800601c:	e002      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800601e:	bf00      	nop
 8006020:	e000      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006024:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800602c:	4b4f      	ldr	r3, [pc, #316]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800602e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006030:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603a:	4a4c      	ldr	r2, [pc, #304]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800603c:	430b      	orrs	r3, r1
 800603e:	6513      	str	r3, [r2, #80]	; 0x50
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006042:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006046:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800604a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006056:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800605a:	2300      	movs	r3, #0
 800605c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006060:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8006064:	460b      	mov	r3, r1
 8006066:	4313      	orrs	r3, r2
 8006068:	d053      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800606a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800606e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006076:	d035      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800607c:	d82e      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800607e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006082:	d031      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006088:	d828      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800608a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608e:	d01a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006094:	d822      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800609a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800609e:	d007      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80060a0:	e01c      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a2:	4b32      	ldr	r3, [pc, #200]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	4a31      	ldr	r2, [pc, #196]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ae:	e01c      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b4:	3308      	adds	r3, #8
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f002 fa95 	bl	80085e8 <RCCEx_PLL2_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060c4:	e011      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ca:	3328      	adds	r3, #40	; 0x28
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f002 fb3c 	bl	800874c <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060da:	e006      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80060e2:	e002      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060f2:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80060fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006102:	4a1a      	ldr	r2, [pc, #104]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6593      	str	r3, [r2, #88]	; 0x58
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800610e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800611e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006122:	2300      	movs	r3, #0
 8006124:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006128:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800612c:	460b      	mov	r3, r1
 800612e:	4313      	orrs	r3, r2
 8006130:	d056      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006132:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800613a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800613e:	d038      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006144:	d831      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800614a:	d034      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800614c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006150:	d82b      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006156:	d01d      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800615c:	d825      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d006      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006168:	e01f      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006170:	4ba2      	ldr	r3, [pc, #648]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4aa1      	ldr	r2, [pc, #644]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800617c:	e01c      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006182:	3308      	adds	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f002 fa2e 	bl	80085e8 <RCCEx_PLL2_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006192:	e011      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006198:	3328      	adds	r3, #40	; 0x28
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f002 fad5 	bl	800874c <RCCEx_PLL3_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a8:	e006      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061c0:	4b8e      	ldr	r3, [pc, #568]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80061c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061d0:	4a8a      	ldr	r2, [pc, #552]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6593      	str	r3, [r2, #88]	; 0x58
 80061d6:	e003      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80061ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061f6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d03a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006200:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	2b30      	cmp	r3, #48	; 0x30
 8006208:	d01f      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d819      	bhi.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800620e:	2b20      	cmp	r3, #32
 8006210:	d00c      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006212:	2b20      	cmp	r3, #32
 8006214:	d815      	bhi.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d019      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800621a:	2b10      	cmp	r3, #16
 800621c:	d111      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621e:	4b77      	ldr	r3, [pc, #476]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	4a76      	ldr	r2, [pc, #472]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800622a:	e011      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800622c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006230:	3308      	adds	r3, #8
 8006232:	2102      	movs	r1, #2
 8006234:	4618      	mov	r0, r3
 8006236:	f002 f9d7 	bl	80085e8 <RCCEx_PLL2_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006248:	e002      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800624a:	bf00      	nop
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800624e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006250:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006258:	4b68      	ldr	r3, [pc, #416]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800625a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006260:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	4a65      	ldr	r2, [pc, #404]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006268:	430b      	orrs	r3, r1
 800626a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006272:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006282:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006286:	2300      	movs	r3, #0
 8006288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800628c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006290:	460b      	mov	r3, r1
 8006292:	4313      	orrs	r3, r2
 8006294:	d051      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006296:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800629a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800629c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a0:	d035      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80062a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a6:	d82e      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062ac:	d031      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80062ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062b2:	d828      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b8:	d01a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062be:	d822      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c8:	d007      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80062ca:	e01c      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062cc:	4b4b      	ldr	r3, [pc, #300]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a4a      	ldr	r2, [pc, #296]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062d8:	e01c      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062de:	3308      	adds	r3, #8
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f002 f980 	bl	80085e8 <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062ee:	e011      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f4:	3328      	adds	r3, #40	; 0x28
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 fa27 	bl	800874c <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006304:	e006      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800630c:	e002      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006314:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800631c:	4b37      	ldr	r3, [pc, #220]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800632a:	4a34      	ldr	r2, [pc, #208]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6513      	str	r3, [r2, #80]	; 0x50
 8006330:	e003      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006336:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800633a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800634a:	2300      	movs	r3, #0
 800634c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006350:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d056      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800635a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800635e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006364:	d033      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800636a:	d82c      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800636c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006370:	d02f      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006376:	d826      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800637c:	d02b      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800637e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006382:	d820      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006388:	d012      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800638a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638e:	d81a      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d022      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d115      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800639a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800639e:	3308      	adds	r3, #8
 80063a0:	2101      	movs	r1, #1
 80063a2:	4618      	mov	r0, r3
 80063a4:	f002 f920 	bl	80085e8 <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063ae:	e015      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063b4:	3328      	adds	r3, #40	; 0x28
 80063b6:	2101      	movs	r1, #1
 80063b8:	4618      	mov	r0, r3
 80063ba:	f002 f9c7 	bl	800874c <RCCEx_PLL3_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063c4:	e00a      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80063cc:	e006      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063ce:	bf00      	nop
 80063d0:	e004      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063d2:	bf00      	nop
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80063ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f2:	4a02      	ldr	r2, [pc, #8]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6513      	str	r3, [r2, #80]	; 0x50
 80063f8:	e006      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006400:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006404:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006408:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006414:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800641e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006422:	460b      	mov	r3, r1
 8006424:	4313      	orrs	r3, r2
 8006426:	d055      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800642c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006434:	d033      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800643a:	d82c      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d02f      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006446:	d826      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800644c:	d02b      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800644e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006452:	d820      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006458:	d012      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645e:	d81a      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d022      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006468:	d115      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800646a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800646e:	3308      	adds	r3, #8
 8006470:	2101      	movs	r1, #1
 8006472:	4618      	mov	r0, r3
 8006474:	f002 f8b8 	bl	80085e8 <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800647e:	e015      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006484:	3328      	adds	r3, #40	; 0x28
 8006486:	2101      	movs	r1, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f002 f95f 	bl	800874c <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006494:	e00a      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800649e:	bf00      	nop
 80064a0:	e004      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064b4:	4bb6      	ldr	r3, [pc, #728]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064c4:	4ab2      	ldr	r2, [pc, #712]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064c6:	430b      	orrs	r3, r1
 80064c8:	6593      	str	r3, [r2, #88]	; 0x58
 80064ca:	e003      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80064d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80064e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d02a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80064f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006502:	d10a      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006508:	3308      	adds	r3, #8
 800650a:	2101      	movs	r1, #1
 800650c:	4618      	mov	r0, r3
 800650e:	f002 f86b 	bl	80085e8 <RCCEx_PLL2_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006518:	e004      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006520:	e000      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8006522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006524:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800652c:	4b98      	ldr	r3, [pc, #608]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800652e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006530:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006534:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653a:	4a95      	ldr	r2, [pc, #596]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800653c:	430b      	orrs	r3, r1
 800653e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006540:	e003      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006546:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800654a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800655a:	2300      	movs	r3, #0
 800655c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006560:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006564:	460b      	mov	r3, r1
 8006566:	4313      	orrs	r3, r2
 8006568:	d037      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800656a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006574:	d00e      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657a:	d816      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x776>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d018      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006584:	d111      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006586:	4b82      	ldr	r3, [pc, #520]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a81      	ldr	r2, [pc, #516]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800658c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006592:	e00f      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006594:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006598:	3308      	adds	r3, #8
 800659a:	2101      	movs	r1, #1
 800659c:	4618      	mov	r0, r3
 800659e:	f002 f823 	bl	80085e8 <RCCEx_PLL2_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065a8:	e004      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80065b0:	e000      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80065b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065bc:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ca:	4a71      	ldr	r2, [pc, #452]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6513      	str	r3, [r2, #80]	; 0x50
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065f0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d03a      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006600:	2b03      	cmp	r3, #3
 8006602:	d81d      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006604:	a201      	add	r2, pc, #4	; (adr r2, 800660c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006649 	.word	0x08006649
 8006610:	0800661d 	.word	0x0800661d
 8006614:	0800662b 	.word	0x0800662b
 8006618:	08006649 	.word	0x08006649
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661c:	4b5c      	ldr	r3, [pc, #368]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	4a5b      	ldr	r2, [pc, #364]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006628:	e00f      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800662a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800662e:	3308      	adds	r3, #8
 8006630:	2102      	movs	r1, #2
 8006632:	4618      	mov	r0, r3
 8006634:	f001 ffd8 	bl	80085e8 <RCCEx_PLL2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800663e:	e004      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006646:	e000      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006652:	4b4f      	ldr	r3, [pc, #316]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006656:	f023 0103 	bic.w	r1, r3, #3
 800665a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800665e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006660:	4a4b      	ldr	r2, [pc, #300]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006662:	430b      	orrs	r3, r1
 8006664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006666:	e003      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800666c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006670:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800667c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006680:	2300      	movs	r3, #0
 8006682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006686:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800668a:	460b      	mov	r3, r1
 800668c:	4313      	orrs	r3, r2
 800668e:	f000 80a0 	beq.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a3f      	ldr	r2, [pc, #252]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800669c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800669e:	f7fb f859 	bl	8001754 <HAL_GetTick>
 80066a2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a6:	e00b      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a8:	f7fb f854 	bl	8001754 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b64      	cmp	r3, #100	; 0x64
 80066b6:	d903      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80066be:	e005      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c0:	4b34      	ldr	r3, [pc, #208]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0ed      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80066cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d17a      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066d4:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066e0:	4053      	eors	r3, r2
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d015      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ea:	4b29      	ldr	r3, [pc, #164]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066f6:	4b26      	ldr	r3, [pc, #152]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4a25      	ldr	r2, [pc, #148]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006700:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006702:	4b23      	ldr	r3, [pc, #140]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	4a22      	ldr	r2, [pc, #136]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800670e:	4a20      	ldr	r2, [pc, #128]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006710:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006714:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006716:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800671a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800671e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006722:	d118      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fb f816 	bl	8001754 <HAL_GetTick>
 8006728:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800672c:	e00d      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672e:	f7fb f811 	bl	8001754 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006738:	1ad2      	subs	r2, r2, r3
 800673a:	f241 3388 	movw	r3, #5000	; 0x1388
 800673e:	429a      	cmp	r2, r3
 8006740:	d903      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8006748:	e005      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0eb      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006756:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800675a:	2b00      	cmp	r3, #0
 800675c:	d130      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006762:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676e:	d115      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800677c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006780:	091a      	lsrs	r2, r3, #4
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006784:	4013      	ands	r3, r2
 8006786:	4a02      	ldr	r2, [pc, #8]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6113      	str	r3, [r2, #16]
 800678c:	e00c      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800678e:	bf00      	nop
 8006790:	58024400 	.word	0x58024400
 8006794:	58024800 	.word	0x58024800
 8006798:	00ffffcf 	.word	0x00ffffcf
 800679c:	4bd4      	ldr	r3, [pc, #848]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	4ad3      	ldr	r2, [pc, #844]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067a6:	6113      	str	r3, [r2, #16]
 80067a8:	4bd1      	ldr	r3, [pc, #836]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80067ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b8:	4acd      	ldr	r2, [pc, #820]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067ba:	430b      	orrs	r3, r1
 80067bc:	6713      	str	r3, [r2, #112]	; 0x70
 80067be:	e008      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067c4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f002 0301 	and.w	r3, r2, #1
 80067de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f000 808b 	beq.w	800690a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067fc:	2b28      	cmp	r3, #40	; 0x28
 80067fe:	d86b      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	080068e1 	.word	0x080068e1
 800680c:	080068d9 	.word	0x080068d9
 8006810:	080068d9 	.word	0x080068d9
 8006814:	080068d9 	.word	0x080068d9
 8006818:	080068d9 	.word	0x080068d9
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068ad 	.word	0x080068ad
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068d9 	.word	0x080068d9
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068c3 	.word	0x080068c3
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068d9 	.word	0x080068d9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068d9 	.word	0x080068d9
 800685c:	080068d9 	.word	0x080068d9
 8006860:	080068d9 	.word	0x080068d9
 8006864:	080068d9 	.word	0x080068d9
 8006868:	080068e1 	.word	0x080068e1
 800686c:	080068d9 	.word	0x080068d9
 8006870:	080068d9 	.word	0x080068d9
 8006874:	080068d9 	.word	0x080068d9
 8006878:	080068d9 	.word	0x080068d9
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068d9 	.word	0x080068d9
 8006894:	080068d9 	.word	0x080068d9
 8006898:	080068d9 	.word	0x080068d9
 800689c:	080068d9 	.word	0x080068d9
 80068a0:	080068d9 	.word	0x080068d9
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068e1 	.word	0x080068e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068b0:	3308      	adds	r3, #8
 80068b2:	2101      	movs	r1, #1
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 fe97 	bl	80085e8 <RCCEx_PLL2_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068c0:	e00f      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068c6:	3328      	adds	r3, #40	; 0x28
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 ff3e 	bl	800874c <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068d6:	e004      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068ea:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80068f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068fa:	4a7d      	ldr	r2, [pc, #500]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6553      	str	r3, [r2, #84]	; 0x54
 8006900:	e003      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006906:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800690a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f002 0302 	and.w	r3, r2, #2
 8006916:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800691a:	2300      	movs	r3, #0
 800691c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006920:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006924:	460b      	mov	r3, r1
 8006926:	4313      	orrs	r3, r2
 8006928:	d042      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800692a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800692e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006930:	2b05      	cmp	r3, #5
 8006932:	d825      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006934:	a201      	add	r2, pc, #4	; (adr r2, 800693c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	08006989 	.word	0x08006989
 8006940:	08006955 	.word	0x08006955
 8006944:	0800696b 	.word	0x0800696b
 8006948:	08006989 	.word	0x08006989
 800694c:	08006989 	.word	0x08006989
 8006950:	08006989 	.word	0x08006989
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006954:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006958:	3308      	adds	r3, #8
 800695a:	2101      	movs	r1, #1
 800695c:	4618      	mov	r0, r3
 800695e:	f001 fe43 	bl	80085e8 <RCCEx_PLL2_Config>
 8006962:	4603      	mov	r3, r0
 8006964:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006968:	e00f      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800696a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800696e:	3328      	adds	r3, #40	; 0x28
 8006970:	2101      	movs	r1, #1
 8006972:	4618      	mov	r0, r3
 8006974:	f001 feea 	bl	800874c <RCCEx_PLL3_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800697e:	e004      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006986:	e000      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006992:	4b57      	ldr	r3, [pc, #348]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	f023 0107 	bic.w	r1, r3, #7
 800699a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800699e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a0:	4a53      	ldr	r2, [pc, #332]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069a2:	430b      	orrs	r3, r1
 80069a4:	6553      	str	r3, [r2, #84]	; 0x54
 80069a6:	e003      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f002 0304 	and.w	r3, r2, #4
 80069bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d044      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d8:	2b05      	cmp	r3, #5
 80069da:	d825      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a31 	.word	0x08006a31
 80069e8:	080069fd 	.word	0x080069fd
 80069ec:	08006a13 	.word	0x08006a13
 80069f0:	08006a31 	.word	0x08006a31
 80069f4:	08006a31 	.word	0x08006a31
 80069f8:	08006a31 	.word	0x08006a31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a00:	3308      	adds	r3, #8
 8006a02:	2101      	movs	r1, #1
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fdef 	bl	80085e8 <RCCEx_PLL2_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a10:	e00f      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a16:	3328      	adds	r3, #40	; 0x28
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 fe96 	bl	800874c <RCCEx_PLL3_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a26:	e004      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a3a:	4b2d      	ldr	r3, [pc, #180]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	f023 0107 	bic.w	r1, r3, #7
 8006a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a4a:	4a29      	ldr	r2, [pc, #164]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a50:	e003      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f002 0320 	and.w	r3, r2, #32
 8006a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d057      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a86:	d035      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a8c:	d82c      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a92:	d031      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a98:	d826      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a9e:	d02d      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006aa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aa4:	d820      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aaa:	d012      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab0:	d81a      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d024      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aba:	d115      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fd8f 	bl	80085e8 <RCCEx_PLL2_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ad0:	e017      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ad6:	3328      	adds	r3, #40	; 0x28
 8006ad8:	2102      	movs	r1, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fe36 	bl	800874c <RCCEx_PLL3_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ae6:	e00c      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006aee:	e008      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006af0:	58024400 	.word	0x58024400
        break;
 8006af4:	bf00      	nop
 8006af6:	e004      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b0a:	4bc2      	ldr	r3, [pc, #776]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b1a:	4abe      	ldr	r2, [pc, #760]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6553      	str	r3, [r2, #84]	; 0x54
 8006b20:	e003      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d055      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b56:	d033      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006b58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b5c:	d82c      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b62:	d02f      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b68:	d826      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6e:	d02b      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b74:	d820      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7a:	d012      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b80:	d81a      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d022      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8a:	d115      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b90:	3308      	adds	r3, #8
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fd27 	bl	80085e8 <RCCEx_PLL2_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ba0:	e015      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ba6:	3328      	adds	r3, #40	; 0x28
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fdce 	bl	800874c <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bb6:	e00a      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006bbe:	e006      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bc0:	bf00      	nop
 8006bc2:	e004      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bc4:	bf00      	nop
 8006bc6:	e002      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bc8:	bf00      	nop
 8006bca:	e000      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bd6:	4b8f      	ldr	r3, [pc, #572]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006be2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006be6:	4a8b      	ldr	r2, [pc, #556]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6593      	str	r3, [r2, #88]	; 0x58
 8006bec:	e003      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bf2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c06:	2300      	movs	r3, #0
 8006c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c0c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006c10:	460b      	mov	r3, r1
 8006c12:	4313      	orrs	r3, r2
 8006c14:	d055      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c22:	d033      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006c24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c28:	d82c      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c2e:	d02f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c34:	d826      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c3a:	d02b      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006c3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c40:	d820      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c46:	d012      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4c:	d81a      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d022      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c56:	d115      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fcc1 	bl	80085e8 <RCCEx_PLL2_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c6c:	e015      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c72:	3328      	adds	r3, #40	; 0x28
 8006c74:	2102      	movs	r1, #2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 fd68 	bl	800874c <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c82:	e00a      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006c8a:	e006      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c8c:	bf00      	nop
 8006c8e:	e004      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c90:	bf00      	nop
 8006c92:	e002      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c94:	bf00      	nop
 8006c96:	e000      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ca2:	4b5c      	ldr	r3, [pc, #368]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006caa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cb2:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cb8:	e003      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006cbe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f002 0308 	and.w	r3, r2, #8
 8006cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cd8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d01e      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	d10c      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cf4:	3328      	adds	r3, #40	; 0x28
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fd27 	bl	800874c <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d0a:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1a:	4a3e      	ldr	r2, [pc, #248]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f002 0310 	and.w	r3, r2, #16
 8006d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d01e      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d52:	3328      	adds	r3, #40	; 0x28
 8006d54:	2102      	movs	r1, #2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fcf8 	bl	800874c <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d68:	4b2a      	ldr	r3, [pc, #168]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d78:	4a26      	ldr	r2, [pc, #152]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d040      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006daa:	d022      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db0:	d81b      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dba:	d00b      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006dbc:	e015      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fc0e 	bl	80085e8 <RCCEx_PLL2_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dd2:	e00f      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dd8:	3328      	adds	r3, #40	; 0x28
 8006dda:	2102      	movs	r1, #2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 fcb5 	bl	800874c <RCCEx_PLL3_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006de8:	e004      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10d      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e0c:	4a01      	ldr	r2, [pc, #4]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6593      	str	r3, [r2, #88]	; 0x58
 8006e12:	e005      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e1c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e2e:	2300      	movs	r3, #0
 8006e30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e36:	460b      	mov	r3, r1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d03b      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e48:	d01f      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006e4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e4e:	d818      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e54:	d003      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e5a:	d007      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006e5c:	e011      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e5e:	4b64      	ldr	r3, [pc, #400]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	4a63      	ldr	r2, [pc, #396]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e6a:	e00f      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e70:	3328      	adds	r3, #40	; 0x28
 8006e72:	2101      	movs	r1, #1
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 fc69 	bl	800874c <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e80:	e004      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006e88:	e000      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e94:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea4:	4a52      	ldr	r2, [pc, #328]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6553      	str	r3, [r2, #84]	; 0x54
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006eb0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	677b      	str	r3, [r7, #116]	; 0x74
 8006ec6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	d031      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ede:	d007      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006ee0:	e011      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee2:	4b43      	ldr	r3, [pc, #268]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	4a42      	ldr	r2, [pc, #264]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006eee:	e00e      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fb75 	bl	80085e8 <RCCEx_PLL2_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f04:	e003      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	4a32      	ldr	r2, [pc, #200]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f26:	430b      	orrs	r3, r1
 8006f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006f30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f42:	2300      	movs	r3, #0
 8006f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	d00c      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f54:	3328      	adds	r3, #40	; 0x28
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fbf7 	bl	800874c <RCCEx_PLL3_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f76:	663b      	str	r3, [r7, #96]	; 0x60
 8006f78:	2300      	movs	r3, #0
 8006f7a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f80:	460b      	mov	r3, r1
 8006f82:	4313      	orrs	r3, r2
 8006f84:	d03a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f92:	d018      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f98:	d811      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f9e:	d014      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa4:	d80b      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d011      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fae:	d106      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006fc4:	e004      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10d      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fdc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe8:	4a01      	ldr	r2, [pc, #4]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	; 0x54
 8006fee:	e005      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ff8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007008:	65bb      	str	r3, [r7, #88]	; 0x58
 800700a:	2300      	movs	r3, #0
 800700c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800700e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007012:	460b      	mov	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007018:	4baa      	ldr	r3, [pc, #680]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007020:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007026:	4aa7      	ldr	r2, [pc, #668]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007028:	430b      	orrs	r3, r1
 800702a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800702c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007038:	653b      	str	r3, [r7, #80]	; 0x50
 800703a:	2300      	movs	r3, #0
 800703c:	657b      	str	r3, [r7, #84]	; 0x54
 800703e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d00a      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007048:	4b9e      	ldr	r3, [pc, #632]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007050:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007054:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007058:	4a9a      	ldr	r2, [pc, #616]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800705a:	430b      	orrs	r3, r1
 800705c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800705e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800706a:	64bb      	str	r3, [r7, #72]	; 0x48
 800706c:	2300      	movs	r3, #0
 800706e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007070:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007074:	460b      	mov	r3, r1
 8007076:	4313      	orrs	r3, r2
 8007078:	d009      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800707a:	4b92      	ldr	r3, [pc, #584]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007082:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a8e      	ldr	r2, [pc, #568]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800708a:	430b      	orrs	r3, r1
 800708c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800708e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800709a:	643b      	str	r3, [r7, #64]	; 0x40
 800709c:	2300      	movs	r3, #0
 800709e:	647b      	str	r3, [r7, #68]	; 0x44
 80070a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80070a4:	460b      	mov	r3, r1
 80070a6:	4313      	orrs	r3, r2
 80070a8:	d00e      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070aa:	4b86      	ldr	r3, [pc, #536]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	4a85      	ldr	r2, [pc, #532]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070b4:	6113      	str	r3, [r2, #16]
 80070b6:	4b83      	ldr	r3, [pc, #524]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070b8:	6919      	ldr	r1, [r3, #16]
 80070ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070c2:	4a80      	ldr	r2, [pc, #512]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d009      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070e4:	4b77      	ldr	r3, [pc, #476]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f2:	4a74      	ldr	r2, [pc, #464]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070f4:	430b      	orrs	r3, r1
 80070f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 8007106:	2300      	movs	r3, #0
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
 800710a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d00a      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007114:	4b6b      	ldr	r3, [pc, #428]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800711c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	4a67      	ldr	r2, [pc, #412]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007126:	430b      	orrs	r3, r1
 8007128:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800712a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	2100      	movs	r1, #0
 8007134:	62b9      	str	r1, [r7, #40]	; 0x28
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007140:	460b      	mov	r3, r1
 8007142:	4313      	orrs	r3, r2
 8007144:	d011      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007146:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800714a:	3308      	adds	r3, #8
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f001 fa4a 	bl	80085e8 <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800715a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007162:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007166:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800716a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	2100      	movs	r1, #0
 8007174:	6239      	str	r1, [r7, #32]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
 800717c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007180:	460b      	mov	r3, r1
 8007182:	4313      	orrs	r3, r2
 8007184:	d011      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007186:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800718a:	3308      	adds	r3, #8
 800718c:	2101      	movs	r1, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f001 fa2a 	bl	80085e8 <RCCEx_PLL2_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800719a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	2100      	movs	r1, #0
 80071b4:	61b9      	str	r1, [r7, #24]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071c0:	460b      	mov	r3, r1
 80071c2:	4313      	orrs	r3, r2
 80071c4:	d011      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ca:	3308      	adds	r3, #8
 80071cc:	2102      	movs	r1, #2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 fa0a 	bl	80085e8 <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80071da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80071e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	2100      	movs	r1, #0
 80071f4:	6139      	str	r1, [r7, #16]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007200:	460b      	mov	r3, r1
 8007202:	4313      	orrs	r3, r2
 8007204:	d011      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007206:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800720a:	3328      	adds	r3, #40	; 0x28
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f001 fa9c 	bl	800874c <RCCEx_PLL3_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800721a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007222:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007226:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800722a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	2100      	movs	r1, #0
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007240:	460b      	mov	r3, r1
 8007242:	4313      	orrs	r3, r2
 8007244:	d011      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800724a:	3328      	adds	r3, #40	; 0x28
 800724c:	2101      	movs	r1, #1
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fa7c 	bl	800874c <RCCEx_PLL3_Config>
 8007254:	4603      	mov	r3, r0
 8007256:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800725a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007262:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007266:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800726a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	2100      	movs	r1, #0
 8007274:	6039      	str	r1, [r7, #0]
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	607b      	str	r3, [r7, #4]
 800727c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007280:	460b      	mov	r3, r1
 8007282:	4313      	orrs	r3, r2
 8007284:	d011      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007286:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800728a:	3328      	adds	r3, #40	; 0x28
 800728c:	2102      	movs	r1, #2
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fa5c 	bl	800874c <RCCEx_PLL3_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800729a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80072a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80072aa:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072be:	46bd      	mov	sp, r7
 80072c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072c4:	58024400 	.word	0x58024400

080072c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b090      	sub	sp, #64	; 0x40
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80072da:	430b      	orrs	r3, r1
 80072dc:	f040 8094 	bne.w	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80072e0:	4b9e      	ldr	r3, [pc, #632]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	f200 8087 	bhi.w	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80072f2:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	0800730d 	.word	0x0800730d
 80072fc:	08007335 	.word	0x08007335
 8007300:	0800735d 	.word	0x0800735d
 8007304:	080073f9 	.word	0x080073f9
 8007308:	08007385 	.word	0x08007385
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800730c:	4b93      	ldr	r3, [pc, #588]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007318:	d108      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f001 f810 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007328:	f000 bd45 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007330:	f000 bd41 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007334:	4b89      	ldr	r3, [pc, #548]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007340:	d108      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007342:	f107 0318 	add.w	r3, r7, #24
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fd54 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007350:	f000 bd31 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007358:	f000 bd2d 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800735c:	4b7f      	ldr	r3, [pc, #508]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007368:	d108      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800736a:	f107 030c 	add.w	r3, r7, #12
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fe94 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007378:	f000 bd1d 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007380:	f000 bd19 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007384:	4b75      	ldr	r3, [pc, #468]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800738c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800738e:	4b73      	ldr	r3, [pc, #460]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d10c      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	2b00      	cmp	r3, #0
 800739e:	d109      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a0:	4b6e      	ldr	r3, [pc, #440]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	08db      	lsrs	r3, r3, #3
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	4a6d      	ldr	r2, [pc, #436]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073ac:	fa22 f303 	lsr.w	r3, r2, r3
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b2:	e01f      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073b4:	4b69      	ldr	r3, [pc, #420]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c0:	d106      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c8:	d102      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073ca:	4b66      	ldr	r3, [pc, #408]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ce:	e011      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073d0:	4b62      	ldr	r3, [pc, #392]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073dc:	d106      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80073de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e4:	d102      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073e6:	4b60      	ldr	r3, [pc, #384]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80073f0:	f000 bce1 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073f4:	f000 bcdf 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073f8:	4b5c      	ldr	r3, [pc, #368]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073fc:	f000 bcdb 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007404:	f000 bcd7 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007410:	430b      	orrs	r3, r1
 8007412:	f040 80ad 	bne.w	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007416:	4b51      	ldr	r3, [pc, #324]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800741e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007426:	d056      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800742e:	f200 8090 	bhi.w	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	2bc0      	cmp	r3, #192	; 0xc0
 8007436:	f000 8088 	beq.w	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2bc0      	cmp	r3, #192	; 0xc0
 800743e:	f200 8088 	bhi.w	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	2b80      	cmp	r3, #128	; 0x80
 8007446:	d032      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	f200 8081 	bhi.w	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d014      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800745c:	e079      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800745e:	4b3f      	ldr	r3, [pc, #252]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800746a:	d108      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800746c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007470:	4618      	mov	r0, r3
 8007472:	f000 ff67 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800747a:	f000 bc9c 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007482:	f000 bc98 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007486:	4b35      	ldr	r3, [pc, #212]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007492:	d108      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007494:	f107 0318 	add.w	r3, r7, #24
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fcab 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a2:	f000 bc88 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074aa:	f000 bc84 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074ae:	4b2b      	ldr	r3, [pc, #172]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ba:	d108      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074bc:	f107 030c 	add.w	r3, r7, #12
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fdeb 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ca:	f000 bc74 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d2:	f000 bc70 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074d6:	4b21      	ldr	r3, [pc, #132]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074e0:	4b1e      	ldr	r3, [pc, #120]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d10c      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80074ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f2:	4b1a      	ldr	r3, [pc, #104]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	08db      	lsrs	r3, r3, #3
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	e01f      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007512:	d106      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800751a:	d102      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800751c:	4b11      	ldr	r3, [pc, #68]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007520:	e011      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800752e:	d106      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007536:	d102      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753c:	e003      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007542:	f000 bc38 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007546:	f000 bc36 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800754e:	f000 bc32 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007556:	f000 bc2e 	b.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400
 8007560:	03d09000 	.word	0x03d09000
 8007564:	003d0900 	.word	0x003d0900
 8007568:	017d7840 	.word	0x017d7840
 800756c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007578:	430b      	orrs	r3, r1
 800757a:	f040 809c 	bne.w	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800757e:	4b9e      	ldr	r3, [pc, #632]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007582:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007586:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800758e:	d054      	beq.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007596:	f200 808b 	bhi.w	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075a0:	f000 8083 	beq.w	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075aa:	f200 8081 	bhi.w	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075b4:	d02f      	beq.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075bc:	d878      	bhi.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075ca:	d012      	beq.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80075cc:	e070      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075ce:	4b8a      	ldr	r3, [pc, #552]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075da:	d107      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 feaf 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ea:	e3e4      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f0:	e3e1      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075f2:	4b81      	ldr	r3, [pc, #516]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075fe:	d107      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007600:	f107 0318 	add.w	r3, r7, #24
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fbf5 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800760e:	e3d2      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007614:	e3cf      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007616:	4b78      	ldr	r3, [pc, #480]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800761e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007622:	d107      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007624:	f107 030c 	add.w	r3, r7, #12
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fd37 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007632:	e3c0      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007638:	e3bd      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800763a:	4b6f      	ldr	r3, [pc, #444]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007642:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007644:	4b6c      	ldr	r3, [pc, #432]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d10c      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007656:	4b68      	ldr	r3, [pc, #416]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	08db      	lsrs	r3, r3, #3
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	4a66      	ldr	r2, [pc, #408]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007668:	e01e      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800766a:	4b63      	ldr	r3, [pc, #396]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d106      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800767e:	d102      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007680:	4b5f      	ldr	r3, [pc, #380]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007684:	e010      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007686:	4b5c      	ldr	r3, [pc, #368]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007692:	d106      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800769a:	d102      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800769c:	4b59      	ldr	r3, [pc, #356]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076a6:	e386      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076a8:	e385      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076aa:	4b57      	ldr	r3, [pc, #348]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ae:	e382      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b4:	e37f      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80076b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80076be:	430b      	orrs	r3, r1
 80076c0:	f040 80a7 	bne.w	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80076c4:	4b4c      	ldr	r3, [pc, #304]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80076cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d4:	d055      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076dc:	f200 8096 	bhi.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076e6:	f000 8084 	beq.w	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076f0:	f200 808c 	bhi.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076fa:	d030      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007702:	f200 8083 	bhi.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007712:	d012      	beq.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007714:	e07a      	b.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007716:	4b38      	ldr	r3, [pc, #224]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007722:	d107      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fe0b 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007732:	e340      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007738:	e33d      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800773a:	4b2f      	ldr	r3, [pc, #188]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007746:	d107      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007748:	f107 0318 	add.w	r3, r7, #24
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fb51 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007756:	e32e      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800775c:	e32b      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800775e:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800776a:	d107      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800776c:	f107 030c 	add.w	r3, r7, #12
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fc93 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777a:	e31c      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007780:	e319      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007782:	4b1d      	ldr	r3, [pc, #116]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800778a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800778c:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	2b04      	cmp	r3, #4
 8007796:	d10c      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800779e:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	08db      	lsrs	r3, r3, #3
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	4a14      	ldr	r2, [pc, #80]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077aa:	fa22 f303 	lsr.w	r3, r2, r3
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b0:	e01e      	b.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077b2:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077be:	d106      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077c6:	d102      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077cc:	e010      	b.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077da:	d106      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e2:	d102      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e8:	e002      	b.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077ee:	e2e2      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077f0:	e2e1      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077f2:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077f6:	e2de      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	003d0900 	.word	0x003d0900
 8007804:	017d7840 	.word	0x017d7840
 8007808:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007810:	e2d1      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007816:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800781a:	430b      	orrs	r3, r1
 800781c:	f040 809c 	bne.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007820:	4b93      	ldr	r3, [pc, #588]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007828:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007830:	d054      	beq.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007838:	f200 808b 	bhi.w	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007842:	f000 8083 	beq.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800784c:	f200 8081 	bhi.w	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007856:	d02f      	beq.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785e:	d878      	bhi.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786c:	d012      	beq.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800786e:	e070      	b.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007870:	4b7f      	ldr	r3, [pc, #508]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800787c:	d107      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fd5e 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788c:	e293      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007892:	e290      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007894:	4b76      	ldr	r3, [pc, #472]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800789c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078a0:	d107      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a2:	f107 0318 	add.w	r3, r7, #24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 faa4 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b0:	e281      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b6:	e27e      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078b8:	4b6d      	ldr	r3, [pc, #436]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c4:	d107      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fbe6 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d4:	e26f      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078da:	e26c      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078dc:	4b64      	ldr	r3, [pc, #400]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078e6:	4b62      	ldr	r3, [pc, #392]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d10c      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f8:	4b5d      	ldr	r3, [pc, #372]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	08db      	lsrs	r3, r3, #3
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	4a5c      	ldr	r2, [pc, #368]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
 8007908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790a:	e01e      	b.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800790c:	4b58      	ldr	r3, [pc, #352]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007918:	d106      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007920:	d102      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007922:	4b55      	ldr	r3, [pc, #340]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007926:	e010      	b.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007928:	4b51      	ldr	r3, [pc, #324]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007934:	d106      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793c:	d102      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800793e:	4b4f      	ldr	r3, [pc, #316]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007942:	e002      	b.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007948:	e235      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800794a:	e234      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800794c:	4b4c      	ldr	r3, [pc, #304]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007950:	e231      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007956:	e22e      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007960:	430b      	orrs	r3, r1
 8007962:	f040 808f 	bne.w	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007966:	4b42      	ldr	r3, [pc, #264]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007976:	d06b      	beq.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800797e:	d874      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007986:	d056      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800798e:	d86c      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007996:	d03b      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800799e:	d864      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079a6:	d021      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ae:	d85c      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079bc:	d004      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80079be:	e054      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80079c0:	f7fe fa0c 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80079c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079c6:	e1f6      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079c8:	4b29      	ldr	r3, [pc, #164]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d6:	f107 0318 	add.w	r3, r7, #24
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fa0a 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e4:	e1e7      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ea:	e1e4      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ec:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f8:	d107      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fa:	f107 030c 	add.w	r3, r7, #12
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fb4c 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a08:	e1d5      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a0e:	e1d2      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a10:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d109      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a1c:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	08db      	lsrs	r3, r3, #3
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	4a13      	ldr	r2, [pc, #76]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a2e:	e1c2      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a34:	e1bf      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a36:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a42:	d102      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a48:	e1b5      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a4e:	e1b2      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a50:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007a5e:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a62:	e1a8      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a68:	e1a5      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a6e:	e1a2      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a70:	58024400 	.word	0x58024400
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	003d0900 	.word	0x003d0900
 8007a7c:	017d7840 	.word	0x017d7840
 8007a80:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a88:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	d173      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007a90:	4b9c      	ldr	r3, [pc, #624]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa0:	d02f      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa8:	d863      	bhi.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab6:	d012      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007ab8:	e05b      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aba:	4b92      	ldr	r3, [pc, #584]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac8:	f107 0318 	add.w	r3, r7, #24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f991 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad6:	e16e      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007adc:	e16b      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ade:	4b89      	ldr	r3, [pc, #548]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aea:	d107      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aec:	f107 030c 	add.w	r3, r7, #12
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fad3 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afa:	e15c      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b00:	e159      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b02:	4b80      	ldr	r3, [pc, #512]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b0c:	4b7d      	ldr	r3, [pc, #500]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d10c      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b1e:	4b79      	ldr	r3, [pc, #484]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	4a77      	ldr	r2, [pc, #476]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b30:	e01e      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b32:	4b74      	ldr	r3, [pc, #464]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3e:	d106      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b46:	d102      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b48:	4b70      	ldr	r3, [pc, #448]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4c:	e010      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b4e:	4b6d      	ldr	r3, [pc, #436]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b5a:	d106      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b62:	d102      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b64:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b68:	e002      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b6e:	e122      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b70:	e121      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b76:	e11e      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007b80:	430b      	orrs	r3, r1
 8007b82:	d133      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b84:	4b5f      	ldr	r3, [pc, #380]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b9a:	d012      	beq.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007b9c:	e023      	b.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b9e:	4b59      	ldr	r3, [pc, #356]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007baa:	d107      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fbc7 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bba:	e0fc      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc0:	e0f9      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc2:	4b50      	ldr	r3, [pc, #320]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd0:	f107 0318 	add.w	r3, r7, #24
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 f90d 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bde:	e0ea      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be4:	e0e7      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bea:	e0e4      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	f040 808d 	bne.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007bfa:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c0a:	d06b      	beq.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c12:	d874      	bhi.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1a:	d056      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c22:	d86c      	bhi.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c2a:	d03b      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c32:	d864      	bhi.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c3a:	d021      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c42:	d85c      	bhi.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c50:	d004      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007c52:	e054      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007c54:	f000 f8b8 	bl	8007dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c58:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c5a:	e0ac      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c5c:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c68:	d107      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6a:	f107 0318 	add.w	r3, r7, #24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f8c0 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c78:	e09d      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c7e:	e09a      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c80:	4b20      	ldr	r3, [pc, #128]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8c:	d107      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c8e:	f107 030c 	add.w	r3, r7, #12
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fa02 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c9c:	e08b      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca2:	e088      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca4:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d109      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb0:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	08db      	lsrs	r3, r3, #3
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	4a13      	ldr	r2, [pc, #76]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cc2:	e078      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc8:	e075      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd6:	d102      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cdc:	e06b      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce2:	e068      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ce4:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf0:	d102      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf6:	e05e      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfc:	e05b      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d02:	e058      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d04:	58024400 	.word	0x58024400
 8007d08:	03d09000 	.word	0x03d09000
 8007d0c:	003d0900 	.word	0x003d0900
 8007d10:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d18:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	d148      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007d20:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d30:	d02a      	beq.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d38:	d838      	bhi.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d46:	d00d      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007d48:	e030      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d56:	d102      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007d58:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d5c:	e02b      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d62:	e028      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d64:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d70:	d107      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fae4 	bl	8008344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d80:	e019      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d86:	e016      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d94:	d107      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d96:	f107 0318 	add.w	r3, r7, #24
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 f82a 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da4:	e007      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007daa:	e004      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db0:	e001      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3740      	adds	r7, #64	; 0x40
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	017d7840 	.word	0x017d7840

08007dc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007dcc:	f7fd ffd6 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	091b      	lsrs	r3, r3, #4
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	4904      	ldr	r1, [pc, #16]	; (8007df0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	58024400 	.word	0x58024400
 8007df0:	0800f728 	.word	0x0800f728

08007df4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dfc:	4ba1      	ldr	r3, [pc, #644]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f003 0303 	and.w	r3, r3, #3
 8007e04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007e06:	4b9f      	ldr	r3, [pc, #636]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	0b1b      	lsrs	r3, r3, #12
 8007e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e12:	4b9c      	ldr	r3, [pc, #624]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007e1e:	4b99      	ldr	r3, [pc, #612]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	08db      	lsrs	r3, r3, #3
 8007e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	fb02 f303 	mul.w	r3, r2, r3
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8111 	beq.w	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	f000 8083 	beq.w	8007f50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	f200 80a1 	bhi.w	8007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d056      	beq.n	8007f0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e5e:	e099      	b.n	8007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e60:	4b88      	ldr	r3, [pc, #544]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d02d      	beq.n	8007ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e6c:	4b85      	ldr	r3, [pc, #532]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	08db      	lsrs	r3, r3, #3
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	4a84      	ldr	r2, [pc, #528]	; (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e96:	4b7b      	ldr	r3, [pc, #492]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ec6:	e087      	b.n	8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eda:	4b6a      	ldr	r3, [pc, #424]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f0a:	e065      	b.n	8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1e:	4b59      	ldr	r3, [pc, #356]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f4e:	e043      	b.n	8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f62:	4b48      	ldr	r3, [pc, #288]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f92:	e021      	b.n	8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa6:	4b37      	ldr	r3, [pc, #220]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fd8:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	0a5b      	lsrs	r3, r3, #9
 8007fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ffe:	ee17 2a90 	vmov	r2, s15
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800801c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008020:	edd7 6a07 	vldr	s13, [r7, #28]
 8008024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800802c:	ee17 2a90 	vmov	r2, s15
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008034:	4b13      	ldr	r3, [pc, #76]	; (8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	0e1b      	lsrs	r3, r3, #24
 800803a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800804a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800804e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800805a:	ee17 2a90 	vmov	r2, s15
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008062:	e008      	b.n	8008076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
}
 8008076:	bf00      	nop
 8008078:	3724      	adds	r7, #36	; 0x24
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	58024400 	.word	0x58024400
 8008088:	03d09000 	.word	0x03d09000
 800808c:	46000000 	.word	0x46000000
 8008090:	4c742400 	.word	0x4c742400
 8008094:	4a742400 	.word	0x4a742400
 8008098:	4bbebc20 	.word	0x4bbebc20

0800809c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800809c:	b480      	push	{r7}
 800809e:	b089      	sub	sp, #36	; 0x24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080a4:	4ba1      	ldr	r3, [pc, #644]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	f003 0303 	and.w	r3, r3, #3
 80080ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80080ae:	4b9f      	ldr	r3, [pc, #636]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	0d1b      	lsrs	r3, r3, #20
 80080b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080ba:	4b9c      	ldr	r3, [pc, #624]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080c6:	4b99      	ldr	r3, [pc, #612]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ca:	08db      	lsrs	r3, r3, #3
 80080cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 8111 	beq.w	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	f000 8083 	beq.w	80081f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	f200 80a1 	bhi.w	800823c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d056      	beq.n	80081b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008106:	e099      	b.n	800823c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008108:	4b88      	ldr	r3, [pc, #544]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02d      	beq.n	8008170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008114:	4b85      	ldr	r3, [pc, #532]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	08db      	lsrs	r3, r3, #3
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	4a84      	ldr	r2, [pc, #528]	; (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008120:	fa22 f303 	lsr.w	r3, r2, r3
 8008124:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813e:	4b7b      	ldr	r3, [pc, #492]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008152:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800816e:	e087      	b.n	8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800817e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008182:	4b6a      	ldr	r3, [pc, #424]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008192:	ed97 6a03 	vldr	s12, [r7, #12]
 8008196:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800819a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081b2:	e065      	b.n	8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800833c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c6:	4b59      	ldr	r3, [pc, #356]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f6:	e043      	b.n	8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820a:	4b48      	ldr	r3, [pc, #288]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821a:	ed97 6a03 	vldr	s12, [r7, #12]
 800821e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823a:	e021      	b.n	8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800833c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b37      	ldr	r3, [pc, #220]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008262:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800827e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008280:	4b2a      	ldr	r3, [pc, #168]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	0a5b      	lsrs	r3, r3, #9
 8008286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829a:	edd7 6a07 	vldr	s13, [r7, #28]
 800829e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a6:	ee17 2a90 	vmov	r2, s15
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d4:	ee17 2a90 	vmov	r2, s15
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80082dc:	4b13      	ldr	r3, [pc, #76]	; (800832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	0e1b      	lsrs	r3, r3, #24
 80082e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008302:	ee17 2a90 	vmov	r2, s15
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800830a:	e008      	b.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
}
 800831e:	bf00      	nop
 8008320:	3724      	adds	r7, #36	; 0x24
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	58024400 	.word	0x58024400
 8008330:	03d09000 	.word	0x03d09000
 8008334:	46000000 	.word	0x46000000
 8008338:	4c742400 	.word	0x4c742400
 800833c:	4a742400 	.word	0x4a742400
 8008340:	4bbebc20 	.word	0x4bbebc20

08008344 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	; 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800834c:	4ba0      	ldr	r3, [pc, #640]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008356:	4b9e      	ldr	r3, [pc, #632]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	091b      	lsrs	r3, r3, #4
 800835c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008360:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008362:	4b9b      	ldr	r3, [pc, #620]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800836c:	4b98      	ldr	r3, [pc, #608]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	fb02 f303 	mul.w	r3, r2, r3
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008384:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8111 	beq.w	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	2b02      	cmp	r3, #2
 8008394:	f000 8083 	beq.w	800849e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b02      	cmp	r3, #2
 800839c:	f200 80a1 	bhi.w	80084e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d056      	beq.n	800845a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80083ac:	e099      	b.n	80084e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ae:	4b88      	ldr	r3, [pc, #544]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d02d      	beq.n	8008416 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083ba:	4b85      	ldr	r3, [pc, #532]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	08db      	lsrs	r3, r3, #3
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	4a83      	ldr	r2, [pc, #524]	; (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80083c6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e4:	4b7a      	ldr	r3, [pc, #488]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008410:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008414:	e087      	b.n	8008526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008420:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008428:	4b69      	ldr	r3, [pc, #420]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008430:	ee07 3a90 	vmov	s15, r3
 8008434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008438:	ed97 6a03 	vldr	s12, [r7, #12]
 800843c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800844c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008454:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008458:	e065      	b.n	8008526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	ee07 3a90 	vmov	s15, r3
 8008460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008464:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80085e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846c:	4b58      	ldr	r3, [pc, #352]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008480:	eddf 5a55 	vldr	s11, [pc, #340]	; 80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008498:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800849c:	e043      	b.n	8008526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	ee07 3a90 	vmov	s15, r3
 80084a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80084ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b0:	4b47      	ldr	r3, [pc, #284]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084e0:	e021      	b.n	8008526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80084f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f4:	4b36      	ldr	r3, [pc, #216]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008504:	ed97 6a03 	vldr	s12, [r7, #12]
 8008508:	eddf 5a33 	vldr	s11, [pc, #204]	; 80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800850c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008520:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008524:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008526:	4b2a      	ldr	r3, [pc, #168]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	0a5b      	lsrs	r3, r3, #9
 800852c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800853c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008540:	edd7 6a07 	vldr	s13, [r7, #28]
 8008544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854c:	ee17 2a90 	vmov	r2, s15
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008554:	4b1e      	ldr	r3, [pc, #120]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008558:	0c1b      	lsrs	r3, r3, #16
 800855a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800856a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800856e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857a:	ee17 2a90 	vmov	r2, s15
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008582:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	0e1b      	lsrs	r3, r3, #24
 8008588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800859c:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a8:	ee17 2a90 	vmov	r2, s15
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80085b0:	e008      	b.n	80085c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	609a      	str	r2, [r3, #8]
}
 80085c4:	bf00      	nop
 80085c6:	3724      	adds	r7, #36	; 0x24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	58024400 	.word	0x58024400
 80085d4:	03d09000 	.word	0x03d09000
 80085d8:	46000000 	.word	0x46000000
 80085dc:	4c742400 	.word	0x4c742400
 80085e0:	4a742400 	.word	0x4a742400
 80085e4:	4bbebc20 	.word	0x4bbebc20

080085e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085f6:	4b53      	ldr	r3, [pc, #332]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d101      	bne.n	8008606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e099      	b.n	800873a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008606:	4b4f      	ldr	r3, [pc, #316]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a4e      	ldr	r2, [pc, #312]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800860c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008612:	f7f9 f89f 	bl	8001754 <HAL_GetTick>
 8008616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008618:	e008      	b.n	800862c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800861a:	f7f9 f89b 	bl	8001754 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d901      	bls.n	800862c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e086      	b.n	800873a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800862c:	4b45      	ldr	r3, [pc, #276]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f0      	bne.n	800861a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008638:	4b42      	ldr	r3, [pc, #264]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	493f      	ldr	r1, [pc, #252]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	628b      	str	r3, [r1, #40]	; 0x28
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	3b01      	subs	r3, #1
 8008652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	3b01      	subs	r3, #1
 800865c:	025b      	lsls	r3, r3, #9
 800865e:	b29b      	uxth	r3, r3
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	3b01      	subs	r3, #1
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	3b01      	subs	r3, #1
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800867c:	4931      	ldr	r1, [pc, #196]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800867e:	4313      	orrs	r3, r2
 8008680:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008682:	4b30      	ldr	r3, [pc, #192]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	492d      	ldr	r1, [pc, #180]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008694:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f023 0220 	bic.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	4928      	ldr	r1, [pc, #160]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80086a6:	4b27      	ldr	r3, [pc, #156]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	4a26      	ldr	r2, [pc, #152]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086ac:	f023 0310 	bic.w	r3, r3, #16
 80086b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086b2:	4b24      	ldr	r3, [pc, #144]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b6:	4b24      	ldr	r3, [pc, #144]	; (8008748 <RCCEx_PLL2_Config+0x160>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	69d2      	ldr	r2, [r2, #28]
 80086be:	00d2      	lsls	r2, r2, #3
 80086c0:	4920      	ldr	r1, [pc, #128]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80086c6:	4b1f      	ldr	r3, [pc, #124]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086cc:	f043 0310 	orr.w	r3, r3, #16
 80086d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086d8:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a19      	ldr	r2, [pc, #100]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086e4:	e00f      	b.n	8008706 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d106      	bne.n	80086fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086ec:	4b15      	ldr	r3, [pc, #84]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	4a14      	ldr	r2, [pc, #80]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086f8:	e005      	b.n	8008706 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0e      	ldr	r2, [pc, #56]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800870c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008712:	f7f9 f81f 	bl	8001754 <HAL_GetTick>
 8008716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008718:	e008      	b.n	800872c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800871a:	f7f9 f81b 	bl	8001754 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e006      	b.n	800873a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f0      	beq.n	800871a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	58024400 	.word	0x58024400
 8008748:	ffff0007 	.word	0xffff0007

0800874c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800875a:	4b53      	ldr	r3, [pc, #332]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b03      	cmp	r3, #3
 8008764:	d101      	bne.n	800876a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e099      	b.n	800889e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800876a:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a4e      	ldr	r2, [pc, #312]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008776:	f7f8 ffed 	bl	8001754 <HAL_GetTick>
 800877a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800877c:	e008      	b.n	8008790 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800877e:	f7f8 ffe9 	bl	8001754 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e086      	b.n	800889e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008790:	4b45      	ldr	r3, [pc, #276]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f0      	bne.n	800877e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800879c:	4b42      	ldr	r3, [pc, #264]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	051b      	lsls	r3, r3, #20
 80087aa:	493f      	ldr	r1, [pc, #252]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	628b      	str	r3, [r1, #40]	; 0x28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	025b      	lsls	r3, r3, #9
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	431a      	orrs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	3b01      	subs	r3, #1
 80087da:	061b      	lsls	r3, r3, #24
 80087dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087e0:	4931      	ldr	r1, [pc, #196]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087e6:	4b30      	ldr	r3, [pc, #192]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	492d      	ldr	r1, [pc, #180]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087f8:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4928      	ldr	r1, [pc, #160]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008806:	4313      	orrs	r3, r2
 8008808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800880a:	4b27      	ldr	r3, [pc, #156]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008816:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800881a:	4b24      	ldr	r3, [pc, #144]	; (80088ac <RCCEx_PLL3_Config+0x160>)
 800881c:	4013      	ands	r3, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	69d2      	ldr	r2, [r2, #28]
 8008822:	00d2      	lsls	r2, r2, #3
 8008824:	4920      	ldr	r1, [pc, #128]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800882a:	4b1f      	ldr	r3, [pc, #124]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800883c:	4b1a      	ldr	r3, [pc, #104]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008848:	e00f      	b.n	800886a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d106      	bne.n	800885e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	4a14      	ldr	r2, [pc, #80]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800885a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800885c:	e005      	b.n	800886a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	4a11      	ldr	r2, [pc, #68]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a0e      	ldr	r2, [pc, #56]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008876:	f7f8 ff6d 	bl	8001754 <HAL_GetTick>
 800887a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800887c:	e008      	b.n	8008890 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800887e:	f7f8 ff69 	bl	8001754 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e006      	b.n	800889e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0f0      	beq.n	800887e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	58024400 	.word	0x58024400
 80088ac:	ffff0007 	.word	0xffff0007

080088b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e075      	b.n	80089ae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d105      	bne.n	80088da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7f8 fd19 	bl	800130c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2204      	movs	r2, #4
 80088de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f868 	bl	80089b8 <HAL_SD_InitCard>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e05d      	b.n	80089ae <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fdb5 	bl	8009468 <HAL_SD_GetCardStatus>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e052      	b.n	80089ae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008908:	7e3b      	ldrb	r3, [r7, #24]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800890e:	7e7b      	ldrb	r3, [r7, #25]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10a      	bne.n	8008932 <HAL_SD_Init+0x82>
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <HAL_SD_Init+0x78>
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d004      	beq.n	8008932 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800892e:	659a      	str	r2, [r3, #88]	; 0x58
 8008930:	e00b      	b.n	800894a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	2b01      	cmp	r3, #1
 8008938:	d104      	bne.n	8008944 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008940:	659a      	str	r2, [r3, #88]	; 0x58
 8008942:	e002      	b.n	800894a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fe73 	bl	800963c <HAL_SD_ConfigWideBusOperation>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e026      	b.n	80089ae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008960:	f7f8 fef8 	bl	8001754 <HAL_GetTick>
 8008964:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008966:	e011      	b.n	800898c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008968:	f7f8 fef4 	bl	8001754 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d109      	bne.n	800898c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800897e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e010      	b.n	80089ae <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 ff67 	bl	8009860 <HAL_SD_GetCardState>
 8008992:	4603      	mov	r3, r0
 8008994:	2b04      	cmp	r3, #4
 8008996:	d1e7      	bne.n	8008968 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3728      	adds	r7, #40	; 0x28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80089b8:	b590      	push	{r4, r7, lr}
 80089ba:	b08d      	sub	sp, #52	; 0x34
 80089bc:	af02      	add	r7, sp, #8
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80089d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80089d4:	f04f 0100 	mov.w	r1, #0
 80089d8:	f7fe fc76 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80089dc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d109      	bne.n	80089f8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e070      	b.n	8008ada <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	0a1b      	lsrs	r3, r3, #8
 80089fc:	4a39      	ldr	r2, [pc, #228]	; (8008ae4 <HAL_SD_InitCard+0x12c>)
 80089fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008a02:	091b      	lsrs	r3, r3, #4
 8008a04:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681c      	ldr	r4, [r3, #0]
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f107 0318 	add.w	r3, r7, #24
 8008a10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a14:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f002 fbce 	bl	800b1c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f002 fc11 	bl	800b250 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008a46:	4a28      	ldr	r2, [pc, #160]	; (8008ae8 <HAL_SD_InitCard+0x130>)
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4e:	3301      	adds	r3, #1
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f8 fe8b 	bl	800176c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fff0 	bl	8009a3c <SD_PowerON>
 8008a5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e02e      	b.n	8008ada <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 ff0f 	bl	80098a0 <SD_InitCard>
 8008a82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e01b      	b.n	8008ada <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f002 fc66 	bl	800b37c <SDMMC_CmdBlockLength>
 8008ab0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00f      	beq.n	8008ad8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a0b      	ldr	r2, [pc, #44]	; (8008aec <HAL_SD_InitCard+0x134>)
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	372c      	adds	r7, #44	; 0x2c
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd90      	pop	{r4, r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	014f8b59 	.word	0x014f8b59
 8008ae8:	00012110 	.word	0x00012110
 8008aec:	1fe00fff 	.word	0x1fe00fff

08008af0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b092      	sub	sp, #72	; 0x48
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008afe:	f7f8 fe29 	bl	8001754 <HAL_GetTick>
 8008b02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d107      	bne.n	8008b22 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e167      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	f040 815a 	bne.w	8008de4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	441a      	add	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d907      	bls.n	8008b54 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e14e      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2203      	movs	r2, #3
 8008b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2200      	movs	r2, #0
 8008b62:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d002      	beq.n	8008b72 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	025b      	lsls	r3, r3, #9
 8008b70:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
 8008b76:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	025b      	lsls	r3, r3, #9
 8008b7c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b7e:	2390      	movs	r3, #144	; 0x90
 8008b80:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b82:	2302      	movs	r3, #2
 8008b84:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f107 0214 	add.w	r2, r7, #20
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f002 fbc3 	bl	800b324 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bac:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d90a      	bls.n	8008bca <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 fc21 	bl	800b408 <SDMMC_CmdReadMultiBlock>
 8008bc6:	6478      	str	r0, [r7, #68]	; 0x44
 8008bc8:	e009      	b.n	8008bde <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 fbf3 	bl	800b3c2 <SDMMC_CmdReadSingleBlock>
 8008bdc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d012      	beq.n	8008c0a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a84      	ldr	r2, [pc, #528]	; (8008dfc <HAL_SD_ReadBlocks+0x30c>)
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0f3      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c0e:	e058      	b.n	8008cc2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d033      	beq.n	8008c86 <HAL_SD_ReadBlocks+0x196>
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c20:	2b1f      	cmp	r3, #31
 8008c22:	d930      	bls.n	8008c86 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008c24:	2300      	movs	r3, #0
 8008c26:	643b      	str	r3, [r7, #64]	; 0x40
 8008c28:	e027      	b.n	8008c7a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f002 faf0 	bl	800b214 <SDMMC_ReadFIFO>
 8008c34:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c40:	3301      	adds	r3, #1
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c50:	3301      	adds	r3, #1
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	3301      	adds	r3, #1
 8008c62:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	0e1b      	lsrs	r3, r3, #24
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	3301      	adds	r3, #1
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c76:	3301      	adds	r3, #1
 8008c78:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c7c:	2b07      	cmp	r3, #7
 8008c7e:	d9d4      	bls.n	8008c2a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c82:	3b20      	subs	r3, #32
 8008c84:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008c86:	f7f8 fd65 	bl	8001754 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d902      	bls.n	8008c9c <HAL_SD_ReadBlocks+0x1ac>
 8008c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d112      	bne.n	8008cc2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a56      	ldr	r2, [pc, #344]	; (8008dfc <HAL_SD_ReadBlocks+0x30c>)
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e097      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d09f      	beq.n	8008c10 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cde:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d022      	beq.n	8008d34 <HAL_SD_ReadBlocks+0x244>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d91f      	bls.n	8008d34 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d01b      	beq.n	8008d34 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 fbeb 	bl	800b4dc <SDMMC_CmdStopTransfer>
 8008d06:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d012      	beq.n	8008d34 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a3a      	ldr	r2, [pc, #232]	; (8008dfc <HAL_SD_ReadBlocks+0x30c>)
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e05e      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d012      	beq.n	8008d68 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a2d      	ldr	r2, [pc, #180]	; (8008dfc <HAL_SD_ReadBlocks+0x30c>)
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	f043 0208 	orr.w	r2, r3, #8
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e044      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d012      	beq.n	8008d9c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <HAL_SD_ReadBlocks+0x30c>)
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d82:	f043 0202 	orr.w	r2, r3, #2
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e02a      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d012      	beq.n	8008dd0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a13      	ldr	r2, [pc, #76]	; (8008dfc <HAL_SD_ReadBlocks+0x30c>)
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	f043 0220 	orr.w	r2, r3, #32
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e010      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0a      	ldr	r2, [pc, #40]	; (8008e00 <HAL_SD_ReadBlocks+0x310>)
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e006      	b.n	8008df2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3748      	adds	r7, #72	; 0x48
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	1fe00fff 	.word	0x1fe00fff
 8008e00:	18000f3a 	.word	0x18000f3a

08008e04 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b092      	sub	sp, #72	; 0x48
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e12:	f7f8 fc9f 	bl	8001754 <HAL_GetTick>
 8008e16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d107      	bne.n	8008e36 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e16b      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	f040 815e 	bne.w	8009100 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	441a      	add	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d907      	bls.n	8008e68 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e152      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2200      	movs	r2, #0
 8008e76:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d002      	beq.n	8008e86 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	025b      	lsls	r3, r3, #9
 8008e84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e86:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	025b      	lsls	r3, r3, #9
 8008e90:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e92:	2390      	movs	r3, #144	; 0x90
 8008e94:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008e96:	2300      	movs	r3, #0
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f107 0218 	add.w	r2, r7, #24
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f002 fa39 	bl	800b324 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d90a      	bls.n	8008ede <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 fadd 	bl	800b494 <SDMMC_CmdWriteMultiBlock>
 8008eda:	6478      	str	r0, [r7, #68]	; 0x44
 8008edc:	e009      	b.n	8008ef2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2210      	movs	r2, #16
 8008ee2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eea:	4618      	mov	r0, r3
 8008eec:	f002 faaf 	bl	800b44e <SDMMC_CmdWriteSingleBlock>
 8008ef0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d012      	beq.n	8008f1e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a86      	ldr	r2, [pc, #536]	; (8009118 <HAL_SD_WriteBlocks+0x314>)
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f06:	431a      	orrs	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0f7      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008f22:	e05c      	b.n	8008fde <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d037      	beq.n	8008fa2 <HAL_SD_WriteBlocks+0x19e>
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	2b1f      	cmp	r3, #31
 8008f36:	d934      	bls.n	8008fa2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f3c:	e02b      	b.n	8008f96 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f46:	3301      	adds	r3, #1
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	021a      	lsls	r2, r3, #8
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	3301      	adds	r3, #1
 8008f5a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	041a      	lsls	r2, r3, #16
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	061a      	lsls	r2, r3, #24
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f107 0214 	add.w	r2, r7, #20
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 f94f 	bl	800b22e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f92:	3301      	adds	r3, #1
 8008f94:	643b      	str	r3, [r7, #64]	; 0x40
 8008f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	d9d0      	bls.n	8008f3e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9e:	3b20      	subs	r3, #32
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008fa2:	f7f8 fbd7 	bl	8001754 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d902      	bls.n	8008fb8 <HAL_SD_WriteBlocks+0x1b4>
 8008fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d112      	bne.n	8008fde <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a56      	ldr	r2, [pc, #344]	; (8009118 <HAL_SD_WriteBlocks+0x314>)
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e097      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d09b      	beq.n	8008f24 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ffa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009006:	2b00      	cmp	r3, #0
 8009008:	d022      	beq.n	8009050 <HAL_SD_WriteBlocks+0x24c>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d91f      	bls.n	8009050 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	2b03      	cmp	r3, #3
 8009016:	d01b      	beq.n	8009050 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4618      	mov	r0, r3
 800901e:	f002 fa5d 	bl	800b4dc <SDMMC_CmdStopTransfer>
 8009022:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009026:	2b00      	cmp	r3, #0
 8009028:	d012      	beq.n	8009050 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a3a      	ldr	r2, [pc, #232]	; (8009118 <HAL_SD_WriteBlocks+0x314>)
 8009030:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009038:	431a      	orrs	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e05e      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d012      	beq.n	8009084 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a2d      	ldr	r2, [pc, #180]	; (8009118 <HAL_SD_WriteBlocks+0x314>)
 8009064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	f043 0208 	orr.w	r2, r3, #8
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e044      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d012      	beq.n	80090b8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a20      	ldr	r2, [pc, #128]	; (8009118 <HAL_SD_WriteBlocks+0x314>)
 8009098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	f043 0202 	orr.w	r2, r3, #2
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e02a      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d012      	beq.n	80090ec <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a13      	ldr	r2, [pc, #76]	; (8009118 <HAL_SD_WriteBlocks+0x314>)
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d2:	f043 0210 	orr.w	r2, r3, #16
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e010      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <HAL_SD_WriteBlocks+0x318>)
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e006      	b.n	800910e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009104:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3748      	adds	r7, #72	; 0x48
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	1fe00fff 	.word	0x1fe00fff
 800911c:	18000f3a 	.word	0x18000f3a

08009120 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912e:	0f9b      	lsrs	r3, r3, #30
 8009130:	b2da      	uxtb	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913a:	0e9b      	lsrs	r3, r3, #26
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	b2da      	uxtb	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914c:	0e1b      	lsrs	r3, r3, #24
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	b2da      	uxtb	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800916a:	0a1b      	lsrs	r3, r3, #8
 800916c:	b2da      	uxtb	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009176:	b2da      	uxtb	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	b29a      	uxth	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800918c:	0c1b      	lsrs	r3, r3, #16
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	b2da      	uxtb	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919e:	0bdb      	lsrs	r3, r3, #15
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091b0:	0b9b      	lsrs	r3, r3, #14
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091c2:	0b5b      	lsrs	r3, r3, #13
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d4:	0b1b      	lsrs	r3, r3, #12
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2200      	movs	r2, #0
 80091e6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d163      	bne.n	80092b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091f4:	009a      	lsls	r2, r3, #2
 80091f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091fa:	4013      	ands	r3, r2
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009200:	0f92      	lsrs	r2, r2, #30
 8009202:	431a      	orrs	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800920c:	0edb      	lsrs	r3, r3, #27
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	b2da      	uxtb	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800921e:	0e1b      	lsrs	r3, r3, #24
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	b2da      	uxtb	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009230:	0d5b      	lsrs	r3, r3, #21
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	b2da      	uxtb	r2, r3
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009242:	0c9b      	lsrs	r3, r3, #18
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009254:	0bdb      	lsrs	r3, r3, #15
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	b2da      	uxtb	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	7e1b      	ldrb	r3, [r3, #24]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	3302      	adds	r3, #2
 8009278:	2201      	movs	r2, #1
 800927a:	fa02 f303 	lsl.w	r3, r2, r3
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009282:	fb03 f202 	mul.w	r2, r3, r2
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	7a1b      	ldrb	r3, [r3, #8]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	2201      	movs	r2, #1
 8009296:	409a      	lsls	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80092a4:	0a52      	lsrs	r2, r2, #9
 80092a6:	fb03 f202 	mul.w	r2, r3, r2
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092b4:	655a      	str	r2, [r3, #84]	; 0x54
 80092b6:	e031      	b.n	800931c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d11d      	bne.n	80092fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ce:	0c1b      	lsrs	r3, r3, #16
 80092d0:	431a      	orrs	r2, r3
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	3301      	adds	r3, #1
 80092dc:	029a      	lsls	r2, r3, #10
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	655a      	str	r2, [r3, #84]	; 0x54
 80092fa:	e00f      	b.n	800931c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a58      	ldr	r2, [pc, #352]	; (8009464 <HAL_SD_GetCardCSD+0x344>)
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e09d      	b.n	8009458 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009320:	0b9b      	lsrs	r3, r3, #14
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	b2da      	uxtb	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009332:	09db      	lsrs	r3, r3, #7
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933a:	b2da      	uxtb	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009354:	0fdb      	lsrs	r3, r3, #31
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009360:	0f5b      	lsrs	r3, r3, #29
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009372:	0e9b      	lsrs	r3, r3, #26
 8009374:	b2db      	uxtb	r3, r3
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	b2da      	uxtb	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009384:	0d9b      	lsrs	r3, r3, #22
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009396:	0d5b      	lsrs	r3, r3, #21
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c6:	0bdb      	lsrs	r3, r3, #15
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093da:	0b9b      	lsrs	r3, r3, #14
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ee:	0b5b      	lsrs	r3, r3, #13
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009402:	0b1b      	lsrs	r3, r3, #12
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	b2da      	uxtb	r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009416:	0a9b      	lsrs	r3, r3, #10
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	b2da      	uxtb	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	b2db      	uxtb	r3, r3
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	b2da      	uxtb	r2, r3
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	b2da      	uxtb	r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	1fe00fff 	.word	0x1fe00fff

08009468 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b094      	sub	sp, #80	; 0x50
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b03      	cmp	r3, #3
 8009482:	d101      	bne.n	8009488 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e0a7      	b.n	80095d8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009488:	f107 0308 	add.w	r3, r7, #8
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fb62 	bl	8009b58 <SD_SendSDStatus>
 8009494:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009498:	2b00      	cmp	r3, #0
 800949a:	d011      	beq.n	80094c0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a4f      	ldr	r2, [pc, #316]	; (80095e0 <HAL_SD_GetCardStatus+0x178>)
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80094be:	e070      	b.n	80095a2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	099b      	lsrs	r3, r3, #6
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	0e1b      	lsrs	r3, r3, #24
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4313      	orrs	r3, r2
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	061a      	lsls	r2, r3, #24
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009506:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	0a1b      	lsrs	r3, r3, #8
 800950c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009510:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	0e1b      	lsrs	r3, r3, #24
 8009516:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b2da      	uxtb	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	0d1b      	lsrs	r3, r3, #20
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	b2da      	uxtb	r2, r3
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	0c1b      	lsrs	r3, r3, #16
 8009542:	b29b      	uxth	r3, r3
 8009544:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009548:	b29a      	uxth	r2, r3
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	b29b      	uxth	r3, r3
 800954e:	b2db      	uxtb	r3, r3
 8009550:	b29b      	uxth	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b29a      	uxth	r2, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	0a9b      	lsrs	r3, r3, #10
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009564:	b2da      	uxtb	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	0a1b      	lsrs	r3, r3, #8
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 0303 	and.w	r3, r3, #3
 8009574:	b2da      	uxtb	r2, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	091b      	lsrs	r3, r3, #4
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	b2da      	uxtb	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	0e1b      	lsrs	r3, r3, #24
 800959c:	b2da      	uxtb	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 fee6 	bl	800b37c <SDMMC_CmdBlockLength>
 80095b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00d      	beq.n	80095d4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <HAL_SD_GetCardStatus+0x178>)
 80095be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80095d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3750      	adds	r7, #80	; 0x50
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	1fe00fff 	.word	0x1fe00fff

080095e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800963c:	b590      	push	{r4, r7, lr}
 800963e:	b08d      	sub	sp, #52	; 0x34
 8009640:	af02      	add	r7, sp, #8
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2203      	movs	r2, #3
 8009650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	2b03      	cmp	r3, #3
 800965a:	d02e      	beq.n	80096ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009662:	d106      	bne.n	8009672 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	635a      	str	r2, [r3, #52]	; 0x34
 8009670:	e029      	b.n	80096c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009678:	d10a      	bne.n	8009690 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fb64 	bl	8009d48 <SD_WideBus_Enable>
 8009680:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	431a      	orrs	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	635a      	str	r2, [r3, #52]	; 0x34
 800968e:	e01a      	b.n	80096c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fba1 	bl	8009dde <SD_WideBus_Disable>
 800969c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	431a      	orrs	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	635a      	str	r2, [r3, #52]	; 0x34
 80096aa:	e00c      	b.n	80096c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	635a      	str	r2, [r3, #52]	; 0x34
 80096b8:	e005      	b.n	80096c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a5f      	ldr	r2, [pc, #380]	; (8009850 <HAL_SD_ConfigWideBusOperation+0x214>)
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096dc:	e096      	b.n	800980c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80096de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80096e2:	f04f 0100 	mov.w	r1, #0
 80096e6:	f7fd fdef 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80096ea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8083 	beq.w	80097fa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	695a      	ldr	r2, [r3, #20]
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	4950      	ldr	r1, [pc, #320]	; (8009854 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009712:	fba1 1303 	umull	r1, r3, r1, r3
 8009716:	0e1b      	lsrs	r3, r3, #24
 8009718:	429a      	cmp	r2, r3
 800971a:	d303      	bcc.n	8009724 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	e05a      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800972c:	d103      	bne.n	8009736 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	e051      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800973a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973e:	d126      	bne.n	800978e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10e      	bne.n	8009766 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4a43      	ldr	r2, [pc, #268]	; (8009858 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d906      	bls.n	800975e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	4a40      	ldr	r2, [pc, #256]	; (8009854 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009754:	fba2 2303 	umull	r2, r3, r2, r3
 8009758:	0e5b      	lsrs	r3, r3, #25
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	e03d      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	61bb      	str	r3, [r7, #24]
 8009764:	e039      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	69fa      	ldr	r2, [r7, #28]
 800976e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009772:	4a39      	ldr	r2, [pc, #228]	; (8009858 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d906      	bls.n	8009786 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	4a36      	ldr	r2, [pc, #216]	; (8009854 <HAL_SD_ConfigWideBusOperation+0x218>)
 800977c:	fba2 2303 	umull	r2, r3, r2, r3
 8009780:	0e5b      	lsrs	r3, r3, #25
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	e029      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	e025      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10e      	bne.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4a30      	ldr	r2, [pc, #192]	; (800985c <HAL_SD_ConfigWideBusOperation+0x220>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d906      	bls.n	80097ac <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4a2c      	ldr	r2, [pc, #176]	; (8009854 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097a2:	fba2 2303 	umull	r2, r3, r2, r3
 80097a6:	0e1b      	lsrs	r3, r3, #24
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	e016      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	61bb      	str	r3, [r7, #24]
 80097b2:	e012      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	69fa      	ldr	r2, [r7, #28]
 80097bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c0:	4a26      	ldr	r2, [pc, #152]	; (800985c <HAL_SD_ConfigWideBusOperation+0x220>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d906      	bls.n	80097d4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4a22      	ldr	r2, [pc, #136]	; (8009854 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097ca:	fba2 2303 	umull	r2, r3, r2, r3
 80097ce:	0e1b      	lsrs	r3, r3, #24
 80097d0:	61bb      	str	r3, [r7, #24]
 80097d2:	e002      	b.n	80097da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681c      	ldr	r4, [r3, #0]
 80097de:	466a      	mov	r2, sp
 80097e0:	f107 0314 	add.w	r3, r7, #20
 80097e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097f2:	4620      	mov	r0, r4
 80097f4:	f001 fce4 	bl	800b1c0 <SDMMC_Init>
 80097f8:	e008      	b.n	800980c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009814:	4618      	mov	r0, r3
 8009816:	f001 fdb1 	bl	800b37c <SDMMC_CmdBlockLength>
 800981a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00c      	beq.n	800983c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a0a      	ldr	r2, [pc, #40]	; (8009850 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009828:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009848:	4618      	mov	r0, r3
 800984a:	372c      	adds	r7, #44	; 0x2c
 800984c:	46bd      	mov	sp, r7
 800984e:	bd90      	pop	{r4, r7, pc}
 8009850:	1fe00fff 	.word	0x1fe00fff
 8009854:	55e63b89 	.word	0x55e63b89
 8009858:	02faf080 	.word	0x02faf080
 800985c:	017d7840 	.word	0x017d7840

08009860 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800986c:	f107 030c 	add.w	r3, r7, #12
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa40 	bl	8009cf8 <SD_SendStatus>
 8009878:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d005      	beq.n	800988c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	0a5b      	lsrs	r3, r3, #9
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009896:	693b      	ldr	r3, [r7, #16]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b090      	sub	sp, #64	; 0x40
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80098ac:	f7f7 ff52 	bl	8001754 <HAL_GetTick>
 80098b0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 fcdb 	bl	800b272 <SDMMC_GetPowerState>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80098c6:	e0b5      	b.n	8009a34 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d02e      	beq.n	800992e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 ff26 	bl	800b726 <SDMMC_CmdSendCID>
 80098da:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <SD_InitCard+0x46>
    {
      return errorstate;
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	e0a6      	b.n	8009a34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2100      	movs	r1, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fd06 	bl	800b2fe <SDMMC_GetResponse>
 80098f2:	4602      	mov	r2, r0
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2104      	movs	r1, #4
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 fcfd 	bl	800b2fe <SDMMC_GetResponse>
 8009904:	4602      	mov	r2, r0
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2108      	movs	r1, #8
 8009910:	4618      	mov	r0, r3
 8009912:	f001 fcf4 	bl	800b2fe <SDMMC_GetResponse>
 8009916:	4602      	mov	r2, r0
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	210c      	movs	r1, #12
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fceb 	bl	800b2fe <SDMMC_GetResponse>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	2b03      	cmp	r3, #3
 8009934:	d01d      	beq.n	8009972 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009936:	e019      	b.n	800996c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f107 020a 	add.w	r2, r7, #10
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f001 ff2e 	bl	800b7a4 <SDMMC_CmdSetRelAdd>
 8009948:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	e06f      	b.n	8009a34 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009954:	f7f7 fefe 	bl	8001754 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	f241 3287 	movw	r2, #4999	; 0x1387
 8009962:	4293      	cmp	r3, r2
 8009964:	d902      	bls.n	800996c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009966:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800996a:	e063      	b.n	8009a34 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800996c:	897b      	ldrh	r3, [r7, #10]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0e2      	beq.n	8009938 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	2b03      	cmp	r3, #3
 8009978:	d036      	beq.n	80099e8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800997a:	897b      	ldrh	r3, [r7, #10]
 800997c:	461a      	mov	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998a:	041b      	lsls	r3, r3, #16
 800998c:	4619      	mov	r1, r3
 800998e:	4610      	mov	r0, r2
 8009990:	f001 fee8 	bl	800b764 <SDMMC_CmdSendCSD>
 8009994:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <SD_InitCard+0x100>
    {
      return errorstate;
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	e049      	b.n	8009a34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fca9 	bl	800b2fe <SDMMC_GetResponse>
 80099ac:	4602      	mov	r2, r0
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2104      	movs	r1, #4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fca0 	bl	800b2fe <SDMMC_GetResponse>
 80099be:	4602      	mov	r2, r0
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2108      	movs	r1, #8
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 fc97 	bl	800b2fe <SDMMC_GetResponse>
 80099d0:	4602      	mov	r2, r0
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	210c      	movs	r1, #12
 80099dc:	4618      	mov	r0, r3
 80099de:	f001 fc8e 	bl	800b2fe <SDMMC_GetResponse>
 80099e2:	4602      	mov	r2, r0
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2104      	movs	r1, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 fc85 	bl	800b2fe <SDMMC_GetResponse>
 80099f4:	4603      	mov	r3, r0
 80099f6:	0d1a      	lsrs	r2, r3, #20
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80099fc:	f107 030c 	add.w	r3, r7, #12
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fb8c 	bl	8009120 <HAL_SD_GetCardCSD>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a12:	e00f      	b.n	8009a34 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1c:	041b      	lsls	r3, r3, #16
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f001 fd97 	bl	800b554 <SDMMC_CmdSelDesel>
 8009a26:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <SD_InitCard+0x192>
  {
    return errorstate;
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	e000      	b.n	8009a34 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3740      	adds	r7, #64	; 0x40
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 fda0 	bl	800b59a <SDMMC_CmdGoIdleState>
 8009a5a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	e072      	b.n	8009b4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f001 fdb3 	bl	800b5d6 <SDMMC_CmdOperCond>
 8009a70:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a78:	d10d      	bne.n	8009a96 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 fd88 	bl	800b59a <SDMMC_CmdGoIdleState>
 8009a8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <SD_PowerON+0x60>
    {
      return errorstate;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	e05a      	b.n	8009b4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d137      	bne.n	8009b14 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f001 fdb3 	bl	800b616 <SDMMC_CmdAppCommand>
 8009ab0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d02d      	beq.n	8009b14 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ab8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009abc:	e046      	b.n	8009b4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 fda6 	bl	800b616 <SDMMC_CmdAppCommand>
 8009aca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	e03a      	b.n	8009b4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	491e      	ldr	r1, [pc, #120]	; (8009b54 <SD_PowerON+0x118>)
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 fdbd 	bl	800b65c <SDMMC_CmdAppOperCommand>
 8009ae2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009aee:	e02d      	b.n	8009b4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fc01 	bl	800b2fe <SDMMC_GetResponse>
 8009afc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	0fdb      	lsrs	r3, r3, #31
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d101      	bne.n	8009b0a <SD_PowerON+0xce>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <SD_PowerON+0xd0>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	613b      	str	r3, [r7, #16]

    count++;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d802      	bhi.n	8009b24 <SD_PowerON+0xe8>
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d0cc      	beq.n	8009abe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d902      	bls.n	8009b34 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b32:	e00b      	b.n	8009b4c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	c1100000 	.word	0xc1100000

08009b58 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08c      	sub	sp, #48	; 0x30
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b62:	f7f7 fdf7 	bl	8001754 <HAL_GetTick>
 8009b66:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2100      	movs	r1, #0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fbc3 	bl	800b2fe <SDMMC_GetResponse>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b82:	d102      	bne.n	8009b8a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b88:	e0b0      	b.n	8009cec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2140      	movs	r1, #64	; 0x40
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fbf3 	bl	800b37c <SDMMC_CmdBlockLength>
 8009b96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	e0a0      	b.n	8009cec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb2:	041b      	lsls	r3, r3, #16
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f001 fd2d 	bl	800b616 <SDMMC_CmdAppCommand>
 8009bbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	e08d      	b.n	8009cec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009bd6:	2340      	movs	r3, #64	; 0x40
 8009bd8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009bda:	2360      	movs	r3, #96	; 0x60
 8009bdc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bde:	2302      	movs	r3, #2
 8009be0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f107 0208 	add.w	r2, r7, #8
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 fb95 	bl	800b324 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f001 fe15 	bl	800b82e <SDMMC_CmdStatusRegister>
 8009c04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d02b      	beq.n	8009c64 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	e069      	b.n	8009cec <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d013      	beq.n	8009c4e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009c26:	2300      	movs	r3, #0
 8009c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c2a:	e00d      	b.n	8009c48 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 faef 	bl	800b214 <SDMMC_ReadFIFO>
 8009c36:	4602      	mov	r2, r0
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	601a      	str	r2, [r3, #0]
        pData++;
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	3304      	adds	r3, #4
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	3301      	adds	r3, #1
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	2b07      	cmp	r3, #7
 8009c4c:	d9ee      	bls.n	8009c2c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c4e:	f7f7 fd81 	bl	8001754 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d102      	bne.n	8009c64 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c62:	e043      	b.n	8009cec <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0d2      	beq.n	8009c18 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c78:	f003 0308 	and.w	r3, r3, #8
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c80:	2308      	movs	r3, #8
 8009c82:	e033      	b.n	8009cec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	e02a      	b.n	8009cec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d017      	beq.n	8009cd4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ca4:	2320      	movs	r3, #32
 8009ca6:	e021      	b.n	8009cec <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fab1 	bl	800b214 <SDMMC_ReadFIFO>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	601a      	str	r2, [r3, #0]
    pData++;
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	3304      	adds	r3, #4
 8009cbc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cbe:	f7f7 fd49 	bl	8001754 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ccc:	d102      	bne.n	8009cd4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cd2:	e00b      	b.n	8009cec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e2      	bne.n	8009ca8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a03      	ldr	r2, [pc, #12]	; (8009cf4 <SD_SendSDStatus+0x19c>)
 8009ce8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3730      	adds	r7, #48	; 0x30
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	18000f3a 	.word	0x18000f3a

08009cf8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d0c:	e018      	b.n	8009d40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f001 fd64 	bl	800b7e8 <SDMMC_CmdSendStatus>
 8009d20:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	e009      	b.n	8009d40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fae3 	bl	800b2fe <SDMMC_GetResponse>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009d50:	2300      	movs	r3, #0
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 facd 	bl	800b2fe <SDMMC_GetResponse>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d6e:	d102      	bne.n	8009d76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d74:	e02f      	b.n	8009dd6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d76:	f107 030c 	add.w	r3, r7, #12
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f879 	bl	8009e74 <SD_FindSCR>
 8009d82:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	e023      	b.n	8009dd6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01c      	beq.n	8009dd2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	4619      	mov	r1, r3
 8009da4:	4610      	mov	r0, r2
 8009da6:	f001 fc36 	bl	800b616 <SDMMC_CmdAppCommand>
 8009daa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	e00f      	b.n	8009dd6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2102      	movs	r1, #2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 fc6d 	bl	800b69c <SDMMC_CmdBusWidth>
 8009dc2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	e003      	b.n	8009dd6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e001      	b.n	8009dd6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	2300      	movs	r3, #0
 8009dec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f001 fa82 	bl	800b2fe <SDMMC_GetResponse>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e04:	d102      	bne.n	8009e0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e0a:	e02f      	b.n	8009e6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e0c:	f107 030c 	add.w	r3, r7, #12
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f82e 	bl	8009e74 <SD_FindSCR>
 8009e18:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	e023      	b.n	8009e6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d01c      	beq.n	8009e68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e36:	041b      	lsls	r3, r3, #16
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f001 fbeb 	bl	800b616 <SDMMC_CmdAppCommand>
 8009e40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	e00f      	b.n	8009e6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fc22 	bl	800b69c <SDMMC_CmdBusWidth>
 8009e58:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	e003      	b.n	8009e6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e001      	b.n	8009e6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08e      	sub	sp, #56	; 0x38
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e7e:	f7f7 fc69 	bl	8001754 <HAL_GetTick>
 8009e82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2108      	movs	r1, #8
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fa6e 	bl	800b37c <SDMMC_CmdBlockLength>
 8009ea0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	e0ad      	b.n	800a008 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4610      	mov	r0, r2
 8009eba:	f001 fbac 	bl	800b616 <SDMMC_CmdAppCommand>
 8009ebe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	e09e      	b.n	800a008 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009eca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ece:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009ed4:	2330      	movs	r3, #48	; 0x30
 8009ed6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ed8:	2302      	movs	r3, #2
 8009eda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f107 0210 	add.w	r2, r7, #16
 8009eec:	4611      	mov	r1, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f001 fa18 	bl	800b324 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 fbf2 	bl	800b6e2 <SDMMC_CmdSendSCR>
 8009efe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d027      	beq.n	8009f56 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	e07e      	b.n	800a008 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d113      	bne.n	8009f40 <SD_FindSCR+0xcc>
 8009f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d110      	bne.n	8009f40 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 f976 	bl	800b214 <SDMMC_ReadFIFO>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 f96f 	bl	800b214 <SDMMC_ReadFIFO>
 8009f36:	4603      	mov	r3, r0
 8009f38:	60fb      	str	r3, [r7, #12]
      index++;
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f40:	f7f7 fc08 	bl	8001754 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d102      	bne.n	8009f56 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f54:	e058      	b.n	800a008 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009f60:	4013      	ands	r3, r2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0d1      	beq.n	8009f0a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6c:	f003 0308 	and.w	r3, r3, #8
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2208      	movs	r2, #8
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	e043      	b.n	800a008 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2202      	movs	r2, #2
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f96:	2302      	movs	r3, #2
 8009f98:	e036      	b.n	800a008 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2220      	movs	r2, #32
 8009fae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	e029      	b.n	800a008 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a15      	ldr	r2, [pc, #84]	; (800a010 <SD_FindSCR+0x19c>)
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	061a      	lsls	r2, r3, #24
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fc8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	0a1b      	lsrs	r3, r3, #8
 8009fce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fd2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	0e1b      	lsrs	r3, r3, #24
 8009fd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	601a      	str	r2, [r3, #0]
    scr++;
 8009fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	061a      	lsls	r2, r3, #24
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	021b      	lsls	r3, r3, #8
 8009fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ff0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	0a1b      	lsrs	r3, r3, #8
 8009ff6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009ffa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	0e1b      	lsrs	r3, r3, #24
 800a000:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3738      	adds	r7, #56	; 0x38
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	18000f3a 	.word	0x18000f3a

0800a014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e042      	b.n	800a0ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d106      	bne.n	800a03e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7f7 fa07 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2224      	movs	r2, #36	; 0x24
 800a042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 0201 	bic.w	r2, r2, #1
 800a054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f82c 	bl	800a0b4 <UART_SetConfig>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e022      	b.n	800a0ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fd88 	bl	800ab84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689a      	ldr	r2, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f042 0201 	orr.w	r2, r2, #1
 800a0a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fe0f 	bl	800acc8 <UART_CheckIdleState>
 800a0aa:	4603      	mov	r3, r0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b8:	b092      	sub	sp, #72	; 0x48
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	69db      	ldr	r3, [r3, #28]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4bbe      	ldr	r3, [pc, #760]	; (800a3dc <UART_SetConfig+0x328>)
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	6812      	ldr	r2, [r2, #0]
 800a0ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4ab3      	ldr	r2, [pc, #716]	; (800a3e0 <UART_SetConfig+0x32c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d004      	beq.n	800a120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a11c:	4313      	orrs	r3, r2
 800a11e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	4baf      	ldr	r3, [pc, #700]	; (800a3e4 <UART_SetConfig+0x330>)
 800a128:	4013      	ands	r3, r2
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	6812      	ldr	r2, [r2, #0]
 800a12e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a130:	430b      	orrs	r3, r1
 800a132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	f023 010f 	bic.w	r1, r3, #15
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4aa6      	ldr	r2, [pc, #664]	; (800a3e8 <UART_SetConfig+0x334>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d177      	bne.n	800a244 <UART_SetConfig+0x190>
 800a154:	4ba5      	ldr	r3, [pc, #660]	; (800a3ec <UART_SetConfig+0x338>)
 800a156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a15c:	2b28      	cmp	r3, #40	; 0x28
 800a15e:	d86d      	bhi.n	800a23c <UART_SetConfig+0x188>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <UART_SetConfig+0xb4>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a20d 	.word	0x0800a20d
 800a16c:	0800a23d 	.word	0x0800a23d
 800a170:	0800a23d 	.word	0x0800a23d
 800a174:	0800a23d 	.word	0x0800a23d
 800a178:	0800a23d 	.word	0x0800a23d
 800a17c:	0800a23d 	.word	0x0800a23d
 800a180:	0800a23d 	.word	0x0800a23d
 800a184:	0800a23d 	.word	0x0800a23d
 800a188:	0800a215 	.word	0x0800a215
 800a18c:	0800a23d 	.word	0x0800a23d
 800a190:	0800a23d 	.word	0x0800a23d
 800a194:	0800a23d 	.word	0x0800a23d
 800a198:	0800a23d 	.word	0x0800a23d
 800a19c:	0800a23d 	.word	0x0800a23d
 800a1a0:	0800a23d 	.word	0x0800a23d
 800a1a4:	0800a23d 	.word	0x0800a23d
 800a1a8:	0800a21d 	.word	0x0800a21d
 800a1ac:	0800a23d 	.word	0x0800a23d
 800a1b0:	0800a23d 	.word	0x0800a23d
 800a1b4:	0800a23d 	.word	0x0800a23d
 800a1b8:	0800a23d 	.word	0x0800a23d
 800a1bc:	0800a23d 	.word	0x0800a23d
 800a1c0:	0800a23d 	.word	0x0800a23d
 800a1c4:	0800a23d 	.word	0x0800a23d
 800a1c8:	0800a225 	.word	0x0800a225
 800a1cc:	0800a23d 	.word	0x0800a23d
 800a1d0:	0800a23d 	.word	0x0800a23d
 800a1d4:	0800a23d 	.word	0x0800a23d
 800a1d8:	0800a23d 	.word	0x0800a23d
 800a1dc:	0800a23d 	.word	0x0800a23d
 800a1e0:	0800a23d 	.word	0x0800a23d
 800a1e4:	0800a23d 	.word	0x0800a23d
 800a1e8:	0800a22d 	.word	0x0800a22d
 800a1ec:	0800a23d 	.word	0x0800a23d
 800a1f0:	0800a23d 	.word	0x0800a23d
 800a1f4:	0800a23d 	.word	0x0800a23d
 800a1f8:	0800a23d 	.word	0x0800a23d
 800a1fc:	0800a23d 	.word	0x0800a23d
 800a200:	0800a23d 	.word	0x0800a23d
 800a204:	0800a23d 	.word	0x0800a23d
 800a208:	0800a235 	.word	0x0800a235
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a212:	e222      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a214:	2304      	movs	r3, #4
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21a:	e21e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a21c:	2308      	movs	r3, #8
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a222:	e21a      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a224:	2310      	movs	r3, #16
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22a:	e216      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a22c:	2320      	movs	r3, #32
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a232:	e212      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a234:	2340      	movs	r3, #64	; 0x40
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e20e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a23c:	2380      	movs	r3, #128	; 0x80
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e20a      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a69      	ldr	r2, [pc, #420]	; (800a3f0 <UART_SetConfig+0x33c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d130      	bne.n	800a2b0 <UART_SetConfig+0x1fc>
 800a24e:	4b67      	ldr	r3, [pc, #412]	; (800a3ec <UART_SetConfig+0x338>)
 800a250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	2b05      	cmp	r3, #5
 800a258:	d826      	bhi.n	800a2a8 <UART_SetConfig+0x1f4>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <UART_SetConfig+0x1ac>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a279 	.word	0x0800a279
 800a264:	0800a281 	.word	0x0800a281
 800a268:	0800a289 	.word	0x0800a289
 800a26c:	0800a291 	.word	0x0800a291
 800a270:	0800a299 	.word	0x0800a299
 800a274:	0800a2a1 	.word	0x0800a2a1
 800a278:	2300      	movs	r3, #0
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a27e:	e1ec      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a280:	2304      	movs	r3, #4
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a286:	e1e8      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a288:	2308      	movs	r3, #8
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28e:	e1e4      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a290:	2310      	movs	r3, #16
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a296:	e1e0      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a298:	2320      	movs	r3, #32
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29e:	e1dc      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a2a0:	2340      	movs	r3, #64	; 0x40
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a6:	e1d8      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a2a8:	2380      	movs	r3, #128	; 0x80
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ae:	e1d4      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a4f      	ldr	r2, [pc, #316]	; (800a3f4 <UART_SetConfig+0x340>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d130      	bne.n	800a31c <UART_SetConfig+0x268>
 800a2ba:	4b4c      	ldr	r3, [pc, #304]	; (800a3ec <UART_SetConfig+0x338>)
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	2b05      	cmp	r3, #5
 800a2c4:	d826      	bhi.n	800a314 <UART_SetConfig+0x260>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <UART_SetConfig+0x218>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2e5 	.word	0x0800a2e5
 800a2d0:	0800a2ed 	.word	0x0800a2ed
 800a2d4:	0800a2f5 	.word	0x0800a2f5
 800a2d8:	0800a2fd 	.word	0x0800a2fd
 800a2dc:	0800a305 	.word	0x0800a305
 800a2e0:	0800a30d 	.word	0x0800a30d
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e1b6      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a2ec:	2304      	movs	r3, #4
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e1b2      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a2f4:	2308      	movs	r3, #8
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e1ae      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e1aa      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a304:	2320      	movs	r3, #32
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e1a6      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a30c:	2340      	movs	r3, #64	; 0x40
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e1a2      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a314:	2380      	movs	r3, #128	; 0x80
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e19e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a35      	ldr	r2, [pc, #212]	; (800a3f8 <UART_SetConfig+0x344>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d130      	bne.n	800a388 <UART_SetConfig+0x2d4>
 800a326:	4b31      	ldr	r3, [pc, #196]	; (800a3ec <UART_SetConfig+0x338>)
 800a328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32a:	f003 0307 	and.w	r3, r3, #7
 800a32e:	2b05      	cmp	r3, #5
 800a330:	d826      	bhi.n	800a380 <UART_SetConfig+0x2cc>
 800a332:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <UART_SetConfig+0x284>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a351 	.word	0x0800a351
 800a33c:	0800a359 	.word	0x0800a359
 800a340:	0800a361 	.word	0x0800a361
 800a344:	0800a369 	.word	0x0800a369
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a379 	.word	0x0800a379
 800a350:	2300      	movs	r3, #0
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a356:	e180      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a358:	2304      	movs	r3, #4
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a35e:	e17c      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a360:	2308      	movs	r3, #8
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a366:	e178      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a368:	2310      	movs	r3, #16
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36e:	e174      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a370:	2320      	movs	r3, #32
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a376:	e170      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37e:	e16c      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a380:	2380      	movs	r3, #128	; 0x80
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a386:	e168      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a1b      	ldr	r2, [pc, #108]	; (800a3fc <UART_SetConfig+0x348>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d142      	bne.n	800a418 <UART_SetConfig+0x364>
 800a392:	4b16      	ldr	r3, [pc, #88]	; (800a3ec <UART_SetConfig+0x338>)
 800a394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	d838      	bhi.n	800a410 <UART_SetConfig+0x35c>
 800a39e:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <UART_SetConfig+0x2f0>)
 800a3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a4:	0800a3bd 	.word	0x0800a3bd
 800a3a8:	0800a3c5 	.word	0x0800a3c5
 800a3ac:	0800a3cd 	.word	0x0800a3cd
 800a3b0:	0800a3d5 	.word	0x0800a3d5
 800a3b4:	0800a401 	.word	0x0800a401
 800a3b8:	0800a409 	.word	0x0800a409
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c2:	e14a      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ca:	e146      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a3cc:	2308      	movs	r3, #8
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d2:	e142      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a3d4:	2310      	movs	r3, #16
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3da:	e13e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a3dc:	cfff69f3 	.word	0xcfff69f3
 800a3e0:	58000c00 	.word	0x58000c00
 800a3e4:	11fff4ff 	.word	0x11fff4ff
 800a3e8:	40011000 	.word	0x40011000
 800a3ec:	58024400 	.word	0x58024400
 800a3f0:	40004400 	.word	0x40004400
 800a3f4:	40004800 	.word	0x40004800
 800a3f8:	40004c00 	.word	0x40004c00
 800a3fc:	40005000 	.word	0x40005000
 800a400:	2320      	movs	r3, #32
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a406:	e128      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40e:	e124      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a410:	2380      	movs	r3, #128	; 0x80
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a416:	e120      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4acb      	ldr	r2, [pc, #812]	; (800a74c <UART_SetConfig+0x698>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d176      	bne.n	800a510 <UART_SetConfig+0x45c>
 800a422:	4bcb      	ldr	r3, [pc, #812]	; (800a750 <UART_SetConfig+0x69c>)
 800a424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a42a:	2b28      	cmp	r3, #40	; 0x28
 800a42c:	d86c      	bhi.n	800a508 <UART_SetConfig+0x454>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <UART_SetConfig+0x380>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a4d9 	.word	0x0800a4d9
 800a438:	0800a509 	.word	0x0800a509
 800a43c:	0800a509 	.word	0x0800a509
 800a440:	0800a509 	.word	0x0800a509
 800a444:	0800a509 	.word	0x0800a509
 800a448:	0800a509 	.word	0x0800a509
 800a44c:	0800a509 	.word	0x0800a509
 800a450:	0800a509 	.word	0x0800a509
 800a454:	0800a4e1 	.word	0x0800a4e1
 800a458:	0800a509 	.word	0x0800a509
 800a45c:	0800a509 	.word	0x0800a509
 800a460:	0800a509 	.word	0x0800a509
 800a464:	0800a509 	.word	0x0800a509
 800a468:	0800a509 	.word	0x0800a509
 800a46c:	0800a509 	.word	0x0800a509
 800a470:	0800a509 	.word	0x0800a509
 800a474:	0800a4e9 	.word	0x0800a4e9
 800a478:	0800a509 	.word	0x0800a509
 800a47c:	0800a509 	.word	0x0800a509
 800a480:	0800a509 	.word	0x0800a509
 800a484:	0800a509 	.word	0x0800a509
 800a488:	0800a509 	.word	0x0800a509
 800a48c:	0800a509 	.word	0x0800a509
 800a490:	0800a509 	.word	0x0800a509
 800a494:	0800a4f1 	.word	0x0800a4f1
 800a498:	0800a509 	.word	0x0800a509
 800a49c:	0800a509 	.word	0x0800a509
 800a4a0:	0800a509 	.word	0x0800a509
 800a4a4:	0800a509 	.word	0x0800a509
 800a4a8:	0800a509 	.word	0x0800a509
 800a4ac:	0800a509 	.word	0x0800a509
 800a4b0:	0800a509 	.word	0x0800a509
 800a4b4:	0800a4f9 	.word	0x0800a4f9
 800a4b8:	0800a509 	.word	0x0800a509
 800a4bc:	0800a509 	.word	0x0800a509
 800a4c0:	0800a509 	.word	0x0800a509
 800a4c4:	0800a509 	.word	0x0800a509
 800a4c8:	0800a509 	.word	0x0800a509
 800a4cc:	0800a509 	.word	0x0800a509
 800a4d0:	0800a509 	.word	0x0800a509
 800a4d4:	0800a501 	.word	0x0800a501
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e0bc      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e6:	e0b8      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ee:	e0b4      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f6:	e0b0      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fe:	e0ac      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a500:	2340      	movs	r3, #64	; 0x40
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a506:	e0a8      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a508:	2380      	movs	r3, #128	; 0x80
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50e:	e0a4      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a8f      	ldr	r2, [pc, #572]	; (800a754 <UART_SetConfig+0x6a0>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d130      	bne.n	800a57c <UART_SetConfig+0x4c8>
 800a51a:	4b8d      	ldr	r3, [pc, #564]	; (800a750 <UART_SetConfig+0x69c>)
 800a51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	2b05      	cmp	r3, #5
 800a524:	d826      	bhi.n	800a574 <UART_SetConfig+0x4c0>
 800a526:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <UART_SetConfig+0x478>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a545 	.word	0x0800a545
 800a530:	0800a54d 	.word	0x0800a54d
 800a534:	0800a555 	.word	0x0800a555
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a565 	.word	0x0800a565
 800a540:	0800a56d 	.word	0x0800a56d
 800a544:	2300      	movs	r3, #0
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54a:	e086      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a54c:	2304      	movs	r3, #4
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a552:	e082      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a554:	2308      	movs	r3, #8
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55a:	e07e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a55c:	2310      	movs	r3, #16
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a562:	e07a      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a564:	2320      	movs	r3, #32
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56a:	e076      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a56c:	2340      	movs	r3, #64	; 0x40
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a572:	e072      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a574:	2380      	movs	r3, #128	; 0x80
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57a:	e06e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a75      	ldr	r2, [pc, #468]	; (800a758 <UART_SetConfig+0x6a4>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d130      	bne.n	800a5e8 <UART_SetConfig+0x534>
 800a586:	4b72      	ldr	r3, [pc, #456]	; (800a750 <UART_SetConfig+0x69c>)
 800a588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58a:	f003 0307 	and.w	r3, r3, #7
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d826      	bhi.n	800a5e0 <UART_SetConfig+0x52c>
 800a592:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <UART_SetConfig+0x4e4>)
 800a594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a598:	0800a5b1 	.word	0x0800a5b1
 800a59c:	0800a5b9 	.word	0x0800a5b9
 800a5a0:	0800a5c1 	.word	0x0800a5c1
 800a5a4:	0800a5c9 	.word	0x0800a5c9
 800a5a8:	0800a5d1 	.word	0x0800a5d1
 800a5ac:	0800a5d9 	.word	0x0800a5d9
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5b6:	e050      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5be:	e04c      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5c0:	2308      	movs	r3, #8
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c6:	e048      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ce:	e044      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5d0:	2320      	movs	r3, #32
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d6:	e040      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5d8:	2340      	movs	r3, #64	; 0x40
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e03c      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5e0:	2380      	movs	r3, #128	; 0x80
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e038      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a5b      	ldr	r2, [pc, #364]	; (800a75c <UART_SetConfig+0x6a8>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d130      	bne.n	800a654 <UART_SetConfig+0x5a0>
 800a5f2:	4b57      	ldr	r3, [pc, #348]	; (800a750 <UART_SetConfig+0x69c>)
 800a5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	d826      	bhi.n	800a64c <UART_SetConfig+0x598>
 800a5fe:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <UART_SetConfig+0x550>)
 800a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a604:	0800a61d 	.word	0x0800a61d
 800a608:	0800a625 	.word	0x0800a625
 800a60c:	0800a62d 	.word	0x0800a62d
 800a610:	0800a635 	.word	0x0800a635
 800a614:	0800a63d 	.word	0x0800a63d
 800a618:	0800a645 	.word	0x0800a645
 800a61c:	2302      	movs	r3, #2
 800a61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a622:	e01a      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a624:	2304      	movs	r3, #4
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62a:	e016      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a62c:	2308      	movs	r3, #8
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a632:	e012      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a634:	2310      	movs	r3, #16
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63a:	e00e      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a63c:	2320      	movs	r3, #32
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a642:	e00a      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a644:	2340      	movs	r3, #64	; 0x40
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64a:	e006      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a64c:	2380      	movs	r3, #128	; 0x80
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e002      	b.n	800a65a <UART_SetConfig+0x5a6>
 800a654:	2380      	movs	r3, #128	; 0x80
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a3f      	ldr	r2, [pc, #252]	; (800a75c <UART_SetConfig+0x6a8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	f040 80f8 	bne.w	800a856 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a666:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	dc46      	bgt.n	800a6fc <UART_SetConfig+0x648>
 800a66e:	2b02      	cmp	r3, #2
 800a670:	f2c0 8082 	blt.w	800a778 <UART_SetConfig+0x6c4>
 800a674:	3b02      	subs	r3, #2
 800a676:	2b1e      	cmp	r3, #30
 800a678:	d87e      	bhi.n	800a778 <UART_SetConfig+0x6c4>
 800a67a:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <UART_SetConfig+0x5cc>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a703 	.word	0x0800a703
 800a684:	0800a779 	.word	0x0800a779
 800a688:	0800a70b 	.word	0x0800a70b
 800a68c:	0800a779 	.word	0x0800a779
 800a690:	0800a779 	.word	0x0800a779
 800a694:	0800a779 	.word	0x0800a779
 800a698:	0800a71b 	.word	0x0800a71b
 800a69c:	0800a779 	.word	0x0800a779
 800a6a0:	0800a779 	.word	0x0800a779
 800a6a4:	0800a779 	.word	0x0800a779
 800a6a8:	0800a779 	.word	0x0800a779
 800a6ac:	0800a779 	.word	0x0800a779
 800a6b0:	0800a779 	.word	0x0800a779
 800a6b4:	0800a779 	.word	0x0800a779
 800a6b8:	0800a72b 	.word	0x0800a72b
 800a6bc:	0800a779 	.word	0x0800a779
 800a6c0:	0800a779 	.word	0x0800a779
 800a6c4:	0800a779 	.word	0x0800a779
 800a6c8:	0800a779 	.word	0x0800a779
 800a6cc:	0800a779 	.word	0x0800a779
 800a6d0:	0800a779 	.word	0x0800a779
 800a6d4:	0800a779 	.word	0x0800a779
 800a6d8:	0800a779 	.word	0x0800a779
 800a6dc:	0800a779 	.word	0x0800a779
 800a6e0:	0800a779 	.word	0x0800a779
 800a6e4:	0800a779 	.word	0x0800a779
 800a6e8:	0800a779 	.word	0x0800a779
 800a6ec:	0800a779 	.word	0x0800a779
 800a6f0:	0800a779 	.word	0x0800a779
 800a6f4:	0800a779 	.word	0x0800a779
 800a6f8:	0800a76b 	.word	0x0800a76b
 800a6fc:	2b40      	cmp	r3, #64	; 0x40
 800a6fe:	d037      	beq.n	800a770 <UART_SetConfig+0x6bc>
 800a700:	e03a      	b.n	800a778 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a702:	f7fd fb61 	bl	8007dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a708:	e03c      	b.n	800a784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a70a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fd fb70 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a718:	e034      	b.n	800a784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a71a:	f107 0318 	add.w	r3, r7, #24
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fd fcbc 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a728:	e02c      	b.n	800a784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a72a:	4b09      	ldr	r3, [pc, #36]	; (800a750 <UART_SetConfig+0x69c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0320 	and.w	r3, r3, #32
 800a732:	2b00      	cmp	r3, #0
 800a734:	d016      	beq.n	800a764 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a736:	4b06      	ldr	r3, [pc, #24]	; (800a750 <UART_SetConfig+0x69c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	08db      	lsrs	r3, r3, #3
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	4a07      	ldr	r2, [pc, #28]	; (800a760 <UART_SetConfig+0x6ac>)
 800a742:	fa22 f303 	lsr.w	r3, r2, r3
 800a746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a748:	e01c      	b.n	800a784 <UART_SetConfig+0x6d0>
 800a74a:	bf00      	nop
 800a74c:	40011400 	.word	0x40011400
 800a750:	58024400 	.word	0x58024400
 800a754:	40007800 	.word	0x40007800
 800a758:	40007c00 	.word	0x40007c00
 800a75c:	58000c00 	.word	0x58000c00
 800a760:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a764:	4b9d      	ldr	r3, [pc, #628]	; (800a9dc <UART_SetConfig+0x928>)
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a768:	e00c      	b.n	800a784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a76a:	4b9d      	ldr	r3, [pc, #628]	; (800a9e0 <UART_SetConfig+0x92c>)
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a76e:	e009      	b.n	800a784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a776:	e005      	b.n	800a784 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a782:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 81de 	beq.w	800ab48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	4a94      	ldr	r2, [pc, #592]	; (800a9e4 <UART_SetConfig+0x930>)
 800a792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a796:	461a      	mov	r2, r3
 800a798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	4413      	add	r3, r2
 800a7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d305      	bcc.n	800a7bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d903      	bls.n	800a7c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a7c2:	e1c1      	b.n	800ab48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	60bb      	str	r3, [r7, #8]
 800a7ca:	60fa      	str	r2, [r7, #12]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	4a84      	ldr	r2, [pc, #528]	; (800a9e4 <UART_SetConfig+0x930>)
 800a7d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	2200      	movs	r2, #0
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	607a      	str	r2, [r7, #4]
 800a7de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7e6:	f7f5 fd77 	bl	80002d8 <__aeabi_uldivmod>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	f04f 0300 	mov.w	r3, #0
 800a7fa:	020b      	lsls	r3, r1, #8
 800a7fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a800:	0202      	lsls	r2, r0, #8
 800a802:	6979      	ldr	r1, [r7, #20]
 800a804:	6849      	ldr	r1, [r1, #4]
 800a806:	0849      	lsrs	r1, r1, #1
 800a808:	2000      	movs	r0, #0
 800a80a:	460c      	mov	r4, r1
 800a80c:	4605      	mov	r5, r0
 800a80e:	eb12 0804 	adds.w	r8, r2, r4
 800a812:	eb43 0905 	adc.w	r9, r3, r5
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	469a      	mov	sl, r3
 800a81e:	4693      	mov	fp, r2
 800a820:	4652      	mov	r2, sl
 800a822:	465b      	mov	r3, fp
 800a824:	4640      	mov	r0, r8
 800a826:	4649      	mov	r1, r9
 800a828:	f7f5 fd56 	bl	80002d8 <__aeabi_uldivmod>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4613      	mov	r3, r2
 800a832:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a83a:	d308      	bcc.n	800a84e <UART_SetConfig+0x79a>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a842:	d204      	bcs.n	800a84e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a84a:	60da      	str	r2, [r3, #12]
 800a84c:	e17c      	b.n	800ab48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a854:	e178      	b.n	800ab48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a85e:	f040 80c5 	bne.w	800a9ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a862:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a866:	2b20      	cmp	r3, #32
 800a868:	dc48      	bgt.n	800a8fc <UART_SetConfig+0x848>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	db7b      	blt.n	800a966 <UART_SetConfig+0x8b2>
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d879      	bhi.n	800a966 <UART_SetConfig+0x8b2>
 800a872:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <UART_SetConfig+0x7c4>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a903 	.word	0x0800a903
 800a87c:	0800a90b 	.word	0x0800a90b
 800a880:	0800a967 	.word	0x0800a967
 800a884:	0800a967 	.word	0x0800a967
 800a888:	0800a913 	.word	0x0800a913
 800a88c:	0800a967 	.word	0x0800a967
 800a890:	0800a967 	.word	0x0800a967
 800a894:	0800a967 	.word	0x0800a967
 800a898:	0800a923 	.word	0x0800a923
 800a89c:	0800a967 	.word	0x0800a967
 800a8a0:	0800a967 	.word	0x0800a967
 800a8a4:	0800a967 	.word	0x0800a967
 800a8a8:	0800a967 	.word	0x0800a967
 800a8ac:	0800a967 	.word	0x0800a967
 800a8b0:	0800a967 	.word	0x0800a967
 800a8b4:	0800a967 	.word	0x0800a967
 800a8b8:	0800a933 	.word	0x0800a933
 800a8bc:	0800a967 	.word	0x0800a967
 800a8c0:	0800a967 	.word	0x0800a967
 800a8c4:	0800a967 	.word	0x0800a967
 800a8c8:	0800a967 	.word	0x0800a967
 800a8cc:	0800a967 	.word	0x0800a967
 800a8d0:	0800a967 	.word	0x0800a967
 800a8d4:	0800a967 	.word	0x0800a967
 800a8d8:	0800a967 	.word	0x0800a967
 800a8dc:	0800a967 	.word	0x0800a967
 800a8e0:	0800a967 	.word	0x0800a967
 800a8e4:	0800a967 	.word	0x0800a967
 800a8e8:	0800a967 	.word	0x0800a967
 800a8ec:	0800a967 	.word	0x0800a967
 800a8f0:	0800a967 	.word	0x0800a967
 800a8f4:	0800a967 	.word	0x0800a967
 800a8f8:	0800a959 	.word	0x0800a959
 800a8fc:	2b40      	cmp	r3, #64	; 0x40
 800a8fe:	d02e      	beq.n	800a95e <UART_SetConfig+0x8aa>
 800a900:	e031      	b.n	800a966 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a902:	f7fb fa6b 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 800a906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a908:	e033      	b.n	800a972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a90a:	f7fb fa7d 	bl	8005e08 <HAL_RCC_GetPCLK2Freq>
 800a90e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a910:	e02f      	b.n	800a972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a916:	4618      	mov	r0, r3
 800a918:	f7fd fa6c 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a920:	e027      	b.n	800a972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a922:	f107 0318 	add.w	r3, r7, #24
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd fbb8 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a930:	e01f      	b.n	800a972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a932:	4b2d      	ldr	r3, [pc, #180]	; (800a9e8 <UART_SetConfig+0x934>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0320 	and.w	r3, r3, #32
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d009      	beq.n	800a952 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a93e:	4b2a      	ldr	r3, [pc, #168]	; (800a9e8 <UART_SetConfig+0x934>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	08db      	lsrs	r3, r3, #3
 800a944:	f003 0303 	and.w	r3, r3, #3
 800a948:	4a24      	ldr	r2, [pc, #144]	; (800a9dc <UART_SetConfig+0x928>)
 800a94a:	fa22 f303 	lsr.w	r3, r2, r3
 800a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a950:	e00f      	b.n	800a972 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a952:	4b22      	ldr	r3, [pc, #136]	; (800a9dc <UART_SetConfig+0x928>)
 800a954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a956:	e00c      	b.n	800a972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a958:	4b21      	ldr	r3, [pc, #132]	; (800a9e0 <UART_SetConfig+0x92c>)
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a95c:	e009      	b.n	800a972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a95e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a964:	e005      	b.n	800a972 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a970:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 80e7 	beq.w	800ab48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	4a19      	ldr	r2, [pc, #100]	; (800a9e4 <UART_SetConfig+0x930>)
 800a980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a984:	461a      	mov	r2, r3
 800a986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a988:	fbb3 f3f2 	udiv	r3, r3, r2
 800a98c:	005a      	lsls	r2, r3, #1
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	085b      	lsrs	r3, r3, #1
 800a994:	441a      	add	r2, r3
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a99e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	2b0f      	cmp	r3, #15
 800a9a4:	d916      	bls.n	800a9d4 <UART_SetConfig+0x920>
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ac:	d212      	bcs.n	800a9d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	f023 030f 	bic.w	r3, r3, #15
 800a9b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	085b      	lsrs	r3, r3, #1
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a9d0:	60da      	str	r2, [r3, #12]
 800a9d2:	e0b9      	b.n	800ab48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9da:	e0b5      	b.n	800ab48 <UART_SetConfig+0xa94>
 800a9dc:	03d09000 	.word	0x03d09000
 800a9e0:	003d0900 	.word	0x003d0900
 800a9e4:	0800f740 	.word	0x0800f740
 800a9e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9f0:	2b20      	cmp	r3, #32
 800a9f2:	dc49      	bgt.n	800aa88 <UART_SetConfig+0x9d4>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	db7c      	blt.n	800aaf2 <UART_SetConfig+0xa3e>
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	d87a      	bhi.n	800aaf2 <UART_SetConfig+0xa3e>
 800a9fc:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <UART_SetConfig+0x950>)
 800a9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa02:	bf00      	nop
 800aa04:	0800aa8f 	.word	0x0800aa8f
 800aa08:	0800aa97 	.word	0x0800aa97
 800aa0c:	0800aaf3 	.word	0x0800aaf3
 800aa10:	0800aaf3 	.word	0x0800aaf3
 800aa14:	0800aa9f 	.word	0x0800aa9f
 800aa18:	0800aaf3 	.word	0x0800aaf3
 800aa1c:	0800aaf3 	.word	0x0800aaf3
 800aa20:	0800aaf3 	.word	0x0800aaf3
 800aa24:	0800aaaf 	.word	0x0800aaaf
 800aa28:	0800aaf3 	.word	0x0800aaf3
 800aa2c:	0800aaf3 	.word	0x0800aaf3
 800aa30:	0800aaf3 	.word	0x0800aaf3
 800aa34:	0800aaf3 	.word	0x0800aaf3
 800aa38:	0800aaf3 	.word	0x0800aaf3
 800aa3c:	0800aaf3 	.word	0x0800aaf3
 800aa40:	0800aaf3 	.word	0x0800aaf3
 800aa44:	0800aabf 	.word	0x0800aabf
 800aa48:	0800aaf3 	.word	0x0800aaf3
 800aa4c:	0800aaf3 	.word	0x0800aaf3
 800aa50:	0800aaf3 	.word	0x0800aaf3
 800aa54:	0800aaf3 	.word	0x0800aaf3
 800aa58:	0800aaf3 	.word	0x0800aaf3
 800aa5c:	0800aaf3 	.word	0x0800aaf3
 800aa60:	0800aaf3 	.word	0x0800aaf3
 800aa64:	0800aaf3 	.word	0x0800aaf3
 800aa68:	0800aaf3 	.word	0x0800aaf3
 800aa6c:	0800aaf3 	.word	0x0800aaf3
 800aa70:	0800aaf3 	.word	0x0800aaf3
 800aa74:	0800aaf3 	.word	0x0800aaf3
 800aa78:	0800aaf3 	.word	0x0800aaf3
 800aa7c:	0800aaf3 	.word	0x0800aaf3
 800aa80:	0800aaf3 	.word	0x0800aaf3
 800aa84:	0800aae5 	.word	0x0800aae5
 800aa88:	2b40      	cmp	r3, #64	; 0x40
 800aa8a:	d02e      	beq.n	800aaea <UART_SetConfig+0xa36>
 800aa8c:	e031      	b.n	800aaf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa8e:	f7fb f9a5 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 800aa92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa94:	e033      	b.n	800aafe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa96:	f7fb f9b7 	bl	8005e08 <HAL_RCC_GetPCLK2Freq>
 800aa9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa9c:	e02f      	b.n	800aafe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fd f9a6 	bl	8007df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaac:	e027      	b.n	800aafe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaae:	f107 0318 	add.w	r3, r7, #24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fd faf2 	bl	800809c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aabc:	e01f      	b.n	800aafe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aabe:	4b2d      	ldr	r3, [pc, #180]	; (800ab74 <UART_SetConfig+0xac0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0320 	and.w	r3, r3, #32
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d009      	beq.n	800aade <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aaca:	4b2a      	ldr	r3, [pc, #168]	; (800ab74 <UART_SetConfig+0xac0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	08db      	lsrs	r3, r3, #3
 800aad0:	f003 0303 	and.w	r3, r3, #3
 800aad4:	4a28      	ldr	r2, [pc, #160]	; (800ab78 <UART_SetConfig+0xac4>)
 800aad6:	fa22 f303 	lsr.w	r3, r2, r3
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aadc:	e00f      	b.n	800aafe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aade:	4b26      	ldr	r3, [pc, #152]	; (800ab78 <UART_SetConfig+0xac4>)
 800aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae2:	e00c      	b.n	800aafe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <UART_SetConfig+0xac8>)
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae8:	e009      	b.n	800aafe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf0:	e005      	b.n	800aafe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aafc:	bf00      	nop
    }

    if (pclk != 0U)
 800aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d021      	beq.n	800ab48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	4a1d      	ldr	r2, [pc, #116]	; (800ab80 <UART_SetConfig+0xacc>)
 800ab0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	085b      	lsrs	r3, r3, #1
 800ab1c:	441a      	add	r2, r3
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	2b0f      	cmp	r3, #15
 800ab2c:	d909      	bls.n	800ab42 <UART_SetConfig+0xa8e>
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab34:	d205      	bcs.n	800ab42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60da      	str	r2, [r3, #12]
 800ab40:	e002      	b.n	800ab48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2200      	movs	r2, #0
 800ab62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ab64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3748      	adds	r7, #72	; 0x48
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab72:	bf00      	nop
 800ab74:	58024400 	.word	0x58024400
 800ab78:	03d09000 	.word	0x03d09000
 800ab7c:	003d0900 	.word	0x003d0900
 800ab80:	0800f740 	.word	0x0800f740

0800ab84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00a      	beq.n	800abae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00a      	beq.n	800abf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	f003 0308 	and.w	r3, r3, #8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00a      	beq.n	800ac58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d01a      	beq.n	800ac9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac82:	d10a      	bne.n	800ac9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	605a      	str	r2, [r3, #4]
  }
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b098      	sub	sp, #96	; 0x60
 800accc:	af02      	add	r7, sp, #8
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acd8:	f7f6 fd3c 	bl	8001754 <HAL_GetTick>
 800acdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0308 	and.w	r3, r3, #8
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d12f      	bne.n	800ad4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf4:	2200      	movs	r2, #0
 800acf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f88e 	bl	800ae1c <UART_WaitOnFlagUntilTimeout>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d022      	beq.n	800ad4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad1a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	461a      	mov	r2, r3
 800ad22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad24:	647b      	str	r3, [r7, #68]	; 0x44
 800ad26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad2c:	e841 2300 	strex	r3, r2, [r1]
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e6      	bne.n	800ad06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e063      	b.n	800ae14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d149      	bne.n	800adee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad62:	2200      	movs	r2, #0
 800ad64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f857 	bl	800ae1c <UART_WaitOnFlagUntilTimeout>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d03c      	beq.n	800adee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	623b      	str	r3, [r7, #32]
   return(result);
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad92:	633b      	str	r3, [r7, #48]	; 0x30
 800ad94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e6      	bne.n	800ad74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3308      	adds	r3, #8
 800adac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f023 0301 	bic.w	r3, r3, #1
 800adbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3308      	adds	r3, #8
 800adc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adc6:	61fa      	str	r2, [r7, #28]
 800adc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	69b9      	ldr	r1, [r7, #24]
 800adcc:	69fa      	ldr	r2, [r7, #28]
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	617b      	str	r3, [r7, #20]
   return(result);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e5      	bne.n	800ada6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2220      	movs	r2, #32
 800adde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e012      	b.n	800ae14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3758      	adds	r7, #88	; 0x58
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae2c:	e049      	b.n	800aec2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae34:	d045      	beq.n	800aec2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae36:	f7f6 fc8d 	bl	8001754 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	69ba      	ldr	r2, [r7, #24]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d302      	bcc.n	800ae4c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e048      	b.n	800aee2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0304 	and.w	r3, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d031      	beq.n	800aec2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	69db      	ldr	r3, [r3, #28]
 800ae64:	f003 0308 	and.w	r3, r3, #8
 800ae68:	2b08      	cmp	r3, #8
 800ae6a:	d110      	bne.n	800ae8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2208      	movs	r2, #8
 800ae72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 f839 	bl	800aeec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e029      	b.n	800aee2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae9c:	d111      	bne.n	800aec2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 f81f 	bl	800aeec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e00f      	b.n	800aee2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	69da      	ldr	r2, [r3, #28]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	4013      	ands	r3, r2
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	429a      	cmp	r2, r3
 800aed0:	bf0c      	ite	eq
 800aed2:	2301      	moveq	r3, #1
 800aed4:	2300      	movne	r3, #0
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	461a      	mov	r2, r3
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d0a6      	beq.n	800ae2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
	...

0800aeec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b095      	sub	sp, #84	; 0x54
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af12:	643b      	str	r3, [r7, #64]	; 0x40
 800af14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e6      	bne.n	800aef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	61fb      	str	r3, [r7, #28]
   return(result);
 800af36:	69fa      	ldr	r2, [r7, #28]
 800af38:	4b1e      	ldr	r3, [pc, #120]	; (800afb4 <UART_EndRxTransfer+0xc8>)
 800af3a:	4013      	ands	r3, r2
 800af3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e5      	bne.n	800af26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d118      	bne.n	800af94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f023 0310 	bic.w	r3, r3, #16
 800af76:	647b      	str	r3, [r7, #68]	; 0x44
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	613b      	str	r3, [r7, #16]
   return(result);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e6      	bne.n	800af62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800afa8:	bf00      	nop
 800afaa:	3754      	adds	r7, #84	; 0x54
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	effffffe 	.word	0xeffffffe

0800afb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d101      	bne.n	800afce <HAL_UARTEx_DisableFifoMode+0x16>
 800afca:	2302      	movs	r3, #2
 800afcc:	e027      	b.n	800b01e <HAL_UARTEx_DisableFifoMode+0x66>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2224      	movs	r2, #36	; 0x24
 800afda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f022 0201 	bic.w	r2, r2, #1
 800aff4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800affc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d101      	bne.n	800b042 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b03e:	2302      	movs	r3, #2
 800b040:	e02d      	b.n	800b09e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2224      	movs	r2, #36	; 0x24
 800b04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f022 0201 	bic.w	r2, r2, #1
 800b068:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f850 	bl	800b124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d101      	bne.n	800b0be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e02d      	b.n	800b11a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2224      	movs	r2, #36	; 0x24
 800b0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0201 	bic.w	r2, r2, #1
 800b0e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f812 	bl	800b124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2220      	movs	r2, #32
 800b10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b130:	2b00      	cmp	r3, #0
 800b132:	d108      	bne.n	800b146 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b144:	e031      	b.n	800b1aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b146:	2310      	movs	r3, #16
 800b148:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b14a:	2310      	movs	r3, #16
 800b14c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	0e5b      	lsrs	r3, r3, #25
 800b156:	b2db      	uxtb	r3, r3
 800b158:	f003 0307 	and.w	r3, r3, #7
 800b15c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	0f5b      	lsrs	r3, r3, #29
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
 800b170:	7b3a      	ldrb	r2, [r7, #12]
 800b172:	4911      	ldr	r1, [pc, #68]	; (800b1b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b174:	5c8a      	ldrb	r2, [r1, r2]
 800b176:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b17a:	7b3a      	ldrb	r2, [r7, #12]
 800b17c:	490f      	ldr	r1, [pc, #60]	; (800b1bc <UARTEx_SetNbDataToProcess+0x98>)
 800b17e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b180:	fb93 f3f2 	sdiv	r3, r3, r2
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	7b7a      	ldrb	r2, [r7, #13]
 800b190:	4909      	ldr	r1, [pc, #36]	; (800b1b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b192:	5c8a      	ldrb	r2, [r1, r2]
 800b194:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b198:	7b7a      	ldrb	r2, [r7, #13]
 800b19a:	4908      	ldr	r1, [pc, #32]	; (800b1bc <UARTEx_SetNbDataToProcess+0x98>)
 800b19c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b19e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	0800f758 	.word	0x0800f758
 800b1bc:	0800f760 	.word	0x0800f760

0800b1c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	f107 001c 	add.w	r0, r7, #28
 800b1ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b1d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b1da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b1de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b1e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b1e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	4b07      	ldr	r3, [pc, #28]	; (800b210 <SDMMC_Init+0x50>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	b004      	add	sp, #16
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	ffc02c00 	.word	0xffc02c00

0800b214 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f043 0203 	orr.w	r2, r3, #3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0303 	and.w	r3, r3, #3
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
	...

0800b290 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b2b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b2ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	4b06      	ldr	r3, [pc, #24]	; (800b2e0 <SDMMC_SendCommand+0x50>)
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	fffee0c0 	.word	0xfffee0c0

0800b2e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	b2db      	uxtb	r3, r3
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	3314      	adds	r3, #20
 800b30c:	461a      	mov	r2, r3
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	4413      	add	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b34a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b350:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b356:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b362:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	431a      	orrs	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0

}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b38a:	2310      	movs	r3, #16
 800b38c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b38e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b39c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b39e:	f107 0308 	add.w	r3, r7, #8
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff ff73 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ae:	2110      	movs	r1, #16
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fa5f 	bl	800b874 <SDMMC_GetCmdResp1>
 800b3b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3720      	adds	r7, #32
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b088      	sub	sp, #32
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3d0:	2311      	movs	r3, #17
 800b3d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3e4:	f107 0308 	add.w	r3, r7, #8
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff ff50 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f4:	2111      	movs	r1, #17
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fa3c 	bl	800b874 <SDMMC_GetCmdResp1>
 800b3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3720      	adds	r7, #32
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b416:	2312      	movs	r3, #18
 800b418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b41a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b41e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b420:	2300      	movs	r3, #0
 800b422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b42a:	f107 0308 	add.w	r3, r7, #8
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff ff2d 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b436:	f241 3288 	movw	r2, #5000	; 0x1388
 800b43a:	2112      	movs	r1, #18
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fa19 	bl	800b874 <SDMMC_GetCmdResp1>
 800b442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b444:	69fb      	ldr	r3, [r7, #28]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3720      	adds	r7, #32
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b088      	sub	sp, #32
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b45c:	2318      	movs	r3, #24
 800b45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b460:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b470:	f107 0308 	add.w	r3, r7, #8
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff ff0a 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b480:	2118      	movs	r1, #24
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f9f6 	bl	800b874 <SDMMC_GetCmdResp1>
 800b488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b48a:	69fb      	ldr	r3, [r7, #28]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3720      	adds	r7, #32
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4a2:	2319      	movs	r3, #25
 800b4a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4b6:	f107 0308 	add.w	r3, r7, #8
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff fee7 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c6:	2119      	movs	r1, #25
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f9d3 	bl	800b874 <SDMMC_GetCmdResp1>
 800b4ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4d0:	69fb      	ldr	r3, [r7, #28]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3720      	adds	r7, #32
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b088      	sub	sp, #32
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4e8:	230c      	movs	r3, #12
 800b4ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4fa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b514:	f107 0308 	add.w	r3, r7, #8
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff feb8 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b520:	4a0b      	ldr	r2, [pc, #44]	; (800b550 <SDMMC_CmdStopTransfer+0x74>)
 800b522:	210c      	movs	r1, #12
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f9a5 	bl	800b874 <SDMMC_GetCmdResp1>
 800b52a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b53e:	d101      	bne.n	800b544 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b544:	69fb      	ldr	r3, [r7, #28]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	05f5e100 	.word	0x05f5e100

0800b554 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b562:	2307      	movs	r3, #7
 800b564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b56c:	2300      	movs	r3, #0
 800b56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b576:	f107 0308 	add.w	r3, r7, #8
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff fe87 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b582:	f241 3288 	movw	r2, #5000	; 0x1388
 800b586:	2107      	movs	r1, #7
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f973 	bl	800b874 <SDMMC_GetCmdResp1>
 800b58e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b590:	69fb      	ldr	r3, [r7, #28]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3720      	adds	r7, #32
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b088      	sub	sp, #32
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b8:	f107 0308 	add.w	r3, r7, #8
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff fe66 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fb97 	bl	800bcf8 <SDMMC_GetCmdError>
 800b5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3720      	adds	r7, #32
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b088      	sub	sp, #32
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5e4:	2308      	movs	r3, #8
 800b5e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5f8:	f107 0308 	add.w	r3, r7, #8
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff fe46 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fb29 	bl	800bc5c <SDMMC_GetCmdResp7>
 800b60a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b60c:	69fb      	ldr	r3, [r7, #28]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3720      	adds	r7, #32
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b088      	sub	sp, #32
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b624:	2337      	movs	r3, #55	; 0x37
 800b626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b62c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b62e:	2300      	movs	r3, #0
 800b630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b638:	f107 0308 	add.w	r3, r7, #8
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fe26 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b644:	f241 3288 	movw	r2, #5000	; 0x1388
 800b648:	2137      	movs	r1, #55	; 0x37
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f912 	bl	800b874 <SDMMC_GetCmdResp1>
 800b650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b652:	69fb      	ldr	r3, [r7, #28]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3720      	adds	r7, #32
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b66a:	2329      	movs	r3, #41	; 0x29
 800b66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b66e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b67c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b67e:	f107 0308 	add.w	r3, r7, #8
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fe03 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fa2e 	bl	800baec <SDMMC_GetCmdResp3>
 800b690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b692:	69fb      	ldr	r3, [r7, #28]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6aa:	2306      	movs	r3, #6
 800b6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6be:	f107 0308 	add.w	r3, r7, #8
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff fde3 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ce:	2106      	movs	r1, #6
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f8cf 	bl	800b874 <SDMMC_GetCmdResp1>
 800b6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3720      	adds	r7, #32
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b088      	sub	sp, #32
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6ee:	2333      	movs	r3, #51	; 0x33
 800b6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b702:	f107 0308 	add.w	r3, r7, #8
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff fdc1 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b70e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b712:	2133      	movs	r1, #51	; 0x33
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f8ad 	bl	800b874 <SDMMC_GetCmdResp1>
 800b71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b71c:	69fb      	ldr	r3, [r7, #28]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b088      	sub	sp, #32
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b732:	2302      	movs	r3, #2
 800b734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b73c:	2300      	movs	r3, #0
 800b73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fd9f 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f980 	bl	800ba58 <SDMMC_GetCmdResp2>
 800b758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75a:	69fb      	ldr	r3, [r7, #28]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3720      	adds	r7, #32
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b772:	2309      	movs	r3, #9
 800b774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b77a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b77c:	2300      	movs	r3, #0
 800b77e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b786:	f107 0308 	add.w	r3, r7, #8
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff fd7f 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f960 	bl	800ba58 <SDMMC_GetCmdResp2>
 800b798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b79a:	69fb      	ldr	r3, [r7, #28]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3720      	adds	r7, #32
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b088      	sub	sp, #32
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c6:	f107 0308 	add.w	r3, r7, #8
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7ff fd5f 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	2103      	movs	r1, #3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f9c8 	bl	800bb6c <SDMMC_GetCmdResp6>
 800b7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7de:	69fb      	ldr	r3, [r7, #28]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7f6:	230d      	movs	r3, #13
 800b7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff fd3d 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b816:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81a:	210d      	movs	r1, #13
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f829 	bl	800b874 <SDMMC_GetCmdResp1>
 800b822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b824:	69fb      	ldr	r3, [r7, #28]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3720      	adds	r7, #32
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b088      	sub	sp, #32
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b83a:	230d      	movs	r3, #13
 800b83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b83e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b84c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b84e:	f107 0308 	add.w	r3, r7, #8
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff fd1b 	bl	800b290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b85e:	210d      	movs	r1, #13
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f807 	bl	800b874 <SDMMC_GetCmdResp1>
 800b866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b868:	69fb      	ldr	r3, [r7, #28]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3720      	adds	r7, #32
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	460b      	mov	r3, r1
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b882:	4b70      	ldr	r3, [pc, #448]	; (800ba44 <SDMMC_GetCmdResp1+0x1d0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a70      	ldr	r2, [pc, #448]	; (800ba48 <SDMMC_GetCmdResp1+0x1d4>)
 800b888:	fba2 2303 	umull	r2, r3, r2, r3
 800b88c:	0a5a      	lsrs	r2, r3, #9
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	fb02 f303 	mul.w	r3, r2, r3
 800b894:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	1e5a      	subs	r2, r3, #1
 800b89a:	61fa      	str	r2, [r7, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8a4:	e0c9      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8aa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	4b67      	ldr	r3, [pc, #412]	; (800ba4c <SDMMC_GetCmdResp1+0x1d8>)
 800b8b0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0ef      	beq.n	800b896 <SDMMC_GetCmdResp1+0x22>
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1ea      	bne.n	800b896 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	f003 0304 	and.w	r3, r3, #4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d004      	beq.n	800b8d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8d2:	2304      	movs	r3, #4
 800b8d4:	e0b1      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d004      	beq.n	800b8ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e0a6      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4a58      	ldr	r2, [pc, #352]	; (800ba50 <SDMMC_GetCmdResp1+0x1dc>)
 800b8f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff fcf6 	bl	800b2e4 <SDMMC_GetCommandResponse>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d001      	beq.n	800b906 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b902:	2301      	movs	r3, #1
 800b904:	e099      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b906:	2100      	movs	r1, #0
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff fcf8 	bl	800b2fe <SDMMC_GetResponse>
 800b90e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	4b50      	ldr	r3, [pc, #320]	; (800ba54 <SDMMC_GetCmdResp1+0x1e0>)
 800b914:	4013      	ands	r3, r2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	e08d      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	da02      	bge.n	800b92a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b928:	e087      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b934:	2340      	movs	r3, #64	; 0x40
 800b936:	e080      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	e079      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b950:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b954:	e071      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b960:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b964:	e069      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b974:	e061      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b984:	e059      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b994:	e051      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9a4:	e049      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9b4:	e041      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9c4:	e039      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9d4:	e031      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9e4:	e029      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9f4:	e021      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba04:	e019      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba14:	e011      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba24:	e009      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f003 0308 	and.w	r3, r3, #8
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba34:	e001      	b.n	800ba3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	24000000 	.word	0x24000000
 800ba48:	10624dd3 	.word	0x10624dd3
 800ba4c:	00200045 	.word	0x00200045
 800ba50:	002000c5 	.word	0x002000c5
 800ba54:	fdffe008 	.word	0xfdffe008

0800ba58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba60:	4b1f      	ldr	r3, [pc, #124]	; (800bae0 <SDMMC_GetCmdResp2+0x88>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1f      	ldr	r2, [pc, #124]	; (800bae4 <SDMMC_GetCmdResp2+0x8c>)
 800ba66:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6a:	0a5b      	lsrs	r3, r3, #9
 800ba6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	1e5a      	subs	r2, r3, #1
 800ba7a:	60fa      	str	r2, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba84:	e026      	b.n	800bad4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0ef      	beq.n	800ba76 <SDMMC_GetCmdResp2+0x1e>
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1ea      	bne.n	800ba76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2204      	movs	r2, #4
 800bab0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bab2:	2304      	movs	r3, #4
 800bab4:	e00e      	b.n	800bad4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bac8:	2301      	movs	r3, #1
 800baca:	e003      	b.n	800bad4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a06      	ldr	r2, [pc, #24]	; (800bae8 <SDMMC_GetCmdResp2+0x90>)
 800bad0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	24000000 	.word	0x24000000
 800bae4:	10624dd3 	.word	0x10624dd3
 800bae8:	002000c5 	.word	0x002000c5

0800baec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800baf4:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <SDMMC_GetCmdResp3+0x74>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a1a      	ldr	r2, [pc, #104]	; (800bb64 <SDMMC_GetCmdResp3+0x78>)
 800bafa:	fba2 2303 	umull	r2, r3, r2, r3
 800bafe:	0a5b      	lsrs	r3, r3, #9
 800bb00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb04:	fb02 f303 	mul.w	r3, r2, r3
 800bb08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	1e5a      	subs	r2, r3, #1
 800bb0e:	60fa      	str	r2, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb18:	e01b      	b.n	800bb52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0ef      	beq.n	800bb0a <SDMMC_GetCmdResp3+0x1e>
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1ea      	bne.n	800bb0a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d004      	beq.n	800bb4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2204      	movs	r2, #4
 800bb44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb46:	2304      	movs	r3, #4
 800bb48:	e003      	b.n	800bb52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a06      	ldr	r2, [pc, #24]	; (800bb68 <SDMMC_GetCmdResp3+0x7c>)
 800bb4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	24000000 	.word	0x24000000
 800bb64:	10624dd3 	.word	0x10624dd3
 800bb68:	002000c5 	.word	0x002000c5

0800bb6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	460b      	mov	r3, r1
 800bb76:	607a      	str	r2, [r7, #4]
 800bb78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb7a:	4b35      	ldr	r3, [pc, #212]	; (800bc50 <SDMMC_GetCmdResp6+0xe4>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a35      	ldr	r2, [pc, #212]	; (800bc54 <SDMMC_GetCmdResp6+0xe8>)
 800bb80:	fba2 2303 	umull	r2, r3, r2, r3
 800bb84:	0a5b      	lsrs	r3, r3, #9
 800bb86:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb8a:	fb02 f303 	mul.w	r3, r2, r3
 800bb8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	1e5a      	subs	r2, r3, #1
 800bb94:	61fa      	str	r2, [r7, #28]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d102      	bne.n	800bba0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb9e:	e052      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d0ef      	beq.n	800bb90 <SDMMC_GetCmdResp6+0x24>
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1ea      	bne.n	800bb90 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbe:	f003 0304 	and.w	r3, r3, #4
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d004      	beq.n	800bbd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2204      	movs	r2, #4
 800bbca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbcc:	2304      	movs	r3, #4
 800bbce:	e03a      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d004      	beq.n	800bbe6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e02f      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fb7c 	bl	800b2e4 <SDMMC_GetCommandResponse>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	7afb      	ldrb	r3, [r7, #11]
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d001      	beq.n	800bbfa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e025      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4a16      	ldr	r2, [pc, #88]	; (800bc58 <SDMMC_GetCmdResp6+0xec>)
 800bbfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc00:	2100      	movs	r1, #0
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff fb7b 	bl	800b2fe <SDMMC_GetResponse>
 800bc08:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d106      	bne.n	800bc22 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	0c1b      	lsrs	r3, r3, #16
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e011      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc30:	e009      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc40:	e001      	b.n	800bc46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	24000000 	.word	0x24000000
 800bc54:	10624dd3 	.word	0x10624dd3
 800bc58:	002000c5 	.word	0x002000c5

0800bc5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc64:	4b22      	ldr	r3, [pc, #136]	; (800bcf0 <SDMMC_GetCmdResp7+0x94>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a22      	ldr	r2, [pc, #136]	; (800bcf4 <SDMMC_GetCmdResp7+0x98>)
 800bc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc6e:	0a5b      	lsrs	r3, r3, #9
 800bc70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc74:	fb02 f303 	mul.w	r3, r2, r3
 800bc78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	1e5a      	subs	r2, r3, #1
 800bc7e:	60fa      	str	r2, [r7, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc88:	e02c      	b.n	800bce4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0ef      	beq.n	800bc7a <SDMMC_GetCmdResp7+0x1e>
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1ea      	bne.n	800bc7a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d004      	beq.n	800bcba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2204      	movs	r2, #4
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcb6:	2304      	movs	r3, #4
 800bcb8:	e014      	b.n	800bce4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e009      	b.n	800bce4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2240      	movs	r2, #64	; 0x40
 800bce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bce2:	2300      	movs	r3, #0

}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	24000000 	.word	0x24000000
 800bcf4:	10624dd3 	.word	0x10624dd3

0800bcf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd00:	4b11      	ldr	r3, [pc, #68]	; (800bd48 <SDMMC_GetCmdError+0x50>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a11      	ldr	r2, [pc, #68]	; (800bd4c <SDMMC_GetCmdError+0x54>)
 800bd06:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0a:	0a5b      	lsrs	r3, r3, #9
 800bd0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd10:	fb02 f303 	mul.w	r3, r2, r3
 800bd14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	1e5a      	subs	r2, r3, #1
 800bd1a:	60fa      	str	r2, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd24:	e009      	b.n	800bd3a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0f1      	beq.n	800bd16 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a06      	ldr	r2, [pc, #24]	; (800bd50 <SDMMC_GetCmdError+0x58>)
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	24000000 	.word	0x24000000
 800bd4c:	10624dd3 	.word	0x10624dd3
 800bd50:	002000c5 	.word	0x002000c5

0800bd54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd58:	4904      	ldr	r1, [pc, #16]	; (800bd6c <MX_FATFS_Init+0x18>)
 800bd5a:	4805      	ldr	r0, [pc, #20]	; (800bd70 <MX_FATFS_Init+0x1c>)
 800bd5c:	f003 fb46 	bl	800f3ec <FATFS_LinkDriver>
 800bd60:	4603      	mov	r3, r0
 800bd62:	461a      	mov	r2, r3
 800bd64:	4b03      	ldr	r3, [pc, #12]	; (800bd74 <MX_FATFS_Init+0x20>)
 800bd66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd68:	bf00      	nop
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	24001730 	.word	0x24001730
 800bd70:	0800f768 	.word	0x0800f768
 800bd74:	2400172c 	.word	0x2400172c

0800bd78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd92:	f000 f879 	bl	800be88 <BSP_SD_IsDetected>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d001      	beq.n	800bda0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e012      	b.n	800bdc6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bda0:	480b      	ldr	r0, [pc, #44]	; (800bdd0 <BSP_SD_Init+0x48>)
 800bda2:	f7fc fd85 	bl	80088b0 <HAL_SD_Init>
 800bda6:	4603      	mov	r3, r0
 800bda8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d109      	bne.n	800bdc4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bdb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bdb4:	4806      	ldr	r0, [pc, #24]	; (800bdd0 <BSP_SD_Init+0x48>)
 800bdb6:	f7fd fc41 	bl	800963c <HAL_SD_ConfigWideBusOperation>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	24000608 	.word	0x24000608

0800bdd4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	4806      	ldr	r0, [pc, #24]	; (800be0c <BSP_SD_ReadBlocks+0x38>)
 800bdf2:	f7fc fe7d 	bl	8008af0 <HAL_SD_ReadBlocks>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be00:	7dfb      	ldrb	r3, [r7, #23]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	24000608 	.word	0x24000608

0800be10 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af02      	add	r7, sp, #8
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	68f9      	ldr	r1, [r7, #12]
 800be2c:	4806      	ldr	r0, [pc, #24]	; (800be48 <BSP_SD_WriteBlocks+0x38>)
 800be2e:	f7fc ffe9 	bl	8008e04 <HAL_SD_WriteBlocks>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	24000608 	.word	0x24000608

0800be4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be50:	4805      	ldr	r0, [pc, #20]	; (800be68 <BSP_SD_GetCardState+0x1c>)
 800be52:	f7fd fd05 	bl	8009860 <HAL_SD_GetCardState>
 800be56:	4603      	mov	r3, r0
 800be58:	2b04      	cmp	r3, #4
 800be5a:	bf14      	ite	ne
 800be5c:	2301      	movne	r3, #1
 800be5e:	2300      	moveq	r3, #0
 800be60:	b2db      	uxtb	r3, r3
}
 800be62:	4618      	mov	r0, r3
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	24000608 	.word	0x24000608

0800be6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800be74:	6879      	ldr	r1, [r7, #4]
 800be76:	4803      	ldr	r0, [pc, #12]	; (800be84 <BSP_SD_GetCardInfo+0x18>)
 800be78:	f7fd fbb4 	bl	80095e4 <HAL_SD_GetCardInfo>
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	24000608 	.word	0x24000608

0800be88 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be8e:	2301      	movs	r3, #1
 800be90:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be92:	f000 f80b 	bl	800beac <BSP_PlatformIsDetected>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be9c:	2300      	movs	r3, #0
 800be9e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	b2db      	uxtb	r3, r3
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800beb2:	2301      	movs	r3, #1
 800beb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800beb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800beba:	4806      	ldr	r0, [pc, #24]	; (800bed4 <BSP_PlatformIsDetected+0x28>)
 800bebc:	f7f8 fb3c 	bl	8004538 <HAL_GPIO_ReadPin>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bec6:	2300      	movs	r3, #0
 800bec8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800beca:	79fb      	ldrb	r3, [r7, #7]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	58022000 	.word	0x58022000

0800bed8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bee2:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <SD_CheckStatus+0x38>)
 800bee4:	2201      	movs	r2, #1
 800bee6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bee8:	f7ff ffb0 	bl	800be4c <BSP_SD_GetCardState>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d107      	bne.n	800bf02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bef2:	4b07      	ldr	r3, [pc, #28]	; (800bf10 <SD_CheckStatus+0x38>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f023 0301 	bic.w	r3, r3, #1
 800befc:	b2da      	uxtb	r2, r3
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <SD_CheckStatus+0x38>)
 800bf00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf02:	4b03      	ldr	r3, [pc, #12]	; (800bf10 <SD_CheckStatus+0x38>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b2db      	uxtb	r3, r3
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	24000049 	.word	0x24000049

0800bf14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <SD_initialize+0x38>)
 800bf20:	2201      	movs	r2, #1
 800bf22:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf24:	f7ff ff30 	bl	800bd88 <BSP_SD_Init>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d107      	bne.n	800bf3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff ffd1 	bl	800bed8 <SD_CheckStatus>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <SD_initialize+0x38>)
 800bf3c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf3e:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <SD_initialize+0x38>)
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	b2db      	uxtb	r3, r3
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	24000049 	.word	0x24000049

0800bf50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf5a:	79fb      	ldrb	r3, [r7, #7]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff ffbb 	bl	800bed8 <SD_CheckStatus>
 800bf62:	4603      	mov	r3, r0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	603b      	str	r3, [r7, #0]
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bf80:	f04f 33ff 	mov.w	r3, #4294967295
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	68b8      	ldr	r0, [r7, #8]
 800bf8a:	f7ff ff23 	bl	800bdd4 <BSP_SD_ReadBlocks>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d107      	bne.n	800bfa4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bf94:	bf00      	nop
 800bf96:	f7ff ff59 	bl	800be4c <BSP_SD_GetCardState>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1fa      	bne.n	800bf96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b086      	sub	sp, #24
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	603b      	str	r3, [r7, #0]
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	68b8      	ldr	r0, [r7, #8]
 800bfcc:	f7ff ff20 	bl	800be10 <BSP_SD_WriteBlocks>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d107      	bne.n	800bfe6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bfd6:	bf00      	nop
 800bfd8:	f7ff ff38 	bl	800be4c <BSP_SD_GetCardState>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1fa      	bne.n	800bfd8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08c      	sub	sp, #48	; 0x30
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	603a      	str	r2, [r7, #0]
 800bffa:	71fb      	strb	r3, [r7, #7]
 800bffc:	460b      	mov	r3, r1
 800bffe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c006:	4b25      	ldr	r3, [pc, #148]	; (800c09c <SD_ioctl+0xac>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <SD_ioctl+0x28>
 800c014:	2303      	movs	r3, #3
 800c016:	e03c      	b.n	800c092 <SD_ioctl+0xa2>

  switch (cmd)
 800c018:	79bb      	ldrb	r3, [r7, #6]
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d834      	bhi.n	800c088 <SD_ioctl+0x98>
 800c01e:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <SD_ioctl+0x34>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c035 	.word	0x0800c035
 800c028:	0800c03d 	.word	0x0800c03d
 800c02c:	0800c055 	.word	0x0800c055
 800c030:	0800c06f 	.word	0x0800c06f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c03a:	e028      	b.n	800c08e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c03c:	f107 0308 	add.w	r3, r7, #8
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff ff13 	bl	800be6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c046:	6a3a      	ldr	r2, [r7, #32]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c052:	e01c      	b.n	800c08e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ff07 	bl	800be6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c060:	b29a      	uxth	r2, r3
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c06c:	e00f      	b.n	800c08e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c06e:	f107 0308 	add.w	r3, r7, #8
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff fefa 	bl	800be6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	0a5a      	lsrs	r2, r3, #9
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c086:	e002      	b.n	800c08e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c088:	2304      	movs	r3, #4
 800c08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c08e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c092:	4618      	mov	r0, r3
 800c094:	3730      	adds	r7, #48	; 0x30
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	24000049 	.word	0x24000049

0800c0a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	6039      	str	r1, [r7, #0]
 800c0aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c0ac:	88fb      	ldrh	r3, [r7, #6]
 800c0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800c0b0:	d802      	bhi.n	800c0b8 <ff_convert+0x18>
		c = chr;
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	81fb      	strh	r3, [r7, #14]
 800c0b6:	e025      	b.n	800c104 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c0be:	88fb      	ldrh	r3, [r7, #6]
 800c0c0:	2bff      	cmp	r3, #255	; 0xff
 800c0c2:	d805      	bhi.n	800c0d0 <ff_convert+0x30>
 800c0c4:	88fb      	ldrh	r3, [r7, #6]
 800c0c6:	3b80      	subs	r3, #128	; 0x80
 800c0c8:	4a12      	ldr	r2, [pc, #72]	; (800c114 <ff_convert+0x74>)
 800c0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0ce:	e000      	b.n	800c0d2 <ff_convert+0x32>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	81fb      	strh	r3, [r7, #14]
 800c0d4:	e016      	b.n	800c104 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	81fb      	strh	r3, [r7, #14]
 800c0da:	e009      	b.n	800c0f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c0dc:	89fb      	ldrh	r3, [r7, #14]
 800c0de:	4a0d      	ldr	r2, [pc, #52]	; (800c114 <ff_convert+0x74>)
 800c0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0e4:	88fa      	ldrh	r2, [r7, #6]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d006      	beq.n	800c0f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c0ea:	89fb      	ldrh	r3, [r7, #14]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	81fb      	strh	r3, [r7, #14]
 800c0f0:	89fb      	ldrh	r3, [r7, #14]
 800c0f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0f4:	d9f2      	bls.n	800c0dc <ff_convert+0x3c>
 800c0f6:	e000      	b.n	800c0fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c0f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c0fa:	89fb      	ldrh	r3, [r7, #14]
 800c0fc:	3380      	adds	r3, #128	; 0x80
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	b2db      	uxtb	r3, r3
 800c102:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c104:	89fb      	ldrh	r3, [r7, #14]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	0800f77c 	.word	0x0800f77c

0800c118 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c118:	b480      	push	{r7}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c128:	d201      	bcs.n	800c12e <ff_wtoupper+0x16>
 800c12a:	4b3e      	ldr	r3, [pc, #248]	; (800c224 <ff_wtoupper+0x10c>)
 800c12c:	e000      	b.n	800c130 <ff_wtoupper+0x18>
 800c12e:	4b3e      	ldr	r3, [pc, #248]	; (800c228 <ff_wtoupper+0x110>)
 800c130:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	1c9a      	adds	r2, r3, #2
 800c136:	617a      	str	r2, [r7, #20]
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c13c:	8a7b      	ldrh	r3, [r7, #18]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d068      	beq.n	800c214 <ff_wtoupper+0xfc>
 800c142:	88fa      	ldrh	r2, [r7, #6]
 800c144:	8a7b      	ldrh	r3, [r7, #18]
 800c146:	429a      	cmp	r2, r3
 800c148:	d364      	bcc.n	800c214 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	1c9a      	adds	r2, r3, #2
 800c14e:	617a      	str	r2, [r7, #20]
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	823b      	strh	r3, [r7, #16]
 800c154:	8a3b      	ldrh	r3, [r7, #16]
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	81fb      	strh	r3, [r7, #14]
 800c15a:	8a3b      	ldrh	r3, [r7, #16]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c160:	88fa      	ldrh	r2, [r7, #6]
 800c162:	8a79      	ldrh	r1, [r7, #18]
 800c164:	8a3b      	ldrh	r3, [r7, #16]
 800c166:	440b      	add	r3, r1
 800c168:	429a      	cmp	r2, r3
 800c16a:	da49      	bge.n	800c200 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c16c:	89fb      	ldrh	r3, [r7, #14]
 800c16e:	2b08      	cmp	r3, #8
 800c170:	d84f      	bhi.n	800c212 <ff_wtoupper+0xfa>
 800c172:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <ff_wtoupper+0x60>)
 800c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c178:	0800c19d 	.word	0x0800c19d
 800c17c:	0800c1af 	.word	0x0800c1af
 800c180:	0800c1c5 	.word	0x0800c1c5
 800c184:	0800c1cd 	.word	0x0800c1cd
 800c188:	0800c1d5 	.word	0x0800c1d5
 800c18c:	0800c1dd 	.word	0x0800c1dd
 800c190:	0800c1e5 	.word	0x0800c1e5
 800c194:	0800c1ed 	.word	0x0800c1ed
 800c198:	0800c1f5 	.word	0x0800c1f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c19c:	88fa      	ldrh	r2, [r7, #6]
 800c19e:	8a7b      	ldrh	r3, [r7, #18]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	80fb      	strh	r3, [r7, #6]
 800c1ac:	e027      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c1ae:	88fa      	ldrh	r2, [r7, #6]
 800c1b0:	8a7b      	ldrh	r3, [r7, #18]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	88fa      	ldrh	r2, [r7, #6]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	80fb      	strh	r3, [r7, #6]
 800c1c2:	e01c      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	3b10      	subs	r3, #16
 800c1c8:	80fb      	strh	r3, [r7, #6]
 800c1ca:	e018      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	3b20      	subs	r3, #32
 800c1d0:	80fb      	strh	r3, [r7, #6]
 800c1d2:	e014      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c1d4:	88fb      	ldrh	r3, [r7, #6]
 800c1d6:	3b30      	subs	r3, #48	; 0x30
 800c1d8:	80fb      	strh	r3, [r7, #6]
 800c1da:	e010      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c1dc:	88fb      	ldrh	r3, [r7, #6]
 800c1de:	3b1a      	subs	r3, #26
 800c1e0:	80fb      	strh	r3, [r7, #6]
 800c1e2:	e00c      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c1e4:	88fb      	ldrh	r3, [r7, #6]
 800c1e6:	3308      	adds	r3, #8
 800c1e8:	80fb      	strh	r3, [r7, #6]
 800c1ea:	e008      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c1ec:	88fb      	ldrh	r3, [r7, #6]
 800c1ee:	3b50      	subs	r3, #80	; 0x50
 800c1f0:	80fb      	strh	r3, [r7, #6]
 800c1f2:	e004      	b.n	800c1fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c1f4:	88fb      	ldrh	r3, [r7, #6]
 800c1f6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c1fa:	80fb      	strh	r3, [r7, #6]
 800c1fc:	bf00      	nop
			}
			break;
 800c1fe:	e008      	b.n	800c212 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c200:	89fb      	ldrh	r3, [r7, #14]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d195      	bne.n	800c132 <ff_wtoupper+0x1a>
 800c206:	8a3b      	ldrh	r3, [r7, #16]
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	4413      	add	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c210:	e78f      	b.n	800c132 <ff_wtoupper+0x1a>
			break;
 800c212:	bf00      	nop
	}

	return chr;
 800c214:	88fb      	ldrh	r3, [r7, #6]
}
 800c216:	4618      	mov	r0, r3
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	0800f87c 	.word	0x0800f87c
 800c228:	0800fa70 	.word	0x0800fa70

0800c22c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	4a08      	ldr	r2, [pc, #32]	; (800c25c <disk_status+0x30>)
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	79fa      	ldrb	r2, [r7, #7]
 800c244:	4905      	ldr	r1, [pc, #20]	; (800c25c <disk_status+0x30>)
 800c246:	440a      	add	r2, r1
 800c248:	7a12      	ldrb	r2, [r2, #8]
 800c24a:	4610      	mov	r0, r2
 800c24c:	4798      	blx	r3
 800c24e:	4603      	mov	r3, r0
 800c250:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c252:	7bfb      	ldrb	r3, [r7, #15]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	2400175c 	.word	0x2400175c

0800c260 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c26e:	79fb      	ldrb	r3, [r7, #7]
 800c270:	4a0d      	ldr	r2, [pc, #52]	; (800c2a8 <disk_initialize+0x48>)
 800c272:	5cd3      	ldrb	r3, [r2, r3]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d111      	bne.n	800c29c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c278:	79fb      	ldrb	r3, [r7, #7]
 800c27a:	4a0b      	ldr	r2, [pc, #44]	; (800c2a8 <disk_initialize+0x48>)
 800c27c:	2101      	movs	r1, #1
 800c27e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	4a09      	ldr	r2, [pc, #36]	; (800c2a8 <disk_initialize+0x48>)
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	79fa      	ldrb	r2, [r7, #7]
 800c28e:	4906      	ldr	r1, [pc, #24]	; (800c2a8 <disk_initialize+0x48>)
 800c290:	440a      	add	r2, r1
 800c292:	7a12      	ldrb	r2, [r2, #8]
 800c294:	4610      	mov	r0, r2
 800c296:	4798      	blx	r3
 800c298:	4603      	mov	r3, r0
 800c29a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	2400175c 	.word	0x2400175c

0800c2ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2bc:	7bfb      	ldrb	r3, [r7, #15]
 800c2be:	4a0a      	ldr	r2, [pc, #40]	; (800c2e8 <disk_read+0x3c>)
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	689c      	ldr	r4, [r3, #8]
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	4a07      	ldr	r2, [pc, #28]	; (800c2e8 <disk_read+0x3c>)
 800c2cc:	4413      	add	r3, r2
 800c2ce:	7a18      	ldrb	r0, [r3, #8]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	47a0      	blx	r4
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd90      	pop	{r4, r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	2400175c 	.word	0x2400175c

0800c2ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	603b      	str	r3, [r7, #0]
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	4a0a      	ldr	r2, [pc, #40]	; (800c328 <disk_write+0x3c>)
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	68dc      	ldr	r4, [r3, #12]
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	4a07      	ldr	r2, [pc, #28]	; (800c328 <disk_write+0x3c>)
 800c30c:	4413      	add	r3, r2
 800c30e:	7a18      	ldrb	r0, [r3, #8]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	68b9      	ldr	r1, [r7, #8]
 800c316:	47a0      	blx	r4
 800c318:	4603      	mov	r3, r0
 800c31a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	bd90      	pop	{r4, r7, pc}
 800c326:	bf00      	nop
 800c328:	2400175c 	.word	0x2400175c

0800c32c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	603a      	str	r2, [r7, #0]
 800c336:	71fb      	strb	r3, [r7, #7]
 800c338:	460b      	mov	r3, r1
 800c33a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	4a09      	ldr	r2, [pc, #36]	; (800c364 <disk_ioctl+0x38>)
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	4413      	add	r3, r2
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	79fa      	ldrb	r2, [r7, #7]
 800c34a:	4906      	ldr	r1, [pc, #24]	; (800c364 <disk_ioctl+0x38>)
 800c34c:	440a      	add	r2, r1
 800c34e:	7a10      	ldrb	r0, [r2, #8]
 800c350:	79b9      	ldrb	r1, [r7, #6]
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4798      	blx	r3
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
  return res;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	2400175c 	.word	0x2400175c

0800c368 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3301      	adds	r3, #1
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c378:	89fb      	ldrh	r3, [r7, #14]
 800c37a:	021b      	lsls	r3, r3, #8
 800c37c:	b21a      	sxth	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b21b      	sxth	r3, r3
 800c384:	4313      	orrs	r3, r2
 800c386:	b21b      	sxth	r3, r3
 800c388:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c38a:	89fb      	ldrh	r3, [r7, #14]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3303      	adds	r3, #3
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	021b      	lsls	r3, r3, #8
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	3202      	adds	r2, #2
 800c3b0:	7812      	ldrb	r2, [r2, #0]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	021b      	lsls	r3, r3, #8
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	3201      	adds	r2, #1
 800c3be:	7812      	ldrb	r2, [r2, #0]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	021b      	lsls	r3, r3, #8
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	887a      	ldrh	r2, [r7, #2]
 800c3f2:	b2d2      	uxtb	r2, r2
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	887b      	ldrh	r3, [r7, #2]
 800c3f8:	0a1b      	lsrs	r3, r3, #8
 800c3fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	887a      	ldrh	r2, [r7, #2]
 800c404:	b2d2      	uxtb	r2, r2
 800c406:	701a      	strb	r2, [r3, #0]
}
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	b2d2      	uxtb	r2, r2
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	0a1b      	lsrs	r3, r3, #8
 800c42e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	701a      	strb	r2, [r3, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	0a1b      	lsrs	r3, r3, #8
 800c440:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	b2d2      	uxtb	r2, r2
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	0a1b      	lsrs	r3, r3, #8
 800c452:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	1c5a      	adds	r2, r3, #1
 800c458:	607a      	str	r2, [r7, #4]
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c46c:	b480      	push	{r7}
 800c46e:	b087      	sub	sp, #28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00d      	beq.n	800c4a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	1c53      	adds	r3, r2, #1
 800c48a:	613b      	str	r3, [r7, #16]
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	1c59      	adds	r1, r3, #1
 800c490:	6179      	str	r1, [r7, #20]
 800c492:	7812      	ldrb	r2, [r2, #0]
 800c494:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3b01      	subs	r3, #1
 800c49a:	607b      	str	r3, [r7, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1f1      	bne.n	800c486 <mem_cpy+0x1a>
	}
}
 800c4a2:	bf00      	nop
 800c4a4:	371c      	adds	r7, #28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c4ae:	b480      	push	{r7}
 800c4b0:	b087      	sub	sp, #28
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	617a      	str	r2, [r7, #20]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	607b      	str	r3, [r7, #4]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1f3      	bne.n	800c4be <mem_set+0x10>
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	371c      	adds	r7, #28
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4e4:	b480      	push	{r7}
 800c4e6:	b089      	sub	sp, #36	; 0x24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	61fb      	str	r3, [r7, #28]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	61fa      	str	r2, [r7, #28]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	4619      	mov	r1, r3
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	61ba      	str	r2, [r7, #24]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	1acb      	subs	r3, r1, r3
 800c510:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	3b01      	subs	r3, #1
 800c516:	607b      	str	r3, [r7, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <mem_cmp+0x40>
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d0eb      	beq.n	800c4fc <mem_cmp+0x18>

	return r;
 800c524:	697b      	ldr	r3, [r7, #20]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3724      	adds	r7, #36	; 0x24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c53c:	e002      	b.n	800c544 <chk_chr+0x12>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3301      	adds	r3, #1
 800c542:	607b      	str	r3, [r7, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d005      	beq.n	800c558 <chk_chr+0x26>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	4293      	cmp	r3, r2
 800c556:	d1f2      	bne.n	800c53e <chk_chr+0xc>
	return *str;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	781b      	ldrb	r3, [r3, #0]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c572:	2300      	movs	r3, #0
 800c574:	60bb      	str	r3, [r7, #8]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e029      	b.n	800c5d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c57c:	4a27      	ldr	r2, [pc, #156]	; (800c61c <chk_lock+0xb4>)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	4413      	add	r3, r2
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d01d      	beq.n	800c5c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c58a:	4a24      	ldr	r2, [pc, #144]	; (800c61c <chk_lock+0xb4>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	011b      	lsls	r3, r3, #4
 800c590:	4413      	add	r3, r2
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d116      	bne.n	800c5ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c59c:	4a1f      	ldr	r2, [pc, #124]	; (800c61c <chk_lock+0xb4>)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	011b      	lsls	r3, r3, #4
 800c5a2:	4413      	add	r3, r2
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d10c      	bne.n	800c5ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5b0:	4a1a      	ldr	r2, [pc, #104]	; (800c61c <chk_lock+0xb4>)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	011b      	lsls	r3, r3, #4
 800c5b6:	4413      	add	r3, r2
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d102      	bne.n	800c5ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5c4:	e007      	b.n	800c5d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d9d2      	bls.n	800c57c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d109      	bne.n	800c5f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d102      	bne.n	800c5e8 <chk_lock+0x80>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d101      	bne.n	800c5ec <chk_lock+0x84>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e010      	b.n	800c60e <chk_lock+0xa6>
 800c5ec:	2312      	movs	r3, #18
 800c5ee:	e00e      	b.n	800c60e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d108      	bne.n	800c608 <chk_lock+0xa0>
 800c5f6:	4a09      	ldr	r2, [pc, #36]	; (800c61c <chk_lock+0xb4>)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	4413      	add	r3, r2
 800c5fe:	330c      	adds	r3, #12
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c606:	d101      	bne.n	800c60c <chk_lock+0xa4>
 800c608:	2310      	movs	r3, #16
 800c60a:	e000      	b.n	800c60e <chk_lock+0xa6>
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	2400173c 	.word	0x2400173c

0800c620 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c626:	2300      	movs	r3, #0
 800c628:	607b      	str	r3, [r7, #4]
 800c62a:	e002      	b.n	800c632 <enq_lock+0x12>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3301      	adds	r3, #1
 800c630:	607b      	str	r3, [r7, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d806      	bhi.n	800c646 <enq_lock+0x26>
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <enq_lock+0x40>)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	011b      	lsls	r3, r3, #4
 800c63e:	4413      	add	r3, r2
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1f2      	bne.n	800c62c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	bf14      	ite	ne
 800c64c:	2301      	movne	r3, #1
 800c64e:	2300      	moveq	r3, #0
 800c650:	b2db      	uxtb	r3, r3
}
 800c652:	4618      	mov	r0, r3
 800c654:	370c      	adds	r7, #12
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	2400173c 	.word	0x2400173c

0800c664 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c66e:	2300      	movs	r3, #0
 800c670:	60fb      	str	r3, [r7, #12]
 800c672:	e01f      	b.n	800c6b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c674:	4a41      	ldr	r2, [pc, #260]	; (800c77c <inc_lock+0x118>)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	011b      	lsls	r3, r3, #4
 800c67a:	4413      	add	r3, r2
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d113      	bne.n	800c6ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c686:	4a3d      	ldr	r2, [pc, #244]	; (800c77c <inc_lock+0x118>)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	4413      	add	r3, r2
 800c68e:	3304      	adds	r3, #4
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c696:	429a      	cmp	r2, r3
 800c698:	d109      	bne.n	800c6ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c69a:	4a38      	ldr	r2, [pc, #224]	; (800c77c <inc_lock+0x118>)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	011b      	lsls	r3, r3, #4
 800c6a0:	4413      	add	r3, r2
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d006      	beq.n	800c6bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d9dc      	bls.n	800c674 <inc_lock+0x10>
 800c6ba:	e000      	b.n	800c6be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d132      	bne.n	800c72a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	60fb      	str	r3, [r7, #12]
 800c6c8:	e002      	b.n	800c6d0 <inc_lock+0x6c>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d806      	bhi.n	800c6e4 <inc_lock+0x80>
 800c6d6:	4a29      	ldr	r2, [pc, #164]	; (800c77c <inc_lock+0x118>)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	4413      	add	r3, r2
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1f2      	bne.n	800c6ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d101      	bne.n	800c6ee <inc_lock+0x8a>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e040      	b.n	800c770 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4922      	ldr	r1, [pc, #136]	; (800c77c <inc_lock+0x118>)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	440b      	add	r3, r1
 800c6fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	491e      	ldr	r1, [pc, #120]	; (800c77c <inc_lock+0x118>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	440b      	add	r3, r1
 800c708:	3304      	adds	r3, #4
 800c70a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	695a      	ldr	r2, [r3, #20]
 800c710:	491a      	ldr	r1, [pc, #104]	; (800c77c <inc_lock+0x118>)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	011b      	lsls	r3, r3, #4
 800c716:	440b      	add	r3, r1
 800c718:	3308      	adds	r3, #8
 800c71a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c71c:	4a17      	ldr	r2, [pc, #92]	; (800c77c <inc_lock+0x118>)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	011b      	lsls	r3, r3, #4
 800c722:	4413      	add	r3, r2
 800c724:	330c      	adds	r3, #12
 800c726:	2200      	movs	r2, #0
 800c728:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d009      	beq.n	800c744 <inc_lock+0xe0>
 800c730:	4a12      	ldr	r2, [pc, #72]	; (800c77c <inc_lock+0x118>)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	011b      	lsls	r3, r3, #4
 800c736:	4413      	add	r3, r2
 800c738:	330c      	adds	r3, #12
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <inc_lock+0xe0>
 800c740:	2300      	movs	r3, #0
 800c742:	e015      	b.n	800c770 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d108      	bne.n	800c75c <inc_lock+0xf8>
 800c74a:	4a0c      	ldr	r2, [pc, #48]	; (800c77c <inc_lock+0x118>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	011b      	lsls	r3, r3, #4
 800c750:	4413      	add	r3, r2
 800c752:	330c      	adds	r3, #12
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	3301      	adds	r3, #1
 800c758:	b29a      	uxth	r2, r3
 800c75a:	e001      	b.n	800c760 <inc_lock+0xfc>
 800c75c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c760:	4906      	ldr	r1, [pc, #24]	; (800c77c <inc_lock+0x118>)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	011b      	lsls	r3, r3, #4
 800c766:	440b      	add	r3, r1
 800c768:	330c      	adds	r3, #12
 800c76a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	3301      	adds	r3, #1
}
 800c770:	4618      	mov	r0, r3
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr
 800c77c:	2400173c 	.word	0x2400173c

0800c780 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	607b      	str	r3, [r7, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d825      	bhi.n	800c7e0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c794:	4a17      	ldr	r2, [pc, #92]	; (800c7f4 <dec_lock+0x74>)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	4413      	add	r3, r2
 800c79c:	330c      	adds	r3, #12
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c7a2:	89fb      	ldrh	r3, [r7, #14]
 800c7a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a8:	d101      	bne.n	800c7ae <dec_lock+0x2e>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <dec_lock+0x3a>
 800c7b4:	89fb      	ldrh	r3, [r7, #14]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c7ba:	4a0e      	ldr	r2, [pc, #56]	; (800c7f4 <dec_lock+0x74>)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	4413      	add	r3, r2
 800c7c2:	330c      	adds	r3, #12
 800c7c4:	89fa      	ldrh	r2, [r7, #14]
 800c7c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d105      	bne.n	800c7da <dec_lock+0x5a>
 800c7ce:	4a09      	ldr	r2, [pc, #36]	; (800c7f4 <dec_lock+0x74>)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	011b      	lsls	r3, r3, #4
 800c7d4:	4413      	add	r3, r2
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	737b      	strb	r3, [r7, #13]
 800c7de:	e001      	b.n	800c7e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7e4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	2400173c 	.word	0x2400173c

0800c7f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e010      	b.n	800c828 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c806:	4a0d      	ldr	r2, [pc, #52]	; (800c83c <clear_lock+0x44>)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	011b      	lsls	r3, r3, #4
 800c80c:	4413      	add	r3, r2
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	429a      	cmp	r2, r3
 800c814:	d105      	bne.n	800c822 <clear_lock+0x2a>
 800c816:	4a09      	ldr	r2, [pc, #36]	; (800c83c <clear_lock+0x44>)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	4413      	add	r3, r2
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d9eb      	bls.n	800c806 <clear_lock+0xe>
	}
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	2400173c 	.word	0x2400173c

0800c840 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	78db      	ldrb	r3, [r3, #3]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d034      	beq.n	800c8be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c858:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	7858      	ldrb	r0, [r3, #1]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c864:	2301      	movs	r3, #1
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	f7ff fd40 	bl	800c2ec <disk_write>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c872:	2301      	movs	r3, #1
 800c874:	73fb      	strb	r3, [r7, #15]
 800c876:	e022      	b.n	800c8be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	1ad2      	subs	r2, r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d217      	bcs.n	800c8be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	789b      	ldrb	r3, [r3, #2]
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	e010      	b.n	800c8b8 <sync_window+0x78>
					wsect += fs->fsize;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4413      	add	r3, r2
 800c89e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7858      	ldrb	r0, [r3, #1]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	f7ff fd1d 	bl	800c2ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	613b      	str	r3, [r7, #16]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d8eb      	bhi.n	800c896 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d01b      	beq.n	800c918 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff ffad 	bl	800c840 <sync_window>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8ea:	7bfb      	ldrb	r3, [r7, #15]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d113      	bne.n	800c918 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7858      	ldrb	r0, [r3, #1]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	f7ff fcd5 	bl	800c2ac <disk_read>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d004      	beq.n	800c912 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c908:	f04f 33ff 	mov.w	r3, #4294967295
 800c90c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c90e:	2301      	movs	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff ff87 	bl	800c840 <sync_window>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d158      	bne.n	800c9ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b03      	cmp	r3, #3
 800c942:	d148      	bne.n	800c9d6 <sync_fs+0xb2>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	791b      	ldrb	r3, [r3, #4]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d144      	bne.n	800c9d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	3334      	adds	r3, #52	; 0x34
 800c950:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c954:	2100      	movs	r1, #0
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff fda9 	bl	800c4ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3334      	adds	r3, #52	; 0x34
 800c960:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c964:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff fd38 	bl	800c3de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	3334      	adds	r3, #52	; 0x34
 800c972:	4921      	ldr	r1, [pc, #132]	; (800c9f8 <sync_fs+0xd4>)
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fd4d 	bl	800c414 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c982:	491e      	ldr	r1, [pc, #120]	; (800c9fc <sync_fs+0xd8>)
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff fd45 	bl	800c414 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	3334      	adds	r3, #52	; 0x34
 800c98e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	695b      	ldr	r3, [r3, #20]
 800c996:	4619      	mov	r1, r3
 800c998:	4610      	mov	r0, r2
 800c99a:	f7ff fd3b 	bl	800c414 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3334      	adds	r3, #52	; 0x34
 800c9a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	f7ff fd31 	bl	800c414 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7858      	ldrb	r0, [r3, #1]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	f7ff fc8e 	bl	800c2ec <disk_write>
			fs->fsi_flag = 0;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	785b      	ldrb	r3, [r3, #1]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2100      	movs	r1, #0
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff fca4 	bl	800c32c <disk_ioctl>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <sync_fs+0xca>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	41615252 	.word	0x41615252
 800c9fc:	61417272 	.word	0x61417272

0800ca00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	3b02      	subs	r3, #2
 800ca0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	3b02      	subs	r3, #2
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d301      	bcc.n	800ca20 <clust2sect+0x20>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e008      	b.n	800ca32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	895b      	ldrh	r3, [r3, #10]
 800ca24:	461a      	mov	r2, r3
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	fb03 f202 	mul.w	r2, r3, r2
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	4413      	add	r3, r2
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b086      	sub	sp, #24
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d904      	bls.n	800ca5e <get_fat+0x20>
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d302      	bcc.n	800ca64 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca5e:	2301      	movs	r3, #1
 800ca60:	617b      	str	r3, [r7, #20]
 800ca62:	e08f      	b.n	800cb84 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca64:	f04f 33ff 	mov.w	r3, #4294967295
 800ca68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	d062      	beq.n	800cb38 <get_fat+0xfa>
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	dc7c      	bgt.n	800cb70 <get_fat+0x132>
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d002      	beq.n	800ca80 <get_fat+0x42>
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d042      	beq.n	800cb04 <get_fat+0xc6>
 800ca7e:	e077      	b.n	800cb70 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	085b      	lsrs	r3, r3, #1
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	0a5b      	lsrs	r3, r3, #9
 800ca96:	4413      	add	r3, r2
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6938      	ldr	r0, [r7, #16]
 800ca9c:	f7ff ff14 	bl	800c8c8 <move_window>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d167      	bne.n	800cb76 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	1c5a      	adds	r2, r3, #1
 800caaa:	60fa      	str	r2, [r7, #12]
 800caac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4413      	add	r3, r2
 800cab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cab8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	0a5b      	lsrs	r3, r3, #9
 800cac2:	4413      	add	r3, r2
 800cac4:	4619      	mov	r1, r3
 800cac6:	6938      	ldr	r0, [r7, #16]
 800cac8:	f7ff fefe 	bl	800c8c8 <move_window>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d153      	bne.n	800cb7a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad8:	693a      	ldr	r2, [r7, #16]
 800cada:	4413      	add	r3, r2
 800cadc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cae0:	021b      	lsls	r3, r3, #8
 800cae2:	461a      	mov	r2, r3
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <get_fat+0xbc>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	091b      	lsrs	r3, r3, #4
 800caf8:	e002      	b.n	800cb00 <get_fat+0xc2>
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb00:	617b      	str	r3, [r7, #20]
			break;
 800cb02:	e03f      	b.n	800cb84 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	0a1b      	lsrs	r3, r3, #8
 800cb0c:	4413      	add	r3, r2
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6938      	ldr	r0, [r7, #16]
 800cb12:	f7ff fed9 	bl	800c8c8 <move_window>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d130      	bne.n	800cb7e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cb2a:	4413      	add	r3, r2
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff fc1b 	bl	800c368 <ld_word>
 800cb32:	4603      	mov	r3, r0
 800cb34:	617b      	str	r3, [r7, #20]
			break;
 800cb36:	e025      	b.n	800cb84 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	09db      	lsrs	r3, r3, #7
 800cb40:	4413      	add	r3, r2
 800cb42:	4619      	mov	r1, r3
 800cb44:	6938      	ldr	r0, [r7, #16]
 800cb46:	f7ff febf 	bl	800c8c8 <move_window>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d118      	bne.n	800cb82 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cb5e:	4413      	add	r3, r2
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fc19 	bl	800c398 <ld_dword>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb6c:	617b      	str	r3, [r7, #20]
			break;
 800cb6e:	e009      	b.n	800cb84 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb70:	2301      	movs	r3, #1
 800cb72:	617b      	str	r3, [r7, #20]
 800cb74:	e006      	b.n	800cb84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb76:	bf00      	nop
 800cb78:	e004      	b.n	800cb84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb7a:	bf00      	nop
 800cb7c:	e002      	b.n	800cb84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb7e:	bf00      	nop
 800cb80:	e000      	b.n	800cb84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb82:	bf00      	nop
		}
	}

	return val;
 800cb84:	697b      	ldr	r3, [r7, #20]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cb8e:	b590      	push	{r4, r7, lr}
 800cb90:	b089      	sub	sp, #36	; 0x24
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	f240 80d2 	bls.w	800cd4a <put_fat+0x1bc>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	f080 80cc 	bcs.w	800cd4a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	f000 8096 	beq.w	800cce8 <put_fat+0x15a>
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	f300 80cd 	bgt.w	800cd5c <put_fat+0x1ce>
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d002      	beq.n	800cbcc <put_fat+0x3e>
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d06e      	beq.n	800cca8 <put_fat+0x11a>
 800cbca:	e0c7      	b.n	800cd5c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	61bb      	str	r3, [r7, #24]
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	085b      	lsrs	r3, r3, #1
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	0a5b      	lsrs	r3, r3, #9
 800cbe2:	4413      	add	r3, r2
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f7ff fe6e 	bl	800c8c8 <move_window>
 800cbec:	4603      	mov	r3, r0
 800cbee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbf0:	7ffb      	ldrb	r3, [r7, #31]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f040 80ab 	bne.w	800cd4e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	1c59      	adds	r1, r3, #1
 800cc02:	61b9      	str	r1, [r7, #24]
 800cc04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc08:	4413      	add	r3, r2
 800cc0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00d      	beq.n	800cc32 <put_fat+0xa4>
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b25b      	sxtb	r3, r3
 800cc1c:	f003 030f 	and.w	r3, r3, #15
 800cc20:	b25a      	sxtb	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	011b      	lsls	r3, r3, #4
 800cc28:	b25b      	sxtb	r3, r3
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	b25b      	sxtb	r3, r3
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	e001      	b.n	800cc36 <put_fat+0xa8>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	0a5b      	lsrs	r3, r3, #9
 800cc48:	4413      	add	r3, r2
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7ff fe3b 	bl	800c8c8 <move_window>
 800cc52:	4603      	mov	r3, r0
 800cc54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc56:	7ffb      	ldrb	r3, [r7, #31]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d17a      	bne.n	800cd52 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc68:	4413      	add	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <put_fat+0xf0>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	091b      	lsrs	r3, r3, #4
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	e00e      	b.n	800cc9c <put_fat+0x10e>
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	b25b      	sxtb	r3, r3
 800cc84:	f023 030f 	bic.w	r3, r3, #15
 800cc88:	b25a      	sxtb	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	b25b      	sxtb	r3, r3
 800cc90:	f003 030f 	and.w	r3, r3, #15
 800cc94:	b25b      	sxtb	r3, r3
 800cc96:	4313      	orrs	r3, r2
 800cc98:	b25b      	sxtb	r3, r3
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2201      	movs	r2, #1
 800cca4:	70da      	strb	r2, [r3, #3]
			break;
 800cca6:	e059      	b.n	800cd5c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	0a1b      	lsrs	r3, r3, #8
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7ff fe07 	bl	800c8c8 <move_window>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccbe:	7ffb      	ldrb	r3, [r7, #31]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d148      	bne.n	800cd56 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccd2:	4413      	add	r3, r2
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	b292      	uxth	r2, r2
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff fb7f 	bl	800c3de <st_word>
			fs->wflag = 1;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	70da      	strb	r2, [r3, #3]
			break;
 800cce6:	e039      	b.n	800cd5c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	09db      	lsrs	r3, r3, #7
 800ccf0:	4413      	add	r3, r2
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff fde7 	bl	800c8c8 <move_window>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccfe:	7ffb      	ldrb	r3, [r7, #31]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d12a      	bne.n	800cd5a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd18:	4413      	add	r3, r2
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff fb3c 	bl	800c398 <ld_dword>
 800cd20:	4603      	mov	r3, r0
 800cd22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cd26:	4323      	orrs	r3, r4
 800cd28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd38:	4413      	add	r3, r2
 800cd3a:	6879      	ldr	r1, [r7, #4]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff fb69 	bl	800c414 <st_dword>
			fs->wflag = 1;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2201      	movs	r2, #1
 800cd46:	70da      	strb	r2, [r3, #3]
			break;
 800cd48:	e008      	b.n	800cd5c <put_fat+0x1ce>
		}
	}
 800cd4a:	bf00      	nop
 800cd4c:	e006      	b.n	800cd5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd4e:	bf00      	nop
 800cd50:	e004      	b.n	800cd5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd52:	bf00      	nop
 800cd54:	e002      	b.n	800cd5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd56:	bf00      	nop
 800cd58:	e000      	b.n	800cd5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd5a:	bf00      	nop
	return res;
 800cd5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3724      	adds	r7, #36	; 0x24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd90      	pop	{r4, r7, pc}

0800cd66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b088      	sub	sp, #32
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	60b9      	str	r1, [r7, #8]
 800cd70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d904      	bls.n	800cd8c <remove_chain+0x26>
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	699b      	ldr	r3, [r3, #24]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d301      	bcc.n	800cd90 <remove_chain+0x2a>
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	e04b      	b.n	800ce28 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00c      	beq.n	800cdb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd96:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	69b8      	ldr	r0, [r7, #24]
 800cd9e:	f7ff fef6 	bl	800cb8e <put_fat>
 800cda2:	4603      	mov	r3, r0
 800cda4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cda6:	7ffb      	ldrb	r3, [r7, #31]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <remove_chain+0x4a>
 800cdac:	7ffb      	ldrb	r3, [r7, #31]
 800cdae:	e03b      	b.n	800ce28 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f7ff fe43 	bl	800ca3e <get_fat>
 800cdb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d031      	beq.n	800ce24 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d101      	bne.n	800cdca <remove_chain+0x64>
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	e02e      	b.n	800ce28 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd0:	d101      	bne.n	800cdd6 <remove_chain+0x70>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e028      	b.n	800ce28 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	68b9      	ldr	r1, [r7, #8]
 800cdda:	69b8      	ldr	r0, [r7, #24]
 800cddc:	f7ff fed7 	bl	800cb8e <put_fat>
 800cde0:	4603      	mov	r3, r0
 800cde2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cde4:	7ffb      	ldrb	r3, [r7, #31]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <remove_chain+0x88>
 800cdea:	7ffb      	ldrb	r3, [r7, #31]
 800cdec:	e01c      	b.n	800ce28 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	695a      	ldr	r2, [r3, #20]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	3b02      	subs	r3, #2
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d20b      	bcs.n	800ce14 <remove_chain+0xae>
			fs->free_clst++;
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	695b      	ldr	r3, [r3, #20]
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	791b      	ldrb	r3, [r3, #4]
 800ce0a:	f043 0301 	orr.w	r3, r3, #1
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d3c6      	bcc.n	800cdb0 <remove_chain+0x4a>
 800ce22:	e000      	b.n	800ce26 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ce24:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3720      	adds	r7, #32
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10d      	bne.n	800ce62 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d004      	beq.n	800ce5c <create_chain+0x2c>
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d31b      	bcc.n	800ce94 <create_chain+0x64>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	61bb      	str	r3, [r7, #24]
 800ce60:	e018      	b.n	800ce94 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff fdea 	bl	800ca3e <get_fat>
 800ce6a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d801      	bhi.n	800ce76 <create_chain+0x46>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e070      	b.n	800cf58 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d101      	bne.n	800ce82 <create_chain+0x52>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	e06a      	b.n	800cf58 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	699b      	ldr	r3, [r3, #24]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d201      	bcs.n	800ce90 <create_chain+0x60>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	e063      	b.n	800cf58 <create_chain+0x128>
		scl = clst;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	69fa      	ldr	r2, [r7, #28]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d307      	bcc.n	800ceb8 <create_chain+0x88>
				ncl = 2;
 800cea8:	2302      	movs	r3, #2
 800ceaa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ceac:	69fa      	ldr	r2, [r7, #28]
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d901      	bls.n	800ceb8 <create_chain+0x88>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e04f      	b.n	800cf58 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ceb8:	69f9      	ldr	r1, [r7, #28]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7ff fdbf 	bl	800ca3e <get_fat>
 800cec0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00e      	beq.n	800cee6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d003      	beq.n	800ced6 <create_chain+0xa6>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced4:	d101      	bne.n	800ceda <create_chain+0xaa>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	e03e      	b.n	800cf58 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ceda:	69fa      	ldr	r2, [r7, #28]
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d1da      	bne.n	800ce98 <create_chain+0x68>
 800cee2:	2300      	movs	r3, #0
 800cee4:	e038      	b.n	800cf58 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cee6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cee8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceec:	69f9      	ldr	r1, [r7, #28]
 800ceee:	6938      	ldr	r0, [r7, #16]
 800cef0:	f7ff fe4d 	bl	800cb8e <put_fat>
 800cef4:	4603      	mov	r3, r0
 800cef6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d109      	bne.n	800cf12 <create_chain+0xe2>
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d006      	beq.n	800cf12 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6938      	ldr	r0, [r7, #16]
 800cf0a:	f7ff fe40 	bl	800cb8e <put_fat>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d116      	bne.n	800cf46 <create_chain+0x116>
		fs->last_clst = ncl;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	69fa      	ldr	r2, [r7, #28]
 800cf1c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	695a      	ldr	r2, [r3, #20]
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	3b02      	subs	r3, #2
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d804      	bhi.n	800cf36 <create_chain+0x106>
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	1e5a      	subs	r2, r3, #1
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	791b      	ldrb	r3, [r3, #4]
 800cf3a:	f043 0301 	orr.w	r3, r3, #1
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	711a      	strb	r2, [r3, #4]
 800cf44:	e007      	b.n	800cf56 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d102      	bne.n	800cf52 <create_chain+0x122>
 800cf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf50:	e000      	b.n	800cf54 <create_chain+0x124>
 800cf52:	2301      	movs	r3, #1
 800cf54:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cf56:	69fb      	ldr	r3, [r7, #28]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3720      	adds	r7, #32
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf74:	3304      	adds	r3, #4
 800cf76:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	0a5b      	lsrs	r3, r3, #9
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	8952      	ldrh	r2, [r2, #10]
 800cf80:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	1d1a      	adds	r2, r3, #4
 800cf8a:	613a      	str	r2, [r7, #16]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <clmt_clust+0x3a>
 800cf96:	2300      	movs	r3, #0
 800cf98:	e010      	b.n	800cfbc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d307      	bcc.n	800cfb2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	3304      	adds	r3, #4
 800cfae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cfb0:	e7e9      	b.n	800cf86 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cfb2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	4413      	add	r3, r2
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfde:	d204      	bcs.n	800cfea <dir_sdi+0x22>
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	f003 031f 	and.w	r3, r3, #31
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <dir_sdi+0x26>
		return FR_INT_ERR;
 800cfea:	2302      	movs	r3, #2
 800cfec:	e063      	b.n	800d0b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <dir_sdi+0x46>
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d902      	bls.n	800d00e <dir_sdi+0x46>
		clst = fs->dirbase;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10c      	bne.n	800d02e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	8912      	ldrh	r2, [r2, #8]
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d301      	bcc.n	800d024 <dir_sdi+0x5c>
 800d020:	2302      	movs	r3, #2
 800d022:	e048      	b.n	800d0b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	61da      	str	r2, [r3, #28]
 800d02c:	e029      	b.n	800d082 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	895b      	ldrh	r3, [r3, #10]
 800d032:	025b      	lsls	r3, r3, #9
 800d034:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d036:	e019      	b.n	800d06c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6979      	ldr	r1, [r7, #20]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7ff fcfe 	bl	800ca3e <get_fat>
 800d042:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d101      	bne.n	800d050 <dir_sdi+0x88>
 800d04c:	2301      	movs	r3, #1
 800d04e:	e032      	b.n	800d0b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d904      	bls.n	800d060 <dir_sdi+0x98>
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d301      	bcc.n	800d064 <dir_sdi+0x9c>
 800d060:	2302      	movs	r3, #2
 800d062:	e028      	b.n	800d0b6 <dir_sdi+0xee>
			ofs -= csz;
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	429a      	cmp	r2, r3
 800d072:	d2e1      	bcs.n	800d038 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d074:	6979      	ldr	r1, [r7, #20]
 800d076:	6938      	ldr	r0, [r7, #16]
 800d078:	f7ff fcc2 	bl	800ca00 <clust2sect>
 800d07c:	4602      	mov	r2, r0
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <dir_sdi+0xcc>
 800d090:	2302      	movs	r3, #2
 800d092:	e010      	b.n	800d0b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	69da      	ldr	r2, [r3, #28]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	0a5b      	lsrs	r3, r3, #9
 800d09c:	441a      	add	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	441a      	add	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b086      	sub	sp, #24
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	3320      	adds	r3, #32
 800d0d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <dir_next+0x28>
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0e4:	d301      	bcc.n	800d0ea <dir_next+0x2c>
 800d0e6:	2304      	movs	r3, #4
 800d0e8:	e0aa      	b.n	800d240 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 8098 	bne.w	800d226 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10b      	bne.n	800d120 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	095b      	lsrs	r3, r3, #5
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	8912      	ldrh	r2, [r2, #8]
 800d110:	4293      	cmp	r3, r2
 800d112:	f0c0 8088 	bcc.w	800d226 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	61da      	str	r2, [r3, #28]
 800d11c:	2304      	movs	r3, #4
 800d11e:	e08f      	b.n	800d240 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	0a5b      	lsrs	r3, r3, #9
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	8952      	ldrh	r2, [r2, #10]
 800d128:	3a01      	subs	r2, #1
 800d12a:	4013      	ands	r3, r2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d17a      	bne.n	800d226 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	699b      	ldr	r3, [r3, #24]
 800d136:	4619      	mov	r1, r3
 800d138:	4610      	mov	r0, r2
 800d13a:	f7ff fc80 	bl	800ca3e <get_fat>
 800d13e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d801      	bhi.n	800d14a <dir_next+0x8c>
 800d146:	2302      	movs	r3, #2
 800d148:	e07a      	b.n	800d240 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d101      	bne.n	800d156 <dir_next+0x98>
 800d152:	2301      	movs	r3, #1
 800d154:	e074      	b.n	800d240 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	697a      	ldr	r2, [r7, #20]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d358      	bcc.n	800d212 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d104      	bne.n	800d170 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	61da      	str	r2, [r3, #28]
 800d16c:	2304      	movs	r3, #4
 800d16e:	e067      	b.n	800d240 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	4619      	mov	r1, r3
 800d178:	4610      	mov	r0, r2
 800d17a:	f7ff fe59 	bl	800ce30 <create_chain>
 800d17e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <dir_next+0xcc>
 800d186:	2307      	movs	r3, #7
 800d188:	e05a      	b.n	800d240 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d101      	bne.n	800d194 <dir_next+0xd6>
 800d190:	2302      	movs	r3, #2
 800d192:	e055      	b.n	800d240 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19a:	d101      	bne.n	800d1a0 <dir_next+0xe2>
 800d19c:	2301      	movs	r3, #1
 800d19e:	e04f      	b.n	800d240 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff fb4d 	bl	800c840 <sync_window>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <dir_next+0xf2>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e047      	b.n	800d240 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	3334      	adds	r3, #52	; 0x34
 800d1b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7ff f977 	bl	800c4ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	6979      	ldr	r1, [r7, #20]
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f7ff fc1a 	bl	800ca00 <clust2sect>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	631a      	str	r2, [r3, #48]	; 0x30
 800d1d2:	e012      	b.n	800d1fa <dir_next+0x13c>
						fs->wflag = 1;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f7ff fb30 	bl	800c840 <sync_window>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <dir_next+0x12c>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e02a      	b.n	800d240 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	631a      	str	r2, [r3, #48]	; 0x30
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	895b      	ldrh	r3, [r3, #10]
 800d1fe:	461a      	mov	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	4293      	cmp	r3, r2
 800d204:	d3e6      	bcc.n	800d1d4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	1ad2      	subs	r2, r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d218:	6979      	ldr	r1, [r7, #20]
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff fbf0 	bl	800ca00 <clust2sect>
 800d220:	4602      	mov	r2, r0
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d238:	441a      	add	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d258:	2100      	movs	r1, #0
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7ff feb4 	bl	800cfc8 <dir_sdi>
 800d260:	4603      	mov	r3, r0
 800d262:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d264:	7dfb      	ldrb	r3, [r7, #23]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d12b      	bne.n	800d2c2 <dir_alloc+0x7a>
		n = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	4619      	mov	r1, r3
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f7ff fb27 	bl	800c8c8 <move_window>
 800d27a:	4603      	mov	r3, r0
 800d27c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d27e:	7dfb      	ldrb	r3, [r7, #23]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d11d      	bne.n	800d2c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	2be5      	cmp	r3, #229	; 0xe5
 800d28c:	d004      	beq.n	800d298 <dir_alloc+0x50>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d107      	bne.n	800d2a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	3301      	adds	r3, #1
 800d29c:	613b      	str	r3, [r7, #16]
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d102      	bne.n	800d2ac <dir_alloc+0x64>
 800d2a6:	e00c      	b.n	800d2c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff ff05 	bl	800d0be <dir_next>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d2b8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0d7      	beq.n	800d26e <dir_alloc+0x26>
 800d2be:	e000      	b.n	800d2c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d2c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d2c2:	7dfb      	ldrb	r3, [r7, #23]
 800d2c4:	2b04      	cmp	r3, #4
 800d2c6:	d101      	bne.n	800d2cc <dir_alloc+0x84>
 800d2c8:	2307      	movs	r3, #7
 800d2ca:	75fb      	strb	r3, [r7, #23]
	return res;
 800d2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3718      	adds	r7, #24
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b084      	sub	sp, #16
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	331a      	adds	r3, #26
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff f83f 	bl	800c368 <ld_word>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d109      	bne.n	800d30a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	3314      	adds	r3, #20
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff f834 	bl	800c368 <ld_word>
 800d300:	4603      	mov	r3, r0
 800d302:	041b      	lsls	r3, r3, #16
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	4313      	orrs	r3, r2
 800d308:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d30a:	68fb      	ldr	r3, [r7, #12]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	331a      	adds	r3, #26
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	b292      	uxth	r2, r2
 800d328:	4611      	mov	r1, r2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff f857 	bl	800c3de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b03      	cmp	r3, #3
 800d336:	d109      	bne.n	800d34c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	f103 0214 	add.w	r2, r3, #20
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	0c1b      	lsrs	r3, r3, #16
 800d342:	b29b      	uxth	r3, r3
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f7ff f849 	bl	800c3de <st_word>
	}
}
 800d34c:	bf00      	nop
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d354:	b590      	push	{r4, r7, lr}
 800d356:	b087      	sub	sp, #28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	331a      	adds	r3, #26
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff f800 	bl	800c368 <ld_word>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <cmp_lfn+0x1e>
 800d36e:	2300      	movs	r3, #0
 800d370:	e059      	b.n	800d426 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d37a:	1e5a      	subs	r2, r3, #1
 800d37c:	4613      	mov	r3, r2
 800d37e:	005b      	lsls	r3, r3, #1
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d388:	2301      	movs	r3, #1
 800d38a:	81fb      	strh	r3, [r7, #14]
 800d38c:	2300      	movs	r3, #0
 800d38e:	613b      	str	r3, [r7, #16]
 800d390:	e033      	b.n	800d3fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d392:	4a27      	ldr	r2, [pc, #156]	; (800d430 <cmp_lfn+0xdc>)
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	4413      	add	r3, r2
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	4413      	add	r3, r2
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe ffe1 	bl	800c368 <ld_word>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d3aa:	89fb      	ldrh	r3, [r7, #14]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d01a      	beq.n	800d3e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2bfe      	cmp	r3, #254	; 0xfe
 800d3b4:	d812      	bhi.n	800d3dc <cmp_lfn+0x88>
 800d3b6:	89bb      	ldrh	r3, [r7, #12]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe fead 	bl	800c118 <ff_wtoupper>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	461c      	mov	r4, r3
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	1c5a      	adds	r2, r3, #1
 800d3c6:	617a      	str	r2, [r7, #20]
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fe fea1 	bl	800c118 <ff_wtoupper>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	429c      	cmp	r4, r3
 800d3da:	d001      	beq.n	800d3e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d3dc:	2300      	movs	r3, #0
 800d3de:	e022      	b.n	800d426 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d3e0:	89bb      	ldrh	r3, [r7, #12]
 800d3e2:	81fb      	strh	r3, [r7, #14]
 800d3e4:	e006      	b.n	800d3f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d3e6:	89bb      	ldrh	r3, [r7, #12]
 800d3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d001      	beq.n	800d3f4 <cmp_lfn+0xa0>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	e018      	b.n	800d426 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	613b      	str	r3, [r7, #16]
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2b0c      	cmp	r3, #12
 800d3fe:	d9c8      	bls.n	800d392 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <cmp_lfn+0xd0>
 800d40c:	89fb      	ldrh	r3, [r7, #14]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d008      	beq.n	800d424 <cmp_lfn+0xd0>
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4413      	add	r3, r2
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <cmp_lfn+0xd0>
 800d420:	2300      	movs	r3, #0
 800d422:	e000      	b.n	800d426 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d424:	2301      	movs	r3, #1
}
 800d426:	4618      	mov	r0, r3
 800d428:	371c      	adds	r7, #28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd90      	pop	{r4, r7, pc}
 800d42e:	bf00      	nop
 800d430:	0800fbac 	.word	0x0800fbac

0800d434 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	4611      	mov	r1, r2
 800d440:	461a      	mov	r2, r3
 800d442:	460b      	mov	r3, r1
 800d444:	71fb      	strb	r3, [r7, #7]
 800d446:	4613      	mov	r3, r2
 800d448:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	330d      	adds	r3, #13
 800d44e:	79ba      	ldrb	r2, [r7, #6]
 800d450:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	330b      	adds	r3, #11
 800d456:	220f      	movs	r2, #15
 800d458:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	330c      	adds	r3, #12
 800d45e:	2200      	movs	r2, #0
 800d460:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	331a      	adds	r3, #26
 800d466:	2100      	movs	r1, #0
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fe ffb8 	bl	800c3de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	1e5a      	subs	r2, r3, #1
 800d472:	4613      	mov	r3, r2
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	4413      	add	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	82fb      	strh	r3, [r7, #22]
 800d482:	2300      	movs	r3, #0
 800d484:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d486:	8afb      	ldrh	r3, [r7, #22]
 800d488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d007      	beq.n	800d4a0 <put_lfn+0x6c>
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	61fa      	str	r2, [r7, #28]
 800d496:	005b      	lsls	r3, r3, #1
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	4413      	add	r3, r2
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4a0:	4a17      	ldr	r2, [pc, #92]	; (800d500 <put_lfn+0xcc>)
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	8afa      	ldrh	r2, [r7, #22]
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe ff93 	bl	800c3de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4b8:	8afb      	ldrh	r3, [r7, #22]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d102      	bne.n	800d4c4 <put_lfn+0x90>
 800d4be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	61bb      	str	r3, [r7, #24]
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	2b0c      	cmp	r3, #12
 800d4ce:	d9da      	bls.n	800d486 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d4d0:	8afb      	ldrh	r3, [r7, #22]
 800d4d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d006      	beq.n	800d4e8 <put_lfn+0xb4>
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d103      	bne.n	800d4f0 <put_lfn+0xbc>
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	79fa      	ldrb	r2, [r7, #7]
 800d4f4:	701a      	strb	r2, [r3, #0]
}
 800d4f6:	bf00      	nop
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	0800fbac 	.word	0x0800fbac

0800d504 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b08c      	sub	sp, #48	; 0x30
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d512:	220b      	movs	r2, #11
 800d514:	68b9      	ldr	r1, [r7, #8]
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f7fe ffa8 	bl	800c46c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2b05      	cmp	r3, #5
 800d520:	d929      	bls.n	800d576 <gen_numname+0x72>
		sr = seq;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d526:	e020      	b.n	800d56a <gen_numname+0x66>
			wc = *lfn++;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	1c9a      	adds	r2, r3, #2
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d532:	2300      	movs	r3, #0
 800d534:	62bb      	str	r3, [r7, #40]	; 0x28
 800d536:	e015      	b.n	800d564 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	005a      	lsls	r2, r3, #1
 800d53c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	4413      	add	r3, r2
 800d544:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d548:	085b      	lsrs	r3, r3, #1
 800d54a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d552:	2b00      	cmp	r3, #0
 800d554:	d003      	beq.n	800d55e <gen_numname+0x5a>
 800d556:	69fa      	ldr	r2, [r7, #28]
 800d558:	4b30      	ldr	r3, [pc, #192]	; (800d61c <gen_numname+0x118>)
 800d55a:	4053      	eors	r3, r2
 800d55c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	3301      	adds	r3, #1
 800d562:	62bb      	str	r3, [r7, #40]	; 0x28
 800d564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d566:	2b0f      	cmp	r3, #15
 800d568:	d9e6      	bls.n	800d538 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1da      	bne.n	800d528 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d576:	2307      	movs	r3, #7
 800d578:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	f003 030f 	and.w	r3, r3, #15
 800d582:	b2db      	uxtb	r3, r3
 800d584:	3330      	adds	r3, #48	; 0x30
 800d586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d58a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d58e:	2b39      	cmp	r3, #57	; 0x39
 800d590:	d904      	bls.n	800d59c <gen_numname+0x98>
 800d592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d596:	3307      	adds	r3, #7
 800d598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	1e5a      	subs	r2, r3, #1
 800d5a0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5a2:	3330      	adds	r3, #48	; 0x30
 800d5a4:	443b      	add	r3, r7
 800d5a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d5aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	091b      	lsrs	r3, r3, #4
 800d5b2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1df      	bne.n	800d57a <gen_numname+0x76>
	ns[i] = '~';
 800d5ba:	f107 0214 	add.w	r2, r7, #20
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	4413      	add	r3, r2
 800d5c2:	227e      	movs	r2, #126	; 0x7e
 800d5c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d5ca:	e002      	b.n	800d5d2 <gen_numname+0xce>
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d205      	bcs.n	800d5e6 <gen_numname+0xe2>
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	4413      	add	r3, r2
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b20      	cmp	r3, #32
 800d5e4:	d1f2      	bne.n	800d5cc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	2b07      	cmp	r3, #7
 800d5ea:	d807      	bhi.n	800d5fc <gen_numname+0xf8>
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5f2:	3330      	adds	r3, #48	; 0x30
 800d5f4:	443b      	add	r3, r7
 800d5f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d5fa:	e000      	b.n	800d5fe <gen_numname+0xfa>
 800d5fc:	2120      	movs	r1, #32
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	627a      	str	r2, [r7, #36]	; 0x24
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4413      	add	r3, r2
 800d608:	460a      	mov	r2, r1
 800d60a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	2b07      	cmp	r3, #7
 800d610:	d9e9      	bls.n	800d5e6 <gen_numname+0xe2>
}
 800d612:	bf00      	nop
 800d614:	bf00      	nop
 800d616:	3730      	adds	r7, #48	; 0x30
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	00011021 	.word	0x00011021

0800d620 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d62c:	230b      	movs	r3, #11
 800d62e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d630:	7bfb      	ldrb	r3, [r7, #15]
 800d632:	b2da      	uxtb	r2, r3
 800d634:	0852      	lsrs	r2, r2, #1
 800d636:	01db      	lsls	r3, r3, #7
 800d638:	4313      	orrs	r3, r2
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	1c59      	adds	r1, r3, #1
 800d640:	6079      	str	r1, [r7, #4]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	4413      	add	r3, r2
 800d646:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	60bb      	str	r3, [r7, #8]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1ed      	bne.n	800d630 <sum_sfn+0x10>
	return sum;
 800d654:	7bfb      	ldrb	r3, [r7, #15]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b086      	sub	sp, #24
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d670:	2100      	movs	r1, #0
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fca8 	bl	800cfc8 <dir_sdi>
 800d678:	4603      	mov	r3, r0
 800d67a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d67c:	7dfb      	ldrb	r3, [r7, #23]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d001      	beq.n	800d686 <dir_find+0x24>
 800d682:	7dfb      	ldrb	r3, [r7, #23]
 800d684:	e0a9      	b.n	800d7da <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d686:	23ff      	movs	r3, #255	; 0xff
 800d688:	753b      	strb	r3, [r7, #20]
 800d68a:	7d3b      	ldrb	r3, [r7, #20]
 800d68c:	757b      	strb	r3, [r7, #21]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f04f 32ff 	mov.w	r2, #4294967295
 800d694:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	4619      	mov	r1, r3
 800d69c:	6938      	ldr	r0, [r7, #16]
 800d69e:	f7ff f913 	bl	800c8c8 <move_window>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 8090 	bne.w	800d7ce <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d6b6:	7dbb      	ldrb	r3, [r7, #22]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d102      	bne.n	800d6c2 <dir_find+0x60>
 800d6bc:	2304      	movs	r3, #4
 800d6be:	75fb      	strb	r3, [r7, #23]
 800d6c0:	e08a      	b.n	800d7d8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	330b      	adds	r3, #11
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6ce:	73fb      	strb	r3, [r7, #15]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	7bfa      	ldrb	r2, [r7, #15]
 800d6d4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d6d6:	7dbb      	ldrb	r3, [r7, #22]
 800d6d8:	2be5      	cmp	r3, #229	; 0xe5
 800d6da:	d007      	beq.n	800d6ec <dir_find+0x8a>
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
 800d6de:	f003 0308 	and.w	r3, r3, #8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d009      	beq.n	800d6fa <dir_find+0x98>
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	2b0f      	cmp	r3, #15
 800d6ea:	d006      	beq.n	800d6fa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6ec:	23ff      	movs	r3, #255	; 0xff
 800d6ee:	757b      	strb	r3, [r7, #21]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d6f8:	e05e      	b.n	800d7b8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
 800d6fc:	2b0f      	cmp	r3, #15
 800d6fe:	d136      	bne.n	800d76e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d154      	bne.n	800d7b8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d70e:	7dbb      	ldrb	r3, [r7, #22]
 800d710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00d      	beq.n	800d734 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a1b      	ldr	r3, [r3, #32]
 800d71c:	7b5b      	ldrb	r3, [r3, #13]
 800d71e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d720:	7dbb      	ldrb	r3, [r7, #22]
 800d722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d726:	75bb      	strb	r3, [r7, #22]
 800d728:	7dbb      	ldrb	r3, [r7, #22]
 800d72a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	695a      	ldr	r2, [r3, #20]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d734:	7dba      	ldrb	r2, [r7, #22]
 800d736:	7d7b      	ldrb	r3, [r7, #21]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d115      	bne.n	800d768 <dir_find+0x106>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	330d      	adds	r3, #13
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	7d3a      	ldrb	r2, [r7, #20]
 800d746:	429a      	cmp	r2, r3
 800d748:	d10e      	bne.n	800d768 <dir_find+0x106>
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	68da      	ldr	r2, [r3, #12]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	4619      	mov	r1, r3
 800d754:	4610      	mov	r0, r2
 800d756:	f7ff fdfd 	bl	800d354 <cmp_lfn>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <dir_find+0x106>
 800d760:	7d7b      	ldrb	r3, [r7, #21]
 800d762:	3b01      	subs	r3, #1
 800d764:	b2db      	uxtb	r3, r3
 800d766:	e000      	b.n	800d76a <dir_find+0x108>
 800d768:	23ff      	movs	r3, #255	; 0xff
 800d76a:	757b      	strb	r3, [r7, #21]
 800d76c:	e024      	b.n	800d7b8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d76e:	7d7b      	ldrb	r3, [r7, #21]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d109      	bne.n	800d788 <dir_find+0x126>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff ff51 	bl	800d620 <sum_sfn>
 800d77e:	4603      	mov	r3, r0
 800d780:	461a      	mov	r2, r3
 800d782:	7d3b      	ldrb	r3, [r7, #20]
 800d784:	4293      	cmp	r3, r2
 800d786:	d024      	beq.n	800d7d2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d78e:	f003 0301 	and.w	r3, r3, #1
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10a      	bne.n	800d7ac <dir_find+0x14a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a18      	ldr	r0, [r3, #32]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3324      	adds	r3, #36	; 0x24
 800d79e:	220b      	movs	r2, #11
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	f7fe fe9f 	bl	800c4e4 <mem_cmp>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d014      	beq.n	800d7d6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d7ac:	23ff      	movs	r3, #255	; 0xff
 800d7ae:	757b      	strb	r3, [r7, #21]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7ff fc7f 	bl	800d0be <dir_next>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f43f af65 	beq.w	800d696 <dir_find+0x34>
 800d7cc:	e004      	b.n	800d7d8 <dir_find+0x176>
		if (res != FR_OK) break;
 800d7ce:	bf00      	nop
 800d7d0:	e002      	b.n	800d7d8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d7d2:	bf00      	nop
 800d7d4:	e000      	b.n	800d7d8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d7d6:	bf00      	nop

	return res;
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	; 0x30
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <dir_register+0x20>
 800d800:	2306      	movs	r3, #6
 800d802:	e0e0      	b.n	800d9c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d804:	2300      	movs	r3, #0
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
 800d808:	e002      	b.n	800d810 <dir_register+0x2c>
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	3301      	adds	r3, #1
 800d80e:	627b      	str	r3, [r7, #36]	; 0x24
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	4413      	add	r3, r2
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1f4      	bne.n	800d80a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d826:	f107 030c 	add.w	r3, r7, #12
 800d82a:	220c      	movs	r2, #12
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fe fe1d 	bl	800c46c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d032      	beq.n	800d8a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2240      	movs	r2, #64	; 0x40
 800d840:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d844:	2301      	movs	r3, #1
 800d846:	62bb      	str	r3, [r7, #40]	; 0x28
 800d848:	e016      	b.n	800d878 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	f107 010c 	add.w	r1, r7, #12
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85a:	f7ff fe53 	bl	800d504 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff feff 	bl	800d662 <dir_find>
 800d864:	4603      	mov	r3, r0
 800d866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	3301      	adds	r3, #1
 800d876:	62bb      	str	r3, [r7, #40]	; 0x28
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	2b63      	cmp	r3, #99	; 0x63
 800d87c:	d9e5      	bls.n	800d84a <dir_register+0x66>
 800d87e:	e000      	b.n	800d882 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d880:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	2b64      	cmp	r3, #100	; 0x64
 800d886:	d101      	bne.n	800d88c <dir_register+0xa8>
 800d888:	2307      	movs	r3, #7
 800d88a:	e09c      	b.n	800d9c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d88c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d890:	2b04      	cmp	r3, #4
 800d892:	d002      	beq.n	800d89a <dir_register+0xb6>
 800d894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d898:	e095      	b.n	800d9c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d89a:	7dfa      	ldrb	r2, [r7, #23]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d8a2:	7dfb      	ldrb	r3, [r7, #23]
 800d8a4:	f003 0302 	and.w	r3, r3, #2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d007      	beq.n	800d8bc <dir_register+0xd8>
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	330c      	adds	r3, #12
 800d8b0:	4a47      	ldr	r2, [pc, #284]	; (800d9d0 <dir_register+0x1ec>)
 800d8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8b6:	089b      	lsrs	r3, r3, #2
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	e000      	b.n	800d8be <dir_register+0xda>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d8c0:	6a39      	ldr	r1, [r7, #32]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7ff fcc0 	bl	800d248 <dir_alloc>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d148      	bne.n	800d968 <dir_register+0x184>
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	623b      	str	r3, [r7, #32]
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d042      	beq.n	800d968 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	695a      	ldr	r2, [r3, #20]
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	015b      	lsls	r3, r3, #5
 800d8ea:	1ad3      	subs	r3, r2, r3
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fb6a 	bl	800cfc8 <dir_sdi>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d132      	bne.n	800d968 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3324      	adds	r3, #36	; 0x24
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fe8a 	bl	800d620 <sum_sfn>
 800d90c:	4603      	mov	r3, r0
 800d90e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	69db      	ldr	r3, [r3, #28]
 800d914:	4619      	mov	r1, r3
 800d916:	69f8      	ldr	r0, [r7, #28]
 800d918:	f7fe ffd6 	bl	800c8c8 <move_window>
 800d91c:	4603      	mov	r3, r0
 800d91e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d926:	2b00      	cmp	r3, #0
 800d928:	d11d      	bne.n	800d966 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	68d8      	ldr	r0, [r3, #12]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a19      	ldr	r1, [r3, #32]
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	b2da      	uxtb	r2, r3
 800d936:	7efb      	ldrb	r3, [r7, #27]
 800d938:	f7ff fd7c 	bl	800d434 <put_lfn>
				fs->wflag = 1;
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	2201      	movs	r2, #1
 800d940:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d942:	2100      	movs	r1, #0
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff fbba 	bl	800d0be <dir_next>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d954:	2b00      	cmp	r3, #0
 800d956:	d107      	bne.n	800d968 <dir_register+0x184>
 800d958:	6a3b      	ldr	r3, [r7, #32]
 800d95a:	3b01      	subs	r3, #1
 800d95c:	623b      	str	r3, [r7, #32]
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1d5      	bne.n	800d910 <dir_register+0x12c>
 800d964:	e000      	b.n	800d968 <dir_register+0x184>
				if (res != FR_OK) break;
 800d966:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d128      	bne.n	800d9c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	4619      	mov	r1, r3
 800d976:	69f8      	ldr	r0, [r7, #28]
 800d978:	f7fe ffa6 	bl	800c8c8 <move_window>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d986:	2b00      	cmp	r3, #0
 800d988:	d11b      	bne.n	800d9c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	2220      	movs	r2, #32
 800d990:	2100      	movs	r1, #0
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe fd8b 	bl	800c4ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a18      	ldr	r0, [r3, #32]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3324      	adds	r3, #36	; 0x24
 800d9a0:	220b      	movs	r2, #11
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	f7fe fd62 	bl	800c46c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a1b      	ldr	r3, [r3, #32]
 800d9b2:	330c      	adds	r3, #12
 800d9b4:	f002 0218 	and.w	r2, r2, #24
 800d9b8:	b2d2      	uxtb	r2, r2
 800d9ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3730      	adds	r7, #48	; 0x30
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	4ec4ec4f 	.word	0x4ec4ec4f

0800d9d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08a      	sub	sp, #40	; 0x28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	613b      	str	r3, [r7, #16]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	617b      	str	r3, [r7, #20]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	61ba      	str	r2, [r7, #24]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800da02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da04:	2b1f      	cmp	r3, #31
 800da06:	d940      	bls.n	800da8a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800da08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da0a:	2b2f      	cmp	r3, #47	; 0x2f
 800da0c:	d006      	beq.n	800da1c <create_name+0x48>
 800da0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da10:	2b5c      	cmp	r3, #92	; 0x5c
 800da12:	d110      	bne.n	800da36 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da14:	e002      	b.n	800da1c <create_name+0x48>
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	3301      	adds	r3, #1
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	4413      	add	r3, r2
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	2b2f      	cmp	r3, #47	; 0x2f
 800da26:	d0f6      	beq.n	800da16 <create_name+0x42>
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	4413      	add	r3, r2
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b5c      	cmp	r3, #92	; 0x5c
 800da32:	d0f0      	beq.n	800da16 <create_name+0x42>
			break;
 800da34:	e02a      	b.n	800da8c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2bfe      	cmp	r3, #254	; 0xfe
 800da3a:	d901      	bls.n	800da40 <create_name+0x6c>
 800da3c:	2306      	movs	r3, #6
 800da3e:	e17d      	b.n	800dd3c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800da40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da42:	b2db      	uxtb	r3, r3
 800da44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800da46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da48:	2101      	movs	r1, #1
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fb28 	bl	800c0a0 <ff_convert>
 800da50:	4603      	mov	r3, r0
 800da52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800da54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <create_name+0x8a>
 800da5a:	2306      	movs	r3, #6
 800da5c:	e16e      	b.n	800dd3c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da60:	2b7f      	cmp	r3, #127	; 0x7f
 800da62:	d809      	bhi.n	800da78 <create_name+0xa4>
 800da64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da66:	4619      	mov	r1, r3
 800da68:	488d      	ldr	r0, [pc, #564]	; (800dca0 <create_name+0x2cc>)
 800da6a:	f7fe fd62 	bl	800c532 <chk_chr>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <create_name+0xa4>
 800da74:	2306      	movs	r3, #6
 800da76:	e161      	b.n	800dd3c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	1c5a      	adds	r2, r3, #1
 800da7c:	617a      	str	r2, [r7, #20]
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	4413      	add	r3, r2
 800da84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da86:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da88:	e7b4      	b.n	800d9f4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da8a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800da8c:	693a      	ldr	r2, [r7, #16]
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	441a      	add	r2, r3
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da98:	2b1f      	cmp	r3, #31
 800da9a:	d801      	bhi.n	800daa0 <create_name+0xcc>
 800da9c:	2304      	movs	r3, #4
 800da9e:	e000      	b.n	800daa2 <create_name+0xce>
 800daa0:	2300      	movs	r3, #0
 800daa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800daa6:	e011      	b.n	800dacc <create_name+0xf8>
		w = lfn[di - 1];
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800daae:	4413      	add	r3, r2
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4413      	add	r3, r2
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800daba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dabc:	2b20      	cmp	r3, #32
 800dabe:	d002      	beq.n	800dac6 <create_name+0xf2>
 800dac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dac2:	2b2e      	cmp	r3, #46	; 0x2e
 800dac4:	d106      	bne.n	800dad4 <create_name+0x100>
		di--;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	3b01      	subs	r3, #1
 800daca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1ea      	bne.n	800daa8 <create_name+0xd4>
 800dad2:	e000      	b.n	800dad6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dad4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	005b      	lsls	r3, r3, #1
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	4413      	add	r3, r2
 800dade:	2200      	movs	r2, #0
 800dae0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <create_name+0x118>
 800dae8:	2306      	movs	r3, #6
 800daea:	e127      	b.n	800dd3c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	3324      	adds	r3, #36	; 0x24
 800daf0:	220b      	movs	r2, #11
 800daf2:	2120      	movs	r1, #32
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fcda 	bl	800c4ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dafa:	2300      	movs	r3, #0
 800dafc:	61bb      	str	r3, [r7, #24]
 800dafe:	e002      	b.n	800db06 <create_name+0x132>
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	3301      	adds	r3, #1
 800db04:	61bb      	str	r3, [r7, #24]
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	4413      	add	r3, r2
 800db0e:	881b      	ldrh	r3, [r3, #0]
 800db10:	2b20      	cmp	r3, #32
 800db12:	d0f5      	beq.n	800db00 <create_name+0x12c>
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	4413      	add	r3, r2
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	2b2e      	cmp	r3, #46	; 0x2e
 800db20:	d0ee      	beq.n	800db00 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d009      	beq.n	800db3c <create_name+0x168>
 800db28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db2c:	f043 0303 	orr.w	r3, r3, #3
 800db30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800db34:	e002      	b.n	800db3c <create_name+0x168>
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	3b01      	subs	r3, #1
 800db3a:	617b      	str	r3, [r7, #20]
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d009      	beq.n	800db56 <create_name+0x182>
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db48:	4413      	add	r3, r2
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	4413      	add	r3, r2
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	2b2e      	cmp	r3, #46	; 0x2e
 800db54:	d1ef      	bne.n	800db36 <create_name+0x162>

	i = b = 0; ni = 8;
 800db56:	2300      	movs	r3, #0
 800db58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db5c:	2300      	movs	r3, #0
 800db5e:	623b      	str	r3, [r7, #32]
 800db60:	2308      	movs	r3, #8
 800db62:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	1c5a      	adds	r2, r3, #1
 800db68:	61ba      	str	r2, [r7, #24]
 800db6a:	005b      	lsls	r3, r3, #1
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4413      	add	r3, r2
 800db70:	881b      	ldrh	r3, [r3, #0]
 800db72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 8090 	beq.w	800dc9c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db7e:	2b20      	cmp	r3, #32
 800db80:	d006      	beq.n	800db90 <create_name+0x1bc>
 800db82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db84:	2b2e      	cmp	r3, #46	; 0x2e
 800db86:	d10a      	bne.n	800db9e <create_name+0x1ca>
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d006      	beq.n	800db9e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800db90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db94:	f043 0303 	orr.w	r3, r3, #3
 800db98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db9c:	e07d      	b.n	800dc9a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800db9e:	6a3a      	ldr	r2, [r7, #32]
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d203      	bcs.n	800dbae <create_name+0x1da>
 800dba6:	69ba      	ldr	r2, [r7, #24]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d123      	bne.n	800dbf6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	2b0b      	cmp	r3, #11
 800dbb2:	d106      	bne.n	800dbc2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbb8:	f043 0303 	orr.w	r3, r3, #3
 800dbbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbc0:	e075      	b.n	800dcae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dbc2:	69ba      	ldr	r2, [r7, #24]
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d005      	beq.n	800dbd6 <create_name+0x202>
 800dbca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbce:	f043 0303 	orr.w	r3, r3, #3
 800dbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dbd6:	69ba      	ldr	r2, [r7, #24]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d866      	bhi.n	800dcac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	2308      	movs	r3, #8
 800dbe4:	623b      	str	r3, [r7, #32]
 800dbe6:	230b      	movs	r3, #11
 800dbe8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dbea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbf4:	e051      	b.n	800dc9a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dbf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbf8:	2b7f      	cmp	r3, #127	; 0x7f
 800dbfa:	d914      	bls.n	800dc26 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dbfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbfe:	2100      	movs	r1, #0
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fe fa4d 	bl	800c0a0 <ff_convert>
 800dc06:	4603      	mov	r3, r0
 800dc08:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dc0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d004      	beq.n	800dc1a <create_name+0x246>
 800dc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc12:	3b80      	subs	r3, #128	; 0x80
 800dc14:	4a23      	ldr	r2, [pc, #140]	; (800dca4 <create_name+0x2d0>)
 800dc16:	5cd3      	ldrb	r3, [r2, r3]
 800dc18:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc1e:	f043 0302 	orr.w	r3, r3, #2
 800dc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d007      	beq.n	800dc3c <create_name+0x268>
 800dc2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc2e:	4619      	mov	r1, r3
 800dc30:	481d      	ldr	r0, [pc, #116]	; (800dca8 <create_name+0x2d4>)
 800dc32:	f7fe fc7e 	bl	800c532 <chk_chr>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d008      	beq.n	800dc4e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dc3c:	235f      	movs	r3, #95	; 0x5f
 800dc3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc44:	f043 0303 	orr.w	r3, r3, #3
 800dc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc4c:	e01b      	b.n	800dc86 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dc4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc50:	2b40      	cmp	r3, #64	; 0x40
 800dc52:	d909      	bls.n	800dc68 <create_name+0x294>
 800dc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc56:	2b5a      	cmp	r3, #90	; 0x5a
 800dc58:	d806      	bhi.n	800dc68 <create_name+0x294>
					b |= 2;
 800dc5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc5e:	f043 0302 	orr.w	r3, r3, #2
 800dc62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc66:	e00e      	b.n	800dc86 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dc68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc6a:	2b60      	cmp	r3, #96	; 0x60
 800dc6c:	d90b      	bls.n	800dc86 <create_name+0x2b2>
 800dc6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc70:	2b7a      	cmp	r3, #122	; 0x7a
 800dc72:	d808      	bhi.n	800dc86 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc78:	f043 0301 	orr.w	r3, r3, #1
 800dc7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc82:	3b20      	subs	r3, #32
 800dc84:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc86:	6a3b      	ldr	r3, [r7, #32]
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	623a      	str	r2, [r7, #32]
 800dc8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc8e:	b2d1      	uxtb	r1, r2
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	4413      	add	r3, r2
 800dc94:	460a      	mov	r2, r1
 800dc96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dc9a:	e763      	b.n	800db64 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dc9c:	bf00      	nop
 800dc9e:	e006      	b.n	800dcae <create_name+0x2da>
 800dca0:	0800f6e0 	.word	0x0800f6e0
 800dca4:	0800fb2c 	.word	0x0800fb2c
 800dca8:	0800f6ec 	.word	0x0800f6ec
			if (si > di) break;			/* No extension */
 800dcac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcb4:	2be5      	cmp	r3, #229	; 0xe5
 800dcb6:	d103      	bne.n	800dcc0 <create_name+0x2ec>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2205      	movs	r2, #5
 800dcbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	2b08      	cmp	r3, #8
 800dcc4:	d104      	bne.n	800dcd0 <create_name+0x2fc>
 800dcc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dcd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcd4:	f003 030c 	and.w	r3, r3, #12
 800dcd8:	2b0c      	cmp	r3, #12
 800dcda:	d005      	beq.n	800dce8 <create_name+0x314>
 800dcdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dce0:	f003 0303 	and.w	r3, r3, #3
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d105      	bne.n	800dcf4 <create_name+0x320>
 800dce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcec:	f043 0302 	orr.w	r3, r3, #2
 800dcf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf8:	f003 0302 	and.w	r3, r3, #2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d117      	bne.n	800dd30 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dd00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd04:	f003 0303 	and.w	r3, r3, #3
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d105      	bne.n	800dd18 <create_name+0x344>
 800dd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd10:	f043 0310 	orr.w	r3, r3, #16
 800dd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd1c:	f003 030c 	and.w	r3, r3, #12
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	d105      	bne.n	800dd30 <create_name+0x35c>
 800dd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd28:	f043 0308 	orr.w	r3, r3, #8
 800dd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dd3a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3728      	adds	r7, #40	; 0x28
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd58:	e002      	b.n	800dd60 <follow_path+0x1c>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	603b      	str	r3, [r7, #0]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b2f      	cmp	r3, #47	; 0x2f
 800dd66:	d0f8      	beq.n	800dd5a <follow_path+0x16>
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b5c      	cmp	r3, #92	; 0x5c
 800dd6e:	d0f4      	beq.n	800dd5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	2200      	movs	r2, #0
 800dd74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	2b1f      	cmp	r3, #31
 800dd7c:	d80a      	bhi.n	800dd94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2280      	movs	r2, #128	; 0x80
 800dd82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dd86:	2100      	movs	r1, #0
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff f91d 	bl	800cfc8 <dir_sdi>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	75fb      	strb	r3, [r7, #23]
 800dd92:	e043      	b.n	800de1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd94:	463b      	mov	r3, r7
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff fe1b 	bl	800d9d4 <create_name>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dda2:	7dfb      	ldrb	r3, [r7, #23]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d134      	bne.n	800de12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f7ff fc5a 	bl	800d662 <dir_find>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ddb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00a      	beq.n	800ddd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d127      	bne.n	800de16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddc6:	7afb      	ldrb	r3, [r7, #11]
 800ddc8:	f003 0304 	and.w	r3, r3, #4
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d122      	bne.n	800de16 <follow_path+0xd2>
 800ddd0:	2305      	movs	r3, #5
 800ddd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ddd4:	e01f      	b.n	800de16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddd6:	7afb      	ldrb	r3, [r7, #11]
 800ddd8:	f003 0304 	and.w	r3, r3, #4
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d11c      	bne.n	800de1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	799b      	ldrb	r3, [r3, #6]
 800dde4:	f003 0310 	and.w	r3, r3, #16
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d102      	bne.n	800ddf2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ddec:	2305      	movs	r3, #5
 800ddee:	75fb      	strb	r3, [r7, #23]
 800ddf0:	e014      	b.n	800de1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	695b      	ldr	r3, [r3, #20]
 800ddfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de00:	4413      	add	r3, r2
 800de02:	4619      	mov	r1, r3
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f7ff fa66 	bl	800d2d6 <ld_clust>
 800de0a:	4602      	mov	r2, r0
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de10:	e7c0      	b.n	800dd94 <follow_path+0x50>
			if (res != FR_OK) break;
 800de12:	bf00      	nop
 800de14:	e002      	b.n	800de1c <follow_path+0xd8>
				break;
 800de16:	bf00      	nop
 800de18:	e000      	b.n	800de1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de1a:	bf00      	nop
			}
		}
	}

	return res;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de26:	b480      	push	{r7}
 800de28:	b087      	sub	sp, #28
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de2e:	f04f 33ff 	mov.w	r3, #4294967295
 800de32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d031      	beq.n	800dea0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	e002      	b.n	800de4a <get_ldnumber+0x24>
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	3301      	adds	r3, #1
 800de48:	617b      	str	r3, [r7, #20]
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b1f      	cmp	r3, #31
 800de50:	d903      	bls.n	800de5a <get_ldnumber+0x34>
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b3a      	cmp	r3, #58	; 0x3a
 800de58:	d1f4      	bne.n	800de44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b3a      	cmp	r3, #58	; 0x3a
 800de60:	d11c      	bne.n	800de9c <get_ldnumber+0x76>
			tp = *path;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	60fa      	str	r2, [r7, #12]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	3b30      	subs	r3, #48	; 0x30
 800de72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	2b09      	cmp	r3, #9
 800de78:	d80e      	bhi.n	800de98 <get_ldnumber+0x72>
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d10a      	bne.n	800de98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d107      	bne.n	800de98 <get_ldnumber+0x72>
					vol = (int)i;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	3301      	adds	r3, #1
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	e002      	b.n	800dea2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de9c:	2300      	movs	r3, #0
 800de9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dea0:	693b      	ldr	r3, [r7, #16]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
	...

0800deb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	70da      	strb	r2, [r3, #3]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f04f 32ff 	mov.w	r2, #4294967295
 800dec6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dec8:	6839      	ldr	r1, [r7, #0]
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7fe fcfc 	bl	800c8c8 <move_window>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <check_fs+0x2a>
 800ded6:	2304      	movs	r3, #4
 800ded8:	e038      	b.n	800df4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3334      	adds	r3, #52	; 0x34
 800dede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fe fa40 	bl	800c368 <ld_word>
 800dee8:	4603      	mov	r3, r0
 800deea:	461a      	mov	r2, r3
 800deec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800def0:	429a      	cmp	r2, r3
 800def2:	d001      	beq.n	800def8 <check_fs+0x48>
 800def4:	2303      	movs	r3, #3
 800def6:	e029      	b.n	800df4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800defe:	2be9      	cmp	r3, #233	; 0xe9
 800df00:	d009      	beq.n	800df16 <check_fs+0x66>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df08:	2beb      	cmp	r3, #235	; 0xeb
 800df0a:	d11e      	bne.n	800df4a <check_fs+0x9a>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df12:	2b90      	cmp	r3, #144	; 0x90
 800df14:	d119      	bne.n	800df4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3334      	adds	r3, #52	; 0x34
 800df1a:	3336      	adds	r3, #54	; 0x36
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fe fa3b 	bl	800c398 <ld_dword>
 800df22:	4603      	mov	r3, r0
 800df24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df28:	4a0a      	ldr	r2, [pc, #40]	; (800df54 <check_fs+0xa4>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d101      	bne.n	800df32 <check_fs+0x82>
 800df2e:	2300      	movs	r3, #0
 800df30:	e00c      	b.n	800df4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3334      	adds	r3, #52	; 0x34
 800df36:	3352      	adds	r3, #82	; 0x52
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe fa2d 	bl	800c398 <ld_dword>
 800df3e:	4603      	mov	r3, r0
 800df40:	4a05      	ldr	r2, [pc, #20]	; (800df58 <check_fs+0xa8>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d101      	bne.n	800df4a <check_fs+0x9a>
 800df46:	2300      	movs	r3, #0
 800df48:	e000      	b.n	800df4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df4a:	2302      	movs	r3, #2
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	00544146 	.word	0x00544146
 800df58:	33544146 	.word	0x33544146

0800df5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b096      	sub	sp, #88	; 0x58
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2200      	movs	r2, #0
 800df6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f7ff ff58 	bl	800de26 <get_ldnumber>
 800df76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da01      	bge.n	800df82 <find_volume+0x26>
 800df7e:	230b      	movs	r3, #11
 800df80:	e22d      	b.n	800e3de <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df82:	4aa1      	ldr	r2, [pc, #644]	; (800e208 <find_volume+0x2ac>)
 800df84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d101      	bne.n	800df96 <find_volume+0x3a>
 800df92:	230c      	movs	r3, #12
 800df94:	e223      	b.n	800e3de <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df9c:	79fb      	ldrb	r3, [r7, #7]
 800df9e:	f023 0301 	bic.w	r3, r3, #1
 800dfa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01a      	beq.n	800dfe2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfae:	785b      	ldrb	r3, [r3, #1]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fe f93b 	bl	800c22c <disk_status>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfc0:	f003 0301 	and.w	r3, r3, #1
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10c      	bne.n	800dfe2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfc8:	79fb      	ldrb	r3, [r7, #7]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d007      	beq.n	800dfde <find_volume+0x82>
 800dfce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfd2:	f003 0304 	and.w	r3, r3, #4
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfda:	230a      	movs	r3, #10
 800dfdc:	e1ff      	b.n	800e3de <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e1fd      	b.n	800e3de <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	785b      	ldrb	r3, [r3, #1]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe f933 	bl	800c260 <disk_initialize>
 800dffa:	4603      	mov	r3, r0
 800dffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e00c:	2303      	movs	r3, #3
 800e00e:	e1e6      	b.n	800e3de <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d007      	beq.n	800e026 <find_volume+0xca>
 800e016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e01a:	f003 0304 	and.w	r3, r3, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d001      	beq.n	800e026 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e022:	230a      	movs	r3, #10
 800e024:	e1db      	b.n	800e3de <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e02a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e02c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e02e:	f7ff ff3f 	bl	800deb0 <check_fs>
 800e032:	4603      	mov	r3, r0
 800e034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d149      	bne.n	800e0d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e040:	2300      	movs	r3, #0
 800e042:	643b      	str	r3, [r7, #64]	; 0x40
 800e044:	e01e      	b.n	800e084 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e048:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e04e:	011b      	lsls	r3, r3, #4
 800e050:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e054:	4413      	add	r3, r2
 800e056:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05a:	3304      	adds	r3, #4
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <find_volume+0x114>
 800e062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e064:	3308      	adds	r3, #8
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe f996 	bl	800c398 <ld_dword>
 800e06c:	4602      	mov	r2, r0
 800e06e:	e000      	b.n	800e072 <find_volume+0x116>
 800e070:	2200      	movs	r2, #0
 800e072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	3358      	adds	r3, #88	; 0x58
 800e078:	443b      	add	r3, r7
 800e07a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e080:	3301      	adds	r3, #1
 800e082:	643b      	str	r3, [r7, #64]	; 0x40
 800e084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e086:	2b03      	cmp	r3, #3
 800e088:	d9dd      	bls.n	800e046 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e08a:	2300      	movs	r3, #0
 800e08c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e090:	2b00      	cmp	r3, #0
 800e092:	d002      	beq.n	800e09a <find_volume+0x13e>
 800e094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e096:	3b01      	subs	r3, #1
 800e098:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	3358      	adds	r3, #88	; 0x58
 800e0a0:	443b      	add	r3, r7
 800e0a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d005      	beq.n	800e0ba <find_volume+0x15e>
 800e0ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0b2:	f7ff fefd 	bl	800deb0 <check_fs>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	e000      	b.n	800e0bc <find_volume+0x160>
 800e0ba:	2303      	movs	r3, #3
 800e0bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d905      	bls.n	800e0d4 <find_volume+0x178>
 800e0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800e0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d9e2      	bls.n	800e09a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0d8:	2b04      	cmp	r3, #4
 800e0da:	d101      	bne.n	800e0e0 <find_volume+0x184>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e17e      	b.n	800e3de <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d901      	bls.n	800e0ec <find_volume+0x190>
 800e0e8:	230d      	movs	r3, #13
 800e0ea:	e178      	b.n	800e3de <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ee:	3334      	adds	r3, #52	; 0x34
 800e0f0:	330b      	adds	r3, #11
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fe f938 	bl	800c368 <ld_word>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0fe:	d001      	beq.n	800e104 <find_volume+0x1a8>
 800e100:	230d      	movs	r3, #13
 800e102:	e16c      	b.n	800e3de <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	3334      	adds	r3, #52	; 0x34
 800e108:	3316      	adds	r3, #22
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe f92c 	bl	800c368 <ld_word>
 800e110:	4603      	mov	r3, r0
 800e112:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <find_volume+0x1cc>
 800e11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11c:	3334      	adds	r3, #52	; 0x34
 800e11e:	3324      	adds	r3, #36	; 0x24
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe f939 	bl	800c398 <ld_dword>
 800e126:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e12c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e130:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	789b      	ldrb	r3, [r3, #2]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d005      	beq.n	800e14c <find_volume+0x1f0>
 800e140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e142:	789b      	ldrb	r3, [r3, #2]
 800e144:	2b02      	cmp	r3, #2
 800e146:	d001      	beq.n	800e14c <find_volume+0x1f0>
 800e148:	230d      	movs	r3, #13
 800e14a:	e148      	b.n	800e3de <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	789b      	ldrb	r3, [r3, #2]
 800e150:	461a      	mov	r2, r3
 800e152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e154:	fb02 f303 	mul.w	r3, r2, r3
 800e158:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e160:	b29a      	uxth	r2, r3
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	895b      	ldrh	r3, [r3, #10]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d008      	beq.n	800e180 <find_volume+0x224>
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	895b      	ldrh	r3, [r3, #10]
 800e172:	461a      	mov	r2, r3
 800e174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e176:	895b      	ldrh	r3, [r3, #10]
 800e178:	3b01      	subs	r3, #1
 800e17a:	4013      	ands	r3, r2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <find_volume+0x228>
 800e180:	230d      	movs	r3, #13
 800e182:	e12c      	b.n	800e3de <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	3334      	adds	r3, #52	; 0x34
 800e188:	3311      	adds	r3, #17
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe f8ec 	bl	800c368 <ld_word>
 800e190:	4603      	mov	r3, r0
 800e192:	461a      	mov	r2, r3
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	891b      	ldrh	r3, [r3, #8]
 800e19c:	f003 030f 	and.w	r3, r3, #15
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <find_volume+0x24e>
 800e1a6:	230d      	movs	r3, #13
 800e1a8:	e119      	b.n	800e3de <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	3334      	adds	r3, #52	; 0x34
 800e1ae:	3313      	adds	r3, #19
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fe f8d9 	bl	800c368 <ld_word>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d106      	bne.n	800e1ce <find_volume+0x272>
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c2:	3334      	adds	r3, #52	; 0x34
 800e1c4:	3320      	adds	r3, #32
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe f8e6 	bl	800c398 <ld_dword>
 800e1cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d0:	3334      	adds	r3, #52	; 0x34
 800e1d2:	330e      	adds	r3, #14
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe f8c7 	bl	800c368 <ld_word>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d101      	bne.n	800e1e8 <find_volume+0x28c>
 800e1e4:	230d      	movs	r3, #13
 800e1e6:	e0fa      	b.n	800e3de <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ec:	4413      	add	r3, r2
 800e1ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1f0:	8912      	ldrh	r2, [r2, #8]
 800e1f2:	0912      	lsrs	r2, r2, #4
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	4413      	add	r3, r2
 800e1f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d204      	bcs.n	800e20c <find_volume+0x2b0>
 800e202:	230d      	movs	r3, #13
 800e204:	e0eb      	b.n	800e3de <find_volume+0x482>
 800e206:	bf00      	nop
 800e208:	24001734 	.word	0x24001734
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e214:	8952      	ldrh	r2, [r2, #10]
 800e216:	fbb3 f3f2 	udiv	r3, r3, r2
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <find_volume+0x2ca>
 800e222:	230d      	movs	r3, #13
 800e224:	e0db      	b.n	800e3de <find_volume+0x482>
		fmt = FS_FAT32;
 800e226:	2303      	movs	r3, #3
 800e228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e232:	4293      	cmp	r3, r2
 800e234:	d802      	bhi.n	800e23c <find_volume+0x2e0>
 800e236:	2302      	movs	r3, #2
 800e238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e242:	4293      	cmp	r3, r2
 800e244:	d802      	bhi.n	800e24c <find_volume+0x2f0>
 800e246:	2301      	movs	r3, #1
 800e248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	1c9a      	adds	r2, r3, #2
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e258:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e25a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e25e:	441a      	add	r2, r3
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	441a      	add	r2, r3
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e26e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e272:	2b03      	cmp	r3, #3
 800e274:	d11e      	bne.n	800e2b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	3334      	adds	r3, #52	; 0x34
 800e27a:	332a      	adds	r3, #42	; 0x2a
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fe f873 	bl	800c368 <ld_word>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <find_volume+0x330>
 800e288:	230d      	movs	r3, #13
 800e28a:	e0a8      	b.n	800e3de <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	891b      	ldrh	r3, [r3, #8]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <find_volume+0x33c>
 800e294:	230d      	movs	r3, #13
 800e296:	e0a2      	b.n	800e3de <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	3334      	adds	r3, #52	; 0x34
 800e29c:	332c      	adds	r3, #44	; 0x2c
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe f87a 	bl	800c398 <ld_dword>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	647b      	str	r3, [r7, #68]	; 0x44
 800e2b2:	e01f      	b.n	800e2f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b6:	891b      	ldrh	r3, [r3, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <find_volume+0x364>
 800e2bc:	230d      	movs	r3, #13
 800e2be:	e08e      	b.n	800e3de <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c6:	441a      	add	r2, r3
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d103      	bne.n	800e2dc <find_volume+0x380>
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	699b      	ldr	r3, [r3, #24]
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	e00a      	b.n	800e2f2 <find_volume+0x396>
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	699a      	ldr	r2, [r3, #24]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	005b      	lsls	r3, r3, #1
 800e2e4:	4413      	add	r3, r2
 800e2e6:	085a      	lsrs	r2, r3, #1
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	69da      	ldr	r2, [r3, #28]
 800e2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e2fe:	0a5b      	lsrs	r3, r3, #9
 800e300:	429a      	cmp	r2, r3
 800e302:	d201      	bcs.n	800e308 <find_volume+0x3ac>
 800e304:	230d      	movs	r3, #13
 800e306:	e06a      	b.n	800e3de <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	f04f 32ff 	mov.w	r2, #4294967295
 800e30e:	615a      	str	r2, [r3, #20]
 800e310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e312:	695a      	ldr	r2, [r3, #20]
 800e314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e316:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31a:	2280      	movs	r2, #128	; 0x80
 800e31c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e31e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e322:	2b03      	cmp	r3, #3
 800e324:	d149      	bne.n	800e3ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	3334      	adds	r3, #52	; 0x34
 800e32a:	3330      	adds	r3, #48	; 0x30
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe f81b 	bl	800c368 <ld_word>
 800e332:	4603      	mov	r3, r0
 800e334:	2b01      	cmp	r3, #1
 800e336:	d140      	bne.n	800e3ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33a:	3301      	adds	r3, #1
 800e33c:	4619      	mov	r1, r3
 800e33e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e340:	f7fe fac2 	bl	800c8c8 <move_window>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d137      	bne.n	800e3ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34c:	2200      	movs	r2, #0
 800e34e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e352:	3334      	adds	r3, #52	; 0x34
 800e354:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fe f805 	bl	800c368 <ld_word>
 800e35e:	4603      	mov	r3, r0
 800e360:	461a      	mov	r2, r3
 800e362:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e366:	429a      	cmp	r2, r3
 800e368:	d127      	bne.n	800e3ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	3334      	adds	r3, #52	; 0x34
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fe f812 	bl	800c398 <ld_dword>
 800e374:	4603      	mov	r3, r0
 800e376:	4a1c      	ldr	r2, [pc, #112]	; (800e3e8 <find_volume+0x48c>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d11e      	bne.n	800e3ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	3334      	adds	r3, #52	; 0x34
 800e380:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe f807 	bl	800c398 <ld_dword>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4a17      	ldr	r2, [pc, #92]	; (800e3ec <find_volume+0x490>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d113      	bne.n	800e3ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e394:	3334      	adds	r3, #52	; 0x34
 800e396:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fd fffc 	bl	800c398 <ld_dword>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a8:	3334      	adds	r3, #52	; 0x34
 800e3aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fd fff2 	bl	800c398 <ld_dword>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e3c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3c2:	4b0b      	ldr	r3, [pc, #44]	; (800e3f0 <find_volume+0x494>)
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	4b09      	ldr	r3, [pc, #36]	; (800e3f0 <find_volume+0x494>)
 800e3cc:	801a      	strh	r2, [r3, #0]
 800e3ce:	4b08      	ldr	r3, [pc, #32]	; (800e3f0 <find_volume+0x494>)
 800e3d0:	881a      	ldrh	r2, [r3, #0]
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3d8:	f7fe fa0e 	bl	800c7f8 <clear_lock>
#endif
	return FR_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3758      	adds	r7, #88	; 0x58
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	41615252 	.word	0x41615252
 800e3ec:	61417272 	.word	0x61417272
 800e3f0:	24001738 	.word	0x24001738

0800e3f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e3fe:	2309      	movs	r3, #9
 800e400:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01c      	beq.n	800e442 <validate+0x4e>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d018      	beq.n	800e442 <validate+0x4e>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d013      	beq.n	800e442 <validate+0x4e>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	889a      	ldrh	r2, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	88db      	ldrh	r3, [r3, #6]
 800e424:	429a      	cmp	r2, r3
 800e426:	d10c      	bne.n	800e442 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	785b      	ldrb	r3, [r3, #1]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fd fefc 	bl	800c22c <disk_status>
 800e434:	4603      	mov	r3, r0
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <validate+0x4e>
			res = FR_OK;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e442:	7bfb      	ldrb	r3, [r7, #15]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <validate+0x5a>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	e000      	b.n	800e450 <validate+0x5c>
 800e44e:	2300      	movs	r3, #0
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	6013      	str	r3, [r2, #0]
	return res;
 800e454:	7bfb      	ldrb	r3, [r7, #15]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3710      	adds	r7, #16
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
	...

0800e460 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	4613      	mov	r3, r2
 800e46c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e472:	f107 0310 	add.w	r3, r7, #16
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff fcd5 	bl	800de26 <get_ldnumber>
 800e47c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	2b00      	cmp	r3, #0
 800e482:	da01      	bge.n	800e488 <f_mount+0x28>
 800e484:	230b      	movs	r3, #11
 800e486:	e02b      	b.n	800e4e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e488:	4a17      	ldr	r2, [pc, #92]	; (800e4e8 <f_mount+0x88>)
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e490:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d005      	beq.n	800e4a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e498:	69b8      	ldr	r0, [r7, #24]
 800e49a:	f7fe f9ad 	bl	800c7f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d002      	beq.n	800e4b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	490d      	ldr	r1, [pc, #52]	; (800e4e8 <f_mount+0x88>)
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d002      	beq.n	800e4c6 <f_mount+0x66>
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d001      	beq.n	800e4ca <f_mount+0x6a>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e00a      	b.n	800e4e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4ca:	f107 010c 	add.w	r1, r7, #12
 800e4ce:	f107 0308 	add.w	r3, r7, #8
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff fd41 	bl	800df5c <find_volume>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3720      	adds	r7, #32
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	24001734 	.word	0x24001734

0800e4ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b09a      	sub	sp, #104	; 0x68
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d101      	bne.n	800e504 <f_open+0x18>
 800e500:	2309      	movs	r3, #9
 800e502:	e1bd      	b.n	800e880 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e50a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e50c:	79fa      	ldrb	r2, [r7, #7]
 800e50e:	f107 0110 	add.w	r1, r7, #16
 800e512:	f107 0308 	add.w	r3, r7, #8
 800e516:	4618      	mov	r0, r3
 800e518:	f7ff fd20 	bl	800df5c <find_volume>
 800e51c:	4603      	mov	r3, r0
 800e51e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e526:	2b00      	cmp	r3, #0
 800e528:	f040 81a1 	bne.w	800e86e <f_open+0x382>
		dj.obj.fs = fs;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800e530:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e534:	f000 ff69 	bl	800f40a <ff_memalloc>
 800e538:	65b8      	str	r0, [r7, #88]	; 0x58
 800e53a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d101      	bne.n	800e544 <f_open+0x58>
 800e540:	2311      	movs	r3, #17
 800e542:	e19d      	b.n	800e880 <f_open+0x394>
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e548:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e54a:	68ba      	ldr	r2, [r7, #8]
 800e54c:	f107 0314 	add.w	r3, r7, #20
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff fbf6 	bl	800dd44 <follow_path>
 800e558:	4603      	mov	r3, r0
 800e55a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e55e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e562:	2b00      	cmp	r3, #0
 800e564:	d11a      	bne.n	800e59c <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e566:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e56a:	b25b      	sxtb	r3, r3
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	da03      	bge.n	800e578 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800e570:	2306      	movs	r3, #6
 800e572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e576:	e011      	b.n	800e59c <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e578:	79fb      	ldrb	r3, [r7, #7]
 800e57a:	f023 0301 	bic.w	r3, r3, #1
 800e57e:	2b00      	cmp	r3, #0
 800e580:	bf14      	ite	ne
 800e582:	2301      	movne	r3, #1
 800e584:	2300      	moveq	r3, #0
 800e586:	b2db      	uxtb	r3, r3
 800e588:	461a      	mov	r2, r3
 800e58a:	f107 0314 	add.w	r3, r7, #20
 800e58e:	4611      	mov	r1, r2
 800e590:	4618      	mov	r0, r3
 800e592:	f7fd ffe9 	bl	800c568 <chk_lock>
 800e596:	4603      	mov	r3, r0
 800e598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	f003 031c 	and.w	r3, r3, #28
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d07f      	beq.n	800e6a6 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800e5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d017      	beq.n	800e5de <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d10e      	bne.n	800e5d4 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5b6:	f7fe f833 	bl	800c620 <enq_lock>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d006      	beq.n	800e5ce <f_open+0xe2>
 800e5c0:	f107 0314 	add.w	r3, r7, #20
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7ff f90d 	bl	800d7e4 <dir_register>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	e000      	b.n	800e5d0 <f_open+0xe4>
 800e5ce:	2312      	movs	r3, #18
 800e5d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5d4:	79fb      	ldrb	r3, [r7, #7]
 800e5d6:	f043 0308 	orr.w	r3, r3, #8
 800e5da:	71fb      	strb	r3, [r7, #7]
 800e5dc:	e010      	b.n	800e600 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5de:	7ebb      	ldrb	r3, [r7, #26]
 800e5e0:	f003 0311 	and.w	r3, r3, #17
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d003      	beq.n	800e5f0 <f_open+0x104>
					res = FR_DENIED;
 800e5e8:	2307      	movs	r3, #7
 800e5ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5ee:	e007      	b.n	800e600 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	f003 0304 	and.w	r3, r3, #4
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d002      	beq.n	800e600 <f_open+0x114>
 800e5fa:	2308      	movs	r3, #8
 800e5fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e604:	2b00      	cmp	r3, #0
 800e606:	d168      	bne.n	800e6da <f_open+0x1ee>
 800e608:	79fb      	ldrb	r3, [r7, #7]
 800e60a:	f003 0308 	and.w	r3, r3, #8
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d063      	beq.n	800e6da <f_open+0x1ee>
				dw = GET_FATTIME();
 800e612:	f7fd fbb1 	bl	800bd78 <get_fattime>
 800e616:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61a:	330e      	adds	r3, #14
 800e61c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e61e:	4618      	mov	r0, r3
 800e620:	f7fd fef8 	bl	800c414 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e626:	3316      	adds	r3, #22
 800e628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fd fef2 	bl	800c414 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e632:	330b      	adds	r3, #11
 800e634:	2220      	movs	r2, #32
 800e636:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fe49 	bl	800d2d6 <ld_clust>
 800e644:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e64a:	2200      	movs	r2, #0
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fe fe61 	bl	800d314 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e654:	331c      	adds	r3, #28
 800e656:	2100      	movs	r1, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fd fedb 	bl	800c414 <st_dword>
					fs->wflag = 1;
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	2201      	movs	r2, #1
 800e662:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e666:	2b00      	cmp	r3, #0
 800e668:	d037      	beq.n	800e6da <f_open+0x1ee>
						dw = fs->winsect;
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66e:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800e670:	f107 0314 	add.w	r3, r7, #20
 800e674:	2200      	movs	r2, #0
 800e676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe fb74 	bl	800cd66 <remove_chain>
 800e67e:	4603      	mov	r3, r0
 800e680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e684:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d126      	bne.n	800e6da <f_open+0x1ee>
							res = move_window(fs, dw);
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe f919 	bl	800c8c8 <move_window>
 800e696:	4603      	mov	r3, r0
 800e698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6a0:	3a01      	subs	r2, #1
 800e6a2:	611a      	str	r2, [r3, #16]
 800e6a4:	e019      	b.n	800e6da <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d115      	bne.n	800e6da <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6ae:	7ebb      	ldrb	r3, [r7, #26]
 800e6b0:	f003 0310 	and.w	r3, r3, #16
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <f_open+0x1d4>
					res = FR_NO_FILE;
 800e6b8:	2304      	movs	r3, #4
 800e6ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6be:	e00c      	b.n	800e6da <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	f003 0302 	and.w	r3, r3, #2
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <f_open+0x1ee>
 800e6ca:	7ebb      	ldrb	r3, [r7, #26]
 800e6cc:	f003 0301 	and.w	r3, r3, #1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d002      	beq.n	800e6da <f_open+0x1ee>
						res = FR_DENIED;
 800e6d4:	2307      	movs	r3, #7
 800e6d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d128      	bne.n	800e734 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	f003 0308 	and.w	r3, r3, #8
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d003      	beq.n	800e6f4 <f_open+0x208>
				mode |= FA_MODIFIED;
 800e6ec:	79fb      	ldrb	r3, [r7, #7]
 800e6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e6fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e702:	79fb      	ldrb	r3, [r7, #7]
 800e704:	f023 0301 	bic.w	r3, r3, #1
 800e708:	2b00      	cmp	r3, #0
 800e70a:	bf14      	ite	ne
 800e70c:	2301      	movne	r3, #1
 800e70e:	2300      	moveq	r3, #0
 800e710:	b2db      	uxtb	r3, r3
 800e712:	461a      	mov	r2, r3
 800e714:	f107 0314 	add.w	r3, r7, #20
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fd ffa2 	bl	800c664 <inc_lock>
 800e720:	4602      	mov	r2, r0
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d102      	bne.n	800e734 <f_open+0x248>
 800e72e:	2302      	movs	r3, #2
 800e730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f040 8095 	bne.w	800e868 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e742:	4611      	mov	r1, r2
 800e744:	4618      	mov	r0, r3
 800e746:	f7fe fdc6 	bl	800d2d6 <ld_clust>
 800e74a:	4602      	mov	r2, r0
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e752:	331c      	adds	r3, #28
 800e754:	4618      	mov	r0, r3
 800e756:	f7fd fe1f 	bl	800c398 <ld_dword>
 800e75a:	4602      	mov	r2, r0
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	88da      	ldrh	r2, [r3, #6]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	79fa      	ldrb	r2, [r7, #7]
 800e778:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3330      	adds	r3, #48	; 0x30
 800e790:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e794:	2100      	movs	r1, #0
 800e796:	4618      	mov	r0, r3
 800e798:	f7fd fe89 	bl	800c4ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	f003 0320 	and.w	r3, r3, #32
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d060      	beq.n	800e868 <f_open+0x37c>
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d05c      	beq.n	800e868 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	68da      	ldr	r2, [r3, #12]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	895b      	ldrh	r3, [r3, #10]
 800e7ba:	025b      	lsls	r3, r3, #9
 800e7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7ca:	e016      	b.n	800e7fa <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fe f934 	bl	800ca3e <get_fat>
 800e7d6:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d802      	bhi.n	800e7e4 <f_open+0x2f8>
 800e7de:	2302      	movs	r3, #2
 800e7e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ea:	d102      	bne.n	800e7f2 <f_open+0x306>
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d103      	bne.n	800e80a <f_open+0x31e>
 800e802:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e806:	429a      	cmp	r2, r3
 800e808:	d8e0      	bhi.n	800e7cc <f_open+0x2e0>
				}
				fp->clust = clst;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e80e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e814:	2b00      	cmp	r3, #0
 800e816:	d127      	bne.n	800e868 <f_open+0x37c>
 800e818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d022      	beq.n	800e868 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe f8ea 	bl	800ca00 <clust2sect>
 800e82c:	64b8      	str	r0, [r7, #72]	; 0x48
 800e82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e830:	2b00      	cmp	r3, #0
 800e832:	d103      	bne.n	800e83c <f_open+0x350>
						res = FR_INT_ERR;
 800e834:	2302      	movs	r3, #2
 800e836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e83a:	e015      	b.n	800e868 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e83e:	0a5a      	lsrs	r2, r3, #9
 800e840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e842:	441a      	add	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	7858      	ldrb	r0, [r3, #1]
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6a1a      	ldr	r2, [r3, #32]
 800e856:	2301      	movs	r3, #1
 800e858:	f7fd fd28 	bl	800c2ac <disk_read>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d002      	beq.n	800e868 <f_open+0x37c>
 800e862:	2301      	movs	r3, #1
 800e864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800e868:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e86a:	f000 fdda 	bl	800f422 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e86e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e872:	2b00      	cmp	r3, #0
 800e874:	d002      	beq.n	800e87c <f_open+0x390>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e87c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e880:	4618      	mov	r0, r3
 800e882:	3768      	adds	r7, #104	; 0x68
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08e      	sub	sp, #56	; 0x38
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2200      	movs	r2, #0
 800e89e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f107 0214 	add.w	r2, r7, #20
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff fda3 	bl	800e3f4 <validate>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d107      	bne.n	800e8cc <f_read+0x44>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	7d5b      	ldrb	r3, [r3, #21]
 800e8c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e8c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <f_read+0x4a>
 800e8cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8d0:	e115      	b.n	800eafe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	7d1b      	ldrb	r3, [r3, #20]
 800e8d6:	f003 0301 	and.w	r3, r3, #1
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <f_read+0x5a>
 800e8de:	2307      	movs	r3, #7
 800e8e0:	e10d      	b.n	800eafe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	f240 80fe 	bls.w	800eaf4 <f_read+0x26c>
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e8fc:	e0fa      	b.n	800eaf4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e906:	2b00      	cmp	r3, #0
 800e908:	f040 80c6 	bne.w	800ea98 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	699b      	ldr	r3, [r3, #24]
 800e910:	0a5b      	lsrs	r3, r3, #9
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	8952      	ldrh	r2, [r2, #10]
 800e916:	3a01      	subs	r2, #1
 800e918:	4013      	ands	r3, r2
 800e91a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d12f      	bne.n	800e982 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d103      	bne.n	800e932 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	633b      	str	r3, [r7, #48]	; 0x30
 800e930:	e013      	b.n	800e95a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d007      	beq.n	800e94a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	4619      	mov	r1, r3
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7fe fb0d 	bl	800cf60 <clmt_clust>
 800e946:	6338      	str	r0, [r7, #48]	; 0x30
 800e948:	e007      	b.n	800e95a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	69db      	ldr	r3, [r3, #28]
 800e950:	4619      	mov	r1, r3
 800e952:	4610      	mov	r0, r2
 800e954:	f7fe f873 	bl	800ca3e <get_fat>
 800e958:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d804      	bhi.n	800e96a <f_read+0xe2>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2202      	movs	r2, #2
 800e964:	755a      	strb	r2, [r3, #21]
 800e966:	2302      	movs	r3, #2
 800e968:	e0c9      	b.n	800eafe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e970:	d104      	bne.n	800e97c <f_read+0xf4>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	755a      	strb	r2, [r3, #21]
 800e978:	2301      	movs	r3, #1
 800e97a:	e0c0      	b.n	800eafe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e980:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e982:	697a      	ldr	r2, [r7, #20]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	69db      	ldr	r3, [r3, #28]
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fe f838 	bl	800ca00 <clust2sect>
 800e990:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d104      	bne.n	800e9a2 <f_read+0x11a>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2202      	movs	r2, #2
 800e99c:	755a      	strb	r2, [r3, #21]
 800e99e:	2302      	movs	r3, #2
 800e9a0:	e0ad      	b.n	800eafe <f_read+0x276>
			sect += csect;
 800e9a2:	69ba      	ldr	r2, [r7, #24]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	4413      	add	r3, r2
 800e9a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	0a5b      	lsrs	r3, r3, #9
 800e9ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d039      	beq.n	800ea2a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9b6:	69fa      	ldr	r2, [r7, #28]
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	4413      	add	r3, r2
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	8952      	ldrh	r2, [r2, #10]
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d905      	bls.n	800e9d0 <f_read+0x148>
					cc = fs->csize - csect;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	895b      	ldrh	r3, [r3, #10]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	7858      	ldrb	r0, [r3, #1]
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	69ba      	ldr	r2, [r7, #24]
 800e9d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9da:	f7fd fc67 	bl	800c2ac <disk_read>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d004      	beq.n	800e9ee <f_read+0x166>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	755a      	strb	r2, [r3, #21]
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e087      	b.n	800eafe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	7d1b      	ldrb	r3, [r3, #20]
 800e9f2:	b25b      	sxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	da14      	bge.n	800ea22 <f_read+0x19a>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6a1a      	ldr	r2, [r3, #32]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d90d      	bls.n	800ea22 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6a1a      	ldr	r2, [r3, #32]
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	025b      	lsls	r3, r3, #9
 800ea10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea12:	18d0      	adds	r0, r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3330      	adds	r3, #48	; 0x30
 800ea18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f7fd fd25 	bl	800c46c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea24:	025b      	lsls	r3, r3, #9
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea28:	e050      	b.n	800eacc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d02e      	beq.n	800ea92 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	7d1b      	ldrb	r3, [r3, #20]
 800ea38:	b25b      	sxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da18      	bge.n	800ea70 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	7858      	ldrb	r0, [r3, #1]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6a1a      	ldr	r2, [r3, #32]
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f7fd fc4d 	bl	800c2ec <disk_write>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d004      	beq.n	800ea62 <f_read+0x1da>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	755a      	strb	r2, [r3, #21]
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e04d      	b.n	800eafe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7d1b      	ldrb	r3, [r3, #20]
 800ea66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	7858      	ldrb	r0, [r3, #1]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	69ba      	ldr	r2, [r7, #24]
 800ea7e:	f7fd fc15 	bl	800c2ac <disk_read>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <f_read+0x20a>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	755a      	strb	r2, [r3, #21]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e035      	b.n	800eafe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	69ba      	ldr	r2, [r7, #24]
 800ea96:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eaa4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eaa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d901      	bls.n	800eab2 <f_read+0x22a>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac0:	4413      	add	r3, r2
 800eac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac4:	4619      	mov	r1, r3
 800eac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eac8:	f7fd fcd0 	bl	800c46c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	4413      	add	r3, r2
 800ead2:	627b      	str	r3, [r7, #36]	; 0x24
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	699a      	ldr	r2, [r3, #24]
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	441a      	add	r2, r3
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	619a      	str	r2, [r3, #24]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	441a      	add	r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f47f af01 	bne.w	800e8fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3738      	adds	r7, #56	; 0x38
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b08c      	sub	sp, #48	; 0x30
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	60f8      	str	r0, [r7, #12]
 800eb0e:	60b9      	str	r1, [r7, #8]
 800eb10:	607a      	str	r2, [r7, #4]
 800eb12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f107 0210 	add.w	r2, r7, #16
 800eb24:	4611      	mov	r1, r2
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff fc64 	bl	800e3f4 <validate>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d107      	bne.n	800eb4a <f_write+0x44>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	7d5b      	ldrb	r3, [r3, #21]
 800eb3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <f_write+0x4a>
 800eb4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb4e:	e14b      	b.n	800ede8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	7d1b      	ldrb	r3, [r3, #20]
 800eb54:	f003 0302 	and.w	r3, r3, #2
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <f_write+0x5a>
 800eb5c:	2307      	movs	r3, #7
 800eb5e:	e143      	b.n	800ede8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	699a      	ldr	r2, [r3, #24]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	441a      	add	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	699b      	ldr	r3, [r3, #24]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	f080 812d 	bcs.w	800edcc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	43db      	mvns	r3, r3
 800eb78:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800eb7a:	e127      	b.n	800edcc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f040 80e3 	bne.w	800ed50 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	0a5b      	lsrs	r3, r3, #9
 800eb90:	693a      	ldr	r2, [r7, #16]
 800eb92:	8952      	ldrh	r2, [r2, #10]
 800eb94:	3a01      	subs	r2, #1
 800eb96:	4013      	ands	r3, r2
 800eb98:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d143      	bne.n	800ec28 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10c      	bne.n	800ebc2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d11a      	bne.n	800ebea <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe f939 	bl	800ce30 <create_chain>
 800ebbe:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebc0:	e013      	b.n	800ebea <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d007      	beq.n	800ebda <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7fe f9c5 	bl	800cf60 <clmt_clust>
 800ebd6:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebd8:	e007      	b.n	800ebea <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	69db      	ldr	r3, [r3, #28]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	f7fe f924 	bl	800ce30 <create_chain>
 800ebe8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ebea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 80f2 	beq.w	800edd6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d104      	bne.n	800ec02 <f_write+0xfc>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2202      	movs	r2, #2
 800ebfc:	755a      	strb	r2, [r3, #21]
 800ebfe:	2302      	movs	r3, #2
 800ec00:	e0f2      	b.n	800ede8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec08:	d104      	bne.n	800ec14 <f_write+0x10e>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	755a      	strb	r2, [r3, #21]
 800ec10:	2301      	movs	r3, #1
 800ec12:	e0e9      	b.n	800ede8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d102      	bne.n	800ec28 <f_write+0x122>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	7d1b      	ldrb	r3, [r3, #20]
 800ec2c:	b25b      	sxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	da18      	bge.n	800ec64 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	7858      	ldrb	r0, [r3, #1]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6a1a      	ldr	r2, [r3, #32]
 800ec40:	2301      	movs	r3, #1
 800ec42:	f7fd fb53 	bl	800c2ec <disk_write>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d004      	beq.n	800ec56 <f_write+0x150>
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	755a      	strb	r2, [r3, #21]
 800ec52:	2301      	movs	r3, #1
 800ec54:	e0c8      	b.n	800ede8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	7d1b      	ldrb	r3, [r3, #20]
 800ec5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec64:	693a      	ldr	r2, [r7, #16]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	69db      	ldr	r3, [r3, #28]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7fd fec7 	bl	800ca00 <clust2sect>
 800ec72:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d104      	bne.n	800ec84 <f_write+0x17e>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	755a      	strb	r2, [r3, #21]
 800ec80:	2302      	movs	r3, #2
 800ec82:	e0b1      	b.n	800ede8 <f_write+0x2e2>
			sect += csect;
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	4413      	add	r3, r2
 800ec8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	0a5b      	lsrs	r3, r3, #9
 800ec90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ec92:	6a3b      	ldr	r3, [r7, #32]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d03c      	beq.n	800ed12 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec98:	69ba      	ldr	r2, [r7, #24]
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	8952      	ldrh	r2, [r2, #10]
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d905      	bls.n	800ecb2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	895b      	ldrh	r3, [r3, #10]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	7858      	ldrb	r0, [r3, #1]
 800ecb6:	6a3b      	ldr	r3, [r7, #32]
 800ecb8:	697a      	ldr	r2, [r7, #20]
 800ecba:	69f9      	ldr	r1, [r7, #28]
 800ecbc:	f7fd fb16 	bl	800c2ec <disk_write>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d004      	beq.n	800ecd0 <f_write+0x1ca>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	755a      	strb	r2, [r3, #21]
 800eccc:	2301      	movs	r3, #1
 800ecce:	e08b      	b.n	800ede8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6a1a      	ldr	r2, [r3, #32]
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	6a3a      	ldr	r2, [r7, #32]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d915      	bls.n	800ed0a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6a1a      	ldr	r2, [r3, #32]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	025b      	lsls	r3, r3, #9
 800ecee:	69fa      	ldr	r2, [r7, #28]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	f7fd fbb8 	bl	800c46c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	7d1b      	ldrb	r3, [r3, #20]
 800ed00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	025b      	lsls	r3, r3, #9
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ed10:	e03f      	b.n	800ed92 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d016      	beq.n	800ed4a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	699a      	ldr	r2, [r3, #24]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d210      	bcs.n	800ed4a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	7858      	ldrb	r0, [r3, #1]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed32:	2301      	movs	r3, #1
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	f7fd fab9 	bl	800c2ac <disk_read>
 800ed3a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d004      	beq.n	800ed4a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2201      	movs	r2, #1
 800ed44:	755a      	strb	r2, [r3, #21]
 800ed46:	2301      	movs	r3, #1
 800ed48:	e04e      	b.n	800ede8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	697a      	ldr	r2, [r7, #20]
 800ed4e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ed5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ed5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d901      	bls.n	800ed6a <f_write+0x264>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed78:	4413      	add	r3, r2
 800ed7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed7c:	69f9      	ldr	r1, [r7, #28]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fd fb74 	bl	800c46c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	7d1b      	ldrb	r3, [r3, #20]
 800ed88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ed92:	69fa      	ldr	r2, [r7, #28]
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	4413      	add	r3, r2
 800ed98:	61fb      	str	r3, [r7, #28]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	699a      	ldr	r2, [r3, #24]
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	441a      	add	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	619a      	str	r2, [r3, #24]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	68da      	ldr	r2, [r3, #12]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	429a      	cmp	r2, r3
 800edb0:	bf38      	it	cc
 800edb2:	461a      	movcc	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	60da      	str	r2, [r3, #12]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	441a      	add	r2, r3
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f47f aed4 	bne.w	800eb7c <f_write+0x76>
 800edd4:	e000      	b.n	800edd8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800edd6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3730      	adds	r7, #48	; 0x30
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f107 0208 	add.w	r2, r7, #8
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7ff faf7 	bl	800e3f4 <validate>
 800ee06:	4603      	mov	r3, r0
 800ee08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d168      	bne.n	800eee2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d1b      	ldrb	r3, [r3, #20]
 800ee14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d062      	beq.n	800eee2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	b25b      	sxtb	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	da15      	bge.n	800ee52 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	7858      	ldrb	r0, [r3, #1]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6a1a      	ldr	r2, [r3, #32]
 800ee34:	2301      	movs	r3, #1
 800ee36:	f7fd fa59 	bl	800c2ec <disk_write>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <f_sync+0x54>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e04f      	b.n	800eee4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7d1b      	ldrb	r3, [r3, #20]
 800ee48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee4c:	b2da      	uxtb	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ee52:	f7fc ff91 	bl	800bd78 <get_fattime>
 800ee56:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4610      	mov	r0, r2
 800ee62:	f7fd fd31 	bl	800c8c8 <move_window>
 800ee66:	4603      	mov	r3, r0
 800ee68:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d138      	bne.n	800eee2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee74:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	330b      	adds	r3, #11
 800ee7a:	781a      	ldrb	r2, [r3, #0]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	330b      	adds	r3, #11
 800ee80:	f042 0220 	orr.w	r2, r2, #32
 800ee84:	b2d2      	uxtb	r2, r2
 800ee86:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	461a      	mov	r2, r3
 800ee92:	68f9      	ldr	r1, [r7, #12]
 800ee94:	f7fe fa3e 	bl	800d314 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f103 021c 	add.w	r2, r3, #28
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	4619      	mov	r1, r3
 800eea4:	4610      	mov	r0, r2
 800eea6:	f7fd fab5 	bl	800c414 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3316      	adds	r3, #22
 800eeae:	6939      	ldr	r1, [r7, #16]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fd faaf 	bl	800c414 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	3312      	adds	r3, #18
 800eeba:	2100      	movs	r1, #0
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fd fa8e 	bl	800c3de <st_word>
					fs->wflag = 1;
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	2201      	movs	r2, #1
 800eec6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fd fd2a 	bl	800c924 <sync_fs>
 800eed0:	4603      	mov	r3, r0
 800eed2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	7d1b      	ldrb	r3, [r3, #20]
 800eed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff ff7b 	bl	800edf0 <f_sync>
 800eefa:	4603      	mov	r3, r0
 800eefc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d118      	bne.n	800ef36 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f107 0208 	add.w	r2, r7, #8
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fa71 	bl	800e3f4 <validate>
 800ef12:	4603      	mov	r3, r0
 800ef14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef16:	7bfb      	ldrb	r3, [r7, #15]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10c      	bne.n	800ef36 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fd fc2d 	bl	800c780 <dec_lock>
 800ef26:	4603      	mov	r3, r0
 800ef28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ef2a:	7bfb      	ldrb	r3, [r7, #15]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b090      	sub	sp, #64	; 0x40
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f107 0208 	add.w	r2, r7, #8
 800ef50:	4611      	mov	r1, r2
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff fa4e 	bl	800e3f4 <validate>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d103      	bne.n	800ef6e <f_lseek+0x2e>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	7d5b      	ldrb	r3, [r3, #21]
 800ef6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ef6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <f_lseek+0x3c>
 800ef76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef7a:	e1e6      	b.n	800f34a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f000 80d1 	beq.w	800f128 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8c:	d15a      	bne.n	800f044 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef92:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef96:	1d1a      	adds	r2, r3, #4
 800ef98:	627a      	str	r2, [r7, #36]	; 0x24
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	617b      	str	r3, [r7, #20]
 800ef9e:	2302      	movs	r3, #2
 800efa0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d03a      	beq.n	800f024 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	613b      	str	r3, [r7, #16]
 800efb2:	2300      	movs	r3, #0
 800efb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb8:	3302      	adds	r3, #2
 800efba:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800efbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	3301      	adds	r3, #1
 800efc4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fd fd37 	bl	800ca3e <get_fat>
 800efd0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d804      	bhi.n	800efe2 <f_lseek+0xa2>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2202      	movs	r2, #2
 800efdc:	755a      	strb	r2, [r3, #21]
 800efde:	2302      	movs	r3, #2
 800efe0:	e1b3      	b.n	800f34a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe8:	d104      	bne.n	800eff4 <f_lseek+0xb4>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2201      	movs	r2, #1
 800efee:	755a      	strb	r2, [r3, #21]
 800eff0:	2301      	movs	r3, #1
 800eff2:	e1aa      	b.n	800f34a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3301      	adds	r3, #1
 800eff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800effa:	429a      	cmp	r2, r3
 800effc:	d0de      	beq.n	800efbc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800effe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	429a      	cmp	r2, r3
 800f004:	d809      	bhi.n	800f01a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	627a      	str	r2, [r7, #36]	; 0x24
 800f00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	1d1a      	adds	r2, r3, #4
 800f014:	627a      	str	r2, [r7, #36]	; 0x24
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f020:	429a      	cmp	r2, r3
 800f022:	d3c4      	bcc.n	800efae <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f02a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	429a      	cmp	r2, r3
 800f032:	d803      	bhi.n	800f03c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	e184      	b.n	800f346 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f03c:	2311      	movs	r3, #17
 800f03e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f042:	e180      	b.n	800f346 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d902      	bls.n	800f054 <f_lseek+0x114>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	683a      	ldr	r2, [r7, #0]
 800f058:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f000 8172 	beq.w	800f346 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	3b01      	subs	r3, #1
 800f066:	4619      	mov	r1, r3
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f7fd ff79 	bl	800cf60 <clmt_clust>
 800f06e:	4602      	mov	r2, r0
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	4619      	mov	r1, r3
 800f07c:	4610      	mov	r0, r2
 800f07e:	f7fd fcbf 	bl	800ca00 <clust2sect>
 800f082:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d104      	bne.n	800f094 <f_lseek+0x154>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2202      	movs	r2, #2
 800f08e:	755a      	strb	r2, [r3, #21]
 800f090:	2302      	movs	r3, #2
 800f092:	e15a      	b.n	800f34a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	3b01      	subs	r3, #1
 800f098:	0a5b      	lsrs	r3, r3, #9
 800f09a:	68ba      	ldr	r2, [r7, #8]
 800f09c:	8952      	ldrh	r2, [r2, #10]
 800f09e:	3a01      	subs	r2, #1
 800f0a0:	4013      	ands	r3, r2
 800f0a2:	69ba      	ldr	r2, [r7, #24]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	699b      	ldr	r3, [r3, #24]
 800f0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 8148 	beq.w	800f346 <f_lseek+0x406>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a1b      	ldr	r3, [r3, #32]
 800f0ba:	69ba      	ldr	r2, [r7, #24]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	f000 8142 	beq.w	800f346 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	b25b      	sxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	da18      	bge.n	800f0fe <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	7858      	ldrb	r0, [r3, #1]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1a      	ldr	r2, [r3, #32]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	f7fd f906 	bl	800c2ec <disk_write>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d004      	beq.n	800f0f0 <f_lseek+0x1b0>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	755a      	strb	r2, [r3, #21]
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e12c      	b.n	800f34a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	7d1b      	ldrb	r3, [r3, #20]
 800f0f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	7858      	ldrb	r0, [r3, #1]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f108:	2301      	movs	r3, #1
 800f10a:	69ba      	ldr	r2, [r7, #24]
 800f10c:	f7fd f8ce 	bl	800c2ac <disk_read>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d004      	beq.n	800f120 <f_lseek+0x1e0>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	755a      	strb	r2, [r3, #21]
 800f11c:	2301      	movs	r3, #1
 800f11e:	e114      	b.n	800f34a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	69ba      	ldr	r2, [r7, #24]
 800f124:	621a      	str	r2, [r3, #32]
 800f126:	e10e      	b.n	800f346 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	683a      	ldr	r2, [r7, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d908      	bls.n	800f144 <f_lseek+0x204>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	7d1b      	ldrb	r3, [r3, #20]
 800f136:	f003 0302 	and.w	r3, r3, #2
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d102      	bne.n	800f144 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	637b      	str	r3, [r7, #52]	; 0x34
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f152:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	f000 80a7 	beq.w	800f2aa <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	895b      	ldrh	r3, [r3, #10]
 800f160:	025b      	lsls	r3, r3, #9
 800f162:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f164:	6a3b      	ldr	r3, [r7, #32]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d01b      	beq.n	800f1a2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	1e5a      	subs	r2, r3, #1
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	fbb2 f2f3 	udiv	r2, r2, r3
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	1e59      	subs	r1, r3, #1
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f17e:	429a      	cmp	r2, r3
 800f180:	d30f      	bcc.n	800f1a2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	1e5a      	subs	r2, r3, #1
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	425b      	negs	r3, r3
 800f18a:	401a      	ands	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	699b      	ldr	r3, [r3, #24]
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	69db      	ldr	r3, [r3, #28]
 800f19e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1a0:	e022      	b.n	800f1e8 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d119      	bne.n	800f1e2 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fd fe3c 	bl	800ce30 <create_chain>
 800f1b8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d104      	bne.n	800f1ca <f_lseek+0x28a>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	755a      	strb	r2, [r3, #21]
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	e0bf      	b.n	800f34a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d0:	d104      	bne.n	800f1dc <f_lseek+0x29c>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	755a      	strb	r2, [r3, #21]
 800f1d8:	2301      	movs	r3, #1
 800f1da:	e0b6      	b.n	800f34a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1e0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1e6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d05d      	beq.n	800f2aa <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f1ee:	e03a      	b.n	800f266 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f1f0:	683a      	ldr	r2, [r7, #0]
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	603b      	str	r3, [r7, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	699a      	ldr	r2, [r3, #24]
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	441a      	add	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7d1b      	ldrb	r3, [r3, #20]
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00b      	beq.n	800f228 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f214:	4618      	mov	r0, r3
 800f216:	f7fd fe0b 	bl	800ce30 <create_chain>
 800f21a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d108      	bne.n	800f234 <f_lseek+0x2f4>
							ofs = 0; break;
 800f222:	2300      	movs	r3, #0
 800f224:	603b      	str	r3, [r7, #0]
 800f226:	e022      	b.n	800f26e <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fd fc06 	bl	800ca3e <get_fat>
 800f232:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23a:	d104      	bne.n	800f246 <f_lseek+0x306>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	755a      	strb	r2, [r3, #21]
 800f242:	2301      	movs	r3, #1
 800f244:	e081      	b.n	800f34a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d904      	bls.n	800f256 <f_lseek+0x316>
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f252:	429a      	cmp	r2, r3
 800f254:	d304      	bcc.n	800f260 <f_lseek+0x320>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2202      	movs	r2, #2
 800f25a:	755a      	strb	r2, [r3, #21]
 800f25c:	2302      	movs	r3, #2
 800f25e:	e074      	b.n	800f34a <f_lseek+0x40a>
					fp->clust = clst;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f264:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d8c0      	bhi.n	800f1f0 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	699a      	ldr	r2, [r3, #24]
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	441a      	add	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f280:	2b00      	cmp	r3, #0
 800f282:	d012      	beq.n	800f2aa <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fd fbb9 	bl	800ca00 <clust2sect>
 800f28e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f292:	2b00      	cmp	r3, #0
 800f294:	d104      	bne.n	800f2a0 <f_lseek+0x360>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2202      	movs	r2, #2
 800f29a:	755a      	strb	r2, [r3, #21]
 800f29c:	2302      	movs	r3, #2
 800f29e:	e054      	b.n	800f34a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	0a5b      	lsrs	r3, r3, #9
 800f2a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2a6:	4413      	add	r3, r2
 800f2a8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	699a      	ldr	r2, [r3, #24]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d90a      	bls.n	800f2cc <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	699a      	ldr	r2, [r3, #24]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	7d1b      	ldrb	r3, [r3, #20]
 800f2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2c6:	b2da      	uxtb	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	699b      	ldr	r3, [r3, #24]
 800f2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d036      	beq.n	800f346 <f_lseek+0x406>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a1b      	ldr	r3, [r3, #32]
 800f2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d031      	beq.n	800f346 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	7d1b      	ldrb	r3, [r3, #20]
 800f2e6:	b25b      	sxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	da18      	bge.n	800f31e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	7858      	ldrb	r0, [r3, #1]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a1a      	ldr	r2, [r3, #32]
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	f7fc fff6 	bl	800c2ec <disk_write>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d004      	beq.n	800f310 <f_lseek+0x3d0>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2201      	movs	r2, #1
 800f30a:	755a      	strb	r2, [r3, #21]
 800f30c:	2301      	movs	r3, #1
 800f30e:	e01c      	b.n	800f34a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	7858      	ldrb	r0, [r3, #1]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f328:	2301      	movs	r3, #1
 800f32a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f32c:	f7fc ffbe 	bl	800c2ac <disk_read>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d004      	beq.n	800f340 <f_lseek+0x400>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	755a      	strb	r2, [r3, #21]
 800f33c:	2301      	movs	r3, #1
 800f33e:	e004      	b.n	800f34a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f344:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f346:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3740      	adds	r7, #64	; 0x40
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
	...

0800f354 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f354:	b480      	push	{r7}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	4613      	mov	r3, r2
 800f360:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f362:	2301      	movs	r3, #1
 800f364:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f36a:	4b1f      	ldr	r3, [pc, #124]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f36c:	7a5b      	ldrb	r3, [r3, #9]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d131      	bne.n	800f3d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f374:	4b1c      	ldr	r3, [pc, #112]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f376:	7a5b      	ldrb	r3, [r3, #9]
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	461a      	mov	r2, r3
 800f37c:	4b1a      	ldr	r3, [pc, #104]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f37e:	2100      	movs	r1, #0
 800f380:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f382:	4b19      	ldr	r3, [pc, #100]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f384:	7a5b      	ldrb	r3, [r3, #9]
 800f386:	b2db      	uxtb	r3, r3
 800f388:	4a17      	ldr	r2, [pc, #92]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	4413      	add	r3, r2
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f392:	4b15      	ldr	r3, [pc, #84]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f394:	7a5b      	ldrb	r3, [r3, #9]
 800f396:	b2db      	uxtb	r3, r3
 800f398:	461a      	mov	r2, r3
 800f39a:	4b13      	ldr	r3, [pc, #76]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f39c:	4413      	add	r3, r2
 800f39e:	79fa      	ldrb	r2, [r7, #7]
 800f3a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f3a2:	4b11      	ldr	r3, [pc, #68]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f3a4:	7a5b      	ldrb	r3, [r3, #9]
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	1c5a      	adds	r2, r3, #1
 800f3aa:	b2d1      	uxtb	r1, r2
 800f3ac:	4a0e      	ldr	r2, [pc, #56]	; (800f3e8 <FATFS_LinkDriverEx+0x94>)
 800f3ae:	7251      	strb	r1, [r2, #9]
 800f3b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f3b2:	7dbb      	ldrb	r3, [r7, #22]
 800f3b4:	3330      	adds	r3, #48	; 0x30
 800f3b6:	b2da      	uxtb	r2, r3
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	223a      	movs	r2, #58	; 0x3a
 800f3c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	3302      	adds	r3, #2
 800f3c8:	222f      	movs	r2, #47	; 0x2f
 800f3ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	3303      	adds	r3, #3
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	371c      	adds	r7, #28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	2400175c 	.word	0x2400175c

0800f3ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7ff ffaa 	bl	800f354 <FATFS_LinkDriverEx>
 800f400:	4603      	mov	r3, r0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b082      	sub	sp, #8
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f83a 	bl	800f48c <malloc>
 800f418:	4603      	mov	r3, r0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f836 	bl	800f49c <free>
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <__errno>:
 800f438:	4b01      	ldr	r3, [pc, #4]	; (800f440 <__errno+0x8>)
 800f43a:	6818      	ldr	r0, [r3, #0]
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	2400004c 	.word	0x2400004c

0800f444 <__libc_init_array>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	4d0d      	ldr	r5, [pc, #52]	; (800f47c <__libc_init_array+0x38>)
 800f448:	4c0d      	ldr	r4, [pc, #52]	; (800f480 <__libc_init_array+0x3c>)
 800f44a:	1b64      	subs	r4, r4, r5
 800f44c:	10a4      	asrs	r4, r4, #2
 800f44e:	2600      	movs	r6, #0
 800f450:	42a6      	cmp	r6, r4
 800f452:	d109      	bne.n	800f468 <__libc_init_array+0x24>
 800f454:	4d0b      	ldr	r5, [pc, #44]	; (800f484 <__libc_init_array+0x40>)
 800f456:	4c0c      	ldr	r4, [pc, #48]	; (800f488 <__libc_init_array+0x44>)
 800f458:	f000 f92e 	bl	800f6b8 <_init>
 800f45c:	1b64      	subs	r4, r4, r5
 800f45e:	10a4      	asrs	r4, r4, #2
 800f460:	2600      	movs	r6, #0
 800f462:	42a6      	cmp	r6, r4
 800f464:	d105      	bne.n	800f472 <__libc_init_array+0x2e>
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	f855 3b04 	ldr.w	r3, [r5], #4
 800f46c:	4798      	blx	r3
 800f46e:	3601      	adds	r6, #1
 800f470:	e7ee      	b.n	800f450 <__libc_init_array+0xc>
 800f472:	f855 3b04 	ldr.w	r3, [r5], #4
 800f476:	4798      	blx	r3
 800f478:	3601      	adds	r6, #1
 800f47a:	e7f2      	b.n	800f462 <__libc_init_array+0x1e>
 800f47c:	0800fbc4 	.word	0x0800fbc4
 800f480:	0800fbc4 	.word	0x0800fbc4
 800f484:	0800fbc4 	.word	0x0800fbc4
 800f488:	0800fbc8 	.word	0x0800fbc8

0800f48c <malloc>:
 800f48c:	4b02      	ldr	r3, [pc, #8]	; (800f498 <malloc+0xc>)
 800f48e:	4601      	mov	r1, r0
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	f000 b87f 	b.w	800f594 <_malloc_r>
 800f496:	bf00      	nop
 800f498:	2400004c 	.word	0x2400004c

0800f49c <free>:
 800f49c:	4b02      	ldr	r3, [pc, #8]	; (800f4a8 <free+0xc>)
 800f49e:	4601      	mov	r1, r0
 800f4a0:	6818      	ldr	r0, [r3, #0]
 800f4a2:	f000 b80b 	b.w	800f4bc <_free_r>
 800f4a6:	bf00      	nop
 800f4a8:	2400004c 	.word	0x2400004c

0800f4ac <memset>:
 800f4ac:	4402      	add	r2, r0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d100      	bne.n	800f4b6 <memset+0xa>
 800f4b4:	4770      	bx	lr
 800f4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ba:	e7f9      	b.n	800f4b0 <memset+0x4>

0800f4bc <_free_r>:
 800f4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	d044      	beq.n	800f54c <_free_r+0x90>
 800f4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4c6:	9001      	str	r0, [sp, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f4ce:	bfb8      	it	lt
 800f4d0:	18e4      	addlt	r4, r4, r3
 800f4d2:	f000 f8e3 	bl	800f69c <__malloc_lock>
 800f4d6:	4a1e      	ldr	r2, [pc, #120]	; (800f550 <_free_r+0x94>)
 800f4d8:	9801      	ldr	r0, [sp, #4]
 800f4da:	6813      	ldr	r3, [r2, #0]
 800f4dc:	b933      	cbnz	r3, 800f4ec <_free_r+0x30>
 800f4de:	6063      	str	r3, [r4, #4]
 800f4e0:	6014      	str	r4, [r2, #0]
 800f4e2:	b003      	add	sp, #12
 800f4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4e8:	f000 b8de 	b.w	800f6a8 <__malloc_unlock>
 800f4ec:	42a3      	cmp	r3, r4
 800f4ee:	d908      	bls.n	800f502 <_free_r+0x46>
 800f4f0:	6825      	ldr	r5, [r4, #0]
 800f4f2:	1961      	adds	r1, r4, r5
 800f4f4:	428b      	cmp	r3, r1
 800f4f6:	bf01      	itttt	eq
 800f4f8:	6819      	ldreq	r1, [r3, #0]
 800f4fa:	685b      	ldreq	r3, [r3, #4]
 800f4fc:	1949      	addeq	r1, r1, r5
 800f4fe:	6021      	streq	r1, [r4, #0]
 800f500:	e7ed      	b.n	800f4de <_free_r+0x22>
 800f502:	461a      	mov	r2, r3
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	b10b      	cbz	r3, 800f50c <_free_r+0x50>
 800f508:	42a3      	cmp	r3, r4
 800f50a:	d9fa      	bls.n	800f502 <_free_r+0x46>
 800f50c:	6811      	ldr	r1, [r2, #0]
 800f50e:	1855      	adds	r5, r2, r1
 800f510:	42a5      	cmp	r5, r4
 800f512:	d10b      	bne.n	800f52c <_free_r+0x70>
 800f514:	6824      	ldr	r4, [r4, #0]
 800f516:	4421      	add	r1, r4
 800f518:	1854      	adds	r4, r2, r1
 800f51a:	42a3      	cmp	r3, r4
 800f51c:	6011      	str	r1, [r2, #0]
 800f51e:	d1e0      	bne.n	800f4e2 <_free_r+0x26>
 800f520:	681c      	ldr	r4, [r3, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	6053      	str	r3, [r2, #4]
 800f526:	4421      	add	r1, r4
 800f528:	6011      	str	r1, [r2, #0]
 800f52a:	e7da      	b.n	800f4e2 <_free_r+0x26>
 800f52c:	d902      	bls.n	800f534 <_free_r+0x78>
 800f52e:	230c      	movs	r3, #12
 800f530:	6003      	str	r3, [r0, #0]
 800f532:	e7d6      	b.n	800f4e2 <_free_r+0x26>
 800f534:	6825      	ldr	r5, [r4, #0]
 800f536:	1961      	adds	r1, r4, r5
 800f538:	428b      	cmp	r3, r1
 800f53a:	bf04      	itt	eq
 800f53c:	6819      	ldreq	r1, [r3, #0]
 800f53e:	685b      	ldreq	r3, [r3, #4]
 800f540:	6063      	str	r3, [r4, #4]
 800f542:	bf04      	itt	eq
 800f544:	1949      	addeq	r1, r1, r5
 800f546:	6021      	streq	r1, [r4, #0]
 800f548:	6054      	str	r4, [r2, #4]
 800f54a:	e7ca      	b.n	800f4e2 <_free_r+0x26>
 800f54c:	b003      	add	sp, #12
 800f54e:	bd30      	pop	{r4, r5, pc}
 800f550:	24001768 	.word	0x24001768

0800f554 <sbrk_aligned>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	4e0e      	ldr	r6, [pc, #56]	; (800f590 <sbrk_aligned+0x3c>)
 800f558:	460c      	mov	r4, r1
 800f55a:	6831      	ldr	r1, [r6, #0]
 800f55c:	4605      	mov	r5, r0
 800f55e:	b911      	cbnz	r1, 800f566 <sbrk_aligned+0x12>
 800f560:	f000 f88c 	bl	800f67c <_sbrk_r>
 800f564:	6030      	str	r0, [r6, #0]
 800f566:	4621      	mov	r1, r4
 800f568:	4628      	mov	r0, r5
 800f56a:	f000 f887 	bl	800f67c <_sbrk_r>
 800f56e:	1c43      	adds	r3, r0, #1
 800f570:	d00a      	beq.n	800f588 <sbrk_aligned+0x34>
 800f572:	1cc4      	adds	r4, r0, #3
 800f574:	f024 0403 	bic.w	r4, r4, #3
 800f578:	42a0      	cmp	r0, r4
 800f57a:	d007      	beq.n	800f58c <sbrk_aligned+0x38>
 800f57c:	1a21      	subs	r1, r4, r0
 800f57e:	4628      	mov	r0, r5
 800f580:	f000 f87c 	bl	800f67c <_sbrk_r>
 800f584:	3001      	adds	r0, #1
 800f586:	d101      	bne.n	800f58c <sbrk_aligned+0x38>
 800f588:	f04f 34ff 	mov.w	r4, #4294967295
 800f58c:	4620      	mov	r0, r4
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
 800f590:	2400176c 	.word	0x2400176c

0800f594 <_malloc_r>:
 800f594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f598:	1ccd      	adds	r5, r1, #3
 800f59a:	f025 0503 	bic.w	r5, r5, #3
 800f59e:	3508      	adds	r5, #8
 800f5a0:	2d0c      	cmp	r5, #12
 800f5a2:	bf38      	it	cc
 800f5a4:	250c      	movcc	r5, #12
 800f5a6:	2d00      	cmp	r5, #0
 800f5a8:	4607      	mov	r7, r0
 800f5aa:	db01      	blt.n	800f5b0 <_malloc_r+0x1c>
 800f5ac:	42a9      	cmp	r1, r5
 800f5ae:	d905      	bls.n	800f5bc <_malloc_r+0x28>
 800f5b0:	230c      	movs	r3, #12
 800f5b2:	603b      	str	r3, [r7, #0]
 800f5b4:	2600      	movs	r6, #0
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5bc:	4e2e      	ldr	r6, [pc, #184]	; (800f678 <_malloc_r+0xe4>)
 800f5be:	f000 f86d 	bl	800f69c <__malloc_lock>
 800f5c2:	6833      	ldr	r3, [r6, #0]
 800f5c4:	461c      	mov	r4, r3
 800f5c6:	bb34      	cbnz	r4, 800f616 <_malloc_r+0x82>
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	f7ff ffc2 	bl	800f554 <sbrk_aligned>
 800f5d0:	1c43      	adds	r3, r0, #1
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	d14d      	bne.n	800f672 <_malloc_r+0xde>
 800f5d6:	6834      	ldr	r4, [r6, #0]
 800f5d8:	4626      	mov	r6, r4
 800f5da:	2e00      	cmp	r6, #0
 800f5dc:	d140      	bne.n	800f660 <_malloc_r+0xcc>
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	eb04 0803 	add.w	r8, r4, r3
 800f5e8:	f000 f848 	bl	800f67c <_sbrk_r>
 800f5ec:	4580      	cmp	r8, r0
 800f5ee:	d13a      	bne.n	800f666 <_malloc_r+0xd2>
 800f5f0:	6821      	ldr	r1, [r4, #0]
 800f5f2:	3503      	adds	r5, #3
 800f5f4:	1a6d      	subs	r5, r5, r1
 800f5f6:	f025 0503 	bic.w	r5, r5, #3
 800f5fa:	3508      	adds	r5, #8
 800f5fc:	2d0c      	cmp	r5, #12
 800f5fe:	bf38      	it	cc
 800f600:	250c      	movcc	r5, #12
 800f602:	4629      	mov	r1, r5
 800f604:	4638      	mov	r0, r7
 800f606:	f7ff ffa5 	bl	800f554 <sbrk_aligned>
 800f60a:	3001      	adds	r0, #1
 800f60c:	d02b      	beq.n	800f666 <_malloc_r+0xd2>
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	442b      	add	r3, r5
 800f612:	6023      	str	r3, [r4, #0]
 800f614:	e00e      	b.n	800f634 <_malloc_r+0xa0>
 800f616:	6822      	ldr	r2, [r4, #0]
 800f618:	1b52      	subs	r2, r2, r5
 800f61a:	d41e      	bmi.n	800f65a <_malloc_r+0xc6>
 800f61c:	2a0b      	cmp	r2, #11
 800f61e:	d916      	bls.n	800f64e <_malloc_r+0xba>
 800f620:	1961      	adds	r1, r4, r5
 800f622:	42a3      	cmp	r3, r4
 800f624:	6025      	str	r5, [r4, #0]
 800f626:	bf18      	it	ne
 800f628:	6059      	strne	r1, [r3, #4]
 800f62a:	6863      	ldr	r3, [r4, #4]
 800f62c:	bf08      	it	eq
 800f62e:	6031      	streq	r1, [r6, #0]
 800f630:	5162      	str	r2, [r4, r5]
 800f632:	604b      	str	r3, [r1, #4]
 800f634:	4638      	mov	r0, r7
 800f636:	f104 060b 	add.w	r6, r4, #11
 800f63a:	f000 f835 	bl	800f6a8 <__malloc_unlock>
 800f63e:	f026 0607 	bic.w	r6, r6, #7
 800f642:	1d23      	adds	r3, r4, #4
 800f644:	1af2      	subs	r2, r6, r3
 800f646:	d0b6      	beq.n	800f5b6 <_malloc_r+0x22>
 800f648:	1b9b      	subs	r3, r3, r6
 800f64a:	50a3      	str	r3, [r4, r2]
 800f64c:	e7b3      	b.n	800f5b6 <_malloc_r+0x22>
 800f64e:	6862      	ldr	r2, [r4, #4]
 800f650:	42a3      	cmp	r3, r4
 800f652:	bf0c      	ite	eq
 800f654:	6032      	streq	r2, [r6, #0]
 800f656:	605a      	strne	r2, [r3, #4]
 800f658:	e7ec      	b.n	800f634 <_malloc_r+0xa0>
 800f65a:	4623      	mov	r3, r4
 800f65c:	6864      	ldr	r4, [r4, #4]
 800f65e:	e7b2      	b.n	800f5c6 <_malloc_r+0x32>
 800f660:	4634      	mov	r4, r6
 800f662:	6876      	ldr	r6, [r6, #4]
 800f664:	e7b9      	b.n	800f5da <_malloc_r+0x46>
 800f666:	230c      	movs	r3, #12
 800f668:	603b      	str	r3, [r7, #0]
 800f66a:	4638      	mov	r0, r7
 800f66c:	f000 f81c 	bl	800f6a8 <__malloc_unlock>
 800f670:	e7a1      	b.n	800f5b6 <_malloc_r+0x22>
 800f672:	6025      	str	r5, [r4, #0]
 800f674:	e7de      	b.n	800f634 <_malloc_r+0xa0>
 800f676:	bf00      	nop
 800f678:	24001768 	.word	0x24001768

0800f67c <_sbrk_r>:
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	4d06      	ldr	r5, [pc, #24]	; (800f698 <_sbrk_r+0x1c>)
 800f680:	2300      	movs	r3, #0
 800f682:	4604      	mov	r4, r0
 800f684:	4608      	mov	r0, r1
 800f686:	602b      	str	r3, [r5, #0]
 800f688:	f7f1 ff7e 	bl	8001588 <_sbrk>
 800f68c:	1c43      	adds	r3, r0, #1
 800f68e:	d102      	bne.n	800f696 <_sbrk_r+0x1a>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	b103      	cbz	r3, 800f696 <_sbrk_r+0x1a>
 800f694:	6023      	str	r3, [r4, #0]
 800f696:	bd38      	pop	{r3, r4, r5, pc}
 800f698:	24001770 	.word	0x24001770

0800f69c <__malloc_lock>:
 800f69c:	4801      	ldr	r0, [pc, #4]	; (800f6a4 <__malloc_lock+0x8>)
 800f69e:	f000 b809 	b.w	800f6b4 <__retarget_lock_acquire_recursive>
 800f6a2:	bf00      	nop
 800f6a4:	24001774 	.word	0x24001774

0800f6a8 <__malloc_unlock>:
 800f6a8:	4801      	ldr	r0, [pc, #4]	; (800f6b0 <__malloc_unlock+0x8>)
 800f6aa:	f000 b804 	b.w	800f6b6 <__retarget_lock_release_recursive>
 800f6ae:	bf00      	nop
 800f6b0:	24001774 	.word	0x24001774

0800f6b4 <__retarget_lock_acquire_recursive>:
 800f6b4:	4770      	bx	lr

0800f6b6 <__retarget_lock_release_recursive>:
 800f6b6:	4770      	bx	lr

0800f6b8 <_init>:
 800f6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ba:	bf00      	nop
 800f6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6be:	bc08      	pop	{r3}
 800f6c0:	469e      	mov	lr, r3
 800f6c2:	4770      	bx	lr

0800f6c4 <_fini>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	bf00      	nop
 800f6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ca:	bc08      	pop	{r3}
 800f6cc:	469e      	mov	lr, r3
 800f6ce:	4770      	bx	lr

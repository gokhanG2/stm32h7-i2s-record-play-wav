
stm32h7disco-i2s-baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f678  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf8  0800fdf8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe00  0800fe00  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe00  0800fe00  0001fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe04  0800fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  24000000  0800fe08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001744  240000ac  0800feb4  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240017f0  0800feb4  000217f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1e7  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000382d  00000000  00000000  0003c2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00040fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043259  00000000  00000000  00042318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206e7  00000000  00000000  00085571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f2d8  00000000  00000000  000a5c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00244f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e4  00000000  00000000  00244f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000ac 	.word	0x240000ac
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f8f8 	.word	0x0800f8f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000b0 	.word	0x240000b0
 80002d4:	0800f8f8 	.word	0x0800f8f8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <sd_card_init>:
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
static uint8_t first_play = 0;
void sd_card_init()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	4907      	ldr	r1, [pc, #28]	; (800072c <sd_card_init+0x24>)
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <sd_card_init+0x28>)
 8000712:	f00d ffc5 	bl	800e6a0 <f_mount>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <sd_card_init+0x2c>)
 800071c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <sd_card_init+0x2c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <sd_card_init+0x20>
	{
//		printf("error in mounting an sd card: %d \n", sd_result);
		while(1);
 8000726:	e7fe      	b.n	8000726 <sd_card_init+0x1e>
	}
//	else
//	{
//		printf("succeded in mounting an sd card \n");
//	}
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	240017a8 	.word	0x240017a8
 8000730:	240000cc 	.word	0x240000cc
 8000734:	240000c8 	.word	0x240000c8

08000738 <start_recording>:

void start_recording(uint32_t frequency)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	static char file_name[] = "samp.wav";

	uint32_t byte_rate = frequency * 2 * 2;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
	wav_file_header[24] = (uint8_t)frequency;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <start_recording+0x84>)
 800074c:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <start_recording+0x84>)
 8000756:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <start_recording+0x84>)
 8000760:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0e1b      	lsrs	r3, r3, #24
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <start_recording+0x84>)
 800076a:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <start_recording+0x84>)
 8000772:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <start_recording+0x84>)
 800077c:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <start_recording+0x84>)
 8000786:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <start_recording+0x84>)
 8000790:	77da      	strb	r2, [r3, #31]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 8000792:	220a      	movs	r2, #10
 8000794:	490a      	ldr	r1, [pc, #40]	; (80007c0 <start_recording+0x88>)
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <start_recording+0x8c>)
 8000798:	f00d ffc8 	bl	800e72c <f_open>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <start_recording+0x90>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <start_recording+0x90>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d000      	beq.n	80007ae <start_recording+0x76>
	{
//		printf("error in creating a file: %d \n", sd_result);
		while(1);
 80007ac:	e7fe      	b.n	80007ac <start_recording+0x74>
	}
//	else
//	{
//		printf("succeeded in opening a file \n");
//	}
	wav_file_size = 0;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <start_recording+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]


}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000008 	.word	0x24000008
 80007c0:	24000034 	.word	0x24000034
 80007c4:	24000300 	.word	0x24000300
 80007c8:	240000c8 	.word	0x240000c8
 80007cc:	24000530 	.word	0x24000530

080007d0 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
//	printf("w\n");
	if(first_time == 0)
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <write2wave_file+0x70>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d113      	bne.n	800080c <write2wave_file+0x3c>
	{
		for(int i = 0; i < 44; i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e00a      	b.n	8000800 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	4914      	ldr	r1, [pc, #80]	; (8000844 <write2wave_file+0x74>)
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	440a      	add	r2, r1
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b2b      	cmp	r3, #43	; 0x2b
 8000804:	ddf1      	ble.n	80007ea <write2wave_file+0x1a>
		}
		first_time = 1;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <write2wave_file+0x70>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <write2wave_file+0x78>)
 8000816:	f00e fa96 	bl	800ed46 <f_write>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <write2wave_file+0x7c>)
 8000820:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <write2wave_file+0x7c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <write2wave_file+0x5c>
	{
//		printf("error in writing to the file: %d \n", sd_result);
		while(1);
 800082a:	e7fe      	b.n	800082a <write2wave_file+0x5a>
	}
	wav_file_size += data_size;
 800082c:	887a      	ldrh	r2, [r7, #2]
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <write2wave_file+0x80>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <write2wave_file+0x80>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000534 	.word	0x24000534
 8000844:	24000008 	.word	0x24000008
 8000848:	24000300 	.word	0x24000300
 800084c:	240000c8 	.word	0x240000c8
 8000850:	24000530 	.word	0x24000530

08000854 <stop_recording>:

void stop_recording()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <stop_recording+0xb0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3b08      	subs	r3, #8
 8000860:	4a28      	ldr	r2, [pc, #160]	; (8000904 <stop_recording+0xb0>)
 8000862:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <stop_recording+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <stop_recording+0xb4>)
 800086c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <stop_recording+0xb0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <stop_recording+0xb4>)
 8000878:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <stop_recording+0xb0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <stop_recording+0xb4>)
 8000884:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <stop_recording+0xb0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <stop_recording+0xb4>)
 8000890:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <stop_recording+0xb0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3b24      	subs	r3, #36	; 0x24
 8000898:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <stop_recording+0xb0>)
 800089a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <stop_recording+0xb0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <stop_recording+0xb4>)
 80008a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <stop_recording+0xb0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <stop_recording+0xb4>)
 80008b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <stop_recording+0xb0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	0c1b      	lsrs	r3, r3, #16
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <stop_recording+0xb4>)
 80008c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <stop_recording+0xb0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0e1b      	lsrs	r3, r3, #24
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <stop_recording+0xb4>)
 80008ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80008d2:	2100      	movs	r1, #0
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <stop_recording+0xb8>)
 80008d6:	f00e fc53 	bl	800f180 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80008da:	1dbb      	adds	r3, r7, #6
 80008dc:	222c      	movs	r2, #44	; 0x2c
 80008de:	490a      	ldr	r1, [pc, #40]	; (8000908 <stop_recording+0xb4>)
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <stop_recording+0xb8>)
 80008e2:	f00e fa30 	bl	800ed46 <f_write>
	if(sd_result != 0)
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <stop_recording+0xbc>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d000      	beq.n	80008f0 <stop_recording+0x9c>
	{
//		printf("error in updating the first sector: %d \n", sd_result);
		while(1);
 80008ee:	e7fe      	b.n	80008ee <stop_recording+0x9a>
	}
	f_close(&wavFile);
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <stop_recording+0xb8>)
 80008f2:	f00e fc1b 	bl	800f12c <f_close>
	first_time = 0;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <stop_recording+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
//	printf("closed the file \n");
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000530 	.word	0x24000530
 8000908:	24000008 	.word	0x24000008
 800090c:	24000300 	.word	0x24000300
 8000910:	240000c8 	.word	0x240000c8
 8000914:	24000534 	.word	0x24000534

08000918 <play_record>:

bool play_record(uint8_t *data, uint16_t data_size){
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
	FRESULT fr = FR_NOT_READY;
 8000924:	2303      	movs	r3, #3
 8000926:	77fb      	strb	r3, [r7, #31]
	UINT bytesRead = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]

	char folderPath[] = "0:samp.wav";
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <play_record+0x84>)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	ca07      	ldmia	r2, {r0, r1, r2}
 8000934:	c303      	stmia	r3!, {r0, r1}
 8000936:	801a      	strh	r2, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
	if(first_play == 0){
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <play_record+0x88>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d112      	bne.n	800096c <play_record+0x54>
		fr = f_open(&wavFile, folderPath, FA_READ);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <play_record+0x8c>)
 8000950:	f00d feec 	bl	800e72c <f_open>
 8000954:	4603      	mov	r3, r0
 8000956:	77fb      	strb	r3, [r7, #31]

		if (fr == FR_OK)
 8000958:	7ffb      	ldrb	r3, [r7, #31]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <play_record+0x4e>
		{
		  f_lseek(&wavFile, 44);
 800095e:	212c      	movs	r1, #44	; 0x2c
 8000960:	4810      	ldr	r0, [pc, #64]	; (80009a4 <play_record+0x8c>)
 8000962:	f00e fc0d 	bl	800f180 <f_lseek>
		}
		first_play = 1;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <play_record+0x88>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
	}

	f_read(&wavFile, data, data_size, &bytesRead);
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <play_record+0x8c>)
 8000976:	f00e f8a7 	bl	800eac8 <f_read>
	if(bytesRead < data_size){
 800097a:	887a      	ldrh	r2, [r7, #2]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <play_record+0x7a>
		f_close(&wavFile);
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <play_record+0x8c>)
 8000984:	f00e fbd2 	bl	800f12c <f_close>
		first_play = 0;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <play_record+0x88>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <play_record+0x7c>
	}

	return true;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800f910 	.word	0x0800f910
 80009a0:	24000535 	.word	0x24000535
 80009a4:	24000300 	.word	0x24000300

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009b4:	bf00      	nop
 80009b6:	4b9f      	ldr	r3, [pc, #636]	; (8000c34 <main+0x28c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <main+0x24>
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dcf4      	bgt.n	80009b6 <main+0xe>
  if ( timeout < 0 )
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da01      	bge.n	80009d6 <main+0x2e>
  {
  Error_Handler();
 80009d2:	f000 fc97 	bl	8001304 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 ff85 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f9f7 	bl	8000dcc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009de:	4b95      	ldr	r3, [pc, #596]	; (8000c34 <main+0x28c>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a93      	ldr	r2, [pc, #588]	; (8000c34 <main+0x28c>)
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b91      	ldr	r3, [pc, #580]	; (8000c34 <main+0x28c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 ff1b 	bl	8004838 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f003 ff31 	bl	800486c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a10:	bf00      	nop
 8000a12:	4b88      	ldr	r3, [pc, #544]	; (8000c34 <main+0x28c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <main+0x80>
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	617a      	str	r2, [r7, #20]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dcf4      	bgt.n	8000a12 <main+0x6a>
if ( timeout < 0 )
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da01      	bge.n	8000a32 <main+0x8a>
{
Error_Handler();
 8000a2e:	f000 fc69 	bl	8001304 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 fb25 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a36:	f000 faf3 	bl	8001020 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a3a:	f000 faa5 	bl	8000f88 <MX_USART1_UART_Init>
  MX_I2S1_Init();
 8000a3e:	f000 fa4b 	bl	8000ed8 <MX_I2S1_Init>
  MX_SDMMC1_SD_Init();
 8000a42:	f000 fa7d 	bl	8000f40 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a46:	f00b faa5 	bl	800bf94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4e:	f000 ffdb 	bl	8001a08 <HAL_Delay>
  sd_card_init();
 8000a52:	f7ff fe59 	bl	8000708 <sd_card_init>
  HAL_Delay(500);
 8000a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5a:	f000 ffd5 	bl	8001a08 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // RECORD BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000a5e:	2108      	movs	r1, #8
 8000a60:	4875      	ldr	r0, [pc, #468]	; (8000c38 <main+0x290>)
 8000a62:	f003 feb7 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10c      	bne.n	8000a86 <main+0xde>
		  recordBtnState++;
 8000a6c:	4b73      	ldr	r3, [pc, #460]	; (8000c3c <main+0x294>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <main+0x294>)
 8000a76:	801a      	strh	r2, [r3, #0]
		  if(recordBtnState > 100)
 8000a78:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <main+0x294>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b64      	cmp	r3, #100	; 0x64
 8000a7e:	d902      	bls.n	8000a86 <main+0xde>
			  recordBtnState = 100;
 8000a80:	4b6e      	ldr	r3, [pc, #440]	; (8000c3c <main+0x294>)
 8000a82:	2264      	movs	r2, #100	; 0x64
 8000a84:	801a      	strh	r2, [r3, #0]
	  }
	  if(recordBtnState == 100 && recordBtnPrevState != HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)){
 8000a86:	4b6d      	ldr	r3, [pc, #436]	; (8000c3c <main+0x294>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	2b64      	cmp	r3, #100	; 0x64
 8000a8c:	d10f      	bne.n	8000aae <main+0x106>
 8000a8e:	2108      	movs	r1, #8
 8000a90:	4869      	ldr	r0, [pc, #420]	; (8000c38 <main+0x290>)
 8000a92:	f003 fe9f 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b69      	ldr	r3, [pc, #420]	; (8000c40 <main+0x298>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d005      	beq.n	8000aae <main+0x106>
		  recordBtnState = 0;
 8000aa2:	4b66      	ldr	r3, [pc, #408]	; (8000c3c <main+0x294>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
		  recordBtnPressed = 1;
 8000aa8:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <main+0x29c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
	  }
	  recordBtnPrevState = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4861      	ldr	r0, [pc, #388]	; (8000c38 <main+0x290>)
 8000ab2:	f003 fe8f 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b61      	ldr	r3, [pc, #388]	; (8000c40 <main+0x298>)
 8000abc:	701a      	strb	r2, [r3, #0]

	  // PLAY BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == 0){
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	485d      	ldr	r0, [pc, #372]	; (8000c38 <main+0x290>)
 8000ac2:	f003 fe87 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10c      	bne.n	8000ae6 <main+0x13e>
		  playBtnState++;
 8000acc:	4b5e      	ldr	r3, [pc, #376]	; (8000c48 <main+0x2a0>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b5c      	ldr	r3, [pc, #368]	; (8000c48 <main+0x2a0>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		  if(playBtnState > 100)
 8000ad8:	4b5b      	ldr	r3, [pc, #364]	; (8000c48 <main+0x2a0>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b64      	cmp	r3, #100	; 0x64
 8000ade:	d902      	bls.n	8000ae6 <main+0x13e>
			  playBtnState = 100;
 8000ae0:	4b59      	ldr	r3, [pc, #356]	; (8000c48 <main+0x2a0>)
 8000ae2:	2264      	movs	r2, #100	; 0x64
 8000ae4:	801a      	strh	r2, [r3, #0]
	  }
	  if(playBtnState == 100 && playBtnPrevState != HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin)){
 8000ae6:	4b58      	ldr	r3, [pc, #352]	; (8000c48 <main+0x2a0>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d10f      	bne.n	8000b0e <main+0x166>
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4851      	ldr	r0, [pc, #324]	; (8000c38 <main+0x290>)
 8000af2:	f003 fe6f 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b54      	ldr	r3, [pc, #336]	; (8000c4c <main+0x2a4>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d005      	beq.n	8000b0e <main+0x166>
		  playBtnState = 0;
 8000b02:	4b51      	ldr	r3, [pc, #324]	; (8000c48 <main+0x2a0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
		  playBtnPressed = 1;
 8000b08:	4b51      	ldr	r3, [pc, #324]	; (8000c50 <main+0x2a8>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	  }
	  playBtnPrevState = HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin);
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	4849      	ldr	r0, [pc, #292]	; (8000c38 <main+0x290>)
 8000b12:	f003 fe5f 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <main+0x2a4>)
 8000b1c:	701a      	strb	r2, [r3, #0]

	  // RECORD WAV FILE ROUTINE BY USING I2S_RX AND SD CARD
	  if(recordBtnPressed){
 8000b1e:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <main+0x29c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d029      	beq.n	8000b7a <main+0x1d2>
		  recordWAV_File ^= 0x01;
 8000b26:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <main+0x2ac>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	f083 0301 	eor.w	r3, r3, #1
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <main+0x2ac>)
 8000b32:	701a      	strb	r2, [r3, #0]
		  if(recordWAV_File){
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <main+0x2ac>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d013      	beq.n	8000b64 <main+0x1bc>
			  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	4845      	ldr	r0, [pc, #276]	; (8000c58 <main+0x2b0>)
 8000b44:	f003 fe5e 	bl	8004804 <HAL_GPIO_WritePin>
			  I2S1_ReInit(I2S_MODE_MASTER_RX);
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f000 fb5f 	bl	800120c <I2S1_ReInit>
			  start_recording(I2S_AUDIOFREQ_32K);
 8000b4e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000b52:	f7ff fdf1 	bl	8000738 <start_recording>
			  HAL_I2S_Receive_DMA(&hi2s1, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 8000b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5a:	4940      	ldr	r1, [pc, #256]	; (8000c5c <main+0x2b4>)
 8000b5c:	4840      	ldr	r0, [pc, #256]	; (8000c60 <main+0x2b8>)
 8000b5e:	f004 f85f 	bl	8004c20 <HAL_I2S_Receive_DMA>
 8000b62:	e00a      	b.n	8000b7a <main+0x1d2>
		  }
		  else{
			  HAL_I2S_DMAStop(&hi2s1);
 8000b64:	483e      	ldr	r0, [pc, #248]	; (8000c60 <main+0x2b8>)
 8000b66:	f004 f8fd 	bl	8004d64 <HAL_I2S_DMAStop>
			  stop_recording();
 8000b6a:	f7ff fe73 	bl	8000854 <stop_recording>
			  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	4838      	ldr	r0, [pc, #224]	; (8000c58 <main+0x2b0>)
 8000b76:	f003 fe45 	bl	8004804 <HAL_GPIO_WritePin>
		  }
	  }

	  if(recordWAV_File == 1 && half_i2s == 1){
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <main+0x2ac>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d10c      	bne.n	8000b9c <main+0x1f4>
 8000b82:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <main+0x2bc>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d107      	bne.n	8000b9c <main+0x1f4>
		  write2wave_file(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT);
 8000b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b90:	4832      	ldr	r0, [pc, #200]	; (8000c5c <main+0x2b4>)
 8000b92:	f7ff fe1d 	bl	80007d0 <write2wave_file>
		  half_i2s = 0;
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <main+0x2bc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	  }
	  if(recordWAV_File == 1 && full_i2s == 1){
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <main+0x2ac>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10d      	bne.n	8000bc0 <main+0x218>
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <main+0x2c0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d108      	bne.n	8000bc0 <main+0x218>
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <main+0x2c4>)
 8000bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fe0b 	bl	80007d0 <write2wave_file>
		  full_i2s = 0;
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <main+0x2c0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	  }

	  // PLAY RECORDED WAV FILE ROUTINE BY USING I2S_TX AND SD CARD
	  if(endOfWavFile == 1 && full_i2s_tx == 1){
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <main+0x2c8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d113      	bne.n	8000bf0 <main+0x248>
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <main+0x2cc>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10e      	bne.n	8000bf0 <main+0x248>
		  endOfWavFile = 0;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <main+0x2c8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		  full_i2s_tx = 0;
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <main+0x2cc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
		  HAL_I2S_DMAStop(&hi2s1);
 8000bde:	4820      	ldr	r0, [pc, #128]	; (8000c60 <main+0x2b8>)
 8000be0:	f004 f8c0 	bl	8004d64 <HAL_I2S_DMAStop>
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	481b      	ldr	r0, [pc, #108]	; (8000c58 <main+0x2b0>)
 8000bec:	f003 fe0a 	bl	8004804 <HAL_GPIO_WritePin>
	  }

	  if(playBtnPressed){
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <main+0x2a8>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d059      	beq.n	8000cac <main+0x304>
		  playWAV_File = 1;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <main+0x2d0>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c04:	4814      	ldr	r0, [pc, #80]	; (8000c58 <main+0x2b0>)
 8000c06:	f003 fdfd 	bl	8004804 <HAL_GPIO_WritePin>
		  I2S1_ReInit(I2S_MODE_MASTER_TX);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f000 fafe 	bl	800120c <I2S1_ReInit>
		  if(!play_record(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT*2)){
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <main+0x2b4>)
 8000c16:	f7ff fe7f 	bl	8000918 <play_record>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <main+0x284>
			  endOfWavFile = 1;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <main+0x2c8>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
		  }
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	e032      	b.n	8000c98 <main+0x2f0>
 8000c32:	bf00      	nop
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58022800 	.word	0x58022800
 8000c3c:	2400078e 	.word	0x2400078e
 8000c40:	2400078d 	.word	0x2400078d
 8000c44:	2400078c 	.word	0x2400078c
 8000c48:	24000792 	.word	0x24000792
 8000c4c:	24000791 	.word	0x24000791
 8000c50:	24000790 	.word	0x24000790
 8000c54:	24001796 	.word	0x24001796
 8000c58:	58022000 	.word	0x58022000
 8000c5c:	24000794 	.word	0x24000794
 8000c60:	24000538 	.word	0x24000538
 8000c64:	24001794 	.word	0x24001794
 8000c68:	24001795 	.word	0x24001795
 8000c6c:	24000f94 	.word	0x24000f94
 8000c70:	24001798 	.word	0x24001798
 8000c74:	24001799 	.word	0x24001799
 8000c78:	24001797 	.word	0x24001797
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	005a      	lsls	r2, r3, #1
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	3301      	adds	r3, #1
 8000c86:	4948      	ldr	r1, [pc, #288]	; (8000da8 <main+0x400>)
 8000c88:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000c8c:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <main+0x400>)
 8000c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	3301      	adds	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9e:	dbed      	blt.n	8000c7c <main+0x2d4>
		  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)data_i2s, WAV_WRITE_SAMPLE_COUNT);
 8000ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca4:	4940      	ldr	r1, [pc, #256]	; (8000da8 <main+0x400>)
 8000ca6:	4841      	ldr	r0, [pc, #260]	; (8000dac <main+0x404>)
 8000ca8:	f003 ff18 	bl	8004adc <HAL_I2S_Transmit_DMA>
	  }

	  if(playWAV_File == 1 && half_i2s_tx == 1){
 8000cac:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <main+0x408>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d12a      	bne.n	8000d0a <main+0x362>
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <main+0x40c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d125      	bne.n	8000d0a <main+0x362>
		  if(!play_record(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT)){
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	4839      	ldr	r0, [pc, #228]	; (8000da8 <main+0x400>)
 8000cc4:	f7ff fe28 	bl	8000918 <play_record>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f083 0301 	eor.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <main+0x332>
			  endOfWavFile = 1;
 8000cd4:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <main+0x410>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
		  }
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/4; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	e00d      	b.n	8000cfc <main+0x354>
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	005a      	lsls	r2, r3, #1
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	3301      	adds	r3, #1
 8000cea:	492f      	ldr	r1, [pc, #188]	; (8000da8 <main+0x400>)
 8000cec:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000cf0:	4a2d      	ldr	r2, [pc, #180]	; (8000da8 <main+0x400>)
 8000cf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/4; i++)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d02:	dbed      	blt.n	8000ce0 <main+0x338>
		  half_i2s_tx = 0;
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <main+0x40c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	  }
	  if(playWAV_File == 1 && full_i2s_tx == 1){
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <main+0x408>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d129      	bne.n	8000d66 <main+0x3be>
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <main+0x414>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d124      	bne.n	8000d66 <main+0x3be>
		  if(!play_record(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT)){
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <main+0x418>)
 8000d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fdf8 	bl	8000918 <play_record>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f083 0301 	eor.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <main+0x392>
			  endOfWavFile = 1;
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <main+0x410>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
		  }
		  for(int i = WAV_WRITE_SAMPLE_COUNT/4; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	e00d      	b.n	8000d5e <main+0x3b6>
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	005a      	lsls	r2, r3, #1
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4916      	ldr	r1, [pc, #88]	; (8000da8 <main+0x400>)
 8000d4e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <main+0x400>)
 8000d54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = WAV_WRITE_SAMPLE_COUNT/4; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d64:	dbed      	blt.n	8000d42 <main+0x39a>
	  }

	  if(playWAV_File == 1 && full_i2s_tx == 1){
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <main+0x408>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d114      	bne.n	8000d98 <main+0x3f0>
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <main+0x414>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d10f      	bne.n	8000d98 <main+0x3f0>
		  full_i2s_tx = 0;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <main+0x414>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
//		  HAL_I2S_Transmit(&hi2s1, data_i2s, WAV_WRITE_SAMPLE_COUNT, 1000);
		  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)data_i2s, WAV_WRITE_SAMPLE_COUNT);
 8000d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d82:	4909      	ldr	r1, [pc, #36]	; (8000da8 <main+0x400>)
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <main+0x404>)
 8000d86:	f003 fea9 	bl	8004adc <HAL_I2S_Transmit_DMA>
		  if(endOfWavFile){
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <main+0x410>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <main+0x3f0>
			  playWAV_File = 0;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <main+0x408>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  recordBtnPressed = 0;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <main+0x41c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	  playBtnPressed = 0;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <main+0x420>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000da4:	e65b      	b.n	8000a5e <main+0xb6>
 8000da6:	bf00      	nop
 8000da8:	24000794 	.word	0x24000794
 8000dac:	24000538 	.word	0x24000538
 8000db0:	24001797 	.word	0x24001797
 8000db4:	2400179a 	.word	0x2400179a
 8000db8:	24001798 	.word	0x24001798
 8000dbc:	24001799 	.word	0x24001799
 8000dc0:	24000f94 	.word	0x24000f94
 8000dc4:	2400078c 	.word	0x2400078c
 8000dc8:	24000790 	.word	0x24000790

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09c      	sub	sp, #112	; 0x70
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	224c      	movs	r2, #76	; 0x4c
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00e fc86 	bl	800f6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2220      	movs	r2, #32
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00e fc80 	bl	800f6ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000dec:	2004      	movs	r0, #4
 8000dee:	f004 f897 	bl	8004f20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <SystemClock_Config+0x104>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	4a35      	ldr	r2, [pc, #212]	; (8000ed0 <SystemClock_Config+0x104>)
 8000dfc:	f023 0301 	bic.w	r3, r3, #1
 8000e00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e02:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <SystemClock_Config+0x104>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <SystemClock_Config+0x108>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <SystemClock_Config+0x108>)
 8000e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <SystemClock_Config+0x108>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e24:	bf00      	nop
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <SystemClock_Config+0x108>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e32:	d1f8      	bne.n	8000e26 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e34:	230b      	movs	r3, #11
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e46:	2301      	movs	r3, #1
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e52:	2305      	movs	r3, #5
 8000e54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000e56:	23a0      	movs	r3, #160	; 0xa0
 8000e58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e66:	2308      	movs	r3, #8
 8000e68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 f8ac 	bl	8004fd4 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e82:	f000 fa3f 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	233f      	movs	r3, #63	; 0x3f
 8000e88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e92:	2308      	movs	r3, #8
 8000e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ea4:	2340      	movs	r3, #64	; 0x40
 8000ea6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 fceb 	bl	8005888 <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000eb8:	f000 fa24 	bl	8001304 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ebc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f004 fe96 	bl	8005bf4 <HAL_RCC_MCOConfig>
}
 8000ec8:	bf00      	nop
 8000eca:	3770      	adds	r7, #112	; 0x70
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58000400 	.word	0x58000400
 8000ed4:	58024800 	.word	0x58024800

08000ed8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <MX_I2S1_Init+0x64>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000efe:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000f02:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1, I2S_MODE_MASTER_RX) != HAL_OK)
 8000f22:	2106      	movs	r1, #6
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_I2S1_Init+0x60>)
 8000f26:	f003 fcb5 	bl	8004894 <HAL_I2S_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000f30:	f000 f9e8 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24000538 	.word	0x24000538
 8000f3c:	40013000 	.word	0x40013000

08000f40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <MX_SDMMC1_SD_Init+0x44>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f6c:	f007 fdc0 	bl	8008af0 <HAL_SD_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000f76:	f000 f9c5 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2400067c 	.word	0x2400067c
 8000f84:	52007000 	.word	0x52007000

08000f88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000f8e:	4a23      	ldr	r2, [pc, #140]	; (800101c <MX_USART1_UART_Init+0x94>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd0:	4811      	ldr	r0, [pc, #68]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fd2:	f009 f93f 	bl	800a254 <HAL_UART_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fdc:	f000 f992 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000fe4:	f00a f941 	bl	800b26a <HAL_UARTEx_SetTxFifoThreshold>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fee:	f000 f989 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8000ff6:	f00a f976 	bl	800b2e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001000:	f000 f980 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_USART1_UART_Init+0x90>)
 8001006:	f00a f8f7 	bl	800b1f8 <HAL_UARTEx_DisableFifoMode>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001010:	f000 f978 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	240006f8 	.word	0x240006f8
 800101c:	40011000 	.word	0x40011000

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_DMA_Init+0x5c>)
 8001028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <MX_DMA_Init+0x5c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_DMA_Init+0x5c>)
 8001038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_DMA_Init+0x5c>)
 8001046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MX_DMA_Init+0x5c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_DMA_Init+0x5c>)
 8001056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	200b      	movs	r0, #11
 8001068:	f000 fdd9 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800106c:	200b      	movs	r0, #11
 800106e:	f000 fdf0 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	58024400 	.word	0x58024400

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001096:	4b59      	ldr	r3, [pc, #356]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4a57      	ldr	r2, [pc, #348]	; (80011fc <MX_GPIO_Init+0x17c>)
 800109e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4b55      	ldr	r3, [pc, #340]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	4b51      	ldr	r3, [pc, #324]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	4a50      	ldr	r2, [pc, #320]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a48      	ldr	r2, [pc, #288]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	4b42      	ldr	r3, [pc, #264]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	4a41      	ldr	r2, [pc, #260]	; (80011fc <MX_GPIO_Init+0x17c>)
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	4a39      	ldr	r2, [pc, #228]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <MX_GPIO_Init+0x17c>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	4a32      	ldr	r2, [pc, #200]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <MX_GPIO_Init+0x17c>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <MX_GPIO_Init+0x17c>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <MX_GPIO_Init+0x17c>)
 8001152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_GPIO_Init+0x17c>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin JOY_UP_Pin JOY_DOWN_Pin
                           JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin
 8001168:	237c      	movs	r3, #124	; 0x7c
 800116a:	61fb      	str	r3, [r7, #28]
                          |JOY_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4821      	ldr	r0, [pc, #132]	; (8001200 <MX_GPIO_Init+0x180>)
 800117c:	f003 f97a 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	481b      	ldr	r0, [pc, #108]	; (8001204 <MX_GPIO_Init+0x184>)
 8001196:	f003 f96d 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800119a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_GPIO_Init+0x188>)
 80011b8:	f003 f95c 	bl	8004474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80011bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode= GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <MX_GPIO_Init+0x184>)
 80011d6:	f003 f94d 	bl	8004474 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <MX_GPIO_Init+0x184>)
 80011e2:	f003 fb0f 	bl	8004804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_GPIO_Init+0x184>)
 80011ee:	f003 fb09 	bl	8004804 <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	3730      	adds	r7, #48	; 0x30
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	58024400 	.word	0x58024400
 8001200:	58022800 	.word	0x58022800
 8001204:	58022000 	.word	0x58022000
 8001208:	58020000 	.word	0x58020000

0800120c <I2S1_ReInit>:

/* USER CODE BEGIN 4 */

static void I2S1_ReInit(uint32_t Mode)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.State = HAL_I2S_STATE_RESET;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <I2S1_ReInit+0x70>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s1.Instance = SPI1;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <I2S1_ReInit+0x70>)
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <I2S1_ReInit+0x74>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = Mode;
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <I2S1_ReInit+0x70>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6053      	str	r3, [r2, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <I2S1_ReInit+0x70>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <I2S1_ReInit+0x70>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <I2S1_ReInit+0x70>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <I2S1_ReInit+0x70>)
 800123e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001242:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <I2S1_ReInit+0x70>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <I2S1_ReInit+0x70>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <I2S1_ReInit+0x70>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <I2S1_ReInit+0x70>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <I2S1_ReInit+0x70>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1, Mode) != HAL_OK)
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <I2S1_ReInit+0x70>)
 8001266:	f003 fb15 	bl	8004894 <HAL_I2S_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <I2S1_ReInit+0x68>
  {
    Error_Handler();
 8001270:	f000 f848 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24000538 	.word	0x24000538
 8001280:	40013000 	.word	0x40013000

08001284 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	full_i2s = 1;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_I2S_RxCpltCallback+0x1c>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24001795 	.word	0x24001795

080012a4 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	half_i2s = 1;
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	24001794 	.word	0x24001794

080012c4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	full_i2s_tx = 1;
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_I2S_TxCpltCallback+0x1c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]

//	HAL_I2S_DMAStop(hi2s);
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	24001799 	.word	0x24001799

080012e4 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	half_i2s_tx = 1;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2400179a 	.word	0x2400179a

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_MspInit+0x30>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x30>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x30>)
 8001328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	58024400 	.word	0x58024400

08001344 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s, uint32_t Mode)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0be      	sub	sp, #248	; 0xf8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	22c8      	movs	r2, #200	; 0xc8
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00e f9c0 	bl	800f6ec <memset>
  if(hi2s->Instance==SPI1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7d      	ldr	r2, [pc, #500]	; (8001568 <HAL_I2S_MspInit+0x224>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80f4 	bne.w	8001560 <HAL_I2S_MspInit+0x21c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001384:	2300      	movs	r3, #0
 8001386:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fe71 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001398:	f7ff ffb4 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139c:	4b73      	ldr	r3, [pc, #460]	; (800156c <HAL_I2S_MspInit+0x228>)
 800139e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a2:	4a72      	ldr	r2, [pc, #456]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013ac:	4b6f      	ldr	r3, [pc, #444]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b6c      	ldr	r3, [pc, #432]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ca:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	4b64      	ldr	r3, [pc, #400]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e8:	4b60      	ldr	r3, [pc, #384]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a5b      	ldr	r2, [pc, #364]	; (800156c <HAL_I2S_MspInit+0x228>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_I2S_MspInit+0x228>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    PB3 (JTDO/TRACESWO)     ------> I2S1_CK
    PD7     ------> I2S1_SDO
    PA6     ------> I2S1_SDI
    PA4     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001414:	2308      	movs	r3, #8
 8001416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142c:	2305      	movs	r3, #5
 800142e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001436:	4619      	mov	r1, r3
 8001438:	484d      	ldr	r0, [pc, #308]	; (8001570 <HAL_I2S_MspInit+0x22c>)
 800143a:	f003 f81b 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001456:	2305      	movs	r3, #5
 8001458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001460:	4619      	mov	r1, r3
 8001462:	4844      	ldr	r0, [pc, #272]	; (8001574 <HAL_I2S_MspInit+0x230>)
 8001464:	f003 f806 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4;
 8001468:	2350      	movs	r3, #80	; 0x50
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001480:	2305      	movs	r3, #5
 8001482:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800148a:	4619      	mov	r1, r3
 800148c:	483a      	ldr	r0, [pc, #232]	; (8001578 <HAL_I2S_MspInit+0x234>)
 800148e:	f002 fff1 	bl	8004474 <HAL_GPIO_Init>

    /* I2S1 DMA Init */

  /* USER CODE BEGIN SPI1_MspInit 1 */
    if(Mode == I2S_MODE_MASTER_TX){
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d130      	bne.n	80014fa <HAL_I2S_MspInit+0x1b6>
		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Stream0;
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_I2S_MspInit+0x238>)
 800149a:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_I2S_MspInit+0x23c>)
 800149c:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014a0:	2226      	movs	r2, #38	; 0x26
 80014a2:	605a      	str	r2, [r3, #4]
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014a6:	2240      	movs	r2, #64	; 0x40
 80014a8:	609a      	str	r2, [r3, #8]
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	611a      	str	r2, [r3, #16]
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014be:	615a      	str	r2, [r3, #20]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	619a      	str	r2, [r3, #24]
		hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ce:	61da      	str	r2, [r3, #28]
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
		hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014dc:	4827      	ldr	r0, [pc, #156]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014de:	f000 fbd3 	bl	8001c88 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2S_MspInit+0x1a8>
		{
		  Error_Handler();
 80014e8:	f7ff ff0c 	bl	8001304 <Error_Handler>
		}

		__HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a23      	ldr	r2, [pc, #140]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_I2S_MspInit+0x238>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
	}
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f8:	e032      	b.n	8001560 <HAL_I2S_MspInit+0x21c>
	else if(Mode == I2S_MODE_MASTER_RX){
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d12f      	bne.n	8001560 <HAL_I2S_MspInit+0x21c>
		hdma_spi1_rx.Instance = DMA1_Stream0;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_I2S_MspInit+0x23c>)
 8001504:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001508:	2225      	movs	r2, #37	; 0x25
 800150a:	605a      	str	r2, [r3, #4]
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_I2S_MspInit+0x240>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_I2S_MspInit+0x240>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001526:	615a      	str	r2, [r3, #20]
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_I2S_MspInit+0x240>)
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	619a      	str	r2, [r3, #24]
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	61da      	str	r2, [r3, #28]
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_I2S_MspInit+0x240>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001546:	f000 fb9f 	bl	8001c88 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2S_MspInit+0x210>
		  Error_Handler();
 8001550:	f7ff fed8 	bl	8001304 <Error_Handler>
		__HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_I2S_MspInit+0x240>)
 8001558:	649a      	str	r2, [r3, #72]	; 0x48
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_I2S_MspInit+0x240>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001560:	bf00      	nop
 8001562:	37f8      	adds	r7, #248	; 0xf8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013000 	.word	0x40013000
 800156c:	58024400 	.word	0x58024400
 8001570:	58020400 	.word	0x58020400
 8001574:	58020c00 	.word	0x58020c00
 8001578:	58020000 	.word	0x58020000
 800157c:	2400058c 	.word	0x2400058c
 8001580:	40020010 	.word	0x40020010
 8001584:	24000604 	.word	0x24000604

08001588 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0be      	sub	sp, #248	; 0xf8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	22c8      	movs	r2, #200	; 0xc8
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e f89f 	bl	800f6ec <memset>
  if(hsd->Instance==SDMMC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a41      	ldr	r2, [pc, #260]	; (80016b8 <HAL_SD_MspInit+0x130>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d17a      	bne.n	80016ae <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80015b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80015c8:	230c      	movs	r3, #12
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015d8:	23c0      	movs	r3, #192	; 0xc0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80015dc:	2320      	movs	r3, #32
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fd40 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 80015fa:	f7ff fe83 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_SD_MspInit+0x134>)
 8001600:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001604:	4a2d      	ldr	r2, [pc, #180]	; (80016bc <HAL_SD_MspInit+0x134>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_SD_MspInit+0x134>)
 8001610:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_SD_MspInit+0x134>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001622:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_SD_MspInit+0x134>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_SD_MspInit+0x134>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_SD_MspInit+0x134>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_SD_MspInit+0x134>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_SD_MspInit+0x134>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001658:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800165c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001672:	230c      	movs	r3, #12
 8001674:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800167c:	4619      	mov	r1, r3
 800167e:	4810      	ldr	r0, [pc, #64]	; (80016c0 <HAL_SD_MspInit+0x138>)
 8001680:	f002 fef8 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001684:	2304      	movs	r3, #4
 8001686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800169c:	230c      	movs	r3, #12
 800169e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <HAL_SD_MspInit+0x13c>)
 80016aa:	f002 fee3 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	37f8      	adds	r7, #248	; 0xf8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	52007000 	.word	0x52007000
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020800 	.word	0x58020800
 80016c4:	58020c00 	.word	0x58020c00

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0bc      	sub	sp, #240	; 0xf0
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	22c8      	movs	r2, #200	; 0xc8
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00d ffff 	bl	800f6ec <memset>
  if(huart->Instance==USART1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_UART_MspInit+0xc8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d146      	bne.n	8001786 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016f8:	f04f 0201 	mov.w	r2, #1
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f004 fcb0 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800171a:	f7ff fdf3 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_UART_MspInit+0xcc>)
 8001720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_UART_MspInit+0xcc>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_UART_MspInit+0xcc>)
 8001730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_UART_MspInit+0xcc>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <HAL_UART_MspInit+0xcc>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_UART_MspInit+0xcc>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800175a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800175e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001774:	2307      	movs	r3, #7
 8001776:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_UART_MspInit+0xd0>)
 8001782:	f002 fe77 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	37f0      	adds	r7, #240	; 0xf0
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40011000 	.word	0x40011000
 8001794:	58024400 	.word	0x58024400
 8001798:	58020000 	.word	0x58020000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f8ee 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
	if(hi2s1.Init.Mode == I2S_MODE_MASTER_TX)
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <DMA1_Stream0_IRQHandler+0x28>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d103      	bne.n	8001804 <DMA1_Stream0_IRQHandler+0x14>
		HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <DMA1_Stream0_IRQHandler+0x2c>)
 80017fe:	f001 fb27 	bl	8002e50 <HAL_DMA_IRQHandler>
	else if(hi2s1.Init.Mode == I2S_MODE_MASTER_RX)
		HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001802:	e006      	b.n	8001812 <DMA1_Stream0_IRQHandler+0x22>
	else if(hi2s1.Init.Mode == I2S_MODE_MASTER_RX)
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <DMA1_Stream0_IRQHandler+0x28>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d102      	bne.n	8001812 <DMA1_Stream0_IRQHandler+0x22>
		HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <DMA1_Stream0_IRQHandler+0x30>)
 800180e:	f001 fb1f 	bl	8002e50 <HAL_DMA_IRQHandler>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000538 	.word	0x24000538
 800181c:	2400058c 	.word	0x2400058c
 8001820:	24000604 	.word	0x24000604

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f00d ff10 	bl	800f678 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24080000 	.word	0x24080000
 8001884:	00000400 	.word	0x00000400
 8001888:	2400179c 	.word	0x2400179c
 800188c:	240017f0 	.word	0x240017f0

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001894:	f7fe fea2 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	; (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	; (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018be:	f00d fee1 	bl	800f684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff f871 	bl	80009a8 <main>
  bx  lr
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018d0:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 80018d4:	0800fe08 	.word	0x0800fe08
  ldr r2, =_sbss
 80018d8:	240000ac 	.word	0x240000ac
  ldr r4, =_ebss
 80018dc:	240017f0 	.word	0x240017f0

080018e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC3_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ea:	2003      	movs	r0, #3
 80018ec:	f000 f98c 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018f0:	f004 f9ea 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_Init+0x68>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	4913      	ldr	r1, [pc, #76]	; (8001950 <HAL_Init+0x6c>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_Init+0x68>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_Init+0x6c>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_Init+0x70>)
 8001926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_Init+0x74>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f814 	bl	800195c <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e002      	b.n	8001944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800193e:	f7ff fce7 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	58024400 	.word	0x58024400
 8001950:	0800f964 	.word	0x0800f964
 8001954:	24000004 	.word	0x24000004
 8001958:	24000000 	.word	0x24000000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_InitTick+0x60>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e021      	b.n	80019b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_InitTick+0x64>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_InitTick+0x60>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f971 	bl	8001c6e <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f93b 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x68>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	24000044 	.word	0x24000044
 80019c0:	24000000 	.word	0x24000000
 80019c4:	24000040 	.word	0x24000040

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	24000044 	.word	0x24000044
 80019ec:	240017a0 	.word	0x240017a0

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	240017a0 	.word	0x240017a0

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	24000044 	.word	0x24000044

08001a50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetREVID+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0c1b      	lsrs	r3, r3, #16
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	5c001000 	.word	0x5c001000

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	05fa0000 	.word	0x05fa0000

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff40 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff90 	bl	8001b5c <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5f 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff33 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa4 	bl	8001bc4 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff feae 	bl	80019f0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e316      	b.n	80022ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a66      	ldr	r2, [pc, #408]	; (8001e40 <HAL_DMA_Init+0x1b8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04a      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_DMA_Init+0x1bc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d045      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_DMA_Init+0x1c0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d040      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a62      	ldr	r2, [pc, #392]	; (8001e4c <HAL_DMA_Init+0x1c4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d03b      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a60      	ldr	r2, [pc, #384]	; (8001e50 <HAL_DMA_Init+0x1c8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5f      	ldr	r2, [pc, #380]	; (8001e54 <HAL_DMA_Init+0x1cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d031      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5d      	ldr	r2, [pc, #372]	; (8001e58 <HAL_DMA_Init+0x1d0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02c      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_DMA_Init+0x1d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d027      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a5a      	ldr	r2, [pc, #360]	; (8001e60 <HAL_DMA_Init+0x1d8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a59      	ldr	r2, [pc, #356]	; (8001e64 <HAL_DMA_Init+0x1dc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d01d      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a57      	ldr	r2, [pc, #348]	; (8001e68 <HAL_DMA_Init+0x1e0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a56      	ldr	r2, [pc, #344]	; (8001e6c <HAL_DMA_Init+0x1e4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <HAL_DMA_Init+0x1e8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a53      	ldr	r2, [pc, #332]	; (8001e74 <HAL_DMA_Init+0x1ec>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_DMA_Init+0x1f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_DMA_Init+0xb8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_DMA_Init+0x1f4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Init+0xbc>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Init+0xbe>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 813b 	beq.w	8001fc2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a37      	ldr	r2, [pc, #220]	; (8001e40 <HAL_DMA_Init+0x1b8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d04a      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a36      	ldr	r2, [pc, #216]	; (8001e44 <HAL_DMA_Init+0x1bc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d045      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <HAL_DMA_Init+0x1c0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d040      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a33      	ldr	r2, [pc, #204]	; (8001e4c <HAL_DMA_Init+0x1c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d03b      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <HAL_DMA_Init+0x1c8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d036      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_DMA_Init+0x1cc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d031      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <HAL_DMA_Init+0x1d0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02c      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_DMA_Init+0x1d4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d027      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_DMA_Init+0x1d8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_DMA_Init+0x1dc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d01d      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a28      	ldr	r2, [pc, #160]	; (8001e68 <HAL_DMA_Init+0x1e0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d018      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <HAL_DMA_Init+0x1e4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <HAL_DMA_Init+0x1e8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_DMA_Init+0x1ec>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <HAL_DMA_Init+0x1f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Init+0x174>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <HAL_DMA_Init+0x1f4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d108      	bne.n	8001e0e <HAL_DMA_Init+0x186>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e007      	b.n	8001e1e <HAL_DMA_Init+0x196>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e1e:	e02f      	b.n	8001e80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e20:	f7ff fde6 	bl	80019f0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d928      	bls.n	8001e80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e246      	b.n	80022ce <HAL_DMA_Init+0x646>
 8001e40:	40020010 	.word	0x40020010
 8001e44:	40020028 	.word	0x40020028
 8001e48:	40020040 	.word	0x40020040
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	40020070 	.word	0x40020070
 8001e54:	40020088 	.word	0x40020088
 8001e58:	400200a0 	.word	0x400200a0
 8001e5c:	400200b8 	.word	0x400200b8
 8001e60:	40020410 	.word	0x40020410
 8001e64:	40020428 	.word	0x40020428
 8001e68:	40020440 	.word	0x40020440
 8001e6c:	40020458 	.word	0x40020458
 8001e70:	40020470 	.word	0x40020470
 8001e74:	40020488 	.word	0x40020488
 8001e78:	400204a0 	.word	0x400204a0
 8001e7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1c8      	bne.n	8001e20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <HAL_DMA_Init+0x420>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ea6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4313      	orrs	r3, r2
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ee4:	4b71      	ldr	r3, [pc, #452]	; (80020ac <HAL_DMA_Init+0x424>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <HAL_DMA_Init+0x428>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef0:	d328      	bcc.n	8001f44 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b28      	cmp	r3, #40	; 0x28
 8001ef8:	d903      	bls.n	8001f02 <HAL_DMA_Init+0x27a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b2e      	cmp	r3, #46	; 0x2e
 8001f00:	d917      	bls.n	8001f32 <HAL_DMA_Init+0x2aa>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b3e      	cmp	r3, #62	; 0x3e
 8001f08:	d903      	bls.n	8001f12 <HAL_DMA_Init+0x28a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b42      	cmp	r3, #66	; 0x42
 8001f10:	d90f      	bls.n	8001f32 <HAL_DMA_Init+0x2aa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b46      	cmp	r3, #70	; 0x46
 8001f18:	d903      	bls.n	8001f22 <HAL_DMA_Init+0x29a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b48      	cmp	r3, #72	; 0x48
 8001f20:	d907      	bls.n	8001f32 <HAL_DMA_Init+0x2aa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b4e      	cmp	r3, #78	; 0x4e
 8001f28:	d905      	bls.n	8001f36 <HAL_DMA_Init+0x2ae>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b52      	cmp	r3, #82	; 0x52
 8001f30:	d801      	bhi.n	8001f36 <HAL_DMA_Init+0x2ae>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_DMA_Init+0x2b0>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f42:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f023 0307 	bic.w	r3, r3, #7
 8001f5a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d117      	bne.n	8001f9e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00e      	beq.n	8001f9e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f002 f8ed 	bl	8004160 <DMA_CheckFifoParam>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e197      	b.n	80022ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f002 f828 	bl	8003ffc <DMA_CalcBaseAndBitshift>
 8001fac:	4603      	mov	r3, r0
 8001fae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e0cd      	b.n	800215e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3b      	ldr	r2, [pc, #236]	; (80020b4 <HAL_DMA_Init+0x42c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <HAL_DMA_Init+0x430>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a38      	ldr	r2, [pc, #224]	; (80020bc <HAL_DMA_Init+0x434>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <HAL_DMA_Init+0x438>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <HAL_DMA_Init+0x43c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <HAL_DMA_Init+0x440>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a32      	ldr	r2, [pc, #200]	; (80020cc <HAL_DMA_Init+0x444>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_Init+0x38a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a30      	ldr	r2, [pc, #192]	; (80020d0 <HAL_DMA_Init+0x448>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Init+0x38e>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_DMA_Init+0x390>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8097 	beq.w	800214c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <HAL_DMA_Init+0x42c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d021      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <HAL_DMA_Init+0x430>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01c      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_DMA_Init+0x434>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d017      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_DMA_Init+0x438>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d012      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_DMA_Init+0x43c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_DMA_Init+0x440>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d008      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_DMA_Init+0x444>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <HAL_DMA_Init+0x3e4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_DMA_Init+0x448>)
 800206a:	4293      	cmp	r3, r2
 800206c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_DMA_Init+0x44c>)
 800208a:	4013      	ands	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d020      	beq.n	80020d8 <HAL_DMA_Init+0x450>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b80      	cmp	r3, #128	; 0x80
 800209c:	d102      	bne.n	80020a4 <HAL_DMA_Init+0x41c>
 800209e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a2:	e01a      	b.n	80020da <HAL_DMA_Init+0x452>
 80020a4:	2300      	movs	r3, #0
 80020a6:	e018      	b.n	80020da <HAL_DMA_Init+0x452>
 80020a8:	fe10803f 	.word	0xfe10803f
 80020ac:	5c001000 	.word	0x5c001000
 80020b0:	ffff0000 	.word	0xffff0000
 80020b4:	58025408 	.word	0x58025408
 80020b8:	5802541c 	.word	0x5802541c
 80020bc:	58025430 	.word	0x58025430
 80020c0:	58025444 	.word	0x58025444
 80020c4:	58025458 	.word	0x58025458
 80020c8:	5802546c 	.word	0x5802546c
 80020cc:	58025480 	.word	0x58025480
 80020d0:	58025494 	.word	0x58025494
 80020d4:	fffe000f 	.word	0xfffe000f
 80020d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002108:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <HAL_DMA_Init+0x650>)
 8002120:	4413      	add	r3, r2
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_DMA_Init+0x654>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f001 ff63 	bl	8003ffc <DMA_CalcBaseAndBitshift>
 8002136:	4603      	mov	r3, r0
 8002138:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	e008      	b.n	800215e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0b7      	b.n	80022ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5f      	ldr	r2, [pc, #380]	; (80022e0 <HAL_DMA_Init+0x658>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d072      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5d      	ldr	r2, [pc, #372]	; (80022e4 <HAL_DMA_Init+0x65c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d06d      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_DMA_Init+0x660>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d068      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_DMA_Init+0x664>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d063      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_DMA_Init+0x668>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d05e      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_DMA_Init+0x66c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d059      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_DMA_Init+0x670>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d054      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_DMA_Init+0x674>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04f      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_DMA_Init+0x678>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04a      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_DMA_Init+0x67c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d045      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_DMA_Init+0x680>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d040      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	; (800230c <HAL_DMA_Init+0x684>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03b      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_DMA_Init+0x688>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d036      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4b      	ldr	r2, [pc, #300]	; (8002314 <HAL_DMA_Init+0x68c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <HAL_DMA_Init+0x690>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_DMA_Init+0x694>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_DMA_Init+0x698>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <HAL_DMA_Init+0x69c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a44      	ldr	r2, [pc, #272]	; (8002328 <HAL_DMA_Init+0x6a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d018      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a42      	ldr	r2, [pc, #264]	; (800232c <HAL_DMA_Init+0x6a4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a41      	ldr	r2, [pc, #260]	; (8002330 <HAL_DMA_Init+0x6a8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <HAL_DMA_Init+0x6ac>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <HAL_DMA_Init+0x6b0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Init+0x5c6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a3c      	ldr	r2, [pc, #240]	; (800233c <HAL_DMA_Init+0x6b4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Init+0x5ca>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_DMA_Init+0x5cc>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d032      	beq.n	80022be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 fffd 	bl	8004258 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d102      	bne.n	800226c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002280:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_DMA_Init+0x624>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d80c      	bhi.n	80022ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f002 f87a 	bl	800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e008      	b.n	80022be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	a7fdabf8 	.word	0xa7fdabf8
 80022dc:	cccccccd 	.word	0xcccccccd
 80022e0:	40020010 	.word	0x40020010
 80022e4:	40020028 	.word	0x40020028
 80022e8:	40020040 	.word	0x40020040
 80022ec:	40020058 	.word	0x40020058
 80022f0:	40020070 	.word	0x40020070
 80022f4:	40020088 	.word	0x40020088
 80022f8:	400200a0 	.word	0x400200a0
 80022fc:	400200b8 	.word	0x400200b8
 8002300:	40020410 	.word	0x40020410
 8002304:	40020428 	.word	0x40020428
 8002308:	40020440 	.word	0x40020440
 800230c:	40020458 	.word	0x40020458
 8002310:	40020470 	.word	0x40020470
 8002314:	40020488 	.word	0x40020488
 8002318:	400204a0 	.word	0x400204a0
 800231c:	400204b8 	.word	0x400204b8
 8002320:	58025408 	.word	0x58025408
 8002324:	5802541c 	.word	0x5802541c
 8002328:	58025430 	.word	0x58025430
 800232c:	58025444 	.word	0x58025444
 8002330:	58025458 	.word	0x58025458
 8002334:	5802546c 	.word	0x5802546c
 8002338:	58025480 	.word	0x58025480
 800233c:	58025494 	.word	0x58025494

08002340 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e226      	b.n	80027aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_DMA_Start_IT+0x2a>
 8002366:	2302      	movs	r3, #2
 8002368:	e21f      	b.n	80027aa <HAL_DMA_Start_IT+0x46a>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	f040 820a 	bne.w	8002794 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a68      	ldr	r2, [pc, #416]	; (8002534 <HAL_DMA_Start_IT+0x1f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04a      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_DMA_Start_IT+0x1f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d045      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_DMA_Start_IT+0x1fc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d040      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a63      	ldr	r2, [pc, #396]	; (8002540 <HAL_DMA_Start_IT+0x200>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d03b      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a62      	ldr	r2, [pc, #392]	; (8002544 <HAL_DMA_Start_IT+0x204>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d036      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a60      	ldr	r2, [pc, #384]	; (8002548 <HAL_DMA_Start_IT+0x208>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5f      	ldr	r2, [pc, #380]	; (800254c <HAL_DMA_Start_IT+0x20c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d02c      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5d      	ldr	r2, [pc, #372]	; (8002550 <HAL_DMA_Start_IT+0x210>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d027      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5c      	ldr	r2, [pc, #368]	; (8002554 <HAL_DMA_Start_IT+0x214>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5a      	ldr	r2, [pc, #360]	; (8002558 <HAL_DMA_Start_IT+0x218>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01d      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a59      	ldr	r2, [pc, #356]	; (800255c <HAL_DMA_Start_IT+0x21c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_DMA_Start_IT+0x220>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a56      	ldr	r2, [pc, #344]	; (8002564 <HAL_DMA_Start_IT+0x224>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_DMA_Start_IT+0x228>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_DMA_Start_IT+0x22c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a51      	ldr	r2, [pc, #324]	; (8002570 <HAL_DMA_Start_IT+0x230>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <HAL_DMA_Start_IT+0x100>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_DMA_Start_IT+0x110>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f001 fc24 	bl	8003ca4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a34      	ldr	r2, [pc, #208]	; (8002534 <HAL_DMA_Start_IT+0x1f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04a      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <HAL_DMA_Start_IT+0x1f8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d045      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_DMA_Start_IT+0x1fc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d040      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_DMA_Start_IT+0x200>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d03b      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <HAL_DMA_Start_IT+0x204>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d036      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2d      	ldr	r2, [pc, #180]	; (8002548 <HAL_DMA_Start_IT+0x208>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d031      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_Start_IT+0x20c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02c      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_DMA_Start_IT+0x210>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d027      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_DMA_Start_IT+0x214>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_DMA_Start_IT+0x218>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01d      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_DMA_Start_IT+0x21c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <HAL_DMA_Start_IT+0x220>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_DMA_Start_IT+0x224>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <HAL_DMA_Start_IT+0x228>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_DMA_Start_IT+0x22c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_DMA_Start_IT+0x230>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_DMA_Start_IT+0x1c0>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_DMA_Start_IT+0x1c2>
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 021e 	bic.w	r2, r3, #30
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0216 	orr.w	r2, r2, #22
 8002518:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d03e      	beq.n	80025a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0208 	orr.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e035      	b.n	80025a0 <HAL_DMA_Start_IT+0x260>
 8002534:	40020010 	.word	0x40020010
 8002538:	40020028 	.word	0x40020028
 800253c:	40020040 	.word	0x40020040
 8002540:	40020058 	.word	0x40020058
 8002544:	40020070 	.word	0x40020070
 8002548:	40020088 	.word	0x40020088
 800254c:	400200a0 	.word	0x400200a0
 8002550:	400200b8 	.word	0x400200b8
 8002554:	40020410 	.word	0x40020410
 8002558:	40020428 	.word	0x40020428
 800255c:	40020440 	.word	0x40020440
 8002560:	40020458 	.word	0x40020458
 8002564:	40020470 	.word	0x40020470
 8002568:	40020488 	.word	0x40020488
 800256c:	400204a0 	.word	0x400204a0
 8002570:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 020e 	bic.w	r2, r3, #14
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 020a 	orr.w	r2, r2, #10
 8002586:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0204 	orr.w	r2, r2, #4
 800259e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a83      	ldr	r2, [pc, #524]	; (80027b4 <HAL_DMA_Start_IT+0x474>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d072      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a82      	ldr	r2, [pc, #520]	; (80027b8 <HAL_DMA_Start_IT+0x478>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d06d      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_DMA_Start_IT+0x47c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d068      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <HAL_DMA_Start_IT+0x480>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d063      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_DMA_Start_IT+0x484>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d05e      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_DMA_Start_IT+0x488>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d059      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_DMA_Start_IT+0x48c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d054      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a79      	ldr	r2, [pc, #484]	; (80027d0 <HAL_DMA_Start_IT+0x490>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04f      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_DMA_Start_IT+0x494>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a76      	ldr	r2, [pc, #472]	; (80027d8 <HAL_DMA_Start_IT+0x498>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a74      	ldr	r2, [pc, #464]	; (80027dc <HAL_DMA_Start_IT+0x49c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <HAL_DMA_Start_IT+0x4a0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_DMA_Start_IT+0x4a4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a70      	ldr	r2, [pc, #448]	; (80027e8 <HAL_DMA_Start_IT+0x4a8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_DMA_Start_IT+0x4ac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6d      	ldr	r2, [pc, #436]	; (80027f0 <HAL_DMA_Start_IT+0x4b0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6b      	ldr	r2, [pc, #428]	; (80027f4 <HAL_DMA_Start_IT+0x4b4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6a      	ldr	r2, [pc, #424]	; (80027f8 <HAL_DMA_Start_IT+0x4b8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a68      	ldr	r2, [pc, #416]	; (80027fc <HAL_DMA_Start_IT+0x4bc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a67      	ldr	r2, [pc, #412]	; (8002800 <HAL_DMA_Start_IT+0x4c0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_DMA_Start_IT+0x4c4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a64      	ldr	r2, [pc, #400]	; (8002808 <HAL_DMA_Start_IT+0x4c8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a62      	ldr	r2, [pc, #392]	; (800280c <HAL_DMA_Start_IT+0x4cc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a61      	ldr	r2, [pc, #388]	; (8002810 <HAL_DMA_Start_IT+0x4d0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Start_IT+0x354>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_DMA_Start_IT+0x356>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01a      	beq.n	80026d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a37      	ldr	r2, [pc, #220]	; (80027b4 <HAL_DMA_Start_IT+0x474>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a36      	ldr	r2, [pc, #216]	; (80027b8 <HAL_DMA_Start_IT+0x478>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a34      	ldr	r2, [pc, #208]	; (80027bc <HAL_DMA_Start_IT+0x47c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <HAL_DMA_Start_IT+0x480>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a31      	ldr	r2, [pc, #196]	; (80027c4 <HAL_DMA_Start_IT+0x484>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a30      	ldr	r2, [pc, #192]	; (80027c8 <HAL_DMA_Start_IT+0x488>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <HAL_DMA_Start_IT+0x48c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <HAL_DMA_Start_IT+0x490>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <HAL_DMA_Start_IT+0x494>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <HAL_DMA_Start_IT+0x498>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a28      	ldr	r2, [pc, #160]	; (80027dc <HAL_DMA_Start_IT+0x49c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_DMA_Start_IT+0x4a0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <HAL_DMA_Start_IT+0x4a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <HAL_DMA_Start_IT+0x4a8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a22      	ldr	r2, [pc, #136]	; (80027ec <HAL_DMA_Start_IT+0x4ac>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <HAL_DMA_Start_IT+0x4b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_Start_IT+0x442>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e012      	b.n	80027a8 <HAL_DMA_Start_IT+0x468>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e009      	b.n	80027a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800279a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40020028 	.word	0x40020028
 80027bc:	40020040 	.word	0x40020040
 80027c0:	40020058 	.word	0x40020058
 80027c4:	40020070 	.word	0x40020070
 80027c8:	40020088 	.word	0x40020088
 80027cc:	400200a0 	.word	0x400200a0
 80027d0:	400200b8 	.word	0x400200b8
 80027d4:	40020410 	.word	0x40020410
 80027d8:	40020428 	.word	0x40020428
 80027dc:	40020440 	.word	0x40020440
 80027e0:	40020458 	.word	0x40020458
 80027e4:	40020470 	.word	0x40020470
 80027e8:	40020488 	.word	0x40020488
 80027ec:	400204a0 	.word	0x400204a0
 80027f0:	400204b8 	.word	0x400204b8
 80027f4:	58025408 	.word	0x58025408
 80027f8:	5802541c 	.word	0x5802541c
 80027fc:	58025430 	.word	0x58025430
 8002800:	58025444 	.word	0x58025444
 8002804:	58025458 	.word	0x58025458
 8002808:	5802546c 	.word	0x5802546c
 800280c:	58025480 	.word	0x58025480
 8002810:	58025494 	.word	0x58025494

08002814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff f8e8 	bl	80019f0 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e2dc      	b.n	8002de6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d008      	beq.n	800284a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e2cd      	b.n	8002de6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a76      	ldr	r2, [pc, #472]	; (8002a28 <HAL_DMA_Abort+0x214>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d04a      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a74      	ldr	r2, [pc, #464]	; (8002a2c <HAL_DMA_Abort+0x218>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d045      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a73      	ldr	r2, [pc, #460]	; (8002a30 <HAL_DMA_Abort+0x21c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d040      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a71      	ldr	r2, [pc, #452]	; (8002a34 <HAL_DMA_Abort+0x220>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d03b      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a70      	ldr	r2, [pc, #448]	; (8002a38 <HAL_DMA_Abort+0x224>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d036      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6e      	ldr	r2, [pc, #440]	; (8002a3c <HAL_DMA_Abort+0x228>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6d      	ldr	r2, [pc, #436]	; (8002a40 <HAL_DMA_Abort+0x22c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d02c      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6b      	ldr	r2, [pc, #428]	; (8002a44 <HAL_DMA_Abort+0x230>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d027      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6a      	ldr	r2, [pc, #424]	; (8002a48 <HAL_DMA_Abort+0x234>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_DMA_Abort+0x238>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_DMA_Abort+0x23c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_DMA_Abort+0x240>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a64      	ldr	r2, [pc, #400]	; (8002a58 <HAL_DMA_Abort+0x244>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a62      	ldr	r2, [pc, #392]	; (8002a5c <HAL_DMA_Abort+0x248>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a61      	ldr	r2, [pc, #388]	; (8002a60 <HAL_DMA_Abort+0x24c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a5f      	ldr	r2, [pc, #380]	; (8002a64 <HAL_DMA_Abort+0x250>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Abort+0xda>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_DMA_Abort+0xdc>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 021e 	bic.w	r2, r2, #30
 8002902:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002912:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e00a      	b.n	8002932 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020e 	bic.w	r2, r2, #14
 800292a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <HAL_DMA_Abort+0x214>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d072      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_DMA_Abort+0x218>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d06d      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a39      	ldr	r2, [pc, #228]	; (8002a30 <HAL_DMA_Abort+0x21c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d068      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <HAL_DMA_Abort+0x220>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d063      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <HAL_DMA_Abort+0x224>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d05e      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <HAL_DMA_Abort+0x228>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d059      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <HAL_DMA_Abort+0x22c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d054      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <HAL_DMA_Abort+0x230>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04f      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <HAL_DMA_Abort+0x234>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <HAL_DMA_Abort+0x238>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <HAL_DMA_Abort+0x23c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2b      	ldr	r2, [pc, #172]	; (8002a54 <HAL_DMA_Abort+0x240>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2a      	ldr	r2, [pc, #168]	; (8002a58 <HAL_DMA_Abort+0x244>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <HAL_DMA_Abort+0x248>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_DMA_Abort+0x24c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HAL_DMA_Abort+0x250>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_DMA_Abort+0x254>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_DMA_Abort+0x258>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a21      	ldr	r2, [pc, #132]	; (8002a70 <HAL_DMA_Abort+0x25c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_DMA_Abort+0x260>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_DMA_Abort+0x264>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_DMA_Abort+0x268>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <HAL_DMA_Abort+0x26c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_DMA_Abort+0x270>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d132      	bne.n	8002a88 <HAL_DMA_Abort+0x274>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e031      	b.n	8002a8a <HAL_DMA_Abort+0x276>
 8002a26:	bf00      	nop
 8002a28:	40020010 	.word	0x40020010
 8002a2c:	40020028 	.word	0x40020028
 8002a30:	40020040 	.word	0x40020040
 8002a34:	40020058 	.word	0x40020058
 8002a38:	40020070 	.word	0x40020070
 8002a3c:	40020088 	.word	0x40020088
 8002a40:	400200a0 	.word	0x400200a0
 8002a44:	400200b8 	.word	0x400200b8
 8002a48:	40020410 	.word	0x40020410
 8002a4c:	40020428 	.word	0x40020428
 8002a50:	40020440 	.word	0x40020440
 8002a54:	40020458 	.word	0x40020458
 8002a58:	40020470 	.word	0x40020470
 8002a5c:	40020488 	.word	0x40020488
 8002a60:	400204a0 	.word	0x400204a0
 8002a64:	400204b8 	.word	0x400204b8
 8002a68:	58025408 	.word	0x58025408
 8002a6c:	5802541c 	.word	0x5802541c
 8002a70:	58025430 	.word	0x58025430
 8002a74:	58025444 	.word	0x58025444
 8002a78:	58025458 	.word	0x58025458
 8002a7c:	5802546c 	.word	0x5802546c
 8002a80:	58025480 	.word	0x58025480
 8002a84:	58025494 	.word	0x58025494
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6d      	ldr	r2, [pc, #436]	; (8002c58 <HAL_DMA_Abort+0x444>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d04a      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	; (8002c5c <HAL_DMA_Abort+0x448>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d045      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <HAL_DMA_Abort+0x44c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d040      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <HAL_DMA_Abort+0x450>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d03b      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a67      	ldr	r2, [pc, #412]	; (8002c68 <HAL_DMA_Abort+0x454>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d036      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	; (8002c6c <HAL_DMA_Abort+0x458>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d031      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a64      	ldr	r2, [pc, #400]	; (8002c70 <HAL_DMA_Abort+0x45c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d02c      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a62      	ldr	r2, [pc, #392]	; (8002c74 <HAL_DMA_Abort+0x460>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d027      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a61      	ldr	r2, [pc, #388]	; (8002c78 <HAL_DMA_Abort+0x464>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5f      	ldr	r2, [pc, #380]	; (8002c7c <HAL_DMA_Abort+0x468>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5e      	ldr	r2, [pc, #376]	; (8002c80 <HAL_DMA_Abort+0x46c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5c      	ldr	r2, [pc, #368]	; (8002c84 <HAL_DMA_Abort+0x470>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <HAL_DMA_Abort+0x474>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a59      	ldr	r2, [pc, #356]	; (8002c8c <HAL_DMA_Abort+0x478>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_DMA_Abort+0x47c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a56      	ldr	r2, [pc, #344]	; (8002c94 <HAL_DMA_Abort+0x480>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <HAL_DMA_Abort+0x33c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e007      	b.n	8002b60 <HAL_DMA_Abort+0x34c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b60:	e013      	b.n	8002b8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b62:	f7fe ff45 	bl	80019f0 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d90c      	bls.n	8002b8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e12d      	b.n	8002de6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <HAL_DMA_Abort+0x444>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04a      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2d      	ldr	r2, [pc, #180]	; (8002c5c <HAL_DMA_Abort+0x448>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d045      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <HAL_DMA_Abort+0x44c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d040      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_DMA_Abort+0x450>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d03b      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_DMA_Abort+0x454>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d036      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_DMA_Abort+0x458>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d031      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <HAL_DMA_Abort+0x45c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d02c      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_DMA_Abort+0x460>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d027      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <HAL_DMA_Abort+0x464>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_DMA_Abort+0x468>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01d      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_DMA_Abort+0x46c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_DMA_Abort+0x470>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_DMA_Abort+0x474>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_DMA_Abort+0x478>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_DMA_Abort+0x47c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_DMA_Abort+0x480>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_DMA_Abort+0x426>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_DMA_Abort+0x428>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02b      	beq.n	8002c98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	223f      	movs	r2, #63	; 0x3f
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	e02a      	b.n	8002cae <HAL_DMA_Abort+0x49a>
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_DMA_Abort+0x5dc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d072      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_DMA_Abort+0x5e0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d06d      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_DMA_Abort+0x5e4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d068      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_DMA_Abort+0x5e8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d063      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_DMA_Abort+0x5ec>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a47      	ldr	r2, [pc, #284]	; (8002e04 <HAL_DMA_Abort+0x5f0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d059      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_DMA_Abort+0x5f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d054      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a44      	ldr	r2, [pc, #272]	; (8002e0c <HAL_DMA_Abort+0x5f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04f      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_DMA_Abort+0x5fc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d04a      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a41      	ldr	r2, [pc, #260]	; (8002e14 <HAL_DMA_Abort+0x600>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d045      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <HAL_DMA_Abort+0x604>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d040      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3e      	ldr	r2, [pc, #248]	; (8002e1c <HAL_DMA_Abort+0x608>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d03b      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <HAL_DMA_Abort+0x60c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d036      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_DMA_Abort+0x610>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d031      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <HAL_DMA_Abort+0x614>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d02c      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a38      	ldr	r2, [pc, #224]	; (8002e2c <HAL_DMA_Abort+0x618>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d027      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <HAL_DMA_Abort+0x61c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <HAL_DMA_Abort+0x620>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_DMA_Abort+0x624>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a32      	ldr	r2, [pc, #200]	; (8002e3c <HAL_DMA_Abort+0x628>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a31      	ldr	r2, [pc, #196]	; (8002e40 <HAL_DMA_Abort+0x62c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <HAL_DMA_Abort+0x630>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <HAL_DMA_Abort+0x634>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <HAL_DMA_Abort+0x638>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_DMA_Abort+0x58e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_DMA_Abort+0x590>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002db0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dd2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
 8002e30:	58025408 	.word	0x58025408
 8002e34:	5802541c 	.word	0x5802541c
 8002e38:	58025430 	.word	0x58025430
 8002e3c:	58025444 	.word	0x58025444
 8002e40:	58025458 	.word	0x58025458
 8002e44:	5802546c 	.word	0x5802546c
 8002e48:	58025480 	.word	0x58025480
 8002e4c:	58025494 	.word	0x58025494

08002e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e5c:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_DMA_IRQHandler+0x1ac>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a67      	ldr	r2, [pc, #412]	; (8003000 <HAL_DMA_IRQHandler+0x1b0>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5f      	ldr	r2, [pc, #380]	; (8003004 <HAL_DMA_IRQHandler+0x1b4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04a      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5d      	ldr	r2, [pc, #372]	; (8003008 <HAL_DMA_IRQHandler+0x1b8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d045      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5c      	ldr	r2, [pc, #368]	; (800300c <HAL_DMA_IRQHandler+0x1bc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d040      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5a      	ldr	r2, [pc, #360]	; (8003010 <HAL_DMA_IRQHandler+0x1c0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d03b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a59      	ldr	r2, [pc, #356]	; (8003014 <HAL_DMA_IRQHandler+0x1c4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d036      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a57      	ldr	r2, [pc, #348]	; (8003018 <HAL_DMA_IRQHandler+0x1c8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d031      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a56      	ldr	r2, [pc, #344]	; (800301c <HAL_DMA_IRQHandler+0x1cc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d02c      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_DMA_IRQHandler+0x1d0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d027      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a53      	ldr	r2, [pc, #332]	; (8003024 <HAL_DMA_IRQHandler+0x1d4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a51      	ldr	r2, [pc, #324]	; (8003028 <HAL_DMA_IRQHandler+0x1d8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01d      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a50      	ldr	r2, [pc, #320]	; (800302c <HAL_DMA_IRQHandler+0x1dc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d018      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a4e      	ldr	r2, [pc, #312]	; (8003030 <HAL_DMA_IRQHandler+0x1e0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_DMA_IRQHandler+0x1e4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00e      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_DMA_IRQHandler+0x1e8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_DMA_IRQHandler+0x1ec>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xd2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a48      	ldr	r2, [pc, #288]	; (8003040 <HAL_DMA_IRQHandler+0x1f0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_DMA_IRQHandler+0xd6>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 842b 	beq.w	8003784 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80a2 	beq.w	8003088 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2e      	ldr	r2, [pc, #184]	; (8003004 <HAL_DMA_IRQHandler+0x1b4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d04a      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	; (8003008 <HAL_DMA_IRQHandler+0x1b8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d045      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	; (800300c <HAL_DMA_IRQHandler+0x1bc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d040      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <HAL_DMA_IRQHandler+0x1c0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d03b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_DMA_IRQHandler+0x1c4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d036      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a27      	ldr	r2, [pc, #156]	; (8003018 <HAL_DMA_IRQHandler+0x1c8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d031      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a25      	ldr	r2, [pc, #148]	; (800301c <HAL_DMA_IRQHandler+0x1cc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d02c      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a24      	ldr	r2, [pc, #144]	; (8003020 <HAL_DMA_IRQHandler+0x1d0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d027      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_DMA_IRQHandler+0x1d4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d022      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a21      	ldr	r2, [pc, #132]	; (8003028 <HAL_DMA_IRQHandler+0x1d8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d01d      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_DMA_IRQHandler+0x1dc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d018      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_DMA_IRQHandler+0x1e0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_DMA_IRQHandler+0x1e4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_DMA_IRQHandler+0x1e8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_DMA_IRQHandler+0x1ec>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x194>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <HAL_DMA_IRQHandler+0x1f0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d12f      	bne.n	8003044 <HAL_DMA_IRQHandler+0x1f4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e02e      	b.n	8003058 <HAL_DMA_IRQHandler+0x208>
 8002ffa:	bf00      	nop
 8002ffc:	24000000 	.word	0x24000000
 8003000:	1b4e81b5 	.word	0x1b4e81b5
 8003004:	40020010 	.word	0x40020010
 8003008:	40020028 	.word	0x40020028
 800300c:	40020040 	.word	0x40020040
 8003010:	40020058 	.word	0x40020058
 8003014:	40020070 	.word	0x40020070
 8003018:	40020088 	.word	0x40020088
 800301c:	400200a0 	.word	0x400200a0
 8003020:	400200b8 	.word	0x400200b8
 8003024:	40020410 	.word	0x40020410
 8003028:	40020428 	.word	0x40020428
 800302c:	40020440 	.word	0x40020440
 8003030:	40020458 	.word	0x40020458
 8003034:	40020470 	.word	0x40020470
 8003038:	40020488 	.word	0x40020488
 800303c:	400204a0 	.word	0x400204a0
 8003040:	400204b8 	.word	0x400204b8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2208      	movs	r2, #8
 8003076:	409a      	lsls	r2, r3
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d06e      	beq.n	800317c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_DMA_IRQHandler+0x3f8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04a      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a67      	ldr	r2, [pc, #412]	; (800324c <HAL_DMA_IRQHandler+0x3fc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d045      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a66      	ldr	r2, [pc, #408]	; (8003250 <HAL_DMA_IRQHandler+0x400>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d040      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a64      	ldr	r2, [pc, #400]	; (8003254 <HAL_DMA_IRQHandler+0x404>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d03b      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a63      	ldr	r2, [pc, #396]	; (8003258 <HAL_DMA_IRQHandler+0x408>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d036      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a61      	ldr	r2, [pc, #388]	; (800325c <HAL_DMA_IRQHandler+0x40c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a60      	ldr	r2, [pc, #384]	; (8003260 <HAL_DMA_IRQHandler+0x410>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d02c      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5e      	ldr	r2, [pc, #376]	; (8003264 <HAL_DMA_IRQHandler+0x414>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d027      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5d      	ldr	r2, [pc, #372]	; (8003268 <HAL_DMA_IRQHandler+0x418>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5b      	ldr	r2, [pc, #364]	; (800326c <HAL_DMA_IRQHandler+0x41c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <HAL_DMA_IRQHandler+0x420>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_DMA_IRQHandler+0x424>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a57      	ldr	r2, [pc, #348]	; (8003278 <HAL_DMA_IRQHandler+0x428>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a55      	ldr	r2, [pc, #340]	; (800327c <HAL_DMA_IRQHandler+0x42c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a54      	ldr	r2, [pc, #336]	; (8003280 <HAL_DMA_IRQHandler+0x430>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_DMA_IRQHandler+0x2ee>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_DMA_IRQHandler+0x434>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10a      	bne.n	8003154 <HAL_DMA_IRQHandler+0x304>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e003      	b.n	800315c <HAL_DMA_IRQHandler+0x30c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2201      	movs	r2, #1
 800316a:	409a      	lsls	r2, r3
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f043 0202 	orr.w	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2204      	movs	r2, #4
 8003186:	409a      	lsls	r2, r3
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 808f 	beq.w	80032b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <HAL_DMA_IRQHandler+0x3f8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d04a      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <HAL_DMA_IRQHandler+0x3fc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d045      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a29      	ldr	r2, [pc, #164]	; (8003250 <HAL_DMA_IRQHandler+0x400>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d040      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <HAL_DMA_IRQHandler+0x404>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d03b      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a26      	ldr	r2, [pc, #152]	; (8003258 <HAL_DMA_IRQHandler+0x408>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d036      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <HAL_DMA_IRQHandler+0x40c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d031      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a23      	ldr	r2, [pc, #140]	; (8003260 <HAL_DMA_IRQHandler+0x410>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d02c      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a21      	ldr	r2, [pc, #132]	; (8003264 <HAL_DMA_IRQHandler+0x414>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d027      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a20      	ldr	r2, [pc, #128]	; (8003268 <HAL_DMA_IRQHandler+0x418>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d022      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_DMA_IRQHandler+0x41c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01d      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_DMA_IRQHandler+0x420>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d018      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <HAL_DMA_IRQHandler+0x424>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_DMA_IRQHandler+0x428>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00e      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_DMA_IRQHandler+0x42c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_DMA_IRQHandler+0x430>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_DMA_IRQHandler+0x3e2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <HAL_DMA_IRQHandler+0x434>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12a      	bne.n	8003288 <HAL_DMA_IRQHandler+0x438>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e023      	b.n	8003290 <HAL_DMA_IRQHandler+0x440>
 8003248:	40020010 	.word	0x40020010
 800324c:	40020028 	.word	0x40020028
 8003250:	40020040 	.word	0x40020040
 8003254:	40020058 	.word	0x40020058
 8003258:	40020070 	.word	0x40020070
 800325c:	40020088 	.word	0x40020088
 8003260:	400200a0 	.word	0x400200a0
 8003264:	400200b8 	.word	0x400200b8
 8003268:	40020410 	.word	0x40020410
 800326c:	40020428 	.word	0x40020428
 8003270:	40020440 	.word	0x40020440
 8003274:	40020458 	.word	0x40020458
 8003278:	40020470 	.word	0x40020470
 800327c:	40020488 	.word	0x40020488
 8003280:	400204a0 	.word	0x400204a0
 8003284:	400204b8 	.word	0x400204b8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2210      	movs	r2, #16
 80032ba:	409a      	lsls	r2, r3
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a6 	beq.w	8003412 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a85      	ldr	r2, [pc, #532]	; (80034e0 <HAL_DMA_IRQHandler+0x690>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d04a      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a83      	ldr	r2, [pc, #524]	; (80034e4 <HAL_DMA_IRQHandler+0x694>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d045      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a82      	ldr	r2, [pc, #520]	; (80034e8 <HAL_DMA_IRQHandler+0x698>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d040      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a80      	ldr	r2, [pc, #512]	; (80034ec <HAL_DMA_IRQHandler+0x69c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d03b      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7f      	ldr	r2, [pc, #508]	; (80034f0 <HAL_DMA_IRQHandler+0x6a0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d036      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7d      	ldr	r2, [pc, #500]	; (80034f4 <HAL_DMA_IRQHandler+0x6a4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d031      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7c      	ldr	r2, [pc, #496]	; (80034f8 <HAL_DMA_IRQHandler+0x6a8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02c      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a7a      	ldr	r2, [pc, #488]	; (80034fc <HAL_DMA_IRQHandler+0x6ac>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d027      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a79      	ldr	r2, [pc, #484]	; (8003500 <HAL_DMA_IRQHandler+0x6b0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a77      	ldr	r2, [pc, #476]	; (8003504 <HAL_DMA_IRQHandler+0x6b4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01d      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a76      	ldr	r2, [pc, #472]	; (8003508 <HAL_DMA_IRQHandler+0x6b8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a74      	ldr	r2, [pc, #464]	; (800350c <HAL_DMA_IRQHandler+0x6bc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_DMA_IRQHandler+0x6c0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a71      	ldr	r2, [pc, #452]	; (8003514 <HAL_DMA_IRQHandler+0x6c4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a70      	ldr	r2, [pc, #448]	; (8003518 <HAL_DMA_IRQHandler+0x6c8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_IRQHandler+0x516>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6e      	ldr	r2, [pc, #440]	; (800351c <HAL_DMA_IRQHandler+0x6cc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10a      	bne.n	800337c <HAL_DMA_IRQHandler+0x52c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e009      	b.n	8003390 <HAL_DMA_IRQHandler+0x540>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d03e      	beq.n	8003412 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2210      	movs	r2, #16
 800339e:	409a      	lsls	r2, r3
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d024      	beq.n	8003412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	e01f      	b.n	8003412 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01b      	beq.n	8003412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e016      	b.n	8003412 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0208 	bic.w	r2, r2, #8
 8003400:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2220      	movs	r2, #32
 800341c:	409a      	lsls	r2, r3
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8110 	beq.w	8003648 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <HAL_DMA_IRQHandler+0x690>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <HAL_DMA_IRQHandler+0x694>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d045      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_DMA_IRQHandler+0x698>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d040      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a28      	ldr	r2, [pc, #160]	; (80034ec <HAL_DMA_IRQHandler+0x69c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d03b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <HAL_DMA_IRQHandler+0x6a0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d036      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <HAL_DMA_IRQHandler+0x6a4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d031      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <HAL_DMA_IRQHandler+0x6a8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_DMA_IRQHandler+0x6ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d027      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_DMA_IRQHandler+0x6b0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_DMA_IRQHandler+0x6b4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d01d      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_DMA_IRQHandler+0x6b8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_DMA_IRQHandler+0x6bc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1a      	ldr	r2, [pc, #104]	; (8003510 <HAL_DMA_IRQHandler+0x6c0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_DMA_IRQHandler+0x6c4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <HAL_DMA_IRQHandler+0x6c8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x678>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_DMA_IRQHandler+0x6cc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d12b      	bne.n	8003520 <HAL_DMA_IRQHandler+0x6d0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e02a      	b.n	8003534 <HAL_DMA_IRQHandler+0x6e4>
 80034de:	bf00      	nop
 80034e0:	40020010 	.word	0x40020010
 80034e4:	40020028 	.word	0x40020028
 80034e8:	40020040 	.word	0x40020040
 80034ec:	40020058 	.word	0x40020058
 80034f0:	40020070 	.word	0x40020070
 80034f4:	40020088 	.word	0x40020088
 80034f8:	400200a0 	.word	0x400200a0
 80034fc:	400200b8 	.word	0x400200b8
 8003500:	40020410 	.word	0x40020410
 8003504:	40020428 	.word	0x40020428
 8003508:	40020440 	.word	0x40020440
 800350c:	40020458 	.word	0x40020458
 8003510:	40020470 	.word	0x40020470
 8003514:	40020488 	.word	0x40020488
 8003518:	400204a0 	.word	0x400204a0
 800351c:	400204b8 	.word	0x400204b8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8087 	beq.w	8003648 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2220      	movs	r2, #32
 8003544:	409a      	lsls	r2, r3
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b04      	cmp	r3, #4
 8003554:	d139      	bne.n	80035ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0216 	bic.w	r2, r2, #22
 8003564:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003574:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_DMA_IRQHandler+0x736>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0208 	bic.w	r2, r2, #8
 8003594:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	223f      	movs	r2, #63	; 0x3f
 80035a0:	409a      	lsls	r2, r3
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 834a 	beq.w	8003c54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
          }
          return;
 80035c8:	e344      	b.n	8003c54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d018      	beq.n	800360a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d02c      	beq.n	8003648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
 80035f6:	e027      	b.n	8003648 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d023      	beq.n	8003648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
 8003608:	e01e      	b.n	8003648 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0210 	bic.w	r2, r2, #16
 8003626:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8306 	beq.w	8003c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8088 	beq.w	8003770 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2204      	movs	r2, #4
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7a      	ldr	r2, [pc, #488]	; (8003858 <HAL_DMA_IRQHandler+0xa08>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a79      	ldr	r2, [pc, #484]	; (800385c <HAL_DMA_IRQHandler+0xa0c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a77      	ldr	r2, [pc, #476]	; (8003860 <HAL_DMA_IRQHandler+0xa10>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a76      	ldr	r2, [pc, #472]	; (8003864 <HAL_DMA_IRQHandler+0xa14>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a74      	ldr	r2, [pc, #464]	; (8003868 <HAL_DMA_IRQHandler+0xa18>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a73      	ldr	r2, [pc, #460]	; (800386c <HAL_DMA_IRQHandler+0xa1c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a71      	ldr	r2, [pc, #452]	; (8003870 <HAL_DMA_IRQHandler+0xa20>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a70      	ldr	r2, [pc, #448]	; (8003874 <HAL_DMA_IRQHandler+0xa24>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <HAL_DMA_IRQHandler+0xa28>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6d      	ldr	r2, [pc, #436]	; (800387c <HAL_DMA_IRQHandler+0xa2c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6b      	ldr	r2, [pc, #428]	; (8003880 <HAL_DMA_IRQHandler+0xa30>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6a      	ldr	r2, [pc, #424]	; (8003884 <HAL_DMA_IRQHandler+0xa34>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a68      	ldr	r2, [pc, #416]	; (8003888 <HAL_DMA_IRQHandler+0xa38>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a67      	ldr	r2, [pc, #412]	; (800388c <HAL_DMA_IRQHandler+0xa3c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a65      	ldr	r2, [pc, #404]	; (8003890 <HAL_DMA_IRQHandler+0xa40>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_IRQHandler+0x8b8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a64      	ldr	r2, [pc, #400]	; (8003894 <HAL_DMA_IRQHandler+0xa44>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <HAL_DMA_IRQHandler+0x8ca>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e007      	b.n	800372a <HAL_DMA_IRQHandler+0x8da>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	429a      	cmp	r2, r3
 8003734:	d307      	bcc.n	8003746 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f2      	bne.n	800372a <HAL_DMA_IRQHandler+0x8da>
 8003744:	e000      	b.n	8003748 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003746:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2203      	movs	r2, #3
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800375e:	e003      	b.n	8003768 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8272 	beq.w	8003c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	e26c      	b.n	8003c5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a43      	ldr	r2, [pc, #268]	; (8003898 <HAL_DMA_IRQHandler+0xa48>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a42      	ldr	r2, [pc, #264]	; (800389c <HAL_DMA_IRQHandler+0xa4c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a40      	ldr	r2, [pc, #256]	; (80038a0 <HAL_DMA_IRQHandler+0xa50>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3f      	ldr	r2, [pc, #252]	; (80038a4 <HAL_DMA_IRQHandler+0xa54>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3d      	ldr	r2, [pc, #244]	; (80038a8 <HAL_DMA_IRQHandler+0xa58>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3c      	ldr	r2, [pc, #240]	; (80038ac <HAL_DMA_IRQHandler+0xa5c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3a      	ldr	r2, [pc, #232]	; (80038b0 <HAL_DMA_IRQHandler+0xa60>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x984>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a39      	ldr	r2, [pc, #228]	; (80038b4 <HAL_DMA_IRQHandler+0xa64>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x988>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_DMA_IRQHandler+0x98a>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 823f 	beq.w	8003c5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80cd 	beq.w	8003998 <HAL_DMA_IRQHandler+0xb48>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80c7 	beq.w	8003998 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2204      	movs	r2, #4
 8003814:	409a      	lsls	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d049      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8210 	beq.w	8003c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003840:	e20a      	b.n	8003c58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8206 	beq.w	8003c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003854:	e200      	b.n	8003c58 <HAL_DMA_IRQHandler+0xe08>
 8003856:	bf00      	nop
 8003858:	40020010 	.word	0x40020010
 800385c:	40020028 	.word	0x40020028
 8003860:	40020040 	.word	0x40020040
 8003864:	40020058 	.word	0x40020058
 8003868:	40020070 	.word	0x40020070
 800386c:	40020088 	.word	0x40020088
 8003870:	400200a0 	.word	0x400200a0
 8003874:	400200b8 	.word	0x400200b8
 8003878:	40020410 	.word	0x40020410
 800387c:	40020428 	.word	0x40020428
 8003880:	40020440 	.word	0x40020440
 8003884:	40020458 	.word	0x40020458
 8003888:	40020470 	.word	0x40020470
 800388c:	40020488 	.word	0x40020488
 8003890:	400204a0 	.word	0x400204a0
 8003894:	400204b8 	.word	0x400204b8
 8003898:	58025408 	.word	0x58025408
 800389c:	5802541c 	.word	0x5802541c
 80038a0:	58025430 	.word	0x58025430
 80038a4:	58025444 	.word	0x58025444
 80038a8:	58025458 	.word	0x58025458
 80038ac:	5802546c 	.word	0x5802546c
 80038b0:	58025480 	.word	0x58025480
 80038b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d160      	bne.n	8003984 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7f      	ldr	r2, [pc, #508]	; (8003ac4 <HAL_DMA_IRQHandler+0xc74>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04a      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7d      	ldr	r2, [pc, #500]	; (8003ac8 <HAL_DMA_IRQHandler+0xc78>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7c      	ldr	r2, [pc, #496]	; (8003acc <HAL_DMA_IRQHandler+0xc7c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a7a      	ldr	r2, [pc, #488]	; (8003ad0 <HAL_DMA_IRQHandler+0xc80>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03b      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a79      	ldr	r2, [pc, #484]	; (8003ad4 <HAL_DMA_IRQHandler+0xc84>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a77      	ldr	r2, [pc, #476]	; (8003ad8 <HAL_DMA_IRQHandler+0xc88>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a76      	ldr	r2, [pc, #472]	; (8003adc <HAL_DMA_IRQHandler+0xc8c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a74      	ldr	r2, [pc, #464]	; (8003ae0 <HAL_DMA_IRQHandler+0xc90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d027      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a73      	ldr	r2, [pc, #460]	; (8003ae4 <HAL_DMA_IRQHandler+0xc94>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a71      	ldr	r2, [pc, #452]	; (8003ae8 <HAL_DMA_IRQHandler+0xc98>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a70      	ldr	r2, [pc, #448]	; (8003aec <HAL_DMA_IRQHandler+0xc9c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6e      	ldr	r2, [pc, #440]	; (8003af0 <HAL_DMA_IRQHandler+0xca0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6d      	ldr	r2, [pc, #436]	; (8003af4 <HAL_DMA_IRQHandler+0xca4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6b      	ldr	r2, [pc, #428]	; (8003af8 <HAL_DMA_IRQHandler+0xca8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6a      	ldr	r2, [pc, #424]	; (8003afc <HAL_DMA_IRQHandler+0xcac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_IRQHandler+0xb12>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a68      	ldr	r2, [pc, #416]	; (8003b00 <HAL_DMA_IRQHandler+0xcb0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <HAL_DMA_IRQHandler+0xb24>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0208 	bic.w	r2, r2, #8
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e007      	b.n	8003984 <HAL_DMA_IRQHandler+0xb34>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0204 	bic.w	r2, r2, #4
 8003982:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8165 	beq.w	8003c58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003996:	e15f      	b.n	8003c58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2202      	movs	r2, #2
 80039a2:	409a      	lsls	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80c5 	beq.w	8003b38 <HAL_DMA_IRQHandler+0xce8>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80bf 	beq.w	8003b38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2202      	movs	r2, #2
 80039c4:	409a      	lsls	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d018      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 813a 	beq.w	8003c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e134      	b.n	8003c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8130 	beq.w	8003c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a04:	e12a      	b.n	8003c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8089 	bne.w	8003b24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <HAL_DMA_IRQHandler+0xc74>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <HAL_DMA_IRQHandler+0xc78>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d045      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_DMA_IRQHandler+0xc7c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d040      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <HAL_DMA_IRQHandler+0xc80>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d03b      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <HAL_DMA_IRQHandler+0xc84>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d036      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <HAL_DMA_IRQHandler+0xc88>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d031      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_DMA_IRQHandler+0xc8c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d02c      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_DMA_IRQHandler+0xc90>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d027      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_DMA_IRQHandler+0xc94>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_DMA_IRQHandler+0xc98>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_DMA_IRQHandler+0xc9c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_DMA_IRQHandler+0xca0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_DMA_IRQHandler+0xca4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <HAL_DMA_IRQHandler+0xca8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_DMA_IRQHandler+0xcac>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xc62>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_DMA_IRQHandler+0xcb0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d128      	bne.n	8003b04 <HAL_DMA_IRQHandler+0xcb4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0214 	bic.w	r2, r2, #20
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e027      	b.n	8003b14 <HAL_DMA_IRQHandler+0xcc4>
 8003ac4:	40020010 	.word	0x40020010
 8003ac8:	40020028 	.word	0x40020028
 8003acc:	40020040 	.word	0x40020040
 8003ad0:	40020058 	.word	0x40020058
 8003ad4:	40020070 	.word	0x40020070
 8003ad8:	40020088 	.word	0x40020088
 8003adc:	400200a0 	.word	0x400200a0
 8003ae0:	400200b8 	.word	0x400200b8
 8003ae4:	40020410 	.word	0x40020410
 8003ae8:	40020428 	.word	0x40020428
 8003aec:	40020440 	.word	0x40020440
 8003af0:	40020458 	.word	0x40020458
 8003af4:	40020470 	.word	0x40020470
 8003af8:	40020488 	.word	0x40020488
 8003afc:	400204a0 	.word	0x400204a0
 8003b00:	400204b8 	.word	0x400204b8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 020a 	bic.w	r2, r2, #10
 8003b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8097 	beq.w	8003c5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b36:	e091      	b.n	8003c5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2208      	movs	r2, #8
 8003b42:	409a      	lsls	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8088 	beq.w	8003c5e <HAL_DMA_IRQHandler+0xe0e>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8082 	beq.w	8003c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a41      	ldr	r2, [pc, #260]	; (8003c64 <HAL_DMA_IRQHandler+0xe14>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04a      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3f      	ldr	r2, [pc, #252]	; (8003c68 <HAL_DMA_IRQHandler+0xe18>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d045      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <HAL_DMA_IRQHandler+0xe1c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d040      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <HAL_DMA_IRQHandler+0xe20>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d03b      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <HAL_DMA_IRQHandler+0xe24>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d036      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a39      	ldr	r2, [pc, #228]	; (8003c78 <HAL_DMA_IRQHandler+0xe28>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d031      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_DMA_IRQHandler+0xe2c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d02c      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a36      	ldr	r2, [pc, #216]	; (8003c80 <HAL_DMA_IRQHandler+0xe30>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d027      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <HAL_DMA_IRQHandler+0xe34>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <HAL_DMA_IRQHandler+0xe38>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01d      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <HAL_DMA_IRQHandler+0xe3c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_DMA_IRQHandler+0xe40>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2f      	ldr	r2, [pc, #188]	; (8003c94 <HAL_DMA_IRQHandler+0xe44>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00e      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <HAL_DMA_IRQHandler+0xe48>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2c      	ldr	r2, [pc, #176]	; (8003c9c <HAL_DMA_IRQHandler+0xe4c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xdaa>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <HAL_DMA_IRQHandler+0xe50>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d108      	bne.n	8003c0c <HAL_DMA_IRQHandler+0xdbc>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 021c 	bic.w	r2, r2, #28
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e007      	b.n	8003c1c <HAL_DMA_IRQHandler+0xdcc>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 020e 	bic.w	r2, r2, #14
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
 8003c52:	e004      	b.n	8003c5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c54:	bf00      	nop
 8003c56:	e002      	b.n	8003c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8

08003ca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7f      	ldr	r2, [pc, #508]	; (8003ec0 <DMA_SetConfig+0x21c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d072      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7d      	ldr	r2, [pc, #500]	; (8003ec4 <DMA_SetConfig+0x220>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d06d      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7c      	ldr	r2, [pc, #496]	; (8003ec8 <DMA_SetConfig+0x224>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d068      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a7a      	ldr	r2, [pc, #488]	; (8003ecc <DMA_SetConfig+0x228>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d063      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a79      	ldr	r2, [pc, #484]	; (8003ed0 <DMA_SetConfig+0x22c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d05e      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a77      	ldr	r2, [pc, #476]	; (8003ed4 <DMA_SetConfig+0x230>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d059      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a76      	ldr	r2, [pc, #472]	; (8003ed8 <DMA_SetConfig+0x234>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d054      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a74      	ldr	r2, [pc, #464]	; (8003edc <DMA_SetConfig+0x238>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d04f      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a73      	ldr	r2, [pc, #460]	; (8003ee0 <DMA_SetConfig+0x23c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a71      	ldr	r2, [pc, #452]	; (8003ee4 <DMA_SetConfig+0x240>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a70      	ldr	r2, [pc, #448]	; (8003ee8 <DMA_SetConfig+0x244>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6e      	ldr	r2, [pc, #440]	; (8003eec <DMA_SetConfig+0x248>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6d      	ldr	r2, [pc, #436]	; (8003ef0 <DMA_SetConfig+0x24c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6b      	ldr	r2, [pc, #428]	; (8003ef4 <DMA_SetConfig+0x250>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6a      	ldr	r2, [pc, #424]	; (8003ef8 <DMA_SetConfig+0x254>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a68      	ldr	r2, [pc, #416]	; (8003efc <DMA_SetConfig+0x258>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <DMA_SetConfig+0x25c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <DMA_SetConfig+0x260>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a64      	ldr	r2, [pc, #400]	; (8003f08 <DMA_SetConfig+0x264>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a62      	ldr	r2, [pc, #392]	; (8003f0c <DMA_SetConfig+0x268>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a61      	ldr	r2, [pc, #388]	; (8003f10 <DMA_SetConfig+0x26c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5f      	ldr	r2, [pc, #380]	; (8003f14 <DMA_SetConfig+0x270>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5e      	ldr	r2, [pc, #376]	; (8003f18 <DMA_SetConfig+0x274>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <DMA_SetConfig+0x10a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a5c      	ldr	r2, [pc, #368]	; (8003f1c <DMA_SetConfig+0x278>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <DMA_SetConfig+0x10e>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <DMA_SetConfig+0x110>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dd2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <DMA_SetConfig+0x21c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d04a      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a38      	ldr	r2, [pc, #224]	; (8003ec4 <DMA_SetConfig+0x220>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d045      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a36      	ldr	r2, [pc, #216]	; (8003ec8 <DMA_SetConfig+0x224>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d040      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <DMA_SetConfig+0x228>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d03b      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <DMA_SetConfig+0x22c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d036      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <DMA_SetConfig+0x230>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d031      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <DMA_SetConfig+0x234>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d02c      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <DMA_SetConfig+0x238>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d027      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <DMA_SetConfig+0x23c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d022      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <DMA_SetConfig+0x240>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d01d      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <DMA_SetConfig+0x244>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d018      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <DMA_SetConfig+0x248>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a27      	ldr	r2, [pc, #156]	; (8003ef0 <DMA_SetConfig+0x24c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <DMA_SetConfig+0x250>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <DMA_SetConfig+0x254>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <DMA_SetConfig+0x1d0>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a23      	ldr	r2, [pc, #140]	; (8003efc <DMA_SetConfig+0x258>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <DMA_SetConfig+0x1d4>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <DMA_SetConfig+0x1d6>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d059      	beq.n	8003f32 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	223f      	movs	r2, #63	; 0x3f
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d138      	bne.n	8003f20 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ebe:	e086      	b.n	8003fce <DMA_SetConfig+0x32a>
 8003ec0:	40020010 	.word	0x40020010
 8003ec4:	40020028 	.word	0x40020028
 8003ec8:	40020040 	.word	0x40020040
 8003ecc:	40020058 	.word	0x40020058
 8003ed0:	40020070 	.word	0x40020070
 8003ed4:	40020088 	.word	0x40020088
 8003ed8:	400200a0 	.word	0x400200a0
 8003edc:	400200b8 	.word	0x400200b8
 8003ee0:	40020410 	.word	0x40020410
 8003ee4:	40020428 	.word	0x40020428
 8003ee8:	40020440 	.word	0x40020440
 8003eec:	40020458 	.word	0x40020458
 8003ef0:	40020470 	.word	0x40020470
 8003ef4:	40020488 	.word	0x40020488
 8003ef8:	400204a0 	.word	0x400204a0
 8003efc:	400204b8 	.word	0x400204b8
 8003f00:	58025408 	.word	0x58025408
 8003f04:	5802541c 	.word	0x5802541c
 8003f08:	58025430 	.word	0x58025430
 8003f0c:	58025444 	.word	0x58025444
 8003f10:	58025458 	.word	0x58025458
 8003f14:	5802546c 	.word	0x5802546c
 8003f18:	58025480 	.word	0x58025480
 8003f1c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
}
 8003f30:	e04d      	b.n	8003fce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <DMA_SetConfig+0x338>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <DMA_SetConfig+0x33c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01d      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <DMA_SetConfig+0x340>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <DMA_SetConfig+0x344>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a23      	ldr	r2, [pc, #140]	; (8003fec <DMA_SetConfig+0x348>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <DMA_SetConfig+0x34c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <DMA_SetConfig+0x350>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <DMA_SetConfig+0x2de>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <DMA_SetConfig+0x354>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <DMA_SetConfig+0x2e2>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <DMA_SetConfig+0x2e4>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d108      	bne.n	8003fbe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	60da      	str	r2, [r3, #12]
}
 8003fbc:	e007      	b.n	8003fce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	58025408 	.word	0x58025408
 8003fe0:	5802541c 	.word	0x5802541c
 8003fe4:	58025430 	.word	0x58025430
 8003fe8:	58025444 	.word	0x58025444
 8003fec:	58025458 	.word	0x58025458
 8003ff0:	5802546c 	.word	0x5802546c
 8003ff4:	58025480 	.word	0x58025480
 8003ff8:	58025494 	.word	0x58025494

08003ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <DMA_CalcBaseAndBitshift+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d04a      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a41      	ldr	r2, [pc, #260]	; (8004118 <DMA_CalcBaseAndBitshift+0x11c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d045      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3f      	ldr	r2, [pc, #252]	; (800411c <DMA_CalcBaseAndBitshift+0x120>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d040      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3e      	ldr	r2, [pc, #248]	; (8004120 <DMA_CalcBaseAndBitshift+0x124>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d03b      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a3c      	ldr	r2, [pc, #240]	; (8004124 <DMA_CalcBaseAndBitshift+0x128>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d036      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <DMA_CalcBaseAndBitshift+0x12c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d031      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a39      	ldr	r2, [pc, #228]	; (800412c <DMA_CalcBaseAndBitshift+0x130>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02c      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a38      	ldr	r2, [pc, #224]	; (8004130 <DMA_CalcBaseAndBitshift+0x134>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d027      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a36      	ldr	r2, [pc, #216]	; (8004134 <DMA_CalcBaseAndBitshift+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a35      	ldr	r2, [pc, #212]	; (8004138 <DMA_CalcBaseAndBitshift+0x13c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01d      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a33      	ldr	r2, [pc, #204]	; (800413c <DMA_CalcBaseAndBitshift+0x140>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a32      	ldr	r2, [pc, #200]	; (8004140 <DMA_CalcBaseAndBitshift+0x144>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a30      	ldr	r2, [pc, #192]	; (8004144 <DMA_CalcBaseAndBitshift+0x148>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <DMA_CalcBaseAndBitshift+0x14c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2d      	ldr	r2, [pc, #180]	; (800414c <DMA_CalcBaseAndBitshift+0x150>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <DMA_CalcBaseAndBitshift+0x154>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <DMA_CalcBaseAndBitshift+0xac>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <DMA_CalcBaseAndBitshift+0xae>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d024      	beq.n	80040f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3b10      	subs	r3, #16
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <DMA_CalcBaseAndBitshift+0x158>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	4a24      	ldr	r2, [pc, #144]	; (8004158 <DMA_CalcBaseAndBitshift+0x15c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	461a      	mov	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d908      	bls.n	80040e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <DMA_CalcBaseAndBitshift+0x160>)
 80040de:	4013      	ands	r3, r2
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58
 80040e6:	e00d      	b.n	8004104 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <DMA_CalcBaseAndBitshift+0x160>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6593      	str	r3, [r2, #88]	; 0x58
 80040f6:	e005      	b.n	8004104 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
 8004154:	aaaaaaab 	.word	0xaaaaaaab
 8004158:	0800f974 	.word	0x0800f974
 800415c:	fffffc00 	.word	0xfffffc00

08004160 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d120      	bne.n	80041b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	2b03      	cmp	r3, #3
 800417a:	d858      	bhi.n	800422e <DMA_CheckFifoParam+0xce>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <DMA_CheckFifoParam+0x24>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a7 	.word	0x080041a7
 800418c:	08004195 	.word	0x08004195
 8004190:	0800422f 	.word	0x0800422f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d048      	beq.n	8004232 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041a4:	e045      	b.n	8004232 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ae:	d142      	bne.n	8004236 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041b4:	e03f      	b.n	8004236 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	d123      	bne.n	8004208 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d838      	bhi.n	800423a <DMA_CheckFifoParam+0xda>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <DMA_CheckFifoParam+0x70>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041e7 	.word	0x080041e7
 80041d8:	080041e1 	.word	0x080041e1
 80041dc:	080041f9 	.word	0x080041f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
        break;
 80041e4:	e030      	b.n	8004248 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d025      	beq.n	800423e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041f6:	e022      	b.n	800423e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004200:	d11f      	bne.n	8004242 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004206:	e01c      	b.n	8004242 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	2b02      	cmp	r3, #2
 800420e:	d902      	bls.n	8004216 <DMA_CheckFifoParam+0xb6>
 8004210:	2b03      	cmp	r3, #3
 8004212:	d003      	beq.n	800421c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004214:	e018      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
        break;
 800421a:	e015      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
    break;
 800422c:	e00b      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
        break;
 800422e:	bf00      	nop
 8004230:	e00a      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 8004232:	bf00      	nop
 8004234:	e008      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 8004236:	bf00      	nop
 8004238:	e006      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 800423a:	bf00      	nop
 800423c:	e004      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
    break;
 8004246:	bf00      	nop
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a38      	ldr	r2, [pc, #224]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a36      	ldr	r2, [pc, #216]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01d      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a35      	ldr	r2, [pc, #212]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a33      	ldr	r2, [pc, #204]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a32      	ldr	r2, [pc, #200]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a30      	ldr	r2, [pc, #192]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2d      	ldr	r2, [pc, #180]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01a      	beq.n	80042f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3b08      	subs	r3, #8
 80042c8:	4a28      	ldr	r2, [pc, #160]	; (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a24      	ldr	r2, [pc, #144]	; (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2201      	movs	r2, #1
 80042ee:	409a      	lsls	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042f4:	e024      	b.n	8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3b10      	subs	r3, #16
 80042fe:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d806      	bhi.n	800431e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d902      	bls.n	800431e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3308      	adds	r3, #8
 800431c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004330:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	409a      	lsls	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	58025408 	.word	0x58025408
 8004350:	5802541c 	.word	0x5802541c
 8004354:	58025430 	.word	0x58025430
 8004358:	58025444 	.word	0x58025444
 800435c:	58025458 	.word	0x58025458
 8004360:	5802546c 	.word	0x5802546c
 8004364:	58025480 	.word	0x58025480
 8004368:	58025494 	.word	0x58025494
 800436c:	cccccccd 	.word	0xcccccccd
 8004370:	16009600 	.word	0x16009600
 8004374:	58025880 	.word	0x58025880
 8004378:	aaaaaaab 	.word	0xaaaaaaab
 800437c:	400204b8 	.word	0x400204b8
 8004380:	4002040f 	.word	0x4002040f
 8004384:	10008200 	.word	0x10008200
 8004388:	40020880 	.word	0x40020880

0800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04a      	beq.n	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d847      	bhi.n	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d01d      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a21      	ldr	r2, [pc, #132]	; (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004414:	671a      	str	r2, [r3, #112]	; 0x70
 8004416:	e009      	b.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800442a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b01      	subs	r3, #1
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	58025408 	.word	0x58025408
 8004448:	5802541c 	.word	0x5802541c
 800444c:	58025430 	.word	0x58025430
 8004450:	58025444 	.word	0x58025444
 8004454:	58025458 	.word	0x58025458
 8004458:	5802546c 	.word	0x5802546c
 800445c:	58025480 	.word	0x58025480
 8004460:	58025494 	.word	0x58025494
 8004464:	1600963f 	.word	0x1600963f
 8004468:	58025940 	.word	0x58025940
 800446c:	1000823f 	.word	0x1000823f
 8004470:	40020940 	.word	0x40020940

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004482:	4b89      	ldr	r3, [pc, #548]	; (80046a8 <HAL_GPIO_Init+0x234>)
 8004484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004486:	e194      	b.n	80047b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8186 	beq.w	80047ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d005      	beq.n	80044b8 <HAL_GPIO_Init+0x44>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d130      	bne.n	800451a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ee:	2201      	movs	r2, #1
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0201 	and.w	r2, r3, #1
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d017      	beq.n	8004556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	2203      	movs	r2, #3
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d123      	bne.n	80045aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	220f      	movs	r2, #15
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	08da      	lsrs	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3208      	adds	r2, #8
 80045a4:	69b9      	ldr	r1, [r7, #24]
 80045a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0203 	and.w	r2, r3, #3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80e0 	beq.w	80047ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_GPIO_Init+0x238>)
 80045ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045f2:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <HAL_GPIO_Init+0x238>)
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_GPIO_Init+0x238>)
 80045fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <HAL_GPIO_Init+0x23c>)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	3302      	adds	r3, #2
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <HAL_GPIO_Init+0x240>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d052      	beq.n	80046dc <HAL_GPIO_Init+0x268>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_GPIO_Init+0x244>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d031      	beq.n	80046a2 <HAL_GPIO_Init+0x22e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <HAL_GPIO_Init+0x248>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d02b      	beq.n	800469e <HAL_GPIO_Init+0x22a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_GPIO_Init+0x24c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d025      	beq.n	800469a <HAL_GPIO_Init+0x226>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_GPIO_Init+0x250>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01f      	beq.n	8004696 <HAL_GPIO_Init+0x222>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_GPIO_Init+0x254>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d019      	beq.n	8004692 <HAL_GPIO_Init+0x21e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_GPIO_Init+0x258>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_GPIO_Init+0x21a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_GPIO_Init+0x25c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00d      	beq.n	800468a <HAL_GPIO_Init+0x216>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_GPIO_Init+0x260>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <HAL_GPIO_Init+0x212>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_GPIO_Init+0x264>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_GPIO_Init+0x20e>
 800467e:	2309      	movs	r3, #9
 8004680:	e02d      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004682:	230a      	movs	r3, #10
 8004684:	e02b      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004686:	2308      	movs	r3, #8
 8004688:	e029      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800468a:	2307      	movs	r3, #7
 800468c:	e027      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800468e:	2306      	movs	r3, #6
 8004690:	e025      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004692:	2305      	movs	r3, #5
 8004694:	e023      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004696:	2304      	movs	r3, #4
 8004698:	e021      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800469a:	2303      	movs	r3, #3
 800469c:	e01f      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800469e:	2302      	movs	r3, #2
 80046a0:	e01d      	b.n	80046de <HAL_GPIO_Init+0x26a>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e01b      	b.n	80046de <HAL_GPIO_Init+0x26a>
 80046a6:	bf00      	nop
 80046a8:	58000080 	.word	0x58000080
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58000400 	.word	0x58000400
 80046b4:	58020000 	.word	0x58020000
 80046b8:	58020400 	.word	0x58020400
 80046bc:	58020800 	.word	0x58020800
 80046c0:	58020c00 	.word	0x58020c00
 80046c4:	58021000 	.word	0x58021000
 80046c8:	58021400 	.word	0x58021400
 80046cc:	58021800 	.word	0x58021800
 80046d0:	58021c00 	.word	0x58021c00
 80046d4:	58022000 	.word	0x58022000
 80046d8:	58022400 	.word	0x58022400
 80046dc:	2300      	movs	r3, #0
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	f002 0203 	and.w	r2, r2, #3
 80046e4:	0092      	lsls	r2, r2, #2
 80046e6:	4093      	lsls	r3, r2
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ee:	4938      	ldr	r1, [pc, #224]	; (80047d0 <HAL_GPIO_Init+0x35c>)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	3302      	adds	r3, #2
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	3301      	adds	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f ae63 	bne.w	8004488 <HAL_GPIO_Init+0x14>
  }
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	3724      	adds	r7, #36	; 0x24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	58000400 	.word	0x58000400

080047d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e001      	b.n	80047f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004814:	787b      	ldrb	r3, [r7, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004820:	e003      	b.n	800482a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004822:	887b      	ldrh	r3, [r7, #2]
 8004824:	041a      	lsls	r2, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	619a      	str	r2, [r3, #24]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <HAL_HSEM_FastTake+0x2c>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3320      	adds	r3, #32
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_HSEM_FastTake+0x30>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	58026400 	.word	0x58026400
 8004868:	80000300 	.word	0x80000300

0800486c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004876:	4906      	ldr	r1, [pc, #24]	; (8004890 <HAL_HSEM_Release+0x24>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	58026400 	.word	0x58026400

08004894 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s, uint32_t Mode)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_I2S_Init+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e10e      	b.n	8004ac6 <HAL_I2S_Init+0x232>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_I2S_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s, Mode);
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fd40 	bl	8001344 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_I2S_Init+0x56>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d008      	beq.n	800490c <HAL_I2S_Init+0x78>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d004      	beq.n	800490c <HAL_I2S_Init+0x78>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b0a      	cmp	r3, #10
 8004908:	f040 8087 	bne.w	8004a1a <HAL_I2S_Init+0x186>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d05a      	beq.n	80049ca <HAL_I2S_Init+0x136>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_I2S_Init+0x8e>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800491c:	2302      	movs	r3, #2
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e001      	b.n	8004926 <HAL_I2S_Init+0x92>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8004922:	2301      	movs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d003      	beq.n	8004936 <HAL_I2S_Init+0xa2>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004932:	2bb0      	cmp	r3, #176	; 0xb0
 8004934:	d102      	bne.n	800493c <HAL_I2S_Init+0xa8>
      {
        ispcm = 1UL;
 8004936:	2301      	movs	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e001      	b.n	8004940 <HAL_I2S_Init+0xac>
      }
      else
      {
        ispcm = 0UL;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004940:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	f002 fdde 	bl	8007508 <HAL_RCCEx_GetPeriphCLKFreq>
 800494c:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004956:	d113      	bne.n	8004980 <HAL_I2S_Init+0xec>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	fbb2 f2f3 	udiv	r2, r2, r3
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	3305      	adds	r3, #5
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e014      	b.n	80049aa <HAL_I2S_Init+0x116>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004980:	2220      	movs	r2, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a6:	3305      	adds	r3, #5
 80049a8:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4a48      	ldr	r2, [pc, #288]	; (8004ad0 <HAL_I2S_Init+0x23c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e003      	b.n	80049d2 <HAL_I2S_Init+0x13e>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80049ca:	2302      	movs	r3, #2
 80049cc:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <HAL_I2S_Init+0x14a>
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d002      	beq.n	80049e4 <HAL_I2S_Init+0x150>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2bff      	cmp	r3, #255	; 0xff
 80049e2:	d907      	bls.n	80049f4 <HAL_I2S_Init+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f043 0210 	orr.w	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e068      	b.n	8004ac6 <HAL_I2S_Init+0x232>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_I2S_Init+0x16a>
    {
      i2sodd = 1UL;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a04:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_I2S_Init+0x240>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	0411      	lsls	r1, r2, #16
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	0612      	lsls	r2, r2, #24
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	430b      	orrs	r3, r1
 8004a18:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a20:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_I2S_Init+0x244>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6851      	ldr	r1, [r2, #4]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	4311      	orrs	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6992      	ldr	r2, [r2, #24]
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a12      	ldr	r2, [r2, #32]
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a44:	4311      	orrs	r1, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6912      	ldr	r2, [r2, #16]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f640 72f8 	movw	r2, #4088	; 0xff8
 8004a60:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a70:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d007      	beq.n	8004aa0 <HAL_I2S_Init+0x20c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d003      	beq.n	8004aa0 <HAL_I2S_Init+0x20c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b0a      	cmp	r3, #10
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_I2S_Init+0x222>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	cccccccd 	.word	0xcccccccd
 8004ad4:	fe00ffff 	.word	0xfe00ffff
 8004ad8:	fdff9040 	.word	0xfdff9040

08004adc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_I2S_Transmit_DMA+0x1e>
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e086      	b.n	8004c0c <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e07e      	b.n	8004c0c <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2S_Transmit_DMA+0x42>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e076      	b.n	8004c0c <HAL_I2S_Transmit_DMA+0x130>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	4a2d      	ldr	r2, [pc, #180]	; (8004c14 <HAL_I2S_Transmit_DMA+0x138>)
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	4a2c      	ldr	r2, [pc, #176]	; (8004c18 <HAL_I2S_Transmit_DMA+0x13c>)
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	; (8004c1c <HAL_I2S_Transmit_DMA+0x140>)
 8004b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3320      	adds	r3, #32
 8004b80:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004b88:	f7fd fbda 	bl	8002340 <HAL_DMA_Start_IT>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b96:	f043 0208 	orr.w	r2, r3, #8
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	e02a      	b.n	8004c0c <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d107      	bne.n	8004bd4 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c00:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	08004e59 	.word	0x08004e59
 8004c18:	08004e17 	.word	0x08004e17
 8004c1c:	08004ed3 	.word	0x08004ed3

08004c20 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_I2S_Receive_DMA+0x1e>
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e086      	b.n	8004d50 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e07e      	b.n	8004d50 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_I2S_Receive_DMA+0x42>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e076      	b.n	8004d50 <HAL_I2S_Receive_DMA+0x130>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <HAL_I2S_Receive_DMA+0x138>)
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <HAL_I2S_Receive_DMA+0x13c>)
 8004caa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb0:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HAL_I2S_Receive_DMA+0x140>)
 8004cb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3330      	adds	r3, #48	; 0x30
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004cca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004ccc:	f7fd fb38 	bl	8002340 <HAL_DMA_Start_IT>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d011      	beq.n	8004cfa <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	f043 0208 	orr.w	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	e02a      	b.n	8004d50 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d16:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d44:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	08004eb7 	.word	0x08004eb7
 8004d5c:	08004e75 	.word	0x08004e75
 8004d60:	08004ed3 	.word	0x08004ed3

08004d64 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d7e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d8e:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00f      	beq.n	8004db8 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fd fd39 	bl	8002814 <HAL_DMA_Abort>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dac:	f043 0208 	orr.w	r2, r3, #8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00f      	beq.n	8004de0 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd fd25 	bl	8002814 <HAL_DMA_Abort>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd4:	f043 0208 	orr.w	r2, r3, #8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10e      	bne.n	8004e4a <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e3a:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7fc fa3a 	bl	80012c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7fc fa3c 	bl	80012e4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10e      	bne.n	8004ea8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e98:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7fc f9eb 	bl	8001284 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7fc f9ed 	bl	80012a4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004eee:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	f043 0208 	orr.w	r2, r3, #8
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff ff76 	bl	8004e02 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f28:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	2b06      	cmp	r3, #6
 8004f32:	d00a      	beq.n	8004f4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f34:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e040      	b.n	8004fc8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e03e      	b.n	8004fc8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f4a:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f52:	491f      	ldr	r1, [pc, #124]	; (8004fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f5a:	f7fc fd49 	bl	80019f0 <HAL_GetTick>
 8004f5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f60:	e009      	b.n	8004f76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f62:	f7fc fd45 	bl	80019f0 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f70:	d901      	bls.n	8004f76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e028      	b.n	8004fc8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f76:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f82:	d1ee      	bne.n	8004f62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b1e      	cmp	r3, #30
 8004f88:	d008      	beq.n	8004f9c <HAL_PWREx_ConfigSupply+0x7c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f8e:	d005      	beq.n	8004f9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b1d      	cmp	r3, #29
 8004f94:	d002      	beq.n	8004f9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b2d      	cmp	r3, #45	; 0x2d
 8004f9a:	d114      	bne.n	8004fc6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004f9c:	f7fc fd28 	bl	80019f0 <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fa2:	e009      	b.n	8004fb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fa4:	f7fc fd24 	bl	80019f0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fb2:	d901      	bls.n	8004fb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e007      	b.n	8004fc8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc4:	d1ee      	bne.n	8004fa4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	58024800 	.word	0x58024800

08004fd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08c      	sub	sp, #48	; 0x30
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f000 bc48 	b.w	8005878 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8088 	beq.w	8005106 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff6:	4b99      	ldr	r3, [pc, #612]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005000:	4b96      	ldr	r3, [pc, #600]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2b10      	cmp	r3, #16
 800500a:	d007      	beq.n	800501c <HAL_RCC_OscConfig+0x48>
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b18      	cmp	r3, #24
 8005010:	d111      	bne.n	8005036 <HAL_RCC_OscConfig+0x62>
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d10c      	bne.n	8005036 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501c:	4b8f      	ldr	r3, [pc, #572]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d06d      	beq.n	8005104 <HAL_RCC_OscConfig+0x130>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d169      	bne.n	8005104 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f000 bc21 	b.w	8005878 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503e:	d106      	bne.n	800504e <HAL_RCC_OscConfig+0x7a>
 8005040:	4b86      	ldr	r3, [pc, #536]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a85      	ldr	r2, [pc, #532]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	e02e      	b.n	80050ac <HAL_RCC_OscConfig+0xd8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x9c>
 8005056:	4b81      	ldr	r3, [pc, #516]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a80      	ldr	r2, [pc, #512]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800505c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b7e      	ldr	r3, [pc, #504]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7d      	ldr	r2, [pc, #500]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e01d      	b.n	80050ac <HAL_RCC_OscConfig+0xd8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0xc0>
 800507a:	4b78      	ldr	r3, [pc, #480]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a77      	ldr	r2, [pc, #476]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b75      	ldr	r3, [pc, #468]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a74      	ldr	r2, [pc, #464]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0xd8>
 8005094:	4b71      	ldr	r3, [pc, #452]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a70      	ldr	r2, [pc, #448]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	4b6e      	ldr	r3, [pc, #440]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a6d      	ldr	r2, [pc, #436]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80050a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fc fc9c 	bl	80019f0 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fc fc98 	bl	80019f0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e3d4      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ce:	4b63      	ldr	r3, [pc, #396]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0xe8>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fc fc88 	bl	80019f0 <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fc fc84 	bl	80019f0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e3c0      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x110>
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80ca 	beq.w	80052a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005114:	4b51      	ldr	r3, [pc, #324]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800511c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800511e:	4b4f      	ldr	r3, [pc, #316]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_RCC_OscConfig+0x166>
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2b18      	cmp	r3, #24
 800512e:	d156      	bne.n	80051de <HAL_RCC_OscConfig+0x20a>
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d151      	bne.n	80051de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513a:	4b48      	ldr	r3, [pc, #288]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x17e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e392      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005152:	4b42      	ldr	r3, [pc, #264]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0219 	bic.w	r2, r3, #25
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	493f      	ldr	r1, [pc, #252]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc fc44 	bl	80019f0 <HAL_GetTick>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516c:	f7fc fc40 	bl	80019f0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e37c      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	f7fc fc61 	bl	8001a50 <HAL_GetREVID>
 800518e:	4603      	mov	r3, r0
 8005190:	f241 0203 	movw	r2, #4099	; 0x1003
 8005194:	4293      	cmp	r3, r2
 8005196:	d817      	bhi.n	80051c8 <HAL_RCC_OscConfig+0x1f4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d108      	bne.n	80051b2 <HAL_RCC_OscConfig+0x1de>
 80051a0:	4b2e      	ldr	r3, [pc, #184]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051a8:	4a2c      	ldr	r2, [pc, #176]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b0:	e07a      	b.n	80052a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b2:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	031b      	lsls	r3, r3, #12
 80051c0:	4926      	ldr	r1, [pc, #152]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c6:	e06f      	b.n	80052a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b24      	ldr	r3, [pc, #144]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	4921      	ldr	r1, [pc, #132]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051dc:	e064      	b.n	80052a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d047      	beq.n	8005276 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051e6:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 0219 	bic.w	r2, r3, #25
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	491a      	ldr	r1, [pc, #104]	; (800525c <HAL_RCC_OscConfig+0x288>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fc fbfa 	bl	80019f0 <HAL_GetTick>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005200:	f7fc fbf6 	bl	80019f0 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e332      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521e:	f7fc fc17 	bl	8001a50 <HAL_GetREVID>
 8005222:	4603      	mov	r3, r0
 8005224:	f241 0203 	movw	r2, #4099	; 0x1003
 8005228:	4293      	cmp	r3, r2
 800522a:	d819      	bhi.n	8005260 <HAL_RCC_OscConfig+0x28c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d108      	bne.n	8005246 <HAL_RCC_OscConfig+0x272>
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800523c:	4a07      	ldr	r2, [pc, #28]	; (800525c <HAL_RCC_OscConfig+0x288>)
 800523e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005242:	6053      	str	r3, [r2, #4]
 8005244:	e030      	b.n	80052a8 <HAL_RCC_OscConfig+0x2d4>
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	031b      	lsls	r3, r3, #12
 8005254:	4901      	ldr	r1, [pc, #4]	; (800525c <HAL_RCC_OscConfig+0x288>)
 8005256:	4313      	orrs	r3, r2
 8005258:	604b      	str	r3, [r1, #4]
 800525a:	e025      	b.n	80052a8 <HAL_RCC_OscConfig+0x2d4>
 800525c:	58024400 	.word	0x58024400
 8005260:	4b9a      	ldr	r3, [pc, #616]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	4997      	ldr	r1, [pc, #604]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
 8005274:	e018      	b.n	80052a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005276:	4b95      	ldr	r3, [pc, #596]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a94      	ldr	r2, [pc, #592]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005282:	f7fc fbb5 	bl	80019f0 <HAL_GetTick>
 8005286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528a:	f7fc fbb1 	bl	80019f0 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e2ed      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800529c:	4b8b      	ldr	r3, [pc, #556]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80a9 	beq.w	8005408 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b6:	4b85      	ldr	r3, [pc, #532]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052c0:	4b82      	ldr	r3, [pc, #520]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d007      	beq.n	80052dc <HAL_RCC_OscConfig+0x308>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b18      	cmp	r3, #24
 80052d0:	d13a      	bne.n	8005348 <HAL_RCC_OscConfig+0x374>
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d135      	bne.n	8005348 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052dc:	4b7b      	ldr	r3, [pc, #492]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_OscConfig+0x320>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	2b80      	cmp	r3, #128	; 0x80
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e2c1      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052f4:	f7fc fbac 	bl	8001a50 <HAL_GetREVID>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80052fe:	4293      	cmp	r3, r2
 8005300:	d817      	bhi.n	8005332 <HAL_RCC_OscConfig+0x35e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	2b20      	cmp	r3, #32
 8005308:	d108      	bne.n	800531c <HAL_RCC_OscConfig+0x348>
 800530a:	4b70      	ldr	r3, [pc, #448]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005312:	4a6e      	ldr	r2, [pc, #440]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005318:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800531a:	e075      	b.n	8005408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800531c:	4b6b      	ldr	r3, [pc, #428]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	069b      	lsls	r3, r3, #26
 800532a:	4968      	ldr	r1, [pc, #416]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005330:	e06a      	b.n	8005408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005332:	4b66      	ldr	r3, [pc, #408]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	061b      	lsls	r3, r3, #24
 8005340:	4962      	ldr	r1, [pc, #392]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005342:	4313      	orrs	r3, r2
 8005344:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005346:	e05f      	b.n	8005408 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d042      	beq.n	80053d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005350:	4b5e      	ldr	r3, [pc, #376]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5d      	ldr	r2, [pc, #372]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fc fb48 	bl	80019f0 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005364:	f7fc fb44 	bl	80019f0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e280      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005376:	4b55      	ldr	r3, [pc, #340]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005382:	f7fc fb65 	bl	8001a50 <HAL_GetREVID>
 8005386:	4603      	mov	r3, r0
 8005388:	f241 0203 	movw	r2, #4099	; 0x1003
 800538c:	4293      	cmp	r3, r2
 800538e:	d817      	bhi.n	80053c0 <HAL_RCC_OscConfig+0x3ec>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	2b20      	cmp	r3, #32
 8005396:	d108      	bne.n	80053aa <HAL_RCC_OscConfig+0x3d6>
 8005398:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053a0:	4a4a      	ldr	r2, [pc, #296]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a6:	6053      	str	r3, [r2, #4]
 80053a8:	e02e      	b.n	8005408 <HAL_RCC_OscConfig+0x434>
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	069b      	lsls	r3, r3, #26
 80053b8:	4944      	ldr	r1, [pc, #272]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]
 80053be:	e023      	b.n	8005408 <HAL_RCC_OscConfig+0x434>
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	493f      	ldr	r1, [pc, #252]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60cb      	str	r3, [r1, #12]
 80053d4:	e018      	b.n	8005408 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fc fb05 	bl	80019f0 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053ea:	f7fc fb01 	bl	80019f0 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e23d      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053fc:	4b33      	ldr	r3, [pc, #204]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d036      	beq.n	8005482 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d019      	beq.n	8005450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800541e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fc fae2 	bl	80019f0 <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005430:	f7fc fade 	bl	80019f0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e21a      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x45c>
 800544e:	e018      	b.n	8005482 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fc fac8 	bl	80019f0 <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005464:	f7fc fac4 	bl	80019f0 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e200      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d039      	beq.n	8005502 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 800549c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054a2:	f7fc faa5 	bl	80019f0 <HAL_GetTick>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054aa:	f7fc faa1 	bl	80019f0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1dd      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCC_OscConfig+0x4f8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x4d6>
 80054c8:	e01b      	b.n	8005502 <HAL_RCC_OscConfig+0x52e>
 80054ca:	bf00      	nop
 80054cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054d0:	4b9b      	ldr	r3, [pc, #620]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a9a      	ldr	r2, [pc, #616]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80054d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054dc:	f7fc fa88 	bl	80019f0 <HAL_GetTick>
 80054e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e4:	f7fc fa84 	bl	80019f0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1c0      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054f6:	4b92      	ldr	r3, [pc, #584]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8081 	beq.w	8005612 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005510:	4b8c      	ldr	r3, [pc, #560]	; (8005744 <HAL_RCC_OscConfig+0x770>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a8b      	ldr	r2, [pc, #556]	; (8005744 <HAL_RCC_OscConfig+0x770>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800551c:	f7fc fa68 	bl	80019f0 <HAL_GetTick>
 8005520:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005524:	f7fc fa64 	bl	80019f0 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1a0      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005536:	4b83      	ldr	r3, [pc, #524]	; (8005744 <HAL_RCC_OscConfig+0x770>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d106      	bne.n	8005558 <HAL_RCC_OscConfig+0x584>
 800554a:	4b7d      	ldr	r3, [pc, #500]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	4a7c      	ldr	r2, [pc, #496]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	6713      	str	r3, [r2, #112]	; 0x70
 8005556:	e02d      	b.n	80055b4 <HAL_RCC_OscConfig+0x5e0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10c      	bne.n	800557a <HAL_RCC_OscConfig+0x5a6>
 8005560:	4b77      	ldr	r3, [pc, #476]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	4a76      	ldr	r2, [pc, #472]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	6713      	str	r3, [r2, #112]	; 0x70
 800556c:	4b74      	ldr	r3, [pc, #464]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	4a73      	ldr	r2, [pc, #460]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005572:	f023 0304 	bic.w	r3, r3, #4
 8005576:	6713      	str	r3, [r2, #112]	; 0x70
 8005578:	e01c      	b.n	80055b4 <HAL_RCC_OscConfig+0x5e0>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b05      	cmp	r3, #5
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x5c8>
 8005582:	4b6f      	ldr	r3, [pc, #444]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	4a6e      	ldr	r2, [pc, #440]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005588:	f043 0304 	orr.w	r3, r3, #4
 800558c:	6713      	str	r3, [r2, #112]	; 0x70
 800558e:	4b6c      	ldr	r3, [pc, #432]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a6b      	ldr	r2, [pc, #428]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0x5e0>
 800559c:	4b68      	ldr	r3, [pc, #416]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	4a67      	ldr	r2, [pc, #412]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
 80055a8:	4b65      	ldr	r3, [pc, #404]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a64      	ldr	r2, [pc, #400]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80055ae:	f023 0304 	bic.w	r3, r3, #4
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fc fa18 	bl	80019f0 <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c2:	e00a      	b.n	80055da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7fc fa14 	bl	80019f0 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e14e      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055da:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ee      	beq.n	80055c4 <HAL_RCC_OscConfig+0x5f0>
 80055e6:	e014      	b.n	8005612 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fc fa02 	bl	80019f0 <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fc f9fe 	bl	80019f0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e138      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005606:	4b4e      	ldr	r3, [pc, #312]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ee      	bne.n	80055f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 812d 	beq.w	8005876 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800561c:	4b48      	ldr	r3, [pc, #288]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005624:	2b18      	cmp	r3, #24
 8005626:	f000 80bd 	beq.w	80057a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b02      	cmp	r3, #2
 8005630:	f040 809e 	bne.w	8005770 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005634:	4b42      	ldr	r3, [pc, #264]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a41      	ldr	r2, [pc, #260]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800563a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800563e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fc f9d6 	bl	80019f0 <HAL_GetTick>
 8005644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fc f9d2 	bl	80019f0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e10e      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565a:	4b39      	ldr	r3, [pc, #228]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <HAL_RCC_OscConfig+0x774>)
 800566c:	4013      	ands	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005676:	0112      	lsls	r2, r2, #4
 8005678:	430a      	orrs	r2, r1
 800567a:	4931      	ldr	r1, [pc, #196]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	628b      	str	r3, [r1, #40]	; 0x28
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	3b01      	subs	r3, #1
 8005686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	3b01      	subs	r3, #1
 8005690:	025b      	lsls	r3, r3, #9
 8005692:	b29b      	uxth	r3, r3
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	3b01      	subs	r3, #1
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	3b01      	subs	r3, #1
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056b0:	4923      	ldr	r1, [pc, #140]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056c2:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c6:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_RCC_OscConfig+0x778>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056ce:	00d2      	lsls	r2, r2, #3
 80056d0:	491b      	ldr	r1, [pc, #108]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	f023 020c 	bic.w	r2, r3, #12
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	4917      	ldr	r1, [pc, #92]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	f023 0202 	bic.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	4912      	ldr	r1, [pc, #72]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	4a10      	ldr	r2, [pc, #64]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005706:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800570c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005710:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800571c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a04      	ldr	r2, [pc, #16]	; (8005740 <HAL_RCC_OscConfig+0x76c>)
 8005730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005736:	f7fc f95b 	bl	80019f0 <HAL_GetTick>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800573c:	e011      	b.n	8005762 <HAL_RCC_OscConfig+0x78e>
 800573e:	bf00      	nop
 8005740:	58024400 	.word	0x58024400
 8005744:	58024800 	.word	0x58024800
 8005748:	fffffc0c 	.word	0xfffffc0c
 800574c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005750:	f7fc f94e 	bl	80019f0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e08a      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f0      	beq.n	8005750 <HAL_RCC_OscConfig+0x77c>
 800576e:	e082      	b.n	8005876 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005770:	4b43      	ldr	r3, [pc, #268]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a42      	ldr	r2, [pc, #264]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800577a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fc f938 	bl	80019f0 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fc f934 	bl	80019f0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e070      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005796:	4b3a      	ldr	r3, [pc, #232]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x7b0>
 80057a2:	e068      	b.n	8005876 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057aa:	4b35      	ldr	r3, [pc, #212]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d031      	beq.n	800581c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f003 0203 	and.w	r2, r3, #3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d12a      	bne.n	800581c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d122      	bne.n	800581c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d11a      	bne.n	800581c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	0a5b      	lsrs	r3, r3, #9
 80057ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d111      	bne.n	800581c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d108      	bne.n	800581c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	0e1b      	lsrs	r3, r3, #24
 800580e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e02b      	b.n	8005878 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	08db      	lsrs	r3, r3, #3
 8005826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800582a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	d01f      	beq.n	8005876 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	4a11      	ldr	r2, [pc, #68]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005842:	f7fc f8d5 	bl	80019f0 <HAL_GetTick>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005848:	bf00      	nop
 800584a:	f7fc f8d1 	bl	80019f0 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	4293      	cmp	r3, r2
 8005854:	d0f9      	beq.n	800584a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_RCC_OscConfig+0x8b0>)
 800585c:	4013      	ands	r3, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005862:	00d2      	lsls	r2, r2, #3
 8005864:	4906      	ldr	r1, [pc, #24]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005866:	4313      	orrs	r3, r2
 8005868:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	4a04      	ldr	r2, [pc, #16]	; (8005880 <HAL_RCC_OscConfig+0x8ac>)
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3730      	adds	r7, #48	; 0x30
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	58024400 	.word	0x58024400
 8005884:	ffff0007 	.word	0xffff0007

08005888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e19c      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b8a      	ldr	r3, [pc, #552]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d910      	bls.n	80058cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b87      	ldr	r3, [pc, #540]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 020f 	bic.w	r2, r3, #15
 80058b2:	4985      	ldr	r1, [pc, #532]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b83      	ldr	r3, [pc, #524]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e184      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	4b7b      	ldr	r3, [pc, #492]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d908      	bls.n	80058fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058e8:	4b78      	ldr	r3, [pc, #480]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	4975      	ldr	r1, [pc, #468]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	4b70      	ldr	r3, [pc, #448]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005912:	429a      	cmp	r2, r3
 8005914:	d908      	bls.n	8005928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005916:	4b6d      	ldr	r3, [pc, #436]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	496a      	ldr	r1, [pc, #424]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005924:	4313      	orrs	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b64      	ldr	r3, [pc, #400]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005940:	429a      	cmp	r2, r3
 8005942:	d908      	bls.n	8005956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005944:	4b61      	ldr	r3, [pc, #388]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	495e      	ldr	r1, [pc, #376]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005952:	4313      	orrs	r3, r2
 8005954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	4b59      	ldr	r3, [pc, #356]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800596e:	429a      	cmp	r2, r3
 8005970:	d908      	bls.n	8005984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005972:	4b56      	ldr	r3, [pc, #344]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	4953      	ldr	r1, [pc, #332]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005980:	4313      	orrs	r3, r2
 8005982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d010      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	4b4d      	ldr	r3, [pc, #308]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	429a      	cmp	r2, r3
 800599e:	d908      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a0:	4b4a      	ldr	r3, [pc, #296]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f023 020f 	bic.w	r2, r3, #15
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4947      	ldr	r1, [pc, #284]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d055      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059be:	4b43      	ldr	r3, [pc, #268]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4940      	ldr	r1, [pc, #256]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059d8:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d121      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0f6      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d115      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0ea      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a08:	4b30      	ldr	r3, [pc, #192]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0de      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a18:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0d6      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f023 0207 	bic.w	r2, r3, #7
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4925      	ldr	r1, [pc, #148]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3a:	f7fb ffd9 	bl	80019f0 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a40:	e00a      	b.n	8005a58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a42:	f7fb ffd5 	bl	80019f0 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e0be      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d1eb      	bne.n	8005a42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d010      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d208      	bcs.n	8005a98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f023 020f 	bic.w	r2, r3, #15
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	490e      	ldr	r1, [pc, #56]	; (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d214      	bcs.n	8005ad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f023 020f 	bic.w	r2, r3, #15
 8005aae:	4906      	ldr	r1, [pc, #24]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e086      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x34e>
 8005ac8:	52002000 	.word	0x52002000
 8005acc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d010      	beq.n	8005afe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d208      	bcs.n	8005afe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005aec:	4b3c      	ldr	r3, [pc, #240]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	4939      	ldr	r1, [pc, #228]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d010      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	4b34      	ldr	r3, [pc, #208]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d208      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b1a:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	492e      	ldr	r1, [pc, #184]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699a      	ldr	r2, [r3, #24]
 8005b3c:	4b28      	ldr	r3, [pc, #160]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d208      	bcs.n	8005b5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	4922      	ldr	r1, [pc, #136]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d010      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69da      	ldr	r2, [r3, #28]
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d208      	bcs.n	8005b88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b76:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	4917      	ldr	r1, [pc, #92]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b88:	f000 f89e 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	4912      	ldr	r1, [pc, #72]	; (8005be4 <HAL_RCC_ClockConfig+0x35c>)
 8005b9a:	5ccb      	ldrb	r3, [r1, r3]
 8005b9c:	f003 031f 	and.w	r3, r3, #31
 8005ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <HAL_RCC_ClockConfig+0x358>)
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <HAL_RCC_ClockConfig+0x35c>)
 8005bb0:	5cd3      	ldrb	r3, [r2, r3]
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <HAL_RCC_ClockConfig+0x360>)
 8005bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_RCC_ClockConfig+0x364>)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <HAL_RCC_ClockConfig+0x368>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fb fec6 	bl	800195c <HAL_InitTick>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	58024400 	.word	0x58024400
 8005be4:	0800f964 	.word	0x0800f964
 8005be8:	24000004 	.word	0x24000004
 8005bec:	24000000 	.word	0x24000000
 8005bf0:	24000040 	.word	0x24000040

08005bf4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d12a      	bne.n	8005c5c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005c06:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c16:	4b29      	ldr	r3, [pc, #164]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c36:	2300      	movs	r3, #0
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005c3a:	f107 031c 	add.w	r3, r7, #28
 8005c3e:	4619      	mov	r1, r3
 8005c40:	481f      	ldr	r0, [pc, #124]	; (8005cc0 <HAL_RCC_MCOConfig+0xcc>)
 8005c42:	f7fe fc17 	bl	8004474 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005c46:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	430b      	orrs	r3, r1
 8005c54:	4919      	ldr	r1, [pc, #100]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005c5a:	e02a      	b.n	8005cb2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005c5c:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c62:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c6c:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c80:	2302      	movs	r3, #2
 8005c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c84:	2303      	movs	r3, #3
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c90:	f107 031c 	add.w	r3, r7, #28
 8005c94:	4619      	mov	r1, r3
 8005c96:	480b      	ldr	r0, [pc, #44]	; (8005cc4 <HAL_RCC_MCOConfig+0xd0>)
 8005c98:	f7fe fbec 	bl	8004474 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	01d9      	lsls	r1, r3, #7
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	430b      	orrs	r3, r1
 8005cac:	4903      	ldr	r1, [pc, #12]	; (8005cbc <HAL_RCC_MCOConfig+0xc8>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	610b      	str	r3, [r1, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	3730      	adds	r7, #48	; 0x30
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	58020000 	.word	0x58020000
 8005cc4:	58020800 	.word	0x58020800

08005cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b089      	sub	sp, #36	; 0x24
 8005ccc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cce:	4bb3      	ldr	r3, [pc, #716]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd6:	2b18      	cmp	r3, #24
 8005cd8:	f200 8155 	bhi.w	8005f86 <HAL_RCC_GetSysClockFreq+0x2be>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d49 	.word	0x08005d49
 8005ce8:	08005f87 	.word	0x08005f87
 8005cec:	08005f87 	.word	0x08005f87
 8005cf0:	08005f87 	.word	0x08005f87
 8005cf4:	08005f87 	.word	0x08005f87
 8005cf8:	08005f87 	.word	0x08005f87
 8005cfc:	08005f87 	.word	0x08005f87
 8005d00:	08005f87 	.word	0x08005f87
 8005d04:	08005d6f 	.word	0x08005d6f
 8005d08:	08005f87 	.word	0x08005f87
 8005d0c:	08005f87 	.word	0x08005f87
 8005d10:	08005f87 	.word	0x08005f87
 8005d14:	08005f87 	.word	0x08005f87
 8005d18:	08005f87 	.word	0x08005f87
 8005d1c:	08005f87 	.word	0x08005f87
 8005d20:	08005f87 	.word	0x08005f87
 8005d24:	08005d75 	.word	0x08005d75
 8005d28:	08005f87 	.word	0x08005f87
 8005d2c:	08005f87 	.word	0x08005f87
 8005d30:	08005f87 	.word	0x08005f87
 8005d34:	08005f87 	.word	0x08005f87
 8005d38:	08005f87 	.word	0x08005f87
 8005d3c:	08005f87 	.word	0x08005f87
 8005d40:	08005f87 	.word	0x08005f87
 8005d44:	08005d7b 	.word	0x08005d7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d48:	4b94      	ldr	r3, [pc, #592]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d54:	4b91      	ldr	r3, [pc, #580]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	4a90      	ldr	r2, [pc, #576]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
 8005d64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d66:	e111      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d68:	4b8d      	ldr	r3, [pc, #564]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d6a:	61bb      	str	r3, [r7, #24]
      break;
 8005d6c:	e10e      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d6e:	4b8d      	ldr	r3, [pc, #564]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d70:	61bb      	str	r3, [r7, #24]
      break;
 8005d72:	e10b      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d74:	4b8c      	ldr	r3, [pc, #560]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d76:	61bb      	str	r3, [r7, #24]
      break;
 8005d78:	e108      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d7a:	4b88      	ldr	r3, [pc, #544]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d84:	4b85      	ldr	r3, [pc, #532]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d90:	4b82      	ldr	r3, [pc, #520]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d9a:	4b80      	ldr	r3, [pc, #512]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80e1 	beq.w	8005f80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	f000 8083 	beq.w	8005ecc <HAL_RCC_GetSysClockFreq+0x204>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	f200 80a1 	bhi.w	8005f10 <HAL_RCC_GetSysClockFreq+0x248>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x114>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d056      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dda:	e099      	b.n	8005f10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ddc:	4b6f      	ldr	r3, [pc, #444]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02d      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de8:	4b6c      	ldr	r3, [pc, #432]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	4a6b      	ldr	r2, [pc, #428]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e12:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e42:	e087      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e56:	4b51      	ldr	r3, [pc, #324]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e86:	e065      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9a:	4b40      	ldr	r3, [pc, #256]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eca:	e043      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ede:	4b2f      	ldr	r3, [pc, #188]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f0e:	e021      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f54:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	0a5b      	lsrs	r3, r3, #9
 8005f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5e:	3301      	adds	r3, #1
 8005f60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f78:	ee17 3a90 	vmov	r3, s15
 8005f7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f7e:	e005      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]
      break;
 8005f84:	e002      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f86:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f88:	61bb      	str	r3, [r7, #24]
      break;
 8005f8a:	bf00      	nop
  }

  return sysclockfreq;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3724      	adds	r7, #36	; 0x24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	03d09000 	.word	0x03d09000
 8005fa4:	003d0900 	.word	0x003d0900
 8005fa8:	017d7840 	.word	0x017d7840
 8005fac:	46000000 	.word	0x46000000
 8005fb0:	4c742400 	.word	0x4c742400
 8005fb4:	4a742400 	.word	0x4a742400
 8005fb8:	4bbebc20 	.word	0x4bbebc20

08005fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fc2:	f7ff fe81 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <HAL_RCC_GetHCLKFreq+0x50>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	490f      	ldr	r1, [pc, #60]	; (8006010 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fd4:	5ccb      	ldrb	r3, [r1, r3]
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	fa22 f303 	lsr.w	r3, r2, r3
 8005fde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_RCC_GetHCLKFreq+0x50>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fea:	5cd3      	ldrb	r3, [r2, r3]
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ffa:	4a07      	ldr	r2, [pc, #28]	; (8006018 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <HAL_RCC_GetHCLKFreq+0x58>)
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	0800f964 	.word	0x0800f964
 8006014:	24000004 	.word	0x24000004
 8006018:	24000000 	.word	0x24000000

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006020:	f7ff ffcc 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4904      	ldr	r1, [pc, #16]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	58024400 	.word	0x58024400
 8006044:	0800f964 	.word	0x0800f964

08006048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800604c:	f7ff ffb6 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4904      	ldr	r1, [pc, #16]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	58024400 	.word	0x58024400
 8006070:	0800f964 	.word	0x0800f964

08006074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006078:	b0cc      	sub	sp, #304	; 0x130
 800607a:	af00      	add	r7, sp, #0
 800607c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006080:	2300      	movs	r3, #0
 8006082:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006086:	2300      	movs	r3, #0
 8006088:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800608c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006098:	2500      	movs	r5, #0
 800609a:	ea54 0305 	orrs.w	r3, r4, r5
 800609e:	d049      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060aa:	d02f      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060b0:	d828      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060b6:	d01a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060bc:	d822      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c6:	d007      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060c8:	e01c      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ca:	4bb8      	ldr	r3, [pc, #736]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	4ab7      	ldr	r2, [pc, #732]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060d6:	e01a      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060dc:	3308      	adds	r3, #8
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f002 fba1 	bl	8008828 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060f2:	3328      	adds	r3, #40	; 0x28
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 fc48 	bl	800898c <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006116:	4ba5      	ldr	r3, [pc, #660]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800611e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006124:	4aa1      	ldr	r2, [pc, #644]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006126:	430b      	orrs	r3, r1
 8006128:	6513      	str	r3, [r2, #80]	; 0x50
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006130:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006134:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006140:	f04f 0900 	mov.w	r9, #0
 8006144:	ea58 0309 	orrs.w	r3, r8, r9
 8006148:	d047      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800614a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	2b04      	cmp	r3, #4
 8006152:	d82a      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006171 	.word	0x08006171
 8006160:	0800617f 	.word	0x0800617f
 8006164:	08006195 	.word	0x08006195
 8006168:	080061b3 	.word	0x080061b3
 800616c:	080061b3 	.word	0x080061b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006170:	4b8e      	ldr	r3, [pc, #568]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4a8d      	ldr	r2, [pc, #564]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800617c:	e01a      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006182:	3308      	adds	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f002 fb4e 	bl	8008828 <RCCEx_PLL2_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006192:	e00f      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006198:	3328      	adds	r3, #40	; 0x28
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f002 fbf5 	bl	800898c <RCCEx_PLL3_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a8:	e004      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061b0:	e000      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061bc:	4b7b      	ldr	r3, [pc, #492]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	f023 0107 	bic.w	r1, r3, #7
 80061c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ca:	4a78      	ldr	r2, [pc, #480]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6513      	str	r3, [r2, #80]	; 0x50
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80061e6:	f04f 0b00 	mov.w	fp, #0
 80061ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80061ee:	d04c      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80061f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fa:	d030      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80061fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006200:	d829      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006202:	2bc0      	cmp	r3, #192	; 0xc0
 8006204:	d02d      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006206:	2bc0      	cmp	r3, #192	; 0xc0
 8006208:	d825      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800620a:	2b80      	cmp	r3, #128	; 0x80
 800620c:	d018      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800620e:	2b80      	cmp	r3, #128	; 0x80
 8006210:	d821      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d007      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800621a:	e01c      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621c:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	4a62      	ldr	r2, [pc, #392]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006228:	e01c      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800622a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800622e:	3308      	adds	r3, #8
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f002 faf8 	bl	8008828 <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800623e:	e011      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006244:	3328      	adds	r3, #40	; 0x28
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f002 fb9f 	bl	800898c <RCCEx_PLL3_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006254:	e006      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006264:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800626c:	4b4f      	ldr	r3, [pc, #316]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800626e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006270:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006274:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627a:	4a4c      	ldr	r2, [pc, #304]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627c:	430b      	orrs	r3, r1
 800627e:	6513      	str	r3, [r2, #80]	; 0x50
 8006280:	e003      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006282:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006286:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800628a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006296:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800629a:	2300      	movs	r3, #0
 800629c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062a0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80062a4:	460b      	mov	r3, r1
 80062a6:	4313      	orrs	r3, r2
 80062a8:	d053      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062b6:	d035      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062bc:	d82e      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062c2:	d031      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062c8:	d828      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ce:	d01a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d4:	d822      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80062da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062de:	d007      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80062e0:	e01c      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e2:	4b32      	ldr	r3, [pc, #200]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	4a31      	ldr	r2, [pc, #196]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062ee:	e01c      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f4:	3308      	adds	r3, #8
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 fa95 	bl	8008828 <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006304:	e011      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800630a:	3328      	adds	r3, #40	; 0x28
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f002 fb3c 	bl	800898c <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800631a:	e006      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006322:	e002      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006324:	bf00      	nop
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006332:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800633a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800633e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006342:	4a1a      	ldr	r2, [pc, #104]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6593      	str	r3, [r2, #88]	; 0x58
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800634e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800635e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006362:	2300      	movs	r3, #0
 8006364:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006368:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800636c:	460b      	mov	r3, r1
 800636e:	4313      	orrs	r3, r2
 8006370:	d056      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006372:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800637a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800637e:	d038      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006384:	d831      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006386:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800638a:	d034      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800638c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006390:	d82b      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006396:	d01d      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800639c:	d825      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d006      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063a8:	e01f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4ba2      	ldr	r3, [pc, #648]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4aa1      	ldr	r2, [pc, #644]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063bc:	e01c      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c2:	3308      	adds	r3, #8
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f002 fa2e 	bl	8008828 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063d2:	e011      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063d8:	3328      	adds	r3, #40	; 0x28
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f002 fad5 	bl	800898c <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063e8:	e006      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80063f0:	e002      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063f2:	bf00      	nop
 80063f4:	e000      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006400:	4b8e      	ldr	r3, [pc, #568]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006408:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800640c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006410:	4a8a      	ldr	r2, [pc, #552]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006412:	430b      	orrs	r3, r1
 8006414:	6593      	str	r3, [r2, #88]	; 0x58
 8006416:	e003      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006418:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800641c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800642c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006430:	2300      	movs	r3, #0
 8006432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006436:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800643a:	460b      	mov	r3, r1
 800643c:	4313      	orrs	r3, r2
 800643e:	d03a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006446:	2b30      	cmp	r3, #48	; 0x30
 8006448:	d01f      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800644a:	2b30      	cmp	r3, #48	; 0x30
 800644c:	d819      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800644e:	2b20      	cmp	r3, #32
 8006450:	d00c      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006452:	2b20      	cmp	r3, #32
 8006454:	d815      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d019      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800645a:	2b10      	cmp	r3, #16
 800645c:	d111      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645e:	4b77      	ldr	r3, [pc, #476]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a76      	ldr	r2, [pc, #472]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800646a:	e011      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800646c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006470:	3308      	adds	r3, #8
 8006472:	2102      	movs	r1, #2
 8006474:	4618      	mov	r0, r3
 8006476:	f002 f9d7 	bl	8008828 <RCCEx_PLL2_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006480:	e006      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800648e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006490:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006498:	4b68      	ldr	r3, [pc, #416]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80064a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a6:	4a65      	ldr	r2, [pc, #404]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a8:	430b      	orrs	r3, r1
 80064aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064ac:	e003      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80064c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064cc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80064d0:	460b      	mov	r3, r1
 80064d2:	4313      	orrs	r3, r2
 80064d4:	d051      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e0:	d035      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e6:	d82e      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ec:	d031      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064f2:	d828      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f8:	d01a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80064fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fe:	d822      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006508:	d007      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800650a:	e01c      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a4a      	ldr	r2, [pc, #296]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006518:	e01c      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800651a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800651e:	3308      	adds	r3, #8
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f002 f980 	bl	8008828 <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800652e:	e011      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006534:	3328      	adds	r3, #40	; 0x28
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f002 fa27 	bl	800898c <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006554:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800655c:	4b37      	ldr	r3, [pc, #220]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800655e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006560:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656a:	4a34      	ldr	r2, [pc, #208]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656c:	430b      	orrs	r3, r1
 800656e:	6513      	str	r3, [r2, #80]	; 0x50
 8006570:	e003      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006572:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006576:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800657a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006586:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800658a:	2300      	movs	r3, #0
 800658c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006590:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006594:	460b      	mov	r3, r1
 8006596:	4313      	orrs	r3, r2
 8006598:	d056      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800659a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800659e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a4:	d033      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065aa:	d82c      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065b0:	d02f      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065b6:	d826      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065bc:	d02b      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065c2:	d820      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c8:	d012      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80065ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ce:	d81a      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d022      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d8:	d115      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065de:	3308      	adds	r3, #8
 80065e0:	2101      	movs	r1, #1
 80065e2:	4618      	mov	r0, r3
 80065e4:	f002 f920 	bl	8008828 <RCCEx_PLL2_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065ee:	e015      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065f4:	3328      	adds	r3, #40	; 0x28
 80065f6:	2101      	movs	r1, #1
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 f9c7 	bl	800898c <RCCEx_PLL3_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006604:	e00a      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800660c:	e006      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800660e:	bf00      	nop
 8006610:	e004      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800661a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10d      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800662c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006632:	4a02      	ldr	r2, [pc, #8]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006634:	430b      	orrs	r3, r1
 8006636:	6513      	str	r3, [r2, #80]	; 0x50
 8006638:	e006      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800663a:	bf00      	nop
 800663c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006644:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006654:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006658:	2300      	movs	r3, #0
 800665a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800665e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	d055      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800666c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006674:	d033      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800667a:	d82c      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d02f      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006686:	d826      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800668c:	d02b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800668e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006692:	d820      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006698:	d012      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669e:	d81a      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d022      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a8:	d115      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066ae:	3308      	adds	r3, #8
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f002 f8b8 	bl	8008828 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066be:	e015      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066c4:	3328      	adds	r3, #40	; 0x28
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 f95f 	bl	800898c <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066d4:	e00a      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80066dc:	e006      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066de:	bf00      	nop
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066f4:	4bb6      	ldr	r3, [pc, #728]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80066fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006704:	4ab2      	ldr	r2, [pc, #712]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006706:	430b      	orrs	r3, r1
 8006708:	6593      	str	r3, [r2, #88]	; 0x58
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006710:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006714:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800672a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800672e:	460b      	mov	r3, r1
 8006730:	4313      	orrs	r3, r2
 8006732:	d02a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006734:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800673e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006742:	d10a      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006748:	3308      	adds	r3, #8
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f002 f86b 	bl	8008828 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006758:	e004      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006760:	e000      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8006762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006764:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800676c:	4b98      	ldr	r3, [pc, #608]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800676e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006770:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	4a95      	ldr	r2, [pc, #596]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800677c:	430b      	orrs	r3, r1
 800677e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006780:	e003      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006782:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006786:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800678a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800679a:	2300      	movs	r3, #0
 800679c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067a4:	460b      	mov	r3, r1
 80067a6:	4313      	orrs	r3, r2
 80067a8:	d037      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d00e      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80067b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ba:	d816      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x776>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d018      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80067c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c4:	d111      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c6:	4b82      	ldr	r3, [pc, #520]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4a81      	ldr	r2, [pc, #516]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067d2:	e00f      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067d8:	3308      	adds	r3, #8
 80067da:	2101      	movs	r1, #1
 80067dc:	4618      	mov	r0, r3
 80067de:	f002 f823 	bl	8008828 <RCCEx_PLL2_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80067f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067fc:	4b74      	ldr	r3, [pc, #464]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006804:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	4a71      	ldr	r2, [pc, #452]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800680c:	430b      	orrs	r3, r1
 800680e:	6513      	str	r3, [r2, #80]	; 0x50
 8006810:	e003      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006812:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006816:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800681a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006826:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800682a:	2300      	movs	r3, #0
 800682c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006830:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006834:	460b      	mov	r3, r1
 8006836:	4313      	orrs	r3, r2
 8006838:	d03a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800683a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800683e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006840:	2b03      	cmp	r3, #3
 8006842:	d81d      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006889 	.word	0x08006889
 8006850:	0800685d 	.word	0x0800685d
 8006854:	0800686b 	.word	0x0800686b
 8006858:	08006889 	.word	0x08006889
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4b5c      	ldr	r3, [pc, #368]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006868:	e00f      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800686a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800686e:	3308      	adds	r3, #8
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f001 ffd8 	bl	8008828 <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800687e:	e004      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006886:	e000      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800688a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006892:	4b4f      	ldr	r3, [pc, #316]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006896:	f023 0103 	bic.w	r1, r3, #3
 800689a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800689e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a0:	4a4b      	ldr	r2, [pc, #300]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80068bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80068ca:	460b      	mov	r3, r1
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f000 80a0 	beq.w	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068d2:	4b40      	ldr	r3, [pc, #256]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068de:	f7fb f887 	bl	80019f0 <HAL_GetTick>
 80068e2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e6:	e00b      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fb f882 	bl	80019f0 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b64      	cmp	r3, #100	; 0x64
 80068f6:	d903      	bls.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80068fe:	e005      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0ed      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800690c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006910:	2b00      	cmp	r3, #0
 8006912:	d17a      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006914:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006918:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800691c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006920:	4053      	eors	r3, r2
 8006922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800692a:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006936:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006942:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a22      	ldr	r2, [pc, #136]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800694e:	4a20      	ldr	r2, [pc, #128]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006950:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006954:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800695a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d118      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fb f844 	bl	80019f0 <HAL_GetTick>
 8006968:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800696c:	e00d      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fb f83f 	bl	80019f0 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	f241 3388 	movw	r3, #5000	; 0x1388
 800697e:	429a      	cmp	r2, r3
 8006980:	d903      	bls.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8006988:	e005      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0eb      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006996:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800699a:	2b00      	cmp	r3, #0
 800699c:	d130      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800699e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ae:	d115      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x968>
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80069b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069c0:	091a      	lsrs	r2, r3, #4
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	4a02      	ldr	r2, [pc, #8]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6113      	str	r3, [r2, #16]
 80069cc:	e00c      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	58024800 	.word	0x58024800
 80069d8:	00ffffcf 	.word	0x00ffffcf
 80069dc:	4bd4      	ldr	r3, [pc, #848]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	4ad3      	ldr	r2, [pc, #844]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069e6:	6113      	str	r3, [r2, #16]
 80069e8:	4bd1      	ldr	r3, [pc, #836]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069ea:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80069ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f8:	4acd      	ldr	r2, [pc, #820]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069fa:	430b      	orrs	r3, r1
 80069fc:	6713      	str	r3, [r2, #112]	; 0x70
 80069fe:	e008      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a04:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a0e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f002 0301 	and.w	r3, r2, #1
 8006a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f000 808b 	beq.w	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a3c:	2b28      	cmp	r3, #40	; 0x28
 8006a3e:	d86b      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006b21 	.word	0x08006b21
 8006a4c:	08006b19 	.word	0x08006b19
 8006a50:	08006b19 	.word	0x08006b19
 8006a54:	08006b19 	.word	0x08006b19
 8006a58:	08006b19 	.word	0x08006b19
 8006a5c:	08006b19 	.word	0x08006b19
 8006a60:	08006b19 	.word	0x08006b19
 8006a64:	08006b19 	.word	0x08006b19
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006b19 	.word	0x08006b19
 8006a70:	08006b19 	.word	0x08006b19
 8006a74:	08006b19 	.word	0x08006b19
 8006a78:	08006b19 	.word	0x08006b19
 8006a7c:	08006b19 	.word	0x08006b19
 8006a80:	08006b19 	.word	0x08006b19
 8006a84:	08006b19 	.word	0x08006b19
 8006a88:	08006b03 	.word	0x08006b03
 8006a8c:	08006b19 	.word	0x08006b19
 8006a90:	08006b19 	.word	0x08006b19
 8006a94:	08006b19 	.word	0x08006b19
 8006a98:	08006b19 	.word	0x08006b19
 8006a9c:	08006b19 	.word	0x08006b19
 8006aa0:	08006b19 	.word	0x08006b19
 8006aa4:	08006b19 	.word	0x08006b19
 8006aa8:	08006b21 	.word	0x08006b21
 8006aac:	08006b19 	.word	0x08006b19
 8006ab0:	08006b19 	.word	0x08006b19
 8006ab4:	08006b19 	.word	0x08006b19
 8006ab8:	08006b19 	.word	0x08006b19
 8006abc:	08006b19 	.word	0x08006b19
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006b19 	.word	0x08006b19
 8006ad0:	08006b19 	.word	0x08006b19
 8006ad4:	08006b19 	.word	0x08006b19
 8006ad8:	08006b19 	.word	0x08006b19
 8006adc:	08006b19 	.word	0x08006b19
 8006ae0:	08006b19 	.word	0x08006b19
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b21 	.word	0x08006b21
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006af0:	3308      	adds	r3, #8
 8006af2:	2101      	movs	r1, #1
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 fe97 	bl	8008828 <RCCEx_PLL2_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b00:	e00f      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b06:	3328      	adds	r3, #40	; 0x28
 8006b08:	2101      	movs	r1, #1
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 ff3e 	bl	800898c <RCCEx_PLL3_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b16:	e004      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006b1e:	e000      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b2a:	4b81      	ldr	r3, [pc, #516]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b3a:	4a7d      	ldr	r2, [pc, #500]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6553      	str	r3, [r2, #84]	; 0x54
 8006b40:	e003      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b46:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f002 0302 	and.w	r3, r2, #2
 8006b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006b64:	460b      	mov	r3, r1
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d042      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b70:	2b05      	cmp	r3, #5
 8006b72:	d825      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006bc9 	.word	0x08006bc9
 8006b80:	08006b95 	.word	0x08006b95
 8006b84:	08006bab 	.word	0x08006bab
 8006b88:	08006bc9 	.word	0x08006bc9
 8006b8c:	08006bc9 	.word	0x08006bc9
 8006b90:	08006bc9 	.word	0x08006bc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b98:	3308      	adds	r3, #8
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 fe43 	bl	8008828 <RCCEx_PLL2_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e00f      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bae:	3328      	adds	r3, #40	; 0x28
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 feea 	bl	800898c <RCCEx_PLL3_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bbe:	e004      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006bc6:	e000      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bd2:	4b57      	ldr	r3, [pc, #348]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd6:	f023 0107 	bic.w	r1, r3, #7
 8006bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be0:	4a53      	ldr	r2, [pc, #332]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6553      	str	r3, [r2, #84]	; 0x54
 8006be6:	e003      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f002 0304 	and.w	r3, r2, #4
 8006bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c00:	2300      	movs	r3, #0
 8006c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	d044      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	d825      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c3d 	.word	0x08006c3d
 8006c2c:	08006c53 	.word	0x08006c53
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c71 	.word	0x08006c71
 8006c38:	08006c71 	.word	0x08006c71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c40:	3308      	adds	r3, #8
 8006c42:	2101      	movs	r1, #1
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 fdef 	bl	8008828 <RCCEx_PLL2_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c50:	e00f      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c56:	3328      	adds	r3, #40	; 0x28
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fe96 	bl	800898c <RCCEx_PLL3_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c66:	e004      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006c6e:	e000      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10b      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c7a:	4b2d      	ldr	r3, [pc, #180]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7e:	f023 0107 	bic.w	r1, r3, #7
 8006c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c8a:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006c96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f002 0320 	and.w	r3, r2, #32
 8006ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d057      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cc6:	d035      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ccc:	d82c      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d031      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d826      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cde:	d02d      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ce4:	d820      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cea:	d012      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf0:	d81a      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d024      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d115      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d00:	3308      	adds	r3, #8
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 fd8f 	bl	8008828 <RCCEx_PLL2_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d10:	e017      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d16:	3328      	adds	r3, #40	; 0x28
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fe36 	bl	800898c <RCCEx_PLL3_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d26:	e00c      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006d2e:	e008      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006d30:	58024400 	.word	0x58024400
        break;
 8006d34:	bf00      	nop
 8006d36:	e004      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d4a:	4bc2      	ldr	r3, [pc, #776]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d5a:	4abe      	ldr	r2, [pc, #760]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6553      	str	r3, [r2, #84]	; 0x54
 8006d60:	e003      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d055      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d96:	d033      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006d98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d9c:	d82c      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da2:	d02f      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d826      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dae:	d02b      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006db4:	d820      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dba:	d012      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc0:	d81a      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d022      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	d115      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fd27 	bl	8008828 <RCCEx_PLL2_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006de0:	e015      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006de6:	3328      	adds	r3, #40	; 0x28
 8006de8:	2102      	movs	r1, #2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fdce 	bl	800898c <RCCEx_PLL3_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006df6:	e00a      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e00:	bf00      	nop
 8006e02:	e004      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e04:	bf00      	nop
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e16:	4b8f      	ldr	r3, [pc, #572]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e26:	4a8b      	ldr	r2, [pc, #556]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006e42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d055      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e62:	d033      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006e64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e68:	d82c      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d02f      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e74:	d826      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e7a:	d02b      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006e7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e80:	d820      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e86:	d012      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e8c:	d81a      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d022      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e96:	d115      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fcc1 	bl	8008828 <RCCEx_PLL2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006eac:	e015      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eb2:	3328      	adds	r3, #40	; 0x28
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fd68 	bl	800898c <RCCEx_PLL3_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ec2:	e00a      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006eca:	e006      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ecc:	bf00      	nop
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10b      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ee2:	4b5c      	ldr	r3, [pc, #368]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee6:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ef2:	4a58      	ldr	r2, [pc, #352]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef8:	e003      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006efe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f002 0308 	and.w	r3, r2, #8
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f12:	2300      	movs	r3, #0
 8006f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f18:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d01e      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d10c      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f34:	3328      	adds	r3, #40	; 0x28
 8006f36:	2102      	movs	r1, #2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fd27 	bl	800898c <RCCEx_PLL3_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f4a:	4b42      	ldr	r3, [pc, #264]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 0310 	and.w	r3, r2, #16
 8006f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d01e      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f92:	3328      	adds	r3, #40	; 0x28
 8006f94:	2102      	movs	r1, #2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 fcf8 	bl	800898c <RCCEx_PLL3_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fa8:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fb8:	4a26      	ldr	r2, [pc, #152]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fd4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d040      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fea:	d022      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff0:	d81b      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	d00b      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006ffc:	e015      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007002:	3308      	adds	r3, #8
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f001 fc0e 	bl	8008828 <RCCEx_PLL2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007012:	e00f      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007014:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007018:	3328      	adds	r3, #40	; 0x28
 800701a:	2102      	movs	r1, #2
 800701c:	4618      	mov	r0, r3
 800701e:	f001 fcb5 	bl	800898c <RCCEx_PLL3_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007028:	e004      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8007032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007034:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800703e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007040:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007048:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800704c:	4a01      	ldr	r2, [pc, #4]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800704e:	430b      	orrs	r3, r1
 8007050:	6593      	str	r3, [r2, #88]	; 0x58
 8007052:	e005      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007058:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800705c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800706c:	67bb      	str	r3, [r7, #120]	; 0x78
 800706e:	2300      	movs	r3, #0
 8007070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007072:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	d03b      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800707c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007088:	d01f      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800708a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800708e:	d818      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8007090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007094:	d003      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8007096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709a:	d007      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800709c:	e011      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800709e:	4b64      	ldr	r3, [pc, #400]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	4a63      	ldr	r2, [pc, #396]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070aa:	e00f      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070b0:	3328      	adds	r3, #40	; 0x28
 80070b2:	2101      	movs	r1, #1
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 fc69 	bl	800898c <RCCEx_PLL3_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80070c0:	e004      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80070ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070d4:	4b56      	ldr	r3, [pc, #344]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80070dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e4:	4a52      	ldr	r2, [pc, #328]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070e6:	430b      	orrs	r3, r1
 80070e8:	6553      	str	r3, [r2, #84]	; 0x54
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80070f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007100:	673b      	str	r3, [r7, #112]	; 0x70
 8007102:	2300      	movs	r3, #0
 8007104:	677b      	str	r3, [r7, #116]	; 0x74
 8007106:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d031      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800711a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711e:	d007      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007120:	e011      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007122:	4b43      	ldr	r3, [pc, #268]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	4a42      	ldr	r2, [pc, #264]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800712c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800712e:	e00e      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007134:	3308      	adds	r3, #8
 8007136:	2102      	movs	r1, #2
 8007138:	4618      	mov	r0, r3
 800713a:	f001 fb75 	bl	8008828 <RCCEx_PLL2_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007144:	e003      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800714c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800714e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007156:	4b36      	ldr	r3, [pc, #216]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800715e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007164:	4a32      	ldr	r2, [pc, #200]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007166:	430b      	orrs	r3, r1
 8007168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800716a:	e003      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007170:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007180:	66bb      	str	r3, [r7, #104]	; 0x68
 8007182:	2300      	movs	r3, #0
 8007184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007186:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d00c      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	2102      	movs	r1, #2
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fbf7 	bl	800898c <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80071b6:	663b      	str	r3, [r7, #96]	; 0x60
 80071b8:	2300      	movs	r3, #0
 80071ba:	667b      	str	r3, [r7, #100]	; 0x64
 80071bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80071c0:	460b      	mov	r3, r1
 80071c2:	4313      	orrs	r3, r2
 80071c4:	d03a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d2:	d018      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80071d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d8:	d811      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80071da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071de:	d014      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80071e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e4:	d80b      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ee:	d106      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80071f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8007204:	e004      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800720e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007210:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10d      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800721a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007220:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	4a01      	ldr	r2, [pc, #4]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800722a:	430b      	orrs	r3, r1
 800722c:	6553      	str	r3, [r2, #84]	; 0x54
 800722e:	e005      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007238:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800723c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007248:	65bb      	str	r3, [r7, #88]	; 0x58
 800724a:	2300      	movs	r3, #0
 800724c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007258:	4baa      	ldr	r3, [pc, #680]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007260:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007266:	4aa7      	ldr	r2, [pc, #668]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007268:	430b      	orrs	r3, r1
 800726a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800726c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007278:	653b      	str	r3, [r7, #80]	; 0x50
 800727a:	2300      	movs	r3, #0
 800727c:	657b      	str	r3, [r7, #84]	; 0x54
 800727e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007288:	4b9e      	ldr	r3, [pc, #632]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007294:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007298:	4a9a      	ldr	r2, [pc, #616]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800729a:	430b      	orrs	r3, r1
 800729c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800729e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80072aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ac:	2300      	movs	r3, #0
 80072ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072ba:	4b92      	ldr	r3, [pc, #584]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80072c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	4a8e      	ldr	r2, [pc, #568]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072ca:	430b      	orrs	r3, r1
 80072cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80072da:	643b      	str	r3, [r7, #64]	; 0x40
 80072dc:	2300      	movs	r3, #0
 80072de:	647b      	str	r3, [r7, #68]	; 0x44
 80072e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80072e4:	460b      	mov	r3, r1
 80072e6:	4313      	orrs	r3, r2
 80072e8:	d00e      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072ea:	4b86      	ldr	r3, [pc, #536]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	4a85      	ldr	r2, [pc, #532]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072f4:	6113      	str	r3, [r2, #16]
 80072f6:	4b83      	ldr	r3, [pc, #524]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072f8:	6919      	ldr	r1, [r3, #16]
 80072fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007302:	4a80      	ldr	r2, [pc, #512]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
 8007316:	2300      	movs	r3, #0
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800731a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800731e:	460b      	mov	r3, r1
 8007320:	4313      	orrs	r3, r2
 8007322:	d009      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007324:	4b77      	ldr	r3, [pc, #476]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007328:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800732c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007332:	4a74      	ldr	r2, [pc, #464]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007334:	430b      	orrs	r3, r1
 8007336:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007338:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007344:	633b      	str	r3, [r7, #48]	; 0x30
 8007346:	2300      	movs	r3, #0
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
 800734a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800734e:	460b      	mov	r3, r1
 8007350:	4313      	orrs	r3, r2
 8007352:	d00a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007354:	4b6b      	ldr	r3, [pc, #428]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800735c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007364:	4a67      	ldr	r2, [pc, #412]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007366:	430b      	orrs	r3, r1
 8007368:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800736a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	2100      	movs	r1, #0
 8007374:	62b9      	str	r1, [r7, #40]	; 0x28
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007380:	460b      	mov	r3, r1
 8007382:	4313      	orrs	r3, r2
 8007384:	d011      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007386:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800738a:	3308      	adds	r3, #8
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f001 fa4a 	bl	8008828 <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800739a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80073a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	2100      	movs	r1, #0
 80073b4:	6239      	str	r1, [r7, #32]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
 80073bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073c0:	460b      	mov	r3, r1
 80073c2:	4313      	orrs	r3, r2
 80073c4:	d011      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073ca:	3308      	adds	r3, #8
 80073cc:	2101      	movs	r1, #1
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 fa2a 	bl	8008828 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80073da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80073e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	2100      	movs	r1, #0
 80073f4:	61b9      	str	r1, [r7, #24]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007400:	460b      	mov	r3, r1
 8007402:	4313      	orrs	r3, r2
 8007404:	d011      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800740a:	3308      	adds	r3, #8
 800740c:	2102      	movs	r1, #2
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fa0a 	bl	8008828 <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800741a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007426:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800742a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	2100      	movs	r1, #0
 8007434:	6139      	str	r1, [r7, #16]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d011      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007446:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800744a:	3328      	adds	r3, #40	; 0x28
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fa9c 	bl	800898c <RCCEx_PLL3_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800745a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007462:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007466:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800746a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	2100      	movs	r1, #0
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007480:	460b      	mov	r3, r1
 8007482:	4313      	orrs	r3, r2
 8007484:	d011      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800748a:	3328      	adds	r3, #40	; 0x28
 800748c:	2101      	movs	r1, #1
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fa7c 	bl	800898c <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800749a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80074a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	2100      	movs	r1, #0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	607b      	str	r3, [r7, #4]
 80074bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074c0:	460b      	mov	r3, r1
 80074c2:	4313      	orrs	r3, r2
 80074c4:	d011      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074ca:	3328      	adds	r3, #40	; 0x28
 80074cc:	2102      	movs	r1, #2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fa5c 	bl	800898c <RCCEx_PLL3_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80074da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80074e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80074ea:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e000      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074fe:	46bd      	mov	sp, r7
 8007500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007504:	58024400 	.word	0x58024400

08007508 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b090      	sub	sp, #64	; 0x40
 800750c:	af00      	add	r7, sp, #0
 800750e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007516:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800751a:	430b      	orrs	r3, r1
 800751c:	f040 8094 	bne.w	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007520:	4b9e      	ldr	r3, [pc, #632]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2b04      	cmp	r3, #4
 800752e:	f200 8087 	bhi.w	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	0800754d 	.word	0x0800754d
 800753c:	08007575 	.word	0x08007575
 8007540:	0800759d 	.word	0x0800759d
 8007544:	08007639 	.word	0x08007639
 8007548:	080075c5 	.word	0x080075c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800754c:	4b93      	ldr	r3, [pc, #588]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007558:	d108      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800755a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755e:	4618      	mov	r0, r3
 8007560:	f001 f810 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007568:	f000 bd45 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007570:	f000 bd41 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007574:	4b89      	ldr	r3, [pc, #548]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800757c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007580:	d108      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007582:	f107 0318 	add.w	r3, r7, #24
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fd54 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007590:	f000 bd31 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007598:	f000 bd2d 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800759c:	4b7f      	ldr	r3, [pc, #508]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a8:	d108      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075aa:	f107 030c 	add.w	r3, r7, #12
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fe94 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b8:	f000 bd1d 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075c0:	f000 bd19 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075c4:	4b75      	ldr	r3, [pc, #468]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ce:	4b73      	ldr	r3, [pc, #460]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d10c      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d109      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e0:	4b6e      	ldr	r3, [pc, #440]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	08db      	lsrs	r3, r3, #3
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	4a6d      	ldr	r2, [pc, #436]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075f2:	e01f      	b.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075f4:	4b69      	ldr	r3, [pc, #420]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007608:	d102      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800760a:	4b66      	ldr	r3, [pc, #408]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800760e:	e011      	b.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007610:	4b62      	ldr	r3, [pc, #392]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800761c:	d106      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800761e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007624:	d102      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007626:	4b60      	ldr	r3, [pc, #384]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762a:	e003      	b.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007630:	f000 bce1 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007634:	f000 bcdf 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007638:	4b5c      	ldr	r3, [pc, #368]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800763c:	f000 bcdb 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007644:	f000 bcd7 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800764c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007650:	430b      	orrs	r3, r1
 8007652:	f040 80ad 	bne.w	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007656:	4b51      	ldr	r3, [pc, #324]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800765e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d056      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800766e:	f200 8090 	bhi.w	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	2bc0      	cmp	r3, #192	; 0xc0
 8007676:	f000 8088 	beq.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	2bc0      	cmp	r3, #192	; 0xc0
 800767e:	f200 8088 	bhi.w	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d032      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	f200 8081 	bhi.w	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d014      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800769c:	e079      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800769e:	4b3f      	ldr	r3, [pc, #252]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076aa:	d108      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ff67 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ba:	f000 bc9c 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076c2:	f000 bc98 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076c6:	4b35      	ldr	r3, [pc, #212]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d2:	d108      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d4:	f107 0318 	add.w	r3, r7, #24
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fcab 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e2:	f000 bc88 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ea:	f000 bc84 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076ee:	4b2b      	ldr	r3, [pc, #172]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fa:	d108      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076fc:	f107 030c 	add.w	r3, r7, #12
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fdeb 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800770a:	f000 bc74 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007712:	f000 bc70 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007716:	4b21      	ldr	r3, [pc, #132]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800771e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007720:	4b1e      	ldr	r3, [pc, #120]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b04      	cmp	r3, #4
 800772a:	d10c      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007732:	4b1a      	ldr	r3, [pc, #104]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	08db      	lsrs	r3, r3, #3
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800773e:	fa22 f303 	lsr.w	r3, r2, r3
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007744:	e01f      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007746:	4b15      	ldr	r3, [pc, #84]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007752:	d106      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775a:	d102      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007760:	e011      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007762:	4b0e      	ldr	r3, [pc, #56]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800776e:	d106      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007776:	d102      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007778:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800777c:	e003      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007782:	f000 bc38 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007786:	f000 bc36 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778e:	f000 bc32 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007796:	f000 bc2e 	b.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	03d09000 	.word	0x03d09000
 80077a4:	003d0900 	.word	0x003d0900
 80077a8:	017d7840 	.word	0x017d7840
 80077ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80077b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80077b8:	430b      	orrs	r3, r1
 80077ba:	f040 809c 	bne.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80077be:	4b9e      	ldr	r3, [pc, #632]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077ce:	d054      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077d6:	f200 808b 	bhi.w	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077e0:	f000 8083 	beq.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077ea:	f200 8081 	bhi.w	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077f4:	d02f      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077fc:	d878      	bhi.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800780a:	d012      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800780c:	e070      	b.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800780e:	4b8a      	ldr	r3, [pc, #552]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800781a:	d107      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800781c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f000 feaf 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800782a:	e3e4      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007830:	e3e1      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007832:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800783e:	d107      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007840:	f107 0318 	add.w	r3, r7, #24
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fbf5 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784e:	e3d2      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007854:	e3cf      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007856:	4b78      	ldr	r3, [pc, #480]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800785e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007862:	d107      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fd37 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007872:	e3c0      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007878:	e3bd      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800787a:	4b6f      	ldr	r3, [pc, #444]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007882:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007884:	4b6c      	ldr	r3, [pc, #432]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b04      	cmp	r3, #4
 800788e:	d10c      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007896:	4b68      	ldr	r3, [pc, #416]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	08db      	lsrs	r3, r3, #3
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	4a66      	ldr	r2, [pc, #408]	; (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078a2:	fa22 f303 	lsr.w	r3, r2, r3
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a8:	e01e      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078aa:	4b63      	ldr	r3, [pc, #396]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b6:	d106      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078c0:	4b5f      	ldr	r3, [pc, #380]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078c4:	e010      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078c6:	4b5c      	ldr	r3, [pc, #368]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078d2:	d106      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078da:	d102      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078dc:	4b59      	ldr	r3, [pc, #356]	; (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078e6:	e386      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078e8:	e385      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078ea:	4b57      	ldr	r3, [pc, #348]	; (8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ee:	e382      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f4:	e37f      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80078f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80078fe:	430b      	orrs	r3, r1
 8007900:	f040 80a7 	bne.w	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007904:	4b4c      	ldr	r3, [pc, #304]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007908:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800790c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007914:	d055      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800791c:	f200 8096 	bhi.w	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007926:	f000 8084 	beq.w	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007930:	f200 808c 	bhi.w	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800793a:	d030      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007942:	f200 8083 	bhi.w	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007952:	d012      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007954:	e07a      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007956:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007962:	d107      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fe0b 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007972:	e340      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007978:	e33d      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800797a:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007986:	d107      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007988:	f107 0318 	add.w	r3, r7, #24
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fb51 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007996:	e32e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799c:	e32b      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800799e:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079aa:	d107      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ac:	f107 030c 	add.w	r3, r7, #12
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fc93 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ba:	e31c      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c0:	e319      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079c2:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079cc:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d10c      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80079d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079de:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f0:	e01e      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fe:	d106      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a06:	d102      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a08:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0c:	e010      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a1a:	d106      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a22:	d102      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a24:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a28:	e002      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a2e:	e2e2      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a30:	e2e1      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a36:	e2de      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	03d09000 	.word	0x03d09000
 8007a40:	003d0900 	.word	0x003d0900
 8007a44:	017d7840 	.word	0x017d7840
 8007a48:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a50:	e2d1      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a56:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	f040 809c 	bne.w	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007a60:	4b93      	ldr	r3, [pc, #588]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a70:	d054      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a78:	f200 808b 	bhi.w	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a82:	f000 8083 	beq.w	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a8c:	f200 8081 	bhi.w	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a96:	d02f      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9e:	d878      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aac:	d012      	beq.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007aae:	e070      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ab0:	4b7f      	ldr	r3, [pc, #508]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007abc:	d107      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fd5e 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007acc:	e293      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad2:	e290      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad4:	4b76      	ldr	r3, [pc, #472]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae2:	f107 0318 	add.w	r3, r7, #24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 faa4 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af0:	e281      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af6:	e27e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007af8:	4b6d      	ldr	r3, [pc, #436]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b04:	d107      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fbe6 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b14:	e26f      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1a:	e26c      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b1c:	4b64      	ldr	r3, [pc, #400]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b26:	4b62      	ldr	r3, [pc, #392]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d10c      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d109      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b38:	4b5d      	ldr	r3, [pc, #372]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	4a5c      	ldr	r2, [pc, #368]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4a:	e01e      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b4c:	4b58      	ldr	r3, [pc, #352]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b58:	d106      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b60:	d102      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b62:	4b55      	ldr	r3, [pc, #340]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b66:	e010      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b68:	4b51      	ldr	r3, [pc, #324]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b74:	d106      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7c:	d102      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b7e:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b82:	e002      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b88:	e235      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b8a:	e234      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b8c:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b90:	e231      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b96:	e22e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	f040 808f 	bne.w	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007ba6:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007baa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007bae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bb6:	d06b      	beq.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bbe:	d874      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bc6:	d056      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bce:	d86c      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bd6:	d03b      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bde:	d864      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be6:	d021      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bee:	d85c      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d004      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007bfe:	e054      	b.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fe fa0c 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007c04:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c06:	e1f6      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c08:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c14:	d107      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c16:	f107 0318 	add.w	r3, r7, #24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 fa0a 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c24:	e1e7      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c2a:	e1e4      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c2c:	4b20      	ldr	r3, [pc, #128]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c38:	d107      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c3a:	f107 030c 	add.w	r3, r7, #12
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fb4c 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c48:	e1d5      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4e:	e1d2      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c50:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d109      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c5c:	4b14      	ldr	r3, [pc, #80]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	08db      	lsrs	r3, r3, #3
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c68:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6e:	e1c2      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c74:	e1bf      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c82:	d102      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c88:	e1b5      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c8e:	e1b2      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c9c:	d102      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca2:	e1a8      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca8:	e1a5      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cae:	e1a2      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	03d09000 	.word	0x03d09000
 8007cb8:	003d0900 	.word	0x003d0900
 8007cbc:	017d7840 	.word	0x017d7840
 8007cc0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	d173      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007cd0:	4b9c      	ldr	r3, [pc, #624]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce0:	d02f      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce8:	d863      	bhi.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf6:	d012      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007cf8:	e05b      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfa:	4b92      	ldr	r3, [pc, #584]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d06:	d107      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d08:	f107 0318 	add.w	r3, r7, #24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f991 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d16:	e16e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d1c:	e16b      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d1e:	4b89      	ldr	r3, [pc, #548]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d2a:	d107      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d2c:	f107 030c 	add.w	r3, r7, #12
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fad3 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d3a:	e15c      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d40:	e159      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d42:	4b80      	ldr	r3, [pc, #512]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d4c:	4b7d      	ldr	r3, [pc, #500]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d10c      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d5e:	4b79      	ldr	r3, [pc, #484]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	4a77      	ldr	r2, [pc, #476]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d70:	e01e      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d72:	4b74      	ldr	r3, [pc, #464]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d86:	d102      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d88:	4b70      	ldr	r3, [pc, #448]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8c:	e010      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d8e:	4b6d      	ldr	r3, [pc, #436]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da2:	d102      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007da4:	4b6a      	ldr	r3, [pc, #424]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dae:	e122      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007db0:	e121      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db6:	e11e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dbc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	d133      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007dc4:	4b5f      	ldr	r3, [pc, #380]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dda:	d012      	beq.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007ddc:	e023      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dde:	4b59      	ldr	r3, [pc, #356]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dea:	d107      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fbc7 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dfa:	e0fc      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e00:	e0f9      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e02:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e0e:	d107      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e10:	f107 0318 	add.w	r3, r7, #24
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f90d 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1e:	e0ea      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e24:	e0e7      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e2a:	e0e4      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e30:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007e34:	430b      	orrs	r3, r1
 8007e36:	f040 808d 	bne.w	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e3a:	4b42      	ldr	r3, [pc, #264]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e4a:	d06b      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e52:	d874      	bhi.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5a:	d056      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e62:	d86c      	bhi.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e6a:	d03b      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e72:	d864      	bhi.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d021      	beq.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e82:	d85c      	bhi.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d004      	beq.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e90:	d004      	beq.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007e92:	e054      	b.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e94:	f000 f8b8 	bl	8008008 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e98:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e9a:	e0ac      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e9c:	4b29      	ldr	r3, [pc, #164]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea8:	d107      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eaa:	f107 0318 	add.w	r3, r7, #24
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f8c0 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb8:	e09d      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ebe:	e09a      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ec0:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ecc:	d107      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fa02 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007edc:	e08b      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee2:	e088      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ee4:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d109      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	08db      	lsrs	r3, r3, #3
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007efc:	fa22 f303 	lsr.w	r3, r2, r3
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f02:	e078      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f08:	e075      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f16:	d102      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f1c:	e06b      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f22:	e068      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f24:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f30:	d102      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f36:	e05e      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f3c:	e05b      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f42:	e058      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f44:	58024400 	.word	0x58024400
 8007f48:	03d09000 	.word	0x03d09000
 8007f4c:	003d0900 	.word	0x003d0900
 8007f50:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f58:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	d148      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007f60:	4b27      	ldr	r3, [pc, #156]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f70:	d02a      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f78:	d838      	bhi.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f86:	d00d      	beq.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007f88:	e030      	b.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f96:	d102      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007f98:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f9c:	e02b      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa2:	e028      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fae4 	bl	8008584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fc0:	e019      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc6:	e016      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd4:	d107      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd6:	f107 0318 	add.w	r3, r7, #24
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f82a 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe4:	e007      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fea:	e004      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff0:	e001      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3740      	adds	r7, #64	; 0x40
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	58024400 	.word	0x58024400
 8008004:	017d7840 	.word	0x017d7840

08008008 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800800c:	f7fd ffd6 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8008010:	4602      	mov	r2, r0
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	091b      	lsrs	r3, r3, #4
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	4904      	ldr	r1, [pc, #16]	; (8008030 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800801e:	5ccb      	ldrb	r3, [r1, r3]
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008028:	4618      	mov	r0, r3
 800802a:	bd80      	pop	{r7, pc}
 800802c:	58024400 	.word	0x58024400
 8008030:	0800f964 	.word	0x0800f964

08008034 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008034:	b480      	push	{r7}
 8008036:	b089      	sub	sp, #36	; 0x24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800803c:	4ba1      	ldr	r3, [pc, #644]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008046:	4b9f      	ldr	r3, [pc, #636]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	0b1b      	lsrs	r3, r3, #12
 800804c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008050:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008052:	4b9c      	ldr	r3, [pc, #624]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	091b      	lsrs	r3, r3, #4
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800805e:	4b99      	ldr	r3, [pc, #612]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8111 	beq.w	80082a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f000 8083 	beq.w	8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b02      	cmp	r3, #2
 800808e:	f200 80a1 	bhi.w	80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d056      	beq.n	800814c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800809e:	e099      	b.n	80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080a0:	4b88      	ldr	r3, [pc, #544]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0320 	and.w	r3, r3, #32
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d02d      	beq.n	8008108 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080ac:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	4a84      	ldr	r2, [pc, #528]	; (80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
 80080bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d6:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008102:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008106:	e087      	b.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811a:	4b6a      	ldr	r3, [pc, #424]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	ed97 6a03 	vldr	s12, [r7, #12]
 800812e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800814a:	e065      	b.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800815a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815e:	4b59      	ldr	r3, [pc, #356]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008172:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800818e:	e043      	b.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800819e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a2:	4b48      	ldr	r3, [pc, #288]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081d2:	e021      	b.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e6:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008216:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008218:	4b2a      	ldr	r3, [pc, #168]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	0a5b      	lsrs	r3, r3, #9
 800821e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800822e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008232:	edd7 6a07 	vldr	s13, [r7, #28]
 8008236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800823a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823e:	ee17 2a90 	vmov	r2, s15
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008246:	4b1f      	ldr	r3, [pc, #124]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	0c1b      	lsrs	r3, r3, #16
 800824c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800825c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008260:	edd7 6a07 	vldr	s13, [r7, #28]
 8008264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800826c:	ee17 2a90 	vmov	r2, s15
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008274:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	0e1b      	lsrs	r3, r3, #24
 800827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800828a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800828e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800829a:	ee17 2a90 	vmov	r2, s15
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082a2:	e008      	b.n	80082b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	609a      	str	r2, [r3, #8]
}
 80082b6:	bf00      	nop
 80082b8:	3724      	adds	r7, #36	; 0x24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	58024400 	.word	0x58024400
 80082c8:	03d09000 	.word	0x03d09000
 80082cc:	46000000 	.word	0x46000000
 80082d0:	4c742400 	.word	0x4c742400
 80082d4:	4a742400 	.word	0x4a742400
 80082d8:	4bbebc20 	.word	0x4bbebc20

080082dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80082dc:	b480      	push	{r7}
 80082de:	b089      	sub	sp, #36	; 0x24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082e4:	4ba1      	ldr	r3, [pc, #644]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80082ee:	4b9f      	ldr	r3, [pc, #636]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	0d1b      	lsrs	r3, r3, #20
 80082f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082fa:	4b9c      	ldr	r3, [pc, #624]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008306:	4b99      	ldr	r3, [pc, #612]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	08db      	lsrs	r3, r3, #3
 800830c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	fb02 f303 	mul.w	r3, r2, r3
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8111 	beq.w	800854c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b02      	cmp	r3, #2
 800832e:	f000 8083 	beq.w	8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b02      	cmp	r3, #2
 8008336:	f200 80a1 	bhi.w	800847c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d056      	beq.n	80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008346:	e099      	b.n	800847c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008348:	4b88      	ldr	r3, [pc, #544]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d02d      	beq.n	80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008354:	4b85      	ldr	r3, [pc, #532]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	08db      	lsrs	r3, r3, #3
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	4a84      	ldr	r2, [pc, #528]	; (8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008360:	fa22 f303 	lsr.w	r3, r2, r3
 8008364:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837e:	4b7b      	ldr	r3, [pc, #492]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008392:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083ae:	e087      	b.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c2:	4b6a      	ldr	r3, [pc, #424]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f2:	e065      	b.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800857c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b59      	ldr	r3, [pc, #356]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a03 	vldr	s12, [r7, #12]
 800841a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008436:	e043      	b.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b48      	ldr	r3, [pc, #288]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a03 	vldr	s12, [r7, #12]
 800845e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847a:	e021      	b.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008486:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800857c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800848a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848e:	4b37      	ldr	r3, [pc, #220]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849e:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084c0:	4b2a      	ldr	r3, [pc, #168]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	0a5b      	lsrs	r3, r3, #9
 80084c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084da:	edd7 6a07 	vldr	s13, [r7, #28]
 80084de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e6:	ee17 2a90 	vmov	r2, s15
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80084ee:	4b1f      	ldr	r3, [pc, #124]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008508:	edd7 6a07 	vldr	s13, [r7, #28]
 800850c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008514:	ee17 2a90 	vmov	r2, s15
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800851c:	4b13      	ldr	r3, [pc, #76]	; (800856c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	0e1b      	lsrs	r3, r3, #24
 8008522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008536:	edd7 6a07 	vldr	s13, [r7, #28]
 800853a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800853e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008542:	ee17 2a90 	vmov	r2, s15
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800854a:	e008      	b.n	800855e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	609a      	str	r2, [r3, #8]
}
 800855e:	bf00      	nop
 8008560:	3724      	adds	r7, #36	; 0x24
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	58024400 	.word	0x58024400
 8008570:	03d09000 	.word	0x03d09000
 8008574:	46000000 	.word	0x46000000
 8008578:	4c742400 	.word	0x4c742400
 800857c:	4a742400 	.word	0x4a742400
 8008580:	4bbebc20 	.word	0x4bbebc20

08008584 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008584:	b480      	push	{r7}
 8008586:	b089      	sub	sp, #36	; 0x24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800858c:	4ba0      	ldr	r3, [pc, #640]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008596:	4b9e      	ldr	r3, [pc, #632]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085a2:	4b9b      	ldr	r3, [pc, #620]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085ac:	4b98      	ldr	r3, [pc, #608]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b0:	08db      	lsrs	r3, r3, #3
 80085b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	fb02 f303 	mul.w	r3, r2, r3
 80085bc:	ee07 3a90 	vmov	s15, r3
 80085c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 8111 	beq.w	80087f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	f000 8083 	beq.w	80086de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	f200 80a1 	bhi.w	8008722 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d056      	beq.n	800869a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80085ec:	e099      	b.n	8008722 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ee:	4b88      	ldr	r3, [pc, #544]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d02d      	beq.n	8008656 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085fa:	4b85      	ldr	r3, [pc, #532]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	4a83      	ldr	r2, [pc, #524]	; (8008814 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008606:	fa22 f303 	lsr.w	r3, r2, r3
 800860a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008624:	4b7a      	ldr	r3, [pc, #488]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008634:	ed97 6a03 	vldr	s12, [r7, #12]
 8008638:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800863c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008650:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008654:	e087      	b.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008660:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800881c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008668:	4b69      	ldr	r3, [pc, #420]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008678:	ed97 6a03 	vldr	s12, [r7, #12]
 800867c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008698:	e065      	b.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008820 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80086a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ac:	4b58      	ldr	r3, [pc, #352]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b4:	ee07 3a90 	vmov	s15, r3
 80086b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086dc:	e043      	b.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	ee07 3a90 	vmov	s15, r3
 80086e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008824 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80086ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f0:	4b47      	ldr	r3, [pc, #284]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008700:	ed97 6a03 	vldr	s12, [r7, #12]
 8008704:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008720:	e021      	b.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	ee07 3a90 	vmov	s15, r3
 8008728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800881c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008734:	4b36      	ldr	r3, [pc, #216]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008744:	ed97 6a03 	vldr	s12, [r7, #12]
 8008748:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800874c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008764:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008766:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	0a5b      	lsrs	r3, r3, #9
 800876c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800877c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008780:	edd7 6a07 	vldr	s13, [r7, #28]
 8008784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800878c:	ee17 2a90 	vmov	r2, s15
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008794:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	0c1b      	lsrs	r3, r3, #16
 800879a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ba:	ee17 2a90 	vmov	r2, s15
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80087c2:	4b13      	ldr	r3, [pc, #76]	; (8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	0e1b      	lsrs	r3, r3, #24
 80087c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80087e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e8:	ee17 2a90 	vmov	r2, s15
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80087f0:	e008      	b.n	8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	609a      	str	r2, [r3, #8]
}
 8008804:	bf00      	nop
 8008806:	3724      	adds	r7, #36	; 0x24
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	58024400 	.word	0x58024400
 8008814:	03d09000 	.word	0x03d09000
 8008818:	46000000 	.word	0x46000000
 800881c:	4c742400 	.word	0x4c742400
 8008820:	4a742400 	.word	0x4a742400
 8008824:	4bbebc20 	.word	0x4bbebc20

08008828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008836:	4b53      	ldr	r3, [pc, #332]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b03      	cmp	r3, #3
 8008840:	d101      	bne.n	8008846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e099      	b.n	800897a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008846:	4b4f      	ldr	r3, [pc, #316]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a4e      	ldr	r2, [pc, #312]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800884c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008852:	f7f9 f8cd 	bl	80019f0 <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008858:	e008      	b.n	800886c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800885a:	f7f9 f8c9 	bl	80019f0 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e086      	b.n	800897a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800886c:	4b45      	ldr	r3, [pc, #276]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f0      	bne.n	800885a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008878:	4b42      	ldr	r3, [pc, #264]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	031b      	lsls	r3, r3, #12
 8008886:	493f      	ldr	r1, [pc, #252]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008888:	4313      	orrs	r3, r2
 800888a:	628b      	str	r3, [r1, #40]	; 0x28
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	3b01      	subs	r3, #1
 8008892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	3b01      	subs	r3, #1
 800889c:	025b      	lsls	r3, r3, #9
 800889e:	b29b      	uxth	r3, r3
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	061b      	lsls	r3, r3, #24
 80088b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088bc:	4931      	ldr	r1, [pc, #196]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088c2:	4b30      	ldr	r3, [pc, #192]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	492d      	ldr	r1, [pc, #180]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088d4:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	f023 0220 	bic.w	r2, r3, #32
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	4928      	ldr	r1, [pc, #160]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088e6:	4b27      	ldr	r3, [pc, #156]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	4a26      	ldr	r2, [pc, #152]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	f023 0310 	bic.w	r3, r3, #16
 80088f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088f6:	4b24      	ldr	r3, [pc, #144]	; (8008988 <RCCEx_PLL2_Config+0x160>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	69d2      	ldr	r2, [r2, #28]
 80088fe:	00d2      	lsls	r2, r2, #3
 8008900:	4920      	ldr	r1, [pc, #128]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008906:	4b1f      	ldr	r3, [pc, #124]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800890c:	f043 0310 	orr.w	r3, r3, #16
 8008910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008918:	4b1a      	ldr	r3, [pc, #104]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4a19      	ldr	r2, [pc, #100]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800891e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008924:	e00f      	b.n	8008946 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800892c:	4b15      	ldr	r3, [pc, #84]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	4a14      	ldr	r2, [pc, #80]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008938:	e005      	b.n	8008946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800893a:	4b12      	ldr	r3, [pc, #72]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	4a11      	ldr	r2, [pc, #68]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008946:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a0e      	ldr	r2, [pc, #56]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800894c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008952:	f7f9 f84d 	bl	80019f0 <HAL_GetTick>
 8008956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008958:	e008      	b.n	800896c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800895a:	f7f9 f849 	bl	80019f0 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e006      	b.n	800897a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	58024400 	.word	0x58024400
 8008988:	ffff0007 	.word	0xffff0007

0800898c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800899a:	4b53      	ldr	r3, [pc, #332]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d101      	bne.n	80089aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e099      	b.n	8008ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089aa:	4b4f      	ldr	r3, [pc, #316]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a4e      	ldr	r2, [pc, #312]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b6:	f7f9 f81b 	bl	80019f0 <HAL_GetTick>
 80089ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089bc:	e008      	b.n	80089d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089be:	f7f9 f817 	bl	80019f0 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e086      	b.n	8008ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089d0:	4b45      	ldr	r3, [pc, #276]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f0      	bne.n	80089be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089dc:	4b42      	ldr	r3, [pc, #264]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	051b      	lsls	r3, r3, #20
 80089ea:	493f      	ldr	r1, [pc, #252]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	628b      	str	r3, [r1, #40]	; 0x28
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	025b      	lsls	r3, r3, #9
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	061b      	lsls	r3, r3, #24
 8008a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a20:	4931      	ldr	r1, [pc, #196]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a26:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	492d      	ldr	r1, [pc, #180]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a38:	4b2b      	ldr	r3, [pc, #172]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	4928      	ldr	r1, [pc, #160]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a4a:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a56:	4b24      	ldr	r3, [pc, #144]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <RCCEx_PLL3_Config+0x160>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	69d2      	ldr	r2, [r2, #28]
 8008a62:	00d2      	lsls	r2, r2, #3
 8008a64:	4920      	ldr	r1, [pc, #128]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a6a:	4b1f      	ldr	r3, [pc, #124]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a88:	e00f      	b.n	8008aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d106      	bne.n	8008a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a90:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	4a14      	ldr	r2, [pc, #80]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a9c:	e005      	b.n	8008aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	4a11      	ldr	r2, [pc, #68]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a0e      	ldr	r2, [pc, #56]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab6:	f7f8 ff9b 	bl	80019f0 <HAL_GetTick>
 8008aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008abc:	e008      	b.n	8008ad0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008abe:	f7f8 ff97 	bl	80019f0 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e006      	b.n	8008ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f0      	beq.n	8008abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	ffff0007 	.word	0xffff0007

08008af0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e075      	b.n	8008bee <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d105      	bne.n	8008b1a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7f8 fd37 	bl	8001588 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f868 	bl	8008bf8 <HAL_SD_InitCard>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e05d      	b.n	8008bee <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fdb5 	bl	80096a8 <HAL_SD_GetCardStatus>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e052      	b.n	8008bee <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008b48:	7e3b      	ldrb	r3, [r7, #24]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008b4e:	7e7b      	ldrb	r3, [r7, #25]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d10a      	bne.n	8008b72 <HAL_SD_Init+0x82>
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <HAL_SD_Init+0x78>
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8008b70:	e00b      	b.n	8008b8a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d104      	bne.n	8008b84 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b80:	659a      	str	r2, [r3, #88]	; 0x58
 8008b82:	e002      	b.n	8008b8a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fe73 	bl	800987c <HAL_SD_ConfigWideBusOperation>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e026      	b.n	8008bee <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008ba0:	f7f8 ff26 	bl	80019f0 <HAL_GetTick>
 8008ba4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ba6:	e011      	b.n	8008bcc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ba8:	f7f8 ff22 	bl	80019f0 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d109      	bne.n	8008bcc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bbe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e010      	b.n	8008bee <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 ff67 	bl	8009aa0 <HAL_SD_GetCardState>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d1e7      	bne.n	8008ba8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3728      	adds	r7, #40	; 0x28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b08d      	sub	sp, #52	; 0x34
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c10:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c14:	f04f 0100 	mov.w	r1, #0
 8008c18:	f7fe fc76 	bl	8007508 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c1c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d109      	bne.n	8008c38 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c32:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e070      	b.n	8008d1a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	4a39      	ldr	r2, [pc, #228]	; (8008d24 <HAL_SD_InitCard+0x12c>)
 8008c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c42:	091b      	lsrs	r3, r3, #4
 8008c44:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681c      	ldr	r4, [r3, #0]
 8008c4a:	466a      	mov	r2, sp
 8008c4c:	f107 0318 	add.w	r3, r7, #24
 8008c50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c54:	e882 0003 	stmia.w	r2, {r0, r1}
 8008c58:	f107 030c 	add.w	r3, r7, #12
 8008c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f002 fbce 	bl	800b400 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f002 fc11 	bl	800b490 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008c86:	4a28      	ldr	r2, [pc, #160]	; (8008d28 <HAL_SD_InitCard+0x130>)
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8e:	3301      	adds	r3, #1
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f8 feb9 	bl	8001a08 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fff0 	bl	8009c7c <SD_PowerON>
 8008c9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e02e      	b.n	8008d1a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 ff0f 	bl	8009ae0 <SD_InitCard>
 8008cc2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e01b      	b.n	8008d1a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cea:	4618      	mov	r0, r3
 8008cec:	f002 fc66 	bl	800b5bc <SDMMC_CmdBlockLength>
 8008cf0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00f      	beq.n	8008d18 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a0b      	ldr	r2, [pc, #44]	; (8008d2c <HAL_SD_InitCard+0x134>)
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e000      	b.n	8008d1a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	372c      	adds	r7, #44	; 0x2c
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd90      	pop	{r4, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	014f8b59 	.word	0x014f8b59
 8008d28:	00012110 	.word	0x00012110
 8008d2c:	1fe00fff 	.word	0x1fe00fff

08008d30 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b092      	sub	sp, #72	; 0x48
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d3e:	f7f8 fe57 	bl	80019f0 <HAL_GetTick>
 8008d42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d107      	bne.n	8008d62 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e167      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	f040 815a 	bne.w	8009024 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	441a      	add	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d907      	bls.n	8008d94 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e14e      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2203      	movs	r2, #3
 8008d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2200      	movs	r2, #0
 8008da2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d002      	beq.n	8008db2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	025b      	lsls	r3, r3, #9
 8008db0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008db2:	f04f 33ff 	mov.w	r3, #4294967295
 8008db6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	025b      	lsls	r3, r3, #9
 8008dbc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008dbe:	2390      	movs	r3, #144	; 0x90
 8008dc0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f107 0214 	add.w	r2, r7, #20
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f002 fbc3 	bl	800b564 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dec:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d90a      	bls.n	8008e0a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2202      	movs	r2, #2
 8008df8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e00:	4618      	mov	r0, r3
 8008e02:	f002 fc21 	bl	800b648 <SDMMC_CmdReadMultiBlock>
 8008e06:	6478      	str	r0, [r7, #68]	; 0x44
 8008e08:	e009      	b.n	8008e1e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e16:	4618      	mov	r0, r3
 8008e18:	f002 fbf3 	bl	800b602 <SDMMC_CmdReadSingleBlock>
 8008e1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d012      	beq.n	8008e4a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a84      	ldr	r2, [pc, #528]	; (800903c <HAL_SD_ReadBlocks+0x30c>)
 8008e2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e32:	431a      	orrs	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e0f3      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e4e:	e058      	b.n	8008f02 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d033      	beq.n	8008ec6 <HAL_SD_ReadBlocks+0x196>
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e60:	2b1f      	cmp	r3, #31
 8008e62:	d930      	bls.n	8008ec6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008e64:	2300      	movs	r3, #0
 8008e66:	643b      	str	r3, [r7, #64]	; 0x40
 8008e68:	e027      	b.n	8008eba <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f002 faf0 	bl	800b454 <SDMMC_ReadFIFO>
 8008e74:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	3301      	adds	r3, #1
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e90:	3301      	adds	r3, #1
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	0c1b      	lsrs	r3, r3, #16
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	0e1b      	lsrs	r3, r3, #24
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ebc:	2b07      	cmp	r3, #7
 8008ebe:	d9d4      	bls.n	8008e6a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec2:	3b20      	subs	r3, #32
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008ec6:	f7f8 fd93 	bl	80019f0 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d902      	bls.n	8008edc <HAL_SD_ReadBlocks+0x1ac>
 8008ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d112      	bne.n	8008f02 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a56      	ldr	r2, [pc, #344]	; (800903c <HAL_SD_ReadBlocks+0x30c>)
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e097      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f08:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d09f      	beq.n	8008e50 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f1e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d022      	beq.n	8008f74 <HAL_SD_ReadBlocks+0x244>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d91f      	bls.n	8008f74 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d01b      	beq.n	8008f74 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 fbeb 	bl	800b71c <SDMMC_CmdStopTransfer>
 8008f46:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d012      	beq.n	8008f74 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a3a      	ldr	r2, [pc, #232]	; (800903c <HAL_SD_ReadBlocks+0x30c>)
 8008f54:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e05e      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7a:	f003 0308 	and.w	r3, r3, #8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d012      	beq.n	8008fa8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a2d      	ldr	r2, [pc, #180]	; (800903c <HAL_SD_ReadBlocks+0x30c>)
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8e:	f043 0208 	orr.w	r2, r3, #8
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e044      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d012      	beq.n	8008fdc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a20      	ldr	r2, [pc, #128]	; (800903c <HAL_SD_ReadBlocks+0x30c>)
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc2:	f043 0202 	orr.w	r2, r3, #2
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e02a      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d012      	beq.n	8009010 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a13      	ldr	r2, [pc, #76]	; (800903c <HAL_SD_ReadBlocks+0x30c>)
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	f043 0220 	orr.w	r2, r3, #32
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e010      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <HAL_SD_ReadBlocks+0x310>)
 8009016:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	e006      	b.n	8009032 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009028:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
  }
}
 8009032:	4618      	mov	r0, r3
 8009034:	3748      	adds	r7, #72	; 0x48
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	1fe00fff 	.word	0x1fe00fff
 8009040:	18000f3a 	.word	0x18000f3a

08009044 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b092      	sub	sp, #72	; 0x48
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009052:	f7f8 fccd 	bl	80019f0 <HAL_GetTick>
 8009056:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d107      	bne.n	8009076 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e16b      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b01      	cmp	r3, #1
 8009080:	f040 815e 	bne.w	8009340 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800908a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	441a      	add	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	429a      	cmp	r2, r3
 8009096:	d907      	bls.n	80090a8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e152      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2203      	movs	r2, #3
 80090ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2200      	movs	r2, #0
 80090b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d002      	beq.n	80090c6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	025b      	lsls	r3, r3, #9
 80090c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090c6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	025b      	lsls	r3, r3, #9
 80090d0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090d2:	2390      	movs	r3, #144	; 0x90
 80090d4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090d6:	2300      	movs	r3, #0
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090da:	2300      	movs	r3, #0
 80090dc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80090de:	2300      	movs	r3, #0
 80090e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f107 0218 	add.w	r2, r7, #24
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f002 fa39 	bl	800b564 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009100:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d90a      	bls.n	800911e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009114:	4618      	mov	r0, r3
 8009116:	f002 fadd 	bl	800b6d4 <SDMMC_CmdWriteMultiBlock>
 800911a:	6478      	str	r0, [r7, #68]	; 0x44
 800911c:	e009      	b.n	8009132 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2210      	movs	r2, #16
 8009122:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800912a:	4618      	mov	r0, r3
 800912c:	f002 faaf 	bl	800b68e <SDMMC_CmdWriteSingleBlock>
 8009130:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009134:	2b00      	cmp	r3, #0
 8009136:	d012      	beq.n	800915e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a86      	ldr	r2, [pc, #536]	; (8009358 <HAL_SD_WriteBlocks+0x314>)
 800913e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009146:	431a      	orrs	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e0f7      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009162:	e05c      	b.n	800921e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d037      	beq.n	80091e2 <HAL_SD_WriteBlocks+0x19e>
 8009172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009174:	2b1f      	cmp	r3, #31
 8009176:	d934      	bls.n	80091e2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8009178:	2300      	movs	r3, #0
 800917a:	643b      	str	r3, [r7, #64]	; 0x40
 800917c:	e02b      	b.n	80091d6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800917e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	3301      	adds	r3, #1
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	021a      	lsls	r2, r3, #8
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009198:	3301      	adds	r3, #1
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800919c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	041a      	lsls	r2, r3, #16
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091aa:	3301      	adds	r3, #1
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80091ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	061a      	lsls	r2, r3, #24
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091bc:	3301      	adds	r3, #1
 80091be:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f107 0214 	add.w	r2, r7, #20
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 f94f 	bl	800b46e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80091d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d2:	3301      	adds	r3, #1
 80091d4:	643b      	str	r3, [r7, #64]	; 0x40
 80091d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d8:	2b07      	cmp	r3, #7
 80091da:	d9d0      	bls.n	800917e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	3b20      	subs	r3, #32
 80091e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80091e2:	f7f8 fc05 	bl	80019f0 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d902      	bls.n	80091f8 <HAL_SD_WriteBlocks+0x1b4>
 80091f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d112      	bne.n	800921e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a56      	ldr	r2, [pc, #344]	; (8009358 <HAL_SD_WriteBlocks+0x314>)
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009206:	431a      	orrs	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e097      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009224:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009228:	2b00      	cmp	r3, #0
 800922a:	d09b      	beq.n	8009164 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009246:	2b00      	cmp	r3, #0
 8009248:	d022      	beq.n	8009290 <HAL_SD_WriteBlocks+0x24c>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d91f      	bls.n	8009290 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009254:	2b03      	cmp	r3, #3
 8009256:	d01b      	beq.n	8009290 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4618      	mov	r0, r3
 800925e:	f002 fa5d 	bl	800b71c <SDMMC_CmdStopTransfer>
 8009262:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009266:	2b00      	cmp	r3, #0
 8009268:	d012      	beq.n	8009290 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <HAL_SD_WriteBlocks+0x314>)
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009278:	431a      	orrs	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e05e      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	f003 0308 	and.w	r3, r3, #8
 800929a:	2b00      	cmp	r3, #0
 800929c:	d012      	beq.n	80092c4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a2d      	ldr	r2, [pc, #180]	; (8009358 <HAL_SD_WriteBlocks+0x314>)
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092aa:	f043 0208 	orr.w	r2, r3, #8
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e044      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d012      	beq.n	80092f8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a20      	ldr	r2, [pc, #128]	; (8009358 <HAL_SD_WriteBlocks+0x314>)
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	f043 0202 	orr.w	r2, r3, #2
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e02a      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	f003 0310 	and.w	r3, r3, #16
 8009302:	2b00      	cmp	r3, #0
 8009304:	d012      	beq.n	800932c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a13      	ldr	r2, [pc, #76]	; (8009358 <HAL_SD_WriteBlocks+0x314>)
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009312:	f043 0210 	orr.w	r2, r3, #16
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e010      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a0a      	ldr	r2, [pc, #40]	; (800935c <HAL_SD_WriteBlocks+0x318>)
 8009332:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	e006      	b.n	800934e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
  }
}
 800934e:	4618      	mov	r0, r3
 8009350:	3748      	adds	r7, #72	; 0x48
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	1fe00fff 	.word	0x1fe00fff
 800935c:	18000f3a 	.word	0x18000f3a

08009360 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936e:	0f9b      	lsrs	r3, r3, #30
 8009370:	b2da      	uxtb	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937a:	0e9b      	lsrs	r3, r3, #26
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	b2da      	uxtb	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938c:	0e1b      	lsrs	r3, r3, #24
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	b2da      	uxtb	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c0:	0d1b      	lsrs	r3, r3, #20
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093de:	0bdb      	lsrs	r3, r3, #15
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f0:	0b9b      	lsrs	r3, r3, #14
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009402:	0b5b      	lsrs	r3, r3, #13
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	b2da      	uxtb	r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009414:	0b1b      	lsrs	r3, r3, #12
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	b2da      	uxtb	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2200      	movs	r2, #0
 8009426:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	2b00      	cmp	r3, #0
 800942e:	d163      	bne.n	80094f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009434:	009a      	lsls	r2, r3, #2
 8009436:	f640 73fc 	movw	r3, #4092	; 0xffc
 800943a:	4013      	ands	r3, r2
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009440:	0f92      	lsrs	r2, r2, #30
 8009442:	431a      	orrs	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800944c:	0edb      	lsrs	r3, r3, #27
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	b2da      	uxtb	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800945e:	0e1b      	lsrs	r3, r3, #24
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b2da      	uxtb	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009470:	0d5b      	lsrs	r3, r3, #21
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	b2da      	uxtb	r2, r3
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009482:	0c9b      	lsrs	r3, r3, #18
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	b2da      	uxtb	r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009494:	0bdb      	lsrs	r3, r3, #15
 8009496:	b2db      	uxtb	r3, r3
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	b2da      	uxtb	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	7e1b      	ldrb	r3, [r3, #24]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	3302      	adds	r3, #2
 80094b8:	2201      	movs	r2, #1
 80094ba:	fa02 f303 	lsl.w	r3, r2, r3
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094c2:	fb03 f202 	mul.w	r2, r3, r2
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	7a1b      	ldrb	r3, [r3, #8]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	2201      	movs	r2, #1
 80094d6:	409a      	lsls	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80094e4:	0a52      	lsrs	r2, r2, #9
 80094e6:	fb03 f202 	mul.w	r2, r3, r2
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094f4:	655a      	str	r2, [r3, #84]	; 0x54
 80094f6:	e031      	b.n	800955c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d11d      	bne.n	800953c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009504:	041b      	lsls	r3, r3, #16
 8009506:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950e:	0c1b      	lsrs	r3, r3, #16
 8009510:	431a      	orrs	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	3301      	adds	r3, #1
 800951c:	029a      	lsls	r2, r3, #10
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009530:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	655a      	str	r2, [r3, #84]	; 0x54
 800953a:	e00f      	b.n	800955c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a58      	ldr	r2, [pc, #352]	; (80096a4 <HAL_SD_GetCardCSD+0x344>)
 8009542:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009548:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e09d      	b.n	8009698 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009560:	0b9b      	lsrs	r3, r3, #14
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	b2da      	uxtb	r2, r3
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009572:	09db      	lsrs	r3, r3, #7
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958a:	b2da      	uxtb	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009594:	0fdb      	lsrs	r3, r3, #31
 8009596:	b2da      	uxtb	r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095a0:	0f5b      	lsrs	r3, r3, #29
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b2:	0e9b      	lsrs	r3, r3, #26
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c4:	0d9b      	lsrs	r3, r3, #22
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d6:	0d5b      	lsrs	r3, r3, #21
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009606:	0bdb      	lsrs	r3, r3, #15
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800961a:	0b9b      	lsrs	r3, r3, #14
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800962e:	0b5b      	lsrs	r3, r3, #13
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009642:	0b1b      	lsrs	r3, r3, #12
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009656:	0a9b      	lsrs	r3, r3, #10
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800967e:	085b      	lsrs	r3, r3, #1
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	1fe00fff 	.word	0x1fe00fff

080096a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b094      	sub	sp, #80	; 0x50
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d101      	bne.n	80096c8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0a7      	b.n	8009818 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80096c8:	f107 0308 	add.w	r3, r7, #8
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fb62 	bl	8009d98 <SD_SendSDStatus>
 80096d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d011      	beq.n	8009700 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a4f      	ldr	r2, [pc, #316]	; (8009820 <HAL_SD_GetCardStatus+0x178>)
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80096fe:	e070      	b.n	80097e2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	099b      	lsrs	r3, r3, #6
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	b2da      	uxtb	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	b2db      	uxtb	r3, r3
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	b29b      	uxth	r3, r3
 8009726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800972a:	b29a      	uxth	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	0e1b      	lsrs	r3, r3, #24
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	061a      	lsls	r2, r3, #24
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	021b      	lsls	r3, r3, #8
 8009742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009746:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009750:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	0e1b      	lsrs	r3, r3, #24
 8009756:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	b2da      	uxtb	r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	0a1b      	lsrs	r3, r3, #8
 8009768:	b2da      	uxtb	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	0d1b      	lsrs	r3, r3, #20
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	b2da      	uxtb	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	0c1b      	lsrs	r3, r3, #16
 8009782:	b29b      	uxth	r3, r3
 8009784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009788:	b29a      	uxth	r2, r3
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	b29b      	uxth	r3, r3
 800978e:	b2db      	uxtb	r3, r3
 8009790:	b29b      	uxth	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b29a      	uxth	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	0a9b      	lsrs	r3, r3, #10
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	0a1b      	lsrs	r3, r3, #8
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	091b      	lsrs	r3, r3, #4
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 030f 	and.w	r3, r3, #15
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	0e1b      	lsrs	r3, r3, #24
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 fee6 	bl	800b5bc <SDMMC_CmdBlockLength>
 80097f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80097f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00d      	beq.n	8009814 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a08      	ldr	r2, [pc, #32]	; (8009820 <HAL_SD_GetCardStatus+0x178>)
 80097fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009804:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009814:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009818:	4618      	mov	r0, r3
 800981a:	3750      	adds	r7, #80	; 0x50
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	1fe00fff 	.word	0x1fe00fff

08009824 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b08d      	sub	sp, #52	; 0x34
 8009880:	af02      	add	r7, sp, #8
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2203      	movs	r2, #3
 8009890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	2b03      	cmp	r3, #3
 800989a:	d02e      	beq.n	80098fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a2:	d106      	bne.n	80098b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	635a      	str	r2, [r3, #52]	; 0x34
 80098b0:	e029      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b8:	d10a      	bne.n	80098d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fb64 	bl	8009f88 <SD_WideBus_Enable>
 80098c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	635a      	str	r2, [r3, #52]	; 0x34
 80098ce:	e01a      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fba1 	bl	800a01e <SD_WideBus_Disable>
 80098dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	635a      	str	r2, [r3, #52]	; 0x34
 80098ea:	e00c      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	635a      	str	r2, [r3, #52]	; 0x34
 80098f8:	e005      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990a:	2b00      	cmp	r3, #0
 800990c:	d007      	beq.n	800991e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a5f      	ldr	r2, [pc, #380]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800991c:	e096      	b.n	8009a4c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800991e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009922:	f04f 0100 	mov.w	r1, #0
 8009926:	f7fd fdef 	bl	8007508 <HAL_RCCEx_GetPeriphCLKFreq>
 800992a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 8083 	beq.w	8009a3a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695a      	ldr	r2, [r3, #20]
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4950      	ldr	r1, [pc, #320]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009952:	fba1 1303 	umull	r1, r3, r1, r3
 8009956:	0e1b      	lsrs	r3, r3, #24
 8009958:	429a      	cmp	r2, r3
 800995a:	d303      	bcc.n	8009964 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	61bb      	str	r3, [r7, #24]
 8009962:	e05a      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800996c:	d103      	bne.n	8009976 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	e051      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997e:	d126      	bne.n	80099ce <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10e      	bne.n	80099a6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4a43      	ldr	r2, [pc, #268]	; (8009a98 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d906      	bls.n	800999e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	4a40      	ldr	r2, [pc, #256]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009994:	fba2 2303 	umull	r2, r3, r2, r3
 8009998:	0e5b      	lsrs	r3, r3, #25
 800999a:	61bb      	str	r3, [r7, #24]
 800999c:	e03d      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	e039      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b2:	4a39      	ldr	r2, [pc, #228]	; (8009a98 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d906      	bls.n	80099c6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4a36      	ldr	r2, [pc, #216]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099bc:	fba2 2303 	umull	r2, r3, r2, r3
 80099c0:	0e5b      	lsrs	r3, r3, #25
 80099c2:	61bb      	str	r3, [r7, #24]
 80099c4:	e029      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	e025      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10e      	bne.n	80099f4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	4a30      	ldr	r2, [pc, #192]	; (8009a9c <HAL_SD_ConfigWideBusOperation+0x220>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d906      	bls.n	80099ec <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4a2c      	ldr	r2, [pc, #176]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	0e1b      	lsrs	r3, r3, #24
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	e016      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	61bb      	str	r3, [r7, #24]
 80099f2:	e012      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a00:	4a26      	ldr	r2, [pc, #152]	; (8009a9c <HAL_SD_ConfigWideBusOperation+0x220>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d906      	bls.n	8009a14 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	4a22      	ldr	r2, [pc, #136]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	0e1b      	lsrs	r3, r3, #24
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	e002      	b.n	8009a1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681c      	ldr	r4, [r3, #0]
 8009a1e:	466a      	mov	r2, sp
 8009a20:	f107 0314 	add.w	r3, r7, #20
 8009a24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a28:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a32:	4620      	mov	r0, r4
 8009a34:	f001 fce4 	bl	800b400 <SDMMC_Init>
 8009a38:	e008      	b.n	8009a4c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 fdb1 	bl	800b5bc <SDMMC_CmdBlockLength>
 8009a5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00c      	beq.n	8009a7c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	431a      	orrs	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	372c      	adds	r7, #44	; 0x2c
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}
 8009a90:	1fe00fff 	.word	0x1fe00fff
 8009a94:	55e63b89 	.word	0x55e63b89
 8009a98:	02faf080 	.word	0x02faf080
 8009a9c:	017d7840 	.word	0x017d7840

08009aa0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa40 	bl	8009f38 <SD_SendStatus>
 8009ab8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	0a5b      	lsrs	r3, r3, #9
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ad6:	693b      	ldr	r3, [r7, #16]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b090      	sub	sp, #64	; 0x40
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009aec:	f7f7 ff80 	bl	80019f0 <HAL_GetTick>
 8009af0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fcdb 	bl	800b4b2 <SDMMC_GetPowerState>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b06:	e0b5      	b.n	8009c74 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d02e      	beq.n	8009b6e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 ff26 	bl	800b966 <SDMMC_CmdSendCID>
 8009b1a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <SD_InitCard+0x46>
    {
      return errorstate;
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	e0a6      	b.n	8009c74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 fd06 	bl	800b53e <SDMMC_GetResponse>
 8009b32:	4602      	mov	r2, r0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2104      	movs	r1, #4
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 fcfd 	bl	800b53e <SDMMC_GetResponse>
 8009b44:	4602      	mov	r2, r0
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2108      	movs	r1, #8
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fcf4 	bl	800b53e <SDMMC_GetResponse>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	210c      	movs	r1, #12
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fceb 	bl	800b53e <SDMMC_GetResponse>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d01d      	beq.n	8009bb2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009b76:	e019      	b.n	8009bac <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f107 020a 	add.w	r2, r7, #10
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 ff2e 	bl	800b9e4 <SDMMC_CmdSetRelAdd>
 8009b88:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	e06f      	b.n	8009c74 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b94:	f7f7 ff2c 	bl	80019f0 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	f241 3287 	movw	r2, #4999	; 0x1387
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d902      	bls.n	8009bac <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009ba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009baa:	e063      	b.n	8009c74 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009bac:	897b      	ldrh	r3, [r7, #10]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0e2      	beq.n	8009b78 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d036      	beq.n	8009c28 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bba:	897b      	ldrh	r3, [r7, #10]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bca:	041b      	lsls	r3, r3, #16
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f001 fee8 	bl	800b9a4 <SDMMC_CmdSendCSD>
 8009bd4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <SD_InitCard+0x100>
    {
      return errorstate;
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	e049      	b.n	8009c74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2100      	movs	r1, #0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fca9 	bl	800b53e <SDMMC_GetResponse>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2104      	movs	r1, #4
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fca0 	bl	800b53e <SDMMC_GetResponse>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2108      	movs	r1, #8
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 fc97 	bl	800b53e <SDMMC_GetResponse>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	210c      	movs	r1, #12
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 fc8e 	bl	800b53e <SDMMC_GetResponse>
 8009c22:	4602      	mov	r2, r0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2104      	movs	r1, #4
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 fc85 	bl	800b53e <SDMMC_GetResponse>
 8009c34:	4603      	mov	r3, r0
 8009c36:	0d1a      	lsrs	r2, r3, #20
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c3c:	f107 030c 	add.w	r3, r7, #12
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7ff fb8c 	bl	8009360 <HAL_SD_GetCardCSD>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c52:	e00f      	b.n	8009c74 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5c:	041b      	lsls	r3, r3, #16
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4610      	mov	r0, r2
 8009c62:	f001 fd97 	bl	800b794 <SDMMC_CmdSelDesel>
 8009c66:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <SD_InitCard+0x192>
  {
    return errorstate;
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	e000      	b.n	8009c74 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3740      	adds	r7, #64	; 0x40
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 fda0 	bl	800b7da <SDMMC_CmdGoIdleState>
 8009c9a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	e072      	b.n	8009d8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 fdb3 	bl	800b816 <SDMMC_CmdOperCond>
 8009cb0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cb8:	d10d      	bne.n	8009cd6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 fd88 	bl	800b7da <SDMMC_CmdGoIdleState>
 8009cca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <SD_PowerON+0x60>
    {
      return errorstate;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	e05a      	b.n	8009d8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d137      	bne.n	8009d54 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 fdb3 	bl	800b856 <SDMMC_CmdAppCommand>
 8009cf0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d02d      	beq.n	8009d54 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cfc:	e046      	b.n	8009d8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2100      	movs	r1, #0
 8009d04:	4618      	mov	r0, r3
 8009d06:	f001 fda6 	bl	800b856 <SDMMC_CmdAppCommand>
 8009d0a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	e03a      	b.n	8009d8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	491e      	ldr	r1, [pc, #120]	; (8009d94 <SD_PowerON+0x118>)
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fdbd 	bl	800b89c <SDMMC_CmdAppOperCommand>
 8009d22:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d2e:	e02d      	b.n	8009d8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f001 fc01 	bl	800b53e <SDMMC_GetResponse>
 8009d3c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	0fdb      	lsrs	r3, r3, #31
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d101      	bne.n	8009d4a <SD_PowerON+0xce>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e000      	b.n	8009d4c <SD_PowerON+0xd0>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	613b      	str	r3, [r7, #16]

    count++;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d802      	bhi.n	8009d64 <SD_PowerON+0xe8>
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0cc      	beq.n	8009cfe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d902      	bls.n	8009d74 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d72:	e00b      	b.n	8009d8c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	c1100000 	.word	0xc1100000

08009d98 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08c      	sub	sp, #48	; 0x30
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009da2:	f7f7 fe25 	bl	80019f0 <HAL_GetTick>
 8009da6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 fbc3 	bl	800b53e <SDMMC_GetResponse>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dc2:	d102      	bne.n	8009dca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc8:	e0b0      	b.n	8009f2c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2140      	movs	r1, #64	; 0x40
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 fbf3 	bl	800b5bc <SDMMC_CmdBlockLength>
 8009dd6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d005      	beq.n	8009dea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	e0a0      	b.n	8009f2c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f001 fd2d 	bl	800b856 <SDMMC_CmdAppCommand>
 8009dfc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	e08d      	b.n	8009f2c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295
 8009e14:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009e16:	2340      	movs	r3, #64	; 0x40
 8009e18:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009e1a:	2360      	movs	r3, #96	; 0x60
 8009e1c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e26:	2301      	movs	r3, #1
 8009e28:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f107 0208 	add.w	r2, r7, #8
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 fb95 	bl	800b564 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fe15 	bl	800ba6e <SDMMC_CmdStatusRegister>
 8009e44:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02b      	beq.n	8009ea4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	e069      	b.n	8009f2c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d013      	beq.n	8009e8e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009e66:	2300      	movs	r3, #0
 8009e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e6a:	e00d      	b.n	8009e88 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f001 faef 	bl	800b454 <SDMMC_ReadFIFO>
 8009e76:	4602      	mov	r2, r0
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	601a      	str	r2, [r3, #0]
        pData++;
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	3304      	adds	r3, #4
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e84:	3301      	adds	r3, #1
 8009e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	d9ee      	bls.n	8009e6c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e8e:	f7f7 fdaf 	bl	80019f0 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9c:	d102      	bne.n	8009ea4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ea2:	e043      	b.n	8009f2c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eaa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0d2      	beq.n	8009e58 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	e033      	b.n	8009f2c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e02a      	b.n	8009f2c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d017      	beq.n	8009f14 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ee4:	2320      	movs	r3, #32
 8009ee6:	e021      	b.n	8009f2c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fab1 	bl	800b454 <SDMMC_ReadFIFO>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	601a      	str	r2, [r3, #0]
    pData++;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	3304      	adds	r3, #4
 8009efc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009efe:	f7f7 fd77 	bl	80019f0 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d102      	bne.n	8009f14 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f12:	e00b      	b.n	8009f2c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1e2      	bne.n	8009ee8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a03      	ldr	r2, [pc, #12]	; (8009f34 <SD_SendSDStatus+0x19c>)
 8009f28:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3730      	adds	r7, #48	; 0x30
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	18000f3a 	.word	0x18000f3a

08009f38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f4c:	e018      	b.n	8009f80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f001 fd64 	bl	800ba28 <SDMMC_CmdSendStatus>
 8009f60:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	e009      	b.n	8009f80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fae3 	bl	800b53e <SDMMC_GetResponse>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	2300      	movs	r3, #0
 8009f96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 facd 	bl	800b53e <SDMMC_GetResponse>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fae:	d102      	bne.n	8009fb6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fb4:	e02f      	b.n	800a016 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fb6:	f107 030c 	add.w	r3, r7, #12
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f879 	bl	800a0b4 <SD_FindSCR>
 8009fc2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	e023      	b.n	800a016 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d01c      	beq.n	800a012 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe0:	041b      	lsls	r3, r3, #16
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f001 fc36 	bl	800b856 <SDMMC_CmdAppCommand>
 8009fea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	e00f      	b.n	800a016 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2102      	movs	r1, #2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 fc6d 	bl	800b8dc <SDMMC_CmdBusWidth>
 800a002:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	e003      	b.n	800a016 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a00e:	2300      	movs	r3, #0
 800a010:	e001      	b.n	800a016 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b086      	sub	sp, #24
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	2300      	movs	r3, #0
 800a02c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2100      	movs	r1, #0
 800a034:	4618      	mov	r0, r3
 800a036:	f001 fa82 	bl	800b53e <SDMMC_GetResponse>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a044:	d102      	bne.n	800a04c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a046:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a04a:	e02f      	b.n	800a0ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a04c:	f107 030c 	add.w	r3, r7, #12
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f82e 	bl	800a0b4 <SD_FindSCR>
 800a058:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	e023      	b.n	800a0ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01c      	beq.n	800a0a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a076:	041b      	lsls	r3, r3, #16
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f001 fbeb 	bl	800b856 <SDMMC_CmdAppCommand>
 800a080:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	e00f      	b.n	800a0ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2100      	movs	r1, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f001 fc22 	bl	800b8dc <SDMMC_CmdBusWidth>
 800a098:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	e003      	b.n	800a0ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e001      	b.n	800a0ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08e      	sub	sp, #56	; 0x38
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0be:	f7f7 fc97 	bl	80019f0 <HAL_GetTick>
 800a0c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60bb      	str	r3, [r7, #8]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2108      	movs	r1, #8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 fa6e 	bl	800b5bc <SDMMC_CmdBlockLength>
 800a0e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	e0ad      	b.n	800a248 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f001 fbac 	bl	800b856 <SDMMC_CmdAppCommand>
 800a0fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	e09e      	b.n	800a248 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a10a:	f04f 33ff 	mov.w	r3, #4294967295
 800a10e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a110:	2308      	movs	r3, #8
 800a112:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a114:	2330      	movs	r3, #48	; 0x30
 800a116:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a118:	2302      	movs	r3, #2
 800a11a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a120:	2301      	movs	r3, #1
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f107 0210 	add.w	r2, r7, #16
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fa18 	bl	800b564 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fbf2 	bl	800b922 <SDMMC_CmdSendSCR>
 800a13e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	d027      	beq.n	800a196 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	e07e      	b.n	800a248 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d113      	bne.n	800a180 <SD_FindSCR+0xcc>
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d110      	bne.n	800a180 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f001 f976 	bl	800b454 <SDMMC_ReadFIFO>
 800a168:	4603      	mov	r3, r0
 800a16a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f001 f96f 	bl	800b454 <SDMMC_ReadFIFO>
 800a176:	4603      	mov	r3, r0
 800a178:	60fb      	str	r3, [r7, #12]
      index++;
 800a17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17c:	3301      	adds	r3, #1
 800a17e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a180:	f7f7 fc36 	bl	80019f0 <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18e:	d102      	bne.n	800a196 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a190:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a194:	e058      	b.n	800a248 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a19c:	f240 532a 	movw	r3, #1322	; 0x52a
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0d1      	beq.n	800a14a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1bc:	2308      	movs	r3, #8
 800a1be:	e043      	b.n	800a248 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e036      	b.n	800a248 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e0:	f003 0320 	and.w	r3, r3, #32
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	e029      	b.n	800a248 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a15      	ldr	r2, [pc, #84]	; (800a250 <SD_FindSCR+0x19c>)
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	061a      	lsls	r2, r3, #24
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a208:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a212:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	0e1b      	lsrs	r3, r3, #24
 800a218:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	601a      	str	r2, [r3, #0]
    scr++;
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	3304      	adds	r3, #4
 800a222:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	061a      	lsls	r2, r3, #24
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a230:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	0a1b      	lsrs	r3, r3, #8
 800a236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a23a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	0e1b      	lsrs	r3, r3, #24
 800a240:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3738      	adds	r7, #56	; 0x38
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	18000f3a 	.word	0x18000f3a

0800a254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e042      	b.n	800a2ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d106      	bne.n	800a27e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7f7 fa25 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2224      	movs	r2, #36	; 0x24
 800a282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f82c 	bl	800a2f4 <UART_SetConfig>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e022      	b.n	800a2ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fd88 	bl	800adc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0201 	orr.w	r2, r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fe0f 	bl	800af08 <UART_CheckIdleState>
 800a2ea:	4603      	mov	r3, r0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2f8:	b092      	sub	sp, #72	; 0x48
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	431a      	orrs	r2, r3
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	4313      	orrs	r3, r2
 800a31a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4bbe      	ldr	r3, [pc, #760]	; (800a61c <UART_SetConfig+0x328>)
 800a324:	4013      	ands	r3, r2
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a32c:	430b      	orrs	r3, r1
 800a32e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	68da      	ldr	r2, [r3, #12]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4ab3      	ldr	r2, [pc, #716]	; (800a620 <UART_SetConfig+0x32c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d004      	beq.n	800a360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a35c:	4313      	orrs	r3, r2
 800a35e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689a      	ldr	r2, [r3, #8]
 800a366:	4baf      	ldr	r3, [pc, #700]	; (800a624 <UART_SetConfig+0x330>)
 800a368:	4013      	ands	r3, r2
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	6812      	ldr	r2, [r2, #0]
 800a36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a370:	430b      	orrs	r3, r1
 800a372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	f023 010f 	bic.w	r1, r3, #15
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4aa6      	ldr	r2, [pc, #664]	; (800a628 <UART_SetConfig+0x334>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d177      	bne.n	800a484 <UART_SetConfig+0x190>
 800a394:	4ba5      	ldr	r3, [pc, #660]	; (800a62c <UART_SetConfig+0x338>)
 800a396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a39c:	2b28      	cmp	r3, #40	; 0x28
 800a39e:	d86d      	bhi.n	800a47c <UART_SetConfig+0x188>
 800a3a0:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <UART_SetConfig+0xb4>)
 800a3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a6:	bf00      	nop
 800a3a8:	0800a44d 	.word	0x0800a44d
 800a3ac:	0800a47d 	.word	0x0800a47d
 800a3b0:	0800a47d 	.word	0x0800a47d
 800a3b4:	0800a47d 	.word	0x0800a47d
 800a3b8:	0800a47d 	.word	0x0800a47d
 800a3bc:	0800a47d 	.word	0x0800a47d
 800a3c0:	0800a47d 	.word	0x0800a47d
 800a3c4:	0800a47d 	.word	0x0800a47d
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a47d 	.word	0x0800a47d
 800a3d0:	0800a47d 	.word	0x0800a47d
 800a3d4:	0800a47d 	.word	0x0800a47d
 800a3d8:	0800a47d 	.word	0x0800a47d
 800a3dc:	0800a47d 	.word	0x0800a47d
 800a3e0:	0800a47d 	.word	0x0800a47d
 800a3e4:	0800a47d 	.word	0x0800a47d
 800a3e8:	0800a45d 	.word	0x0800a45d
 800a3ec:	0800a47d 	.word	0x0800a47d
 800a3f0:	0800a47d 	.word	0x0800a47d
 800a3f4:	0800a47d 	.word	0x0800a47d
 800a3f8:	0800a47d 	.word	0x0800a47d
 800a3fc:	0800a47d 	.word	0x0800a47d
 800a400:	0800a47d 	.word	0x0800a47d
 800a404:	0800a47d 	.word	0x0800a47d
 800a408:	0800a465 	.word	0x0800a465
 800a40c:	0800a47d 	.word	0x0800a47d
 800a410:	0800a47d 	.word	0x0800a47d
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a47d 	.word	0x0800a47d
 800a41c:	0800a47d 	.word	0x0800a47d
 800a420:	0800a47d 	.word	0x0800a47d
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a46d 	.word	0x0800a46d
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a47d 	.word	0x0800a47d
 800a434:	0800a47d 	.word	0x0800a47d
 800a438:	0800a47d 	.word	0x0800a47d
 800a43c:	0800a47d 	.word	0x0800a47d
 800a440:	0800a47d 	.word	0x0800a47d
 800a444:	0800a47d 	.word	0x0800a47d
 800a448:	0800a475 	.word	0x0800a475
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e222      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a454:	2304      	movs	r3, #4
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e21e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a45c:	2308      	movs	r3, #8
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e21a      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a464:	2310      	movs	r3, #16
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e216      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a46c:	2320      	movs	r3, #32
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e212      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a474:	2340      	movs	r3, #64	; 0x40
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e20e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a482:	e20a      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a69      	ldr	r2, [pc, #420]	; (800a630 <UART_SetConfig+0x33c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d130      	bne.n	800a4f0 <UART_SetConfig+0x1fc>
 800a48e:	4b67      	ldr	r3, [pc, #412]	; (800a62c <UART_SetConfig+0x338>)
 800a490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b05      	cmp	r3, #5
 800a498:	d826      	bhi.n	800a4e8 <UART_SetConfig+0x1f4>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <UART_SetConfig+0x1ac>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4b9 	.word	0x0800a4b9
 800a4a4:	0800a4c1 	.word	0x0800a4c1
 800a4a8:	0800a4c9 	.word	0x0800a4c9
 800a4ac:	0800a4d1 	.word	0x0800a4d1
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	0800a4e1 	.word	0x0800a4e1
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4be:	e1ec      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c6:	e1e8      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ce:	e1e4      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d6:	e1e0      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e1dc      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4e0:	2340      	movs	r3, #64	; 0x40
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e6:	e1d8      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ee:	e1d4      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a4f      	ldr	r2, [pc, #316]	; (800a634 <UART_SetConfig+0x340>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d130      	bne.n	800a55c <UART_SetConfig+0x268>
 800a4fa:	4b4c      	ldr	r3, [pc, #304]	; (800a62c <UART_SetConfig+0x338>)
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b05      	cmp	r3, #5
 800a504:	d826      	bhi.n	800a554 <UART_SetConfig+0x260>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <UART_SetConfig+0x218>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a525 	.word	0x0800a525
 800a510:	0800a52d 	.word	0x0800a52d
 800a514:	0800a535 	.word	0x0800a535
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a545 	.word	0x0800a545
 800a520:	0800a54d 	.word	0x0800a54d
 800a524:	2300      	movs	r3, #0
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52a:	e1b6      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a52c:	2304      	movs	r3, #4
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a532:	e1b2      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a534:	2308      	movs	r3, #8
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53a:	e1ae      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a53c:	2310      	movs	r3, #16
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a542:	e1aa      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a544:	2320      	movs	r3, #32
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54a:	e1a6      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a552:	e1a2      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55a:	e19e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a35      	ldr	r2, [pc, #212]	; (800a638 <UART_SetConfig+0x344>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d130      	bne.n	800a5c8 <UART_SetConfig+0x2d4>
 800a566:	4b31      	ldr	r3, [pc, #196]	; (800a62c <UART_SetConfig+0x338>)
 800a568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d826      	bhi.n	800a5c0 <UART_SetConfig+0x2cc>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <UART_SetConfig+0x284>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a591 	.word	0x0800a591
 800a57c:	0800a599 	.word	0x0800a599
 800a580:	0800a5a1 	.word	0x0800a5a1
 800a584:	0800a5a9 	.word	0x0800a5a9
 800a588:	0800a5b1 	.word	0x0800a5b1
 800a58c:	0800a5b9 	.word	0x0800a5b9
 800a590:	2300      	movs	r3, #0
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a596:	e180      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a598:	2304      	movs	r3, #4
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59e:	e17c      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a6:	e178      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a5a8:	2310      	movs	r3, #16
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ae:	e174      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5b6:	e170      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5be:	e16c      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a5c0:	2380      	movs	r3, #128	; 0x80
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c6:	e168      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1b      	ldr	r2, [pc, #108]	; (800a63c <UART_SetConfig+0x348>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d142      	bne.n	800a658 <UART_SetConfig+0x364>
 800a5d2:	4b16      	ldr	r3, [pc, #88]	; (800a62c <UART_SetConfig+0x338>)
 800a5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b05      	cmp	r3, #5
 800a5dc:	d838      	bhi.n	800a650 <UART_SetConfig+0x35c>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <UART_SetConfig+0x2f0>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a5fd 	.word	0x0800a5fd
 800a5e8:	0800a605 	.word	0x0800a605
 800a5ec:	0800a60d 	.word	0x0800a60d
 800a5f0:	0800a615 	.word	0x0800a615
 800a5f4:	0800a641 	.word	0x0800a641
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a602:	e14a      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a604:	2304      	movs	r3, #4
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60a:	e146      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a60c:	2308      	movs	r3, #8
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a612:	e142      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a614:	2310      	movs	r3, #16
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61a:	e13e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a61c:	cfff69f3 	.word	0xcfff69f3
 800a620:	58000c00 	.word	0x58000c00
 800a624:	11fff4ff 	.word	0x11fff4ff
 800a628:	40011000 	.word	0x40011000
 800a62c:	58024400 	.word	0x58024400
 800a630:	40004400 	.word	0x40004400
 800a634:	40004800 	.word	0x40004800
 800a638:	40004c00 	.word	0x40004c00
 800a63c:	40005000 	.word	0x40005000
 800a640:	2320      	movs	r3, #32
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e128      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a648:	2340      	movs	r3, #64	; 0x40
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e124      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a650:	2380      	movs	r3, #128	; 0x80
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e120      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4acb      	ldr	r2, [pc, #812]	; (800a98c <UART_SetConfig+0x698>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d176      	bne.n	800a750 <UART_SetConfig+0x45c>
 800a662:	4bcb      	ldr	r3, [pc, #812]	; (800a990 <UART_SetConfig+0x69c>)
 800a664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a66a:	2b28      	cmp	r3, #40	; 0x28
 800a66c:	d86c      	bhi.n	800a748 <UART_SetConfig+0x454>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <UART_SetConfig+0x380>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a719 	.word	0x0800a719
 800a678:	0800a749 	.word	0x0800a749
 800a67c:	0800a749 	.word	0x0800a749
 800a680:	0800a749 	.word	0x0800a749
 800a684:	0800a749 	.word	0x0800a749
 800a688:	0800a749 	.word	0x0800a749
 800a68c:	0800a749 	.word	0x0800a749
 800a690:	0800a749 	.word	0x0800a749
 800a694:	0800a721 	.word	0x0800a721
 800a698:	0800a749 	.word	0x0800a749
 800a69c:	0800a749 	.word	0x0800a749
 800a6a0:	0800a749 	.word	0x0800a749
 800a6a4:	0800a749 	.word	0x0800a749
 800a6a8:	0800a749 	.word	0x0800a749
 800a6ac:	0800a749 	.word	0x0800a749
 800a6b0:	0800a749 	.word	0x0800a749
 800a6b4:	0800a729 	.word	0x0800a729
 800a6b8:	0800a749 	.word	0x0800a749
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a749 	.word	0x0800a749
 800a6c4:	0800a749 	.word	0x0800a749
 800a6c8:	0800a749 	.word	0x0800a749
 800a6cc:	0800a749 	.word	0x0800a749
 800a6d0:	0800a749 	.word	0x0800a749
 800a6d4:	0800a731 	.word	0x0800a731
 800a6d8:	0800a749 	.word	0x0800a749
 800a6dc:	0800a749 	.word	0x0800a749
 800a6e0:	0800a749 	.word	0x0800a749
 800a6e4:	0800a749 	.word	0x0800a749
 800a6e8:	0800a749 	.word	0x0800a749
 800a6ec:	0800a749 	.word	0x0800a749
 800a6f0:	0800a749 	.word	0x0800a749
 800a6f4:	0800a739 	.word	0x0800a739
 800a6f8:	0800a749 	.word	0x0800a749
 800a6fc:	0800a749 	.word	0x0800a749
 800a700:	0800a749 	.word	0x0800a749
 800a704:	0800a749 	.word	0x0800a749
 800a708:	0800a749 	.word	0x0800a749
 800a70c:	0800a749 	.word	0x0800a749
 800a710:	0800a749 	.word	0x0800a749
 800a714:	0800a741 	.word	0x0800a741
 800a718:	2301      	movs	r3, #1
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71e:	e0bc      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a720:	2304      	movs	r3, #4
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a726:	e0b8      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a728:	2308      	movs	r3, #8
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72e:	e0b4      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a730:	2310      	movs	r3, #16
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a736:	e0b0      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a738:	2320      	movs	r3, #32
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73e:	e0ac      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a740:	2340      	movs	r3, #64	; 0x40
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a746:	e0a8      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a748:	2380      	movs	r3, #128	; 0x80
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74e:	e0a4      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a8f      	ldr	r2, [pc, #572]	; (800a994 <UART_SetConfig+0x6a0>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d130      	bne.n	800a7bc <UART_SetConfig+0x4c8>
 800a75a:	4b8d      	ldr	r3, [pc, #564]	; (800a990 <UART_SetConfig+0x69c>)
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	2b05      	cmp	r3, #5
 800a764:	d826      	bhi.n	800a7b4 <UART_SetConfig+0x4c0>
 800a766:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <UART_SetConfig+0x478>)
 800a768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76c:	0800a785 	.word	0x0800a785
 800a770:	0800a78d 	.word	0x0800a78d
 800a774:	0800a795 	.word	0x0800a795
 800a778:	0800a79d 	.word	0x0800a79d
 800a77c:	0800a7a5 	.word	0x0800a7a5
 800a780:	0800a7ad 	.word	0x0800a7ad
 800a784:	2300      	movs	r3, #0
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78a:	e086      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a78c:	2304      	movs	r3, #4
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a792:	e082      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a794:	2308      	movs	r3, #8
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79a:	e07e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a79c:	2310      	movs	r3, #16
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a2:	e07a      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7aa:	e076      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b2:	e072      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ba:	e06e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a75      	ldr	r2, [pc, #468]	; (800a998 <UART_SetConfig+0x6a4>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d130      	bne.n	800a828 <UART_SetConfig+0x534>
 800a7c6:	4b72      	ldr	r3, [pc, #456]	; (800a990 <UART_SetConfig+0x69c>)
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f003 0307 	and.w	r3, r3, #7
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	d826      	bhi.n	800a820 <UART_SetConfig+0x52c>
 800a7d2:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <UART_SetConfig+0x4e4>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a7f1 	.word	0x0800a7f1
 800a7dc:	0800a7f9 	.word	0x0800a7f9
 800a7e0:	0800a801 	.word	0x0800a801
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a811 	.word	0x0800a811
 800a7ec:	0800a819 	.word	0x0800a819
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f6:	e050      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fe:	e04c      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a800:	2308      	movs	r3, #8
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a806:	e048      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a808:	2310      	movs	r3, #16
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80e:	e044      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a810:	2320      	movs	r3, #32
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a816:	e040      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a818:	2340      	movs	r3, #64	; 0x40
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81e:	e03c      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a820:	2380      	movs	r3, #128	; 0x80
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a826:	e038      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a5b      	ldr	r2, [pc, #364]	; (800a99c <UART_SetConfig+0x6a8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d130      	bne.n	800a894 <UART_SetConfig+0x5a0>
 800a832:	4b57      	ldr	r3, [pc, #348]	; (800a990 <UART_SetConfig+0x69c>)
 800a834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d826      	bhi.n	800a88c <UART_SetConfig+0x598>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <UART_SetConfig+0x550>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a85d 	.word	0x0800a85d
 800a848:	0800a865 	.word	0x0800a865
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800a875 	.word	0x0800a875
 800a854:	0800a87d 	.word	0x0800a87d
 800a858:	0800a885 	.word	0x0800a885
 800a85c:	2302      	movs	r3, #2
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e01a      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a864:	2304      	movs	r3, #4
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e016      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a86c:	2308      	movs	r3, #8
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e012      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a874:	2310      	movs	r3, #16
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87a:	e00e      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a87c:	2320      	movs	r3, #32
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a882:	e00a      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a884:	2340      	movs	r3, #64	; 0x40
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88a:	e006      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a88c:	2380      	movs	r3, #128	; 0x80
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a892:	e002      	b.n	800a89a <UART_SetConfig+0x5a6>
 800a894:	2380      	movs	r3, #128	; 0x80
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a3f      	ldr	r2, [pc, #252]	; (800a99c <UART_SetConfig+0x6a8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	f040 80f8 	bne.w	800aa96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8aa:	2b20      	cmp	r3, #32
 800a8ac:	dc46      	bgt.n	800a93c <UART_SetConfig+0x648>
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	f2c0 8082 	blt.w	800a9b8 <UART_SetConfig+0x6c4>
 800a8b4:	3b02      	subs	r3, #2
 800a8b6:	2b1e      	cmp	r3, #30
 800a8b8:	d87e      	bhi.n	800a9b8 <UART_SetConfig+0x6c4>
 800a8ba:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <UART_SetConfig+0x5cc>)
 800a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c0:	0800a943 	.word	0x0800a943
 800a8c4:	0800a9b9 	.word	0x0800a9b9
 800a8c8:	0800a94b 	.word	0x0800a94b
 800a8cc:	0800a9b9 	.word	0x0800a9b9
 800a8d0:	0800a9b9 	.word	0x0800a9b9
 800a8d4:	0800a9b9 	.word	0x0800a9b9
 800a8d8:	0800a95b 	.word	0x0800a95b
 800a8dc:	0800a9b9 	.word	0x0800a9b9
 800a8e0:	0800a9b9 	.word	0x0800a9b9
 800a8e4:	0800a9b9 	.word	0x0800a9b9
 800a8e8:	0800a9b9 	.word	0x0800a9b9
 800a8ec:	0800a9b9 	.word	0x0800a9b9
 800a8f0:	0800a9b9 	.word	0x0800a9b9
 800a8f4:	0800a9b9 	.word	0x0800a9b9
 800a8f8:	0800a96b 	.word	0x0800a96b
 800a8fc:	0800a9b9 	.word	0x0800a9b9
 800a900:	0800a9b9 	.word	0x0800a9b9
 800a904:	0800a9b9 	.word	0x0800a9b9
 800a908:	0800a9b9 	.word	0x0800a9b9
 800a90c:	0800a9b9 	.word	0x0800a9b9
 800a910:	0800a9b9 	.word	0x0800a9b9
 800a914:	0800a9b9 	.word	0x0800a9b9
 800a918:	0800a9b9 	.word	0x0800a9b9
 800a91c:	0800a9b9 	.word	0x0800a9b9
 800a920:	0800a9b9 	.word	0x0800a9b9
 800a924:	0800a9b9 	.word	0x0800a9b9
 800a928:	0800a9b9 	.word	0x0800a9b9
 800a92c:	0800a9b9 	.word	0x0800a9b9
 800a930:	0800a9b9 	.word	0x0800a9b9
 800a934:	0800a9b9 	.word	0x0800a9b9
 800a938:	0800a9ab 	.word	0x0800a9ab
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d037      	beq.n	800a9b0 <UART_SetConfig+0x6bc>
 800a940:	e03a      	b.n	800a9b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a942:	f7fd fb61 	bl	8008008 <HAL_RCCEx_GetD3PCLK1Freq>
 800a946:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a948:	e03c      	b.n	800a9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd fb70 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a958:	e034      	b.n	800a9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a95a:	f107 0318 	add.w	r3, r7, #24
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fd fcbc 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a968:	e02c      	b.n	800a9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a96a:	4b09      	ldr	r3, [pc, #36]	; (800a990 <UART_SetConfig+0x69c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b00      	cmp	r3, #0
 800a974:	d016      	beq.n	800a9a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <UART_SetConfig+0x69c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	08db      	lsrs	r3, r3, #3
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	4a07      	ldr	r2, [pc, #28]	; (800a9a0 <UART_SetConfig+0x6ac>)
 800a982:	fa22 f303 	lsr.w	r3, r2, r3
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a988:	e01c      	b.n	800a9c4 <UART_SetConfig+0x6d0>
 800a98a:	bf00      	nop
 800a98c:	40011400 	.word	0x40011400
 800a990:	58024400 	.word	0x58024400
 800a994:	40007800 	.word	0x40007800
 800a998:	40007c00 	.word	0x40007c00
 800a99c:	58000c00 	.word	0x58000c00
 800a9a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a9a4:	4b9d      	ldr	r3, [pc, #628]	; (800ac1c <UART_SetConfig+0x928>)
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a8:	e00c      	b.n	800a9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9aa:	4b9d      	ldr	r3, [pc, #628]	; (800ac20 <UART_SetConfig+0x92c>)
 800a9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ae:	e009      	b.n	800a9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b6:	e005      	b.n	800a9c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a9c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 81de 	beq.w	800ad88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	4a94      	ldr	r2, [pc, #592]	; (800ac24 <UART_SetConfig+0x930>)
 800a9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	4413      	add	r3, r2
 800a9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d305      	bcc.n	800a9fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d903      	bls.n	800aa04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa02:	e1c1      	b.n	800ad88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa06:	2200      	movs	r2, #0
 800aa08:	60bb      	str	r3, [r7, #8]
 800aa0a:	60fa      	str	r2, [r7, #12]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	4a84      	ldr	r2, [pc, #528]	; (800ac24 <UART_SetConfig+0x930>)
 800aa12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	2200      	movs	r2, #0
 800aa1a:	603b      	str	r3, [r7, #0]
 800aa1c:	607a      	str	r2, [r7, #4]
 800aa1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa26:	f7f5 fc57 	bl	80002d8 <__aeabi_uldivmod>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4610      	mov	r0, r2
 800aa30:	4619      	mov	r1, r3
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	020b      	lsls	r3, r1, #8
 800aa3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa40:	0202      	lsls	r2, r0, #8
 800aa42:	6979      	ldr	r1, [r7, #20]
 800aa44:	6849      	ldr	r1, [r1, #4]
 800aa46:	0849      	lsrs	r1, r1, #1
 800aa48:	2000      	movs	r0, #0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	eb12 0804 	adds.w	r8, r2, r4
 800aa52:	eb43 0905 	adc.w	r9, r3, r5
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	469a      	mov	sl, r3
 800aa5e:	4693      	mov	fp, r2
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	4640      	mov	r0, r8
 800aa66:	4649      	mov	r1, r9
 800aa68:	f7f5 fc36 	bl	80002d8 <__aeabi_uldivmod>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4613      	mov	r3, r2
 800aa72:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa7a:	d308      	bcc.n	800aa8e <UART_SetConfig+0x79a>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa82:	d204      	bcs.n	800aa8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa8a:	60da      	str	r2, [r3, #12]
 800aa8c:	e17c      	b.n	800ad88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa94:	e178      	b.n	800ad88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa9e:	f040 80c5 	bne.w	800ac2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aaa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	dc48      	bgt.n	800ab3c <UART_SetConfig+0x848>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	db7b      	blt.n	800aba6 <UART_SetConfig+0x8b2>
 800aaae:	2b20      	cmp	r3, #32
 800aab0:	d879      	bhi.n	800aba6 <UART_SetConfig+0x8b2>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0x7c4>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800ab43 	.word	0x0800ab43
 800aabc:	0800ab4b 	.word	0x0800ab4b
 800aac0:	0800aba7 	.word	0x0800aba7
 800aac4:	0800aba7 	.word	0x0800aba7
 800aac8:	0800ab53 	.word	0x0800ab53
 800aacc:	0800aba7 	.word	0x0800aba7
 800aad0:	0800aba7 	.word	0x0800aba7
 800aad4:	0800aba7 	.word	0x0800aba7
 800aad8:	0800ab63 	.word	0x0800ab63
 800aadc:	0800aba7 	.word	0x0800aba7
 800aae0:	0800aba7 	.word	0x0800aba7
 800aae4:	0800aba7 	.word	0x0800aba7
 800aae8:	0800aba7 	.word	0x0800aba7
 800aaec:	0800aba7 	.word	0x0800aba7
 800aaf0:	0800aba7 	.word	0x0800aba7
 800aaf4:	0800aba7 	.word	0x0800aba7
 800aaf8:	0800ab73 	.word	0x0800ab73
 800aafc:	0800aba7 	.word	0x0800aba7
 800ab00:	0800aba7 	.word	0x0800aba7
 800ab04:	0800aba7 	.word	0x0800aba7
 800ab08:	0800aba7 	.word	0x0800aba7
 800ab0c:	0800aba7 	.word	0x0800aba7
 800ab10:	0800aba7 	.word	0x0800aba7
 800ab14:	0800aba7 	.word	0x0800aba7
 800ab18:	0800aba7 	.word	0x0800aba7
 800ab1c:	0800aba7 	.word	0x0800aba7
 800ab20:	0800aba7 	.word	0x0800aba7
 800ab24:	0800aba7 	.word	0x0800aba7
 800ab28:	0800aba7 	.word	0x0800aba7
 800ab2c:	0800aba7 	.word	0x0800aba7
 800ab30:	0800aba7 	.word	0x0800aba7
 800ab34:	0800aba7 	.word	0x0800aba7
 800ab38:	0800ab99 	.word	0x0800ab99
 800ab3c:	2b40      	cmp	r3, #64	; 0x40
 800ab3e:	d02e      	beq.n	800ab9e <UART_SetConfig+0x8aa>
 800ab40:	e031      	b.n	800aba6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab42:	f7fb fa6b 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800ab46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab48:	e033      	b.n	800abb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab4a:	f7fb fa7d 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 800ab4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab50:	e02f      	b.n	800abb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fd fa6c 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab60:	e027      	b.n	800abb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab62:	f107 0318 	add.w	r3, r7, #24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fd fbb8 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab70:	e01f      	b.n	800abb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab72:	4b2d      	ldr	r3, [pc, #180]	; (800ac28 <UART_SetConfig+0x934>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0320 	and.w	r3, r3, #32
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d009      	beq.n	800ab92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab7e:	4b2a      	ldr	r3, [pc, #168]	; (800ac28 <UART_SetConfig+0x934>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	08db      	lsrs	r3, r3, #3
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	4a24      	ldr	r2, [pc, #144]	; (800ac1c <UART_SetConfig+0x928>)
 800ab8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab90:	e00f      	b.n	800abb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab92:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <UART_SetConfig+0x928>)
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab96:	e00c      	b.n	800abb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab98:	4b21      	ldr	r3, [pc, #132]	; (800ac20 <UART_SetConfig+0x92c>)
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9c:	e009      	b.n	800abb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba4:	e005      	b.n	800abb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800abb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80e7 	beq.w	800ad88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	4a19      	ldr	r2, [pc, #100]	; (800ac24 <UART_SetConfig+0x930>)
 800abc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abc4:	461a      	mov	r2, r3
 800abc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abcc:	005a      	lsls	r2, r3, #1
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	085b      	lsrs	r3, r3, #1
 800abd4:	441a      	add	r2, r3
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	fbb2 f3f3 	udiv	r3, r2, r3
 800abde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe2:	2b0f      	cmp	r3, #15
 800abe4:	d916      	bls.n	800ac14 <UART_SetConfig+0x920>
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abec:	d212      	bcs.n	800ac14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	f023 030f 	bic.w	r3, r3, #15
 800abf6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac06:	4313      	orrs	r3, r2
 800ac08:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ac10:	60da      	str	r2, [r3, #12]
 800ac12:	e0b9      	b.n	800ad88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac1a:	e0b5      	b.n	800ad88 <UART_SetConfig+0xa94>
 800ac1c:	03d09000 	.word	0x03d09000
 800ac20:	003d0900 	.word	0x003d0900
 800ac24:	0800f97c 	.word	0x0800f97c
 800ac28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	dc49      	bgt.n	800acc8 <UART_SetConfig+0x9d4>
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db7c      	blt.n	800ad32 <UART_SetConfig+0xa3e>
 800ac38:	2b20      	cmp	r3, #32
 800ac3a:	d87a      	bhi.n	800ad32 <UART_SetConfig+0xa3e>
 800ac3c:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <UART_SetConfig+0x950>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800accf 	.word	0x0800accf
 800ac48:	0800acd7 	.word	0x0800acd7
 800ac4c:	0800ad33 	.word	0x0800ad33
 800ac50:	0800ad33 	.word	0x0800ad33
 800ac54:	0800acdf 	.word	0x0800acdf
 800ac58:	0800ad33 	.word	0x0800ad33
 800ac5c:	0800ad33 	.word	0x0800ad33
 800ac60:	0800ad33 	.word	0x0800ad33
 800ac64:	0800acef 	.word	0x0800acef
 800ac68:	0800ad33 	.word	0x0800ad33
 800ac6c:	0800ad33 	.word	0x0800ad33
 800ac70:	0800ad33 	.word	0x0800ad33
 800ac74:	0800ad33 	.word	0x0800ad33
 800ac78:	0800ad33 	.word	0x0800ad33
 800ac7c:	0800ad33 	.word	0x0800ad33
 800ac80:	0800ad33 	.word	0x0800ad33
 800ac84:	0800acff 	.word	0x0800acff
 800ac88:	0800ad33 	.word	0x0800ad33
 800ac8c:	0800ad33 	.word	0x0800ad33
 800ac90:	0800ad33 	.word	0x0800ad33
 800ac94:	0800ad33 	.word	0x0800ad33
 800ac98:	0800ad33 	.word	0x0800ad33
 800ac9c:	0800ad33 	.word	0x0800ad33
 800aca0:	0800ad33 	.word	0x0800ad33
 800aca4:	0800ad33 	.word	0x0800ad33
 800aca8:	0800ad33 	.word	0x0800ad33
 800acac:	0800ad33 	.word	0x0800ad33
 800acb0:	0800ad33 	.word	0x0800ad33
 800acb4:	0800ad33 	.word	0x0800ad33
 800acb8:	0800ad33 	.word	0x0800ad33
 800acbc:	0800ad33 	.word	0x0800ad33
 800acc0:	0800ad33 	.word	0x0800ad33
 800acc4:	0800ad25 	.word	0x0800ad25
 800acc8:	2b40      	cmp	r3, #64	; 0x40
 800acca:	d02e      	beq.n	800ad2a <UART_SetConfig+0xa36>
 800accc:	e031      	b.n	800ad32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acce:	f7fb f9a5 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800acd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800acd4:	e033      	b.n	800ad3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acd6:	f7fb f9b7 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 800acda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800acdc:	e02f      	b.n	800ad3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fd f9a6 	bl	8008034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acec:	e027      	b.n	800ad3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acee:	f107 0318 	add.w	r3, r7, #24
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fd faf2 	bl	80082dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfc:	e01f      	b.n	800ad3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acfe:	4b2d      	ldr	r3, [pc, #180]	; (800adb4 <UART_SetConfig+0xac0>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0320 	and.w	r3, r3, #32
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad0a:	4b2a      	ldr	r3, [pc, #168]	; (800adb4 <UART_SetConfig+0xac0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	08db      	lsrs	r3, r3, #3
 800ad10:	f003 0303 	and.w	r3, r3, #3
 800ad14:	4a28      	ldr	r2, [pc, #160]	; (800adb8 <UART_SetConfig+0xac4>)
 800ad16:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad1c:	e00f      	b.n	800ad3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ad1e:	4b26      	ldr	r3, [pc, #152]	; (800adb8 <UART_SetConfig+0xac4>)
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad22:	e00c      	b.n	800ad3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad24:	4b25      	ldr	r3, [pc, #148]	; (800adbc <UART_SetConfig+0xac8>)
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad28:	e009      	b.n	800ad3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad30:	e005      	b.n	800ad3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad3c:	bf00      	nop
    }

    if (pclk != 0U)
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d021      	beq.n	800ad88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	4a1d      	ldr	r2, [pc, #116]	; (800adc0 <UART_SetConfig+0xacc>)
 800ad4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad52:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	085b      	lsrs	r3, r3, #1
 800ad5c:	441a      	add	r2, r3
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	2b0f      	cmp	r3, #15
 800ad6c:	d909      	bls.n	800ad82 <UART_SetConfig+0xa8e>
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad74:	d205      	bcs.n	800ad82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60da      	str	r2, [r3, #12]
 800ad80:	e002      	b.n	800ad88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2200      	movs	r2, #0
 800ada2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ada4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3748      	adds	r7, #72	; 0x48
 800adac:	46bd      	mov	sp, r7
 800adae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adb2:	bf00      	nop
 800adb4:	58024400 	.word	0x58024400
 800adb8:	03d09000 	.word	0x03d09000
 800adbc:	003d0900 	.word	0x003d0900
 800adc0:	0800f97c 	.word	0x0800f97c

0800adc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00a      	beq.n	800adee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00a      	beq.n	800ae32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae36:	f003 0308 	and.w	r3, r3, #8
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae58:	f003 0310 	and.w	r3, r3, #16
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00a      	beq.n	800ae76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	430a      	orrs	r2, r1
 800ae96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01a      	beq.n	800aeda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aec2:	d10a      	bne.n	800aeda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	605a      	str	r2, [r3, #4]
  }
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b098      	sub	sp, #96	; 0x60
 800af0c:	af02      	add	r7, sp, #8
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af18:	f7f6 fd6a 	bl	80019f0 <HAL_GetTick>
 800af1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0308 	and.w	r3, r3, #8
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d12f      	bne.n	800af8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af34:	2200      	movs	r2, #0
 800af36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f88e 	bl	800b05c <UART_WaitOnFlagUntilTimeout>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d022      	beq.n	800af8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af5a:	653b      	str	r3, [r7, #80]	; 0x50
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	461a      	mov	r2, r3
 800af62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af64:	647b      	str	r3, [r7, #68]	; 0x44
 800af66:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e6      	bne.n	800af46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2220      	movs	r2, #32
 800af7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e063      	b.n	800b054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b04      	cmp	r3, #4
 800af98:	d149      	bne.n	800b02e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa2:	2200      	movs	r2, #0
 800afa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f857 	bl	800b05c <UART_WaitOnFlagUntilTimeout>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d03c      	beq.n	800b02e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	623b      	str	r3, [r7, #32]
   return(result);
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd2:	633b      	str	r3, [r7, #48]	; 0x30
 800afd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afda:	e841 2300 	strex	r3, r2, [r1]
 800afde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e6      	bne.n	800afb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3308      	adds	r3, #8
 800afec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f023 0301 	bic.w	r3, r3, #1
 800affc:	64bb      	str	r3, [r7, #72]	; 0x48
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3308      	adds	r3, #8
 800b004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b006:	61fa      	str	r2, [r7, #28]
 800b008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	69b9      	ldr	r1, [r7, #24]
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	617b      	str	r3, [r7, #20]
   return(result);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e5      	bne.n	800afe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2220      	movs	r2, #32
 800b01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e012      	b.n	800b054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2220      	movs	r2, #32
 800b032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2220      	movs	r2, #32
 800b03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3758      	adds	r7, #88	; 0x58
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	4613      	mov	r3, r2
 800b06a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06c:	e049      	b.n	800b102 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b074:	d045      	beq.n	800b102 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b076:	f7f6 fcbb 	bl	80019f0 <HAL_GetTick>
 800b07a:	4602      	mov	r2, r0
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	429a      	cmp	r2, r3
 800b084:	d302      	bcc.n	800b08c <UART_WaitOnFlagUntilTimeout+0x30>
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e048      	b.n	800b122 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0304 	and.w	r3, r3, #4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d031      	beq.n	800b102 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	f003 0308 	and.w	r3, r3, #8
 800b0a8:	2b08      	cmp	r3, #8
 800b0aa:	d110      	bne.n	800b0ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f839 	bl	800b12c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2208      	movs	r2, #8
 800b0be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e029      	b.n	800b122 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0dc:	d111      	bne.n	800b102 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 f81f 	bl	800b12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e00f      	b.n	800b122 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	69da      	ldr	r2, [r3, #28]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4013      	ands	r3, r2
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	429a      	cmp	r2, r3
 800b110:	bf0c      	ite	eq
 800b112:	2301      	moveq	r3, #1
 800b114:	2300      	movne	r3, #0
 800b116:	b2db      	uxtb	r3, r3
 800b118:	461a      	mov	r2, r3
 800b11a:	79fb      	ldrb	r3, [r7, #7]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d0a6      	beq.n	800b06e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b095      	sub	sp, #84	; 0x54
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b152:	643b      	str	r3, [r7, #64]	; 0x40
 800b154:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e6      	bne.n	800b134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3308      	adds	r3, #8
 800b16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	61fb      	str	r3, [r7, #28]
   return(result);
 800b176:	69fa      	ldr	r2, [r7, #28]
 800b178:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <UART_EndRxTransfer+0xc8>)
 800b17a:	4013      	ands	r3, r2
 800b17c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3308      	adds	r3, #8
 800b184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b186:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b188:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e5      	bne.n	800b166 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d118      	bne.n	800b1d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f023 0310 	bic.w	r3, r3, #16
 800b1b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c0:	61bb      	str	r3, [r7, #24]
 800b1c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6979      	ldr	r1, [r7, #20]
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e6      	bne.n	800b1a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b1e8:	bf00      	nop
 800b1ea:	3754      	adds	r7, #84	; 0x54
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	effffffe 	.word	0xeffffffe

0800b1f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b206:	2b01      	cmp	r3, #1
 800b208:	d101      	bne.n	800b20e <HAL_UARTEx_DisableFifoMode+0x16>
 800b20a:	2302      	movs	r3, #2
 800b20c:	e027      	b.n	800b25e <HAL_UARTEx_DisableFifoMode+0x66>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2224      	movs	r2, #36	; 0x24
 800b21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f022 0201 	bic.w	r2, r2, #1
 800b234:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b23c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2220      	movs	r2, #32
 800b250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b084      	sub	sp, #16
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d101      	bne.n	800b282 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b27e:	2302      	movs	r3, #2
 800b280:	e02d      	b.n	800b2de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2224      	movs	r2, #36	; 0x24
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 0201 	bic.w	r2, r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f850 	bl	800b364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d101      	bne.n	800b2fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e02d      	b.n	800b35a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2224      	movs	r2, #36	; 0x24
 800b30a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 0201 	bic.w	r2, r2, #1
 800b324:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f812 	bl	800b364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2220      	movs	r2, #32
 800b34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b370:	2b00      	cmp	r3, #0
 800b372:	d108      	bne.n	800b386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b384:	e031      	b.n	800b3ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b386:	2310      	movs	r3, #16
 800b388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b38a:	2310      	movs	r3, #16
 800b38c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	0e5b      	lsrs	r3, r3, #25
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f003 0307 	and.w	r3, r3, #7
 800b39c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	0f5b      	lsrs	r3, r3, #29
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
 800b3b0:	7b3a      	ldrb	r2, [r7, #12]
 800b3b2:	4911      	ldr	r1, [pc, #68]	; (800b3f8 <UARTEx_SetNbDataToProcess+0x94>)
 800b3b4:	5c8a      	ldrb	r2, [r1, r2]
 800b3b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3ba:	7b3a      	ldrb	r2, [r7, #12]
 800b3bc:	490f      	ldr	r1, [pc, #60]	; (800b3fc <UARTEx_SetNbDataToProcess+0x98>)
 800b3be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	7b7a      	ldrb	r2, [r7, #13]
 800b3d0:	4909      	ldr	r1, [pc, #36]	; (800b3f8 <UARTEx_SetNbDataToProcess+0x94>)
 800b3d2:	5c8a      	ldrb	r2, [r1, r2]
 800b3d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3d8:	7b7a      	ldrb	r2, [r7, #13]
 800b3da:	4908      	ldr	r1, [pc, #32]	; (800b3fc <UARTEx_SetNbDataToProcess+0x98>)
 800b3dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3de:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3ea:	bf00      	nop
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	0800f994 	.word	0x0800f994
 800b3fc:	0800f99c 	.word	0x0800f99c

0800b400 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b400:	b084      	sub	sp, #16
 800b402:	b480      	push	{r7}
 800b404:	b085      	sub	sp, #20
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	f107 001c 	add.w	r0, r7, #28
 800b40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b416:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b418:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b41a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b41e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b422:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b426:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	4b07      	ldr	r3, [pc, #28]	; (800b450 <SDMMC_Init+0x50>)
 800b434:	4013      	ands	r3, r2
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	431a      	orrs	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	b004      	add	sp, #16
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	ffc02c00 	.word	0xffc02c00

0800b454 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b462:	4618      	mov	r0, r3
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f043 0203 	orr.w	r2, r3, #3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	370c      	adds	r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0303 	and.w	r3, r3, #3
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
	...

0800b4d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b4f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b4fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	4b06      	ldr	r3, [pc, #24]	; (800b520 <SDMMC_SendCommand+0x50>)
 800b508:	4013      	ands	r3, r2
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	fffee0c0 	.word	0xfffee0c0

0800b524 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	b2db      	uxtb	r3, r3
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b53e:	b480      	push	{r7}
 800b540:	b085      	sub	sp, #20
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3314      	adds	r3, #20
 800b54c:	461a      	mov	r2, r3
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	4413      	add	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b58a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b590:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b596:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0

}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5ca:	2310      	movs	r3, #16
 800b5cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5de:	f107 0308 	add.w	r3, r7, #8
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff ff73 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ee:	2110      	movs	r1, #16
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fa5f 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b088      	sub	sp, #32
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b610:	2311      	movs	r3, #17
 800b612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b61e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b622:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b624:	f107 0308 	add.w	r3, r7, #8
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff ff50 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b630:	f241 3288 	movw	r2, #5000	; 0x1388
 800b634:	2111      	movs	r1, #17
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa3c 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b63e:	69fb      	ldr	r3, [r7, #28]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3720      	adds	r7, #32
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b656:	2312      	movs	r3, #18
 800b658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b660:	2300      	movs	r3, #0
 800b662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b66a:	f107 0308 	add.w	r3, r7, #8
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff ff2d 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b676:	f241 3288 	movw	r2, #5000	; 0x1388
 800b67a:	2112      	movs	r1, #18
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fa19 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b088      	sub	sp, #32
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b69c:	2318      	movs	r3, #24
 800b69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b0:	f107 0308 	add.w	r3, r7, #8
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff ff0a 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c0:	2118      	movs	r1, #24
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f9f6 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3720      	adds	r7, #32
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b6e2:	2319      	movs	r3, #25
 800b6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f6:	f107 0308 	add.w	r3, r7, #8
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fee7 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b702:	f241 3288 	movw	r2, #5000	; 0x1388
 800b706:	2119      	movs	r1, #25
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f9d3 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b710:	69fb      	ldr	r3, [r7, #28]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3720      	adds	r7, #32
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b728:	230c      	movs	r3, #12
 800b72a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b72c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b73a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b754:	f107 0308 	add.w	r3, r7, #8
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff feb8 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b760:	4a0b      	ldr	r2, [pc, #44]	; (800b790 <SDMMC_CmdStopTransfer+0x74>)
 800b762:	210c      	movs	r1, #12
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f9a5 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b76a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b77e:	d101      	bne.n	800b784 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b784:	69fb      	ldr	r3, [r7, #28]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3720      	adds	r7, #32
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	05f5e100 	.word	0x05f5e100

0800b794 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b7a2:	2307      	movs	r3, #7
 800b7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b6:	f107 0308 	add.w	r3, r7, #8
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff fe87 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b7c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c6:	2107      	movs	r1, #7
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f973 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b7ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3720      	adds	r7, #32
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b088      	sub	sp, #32
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fe66 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fb97 	bl	800bf38 <SDMMC_GetCmdError>
 800b80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b80c:	69fb      	ldr	r3, [r7, #28]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b088      	sub	sp, #32
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b81e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b824:	2308      	movs	r3, #8
 800b826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b838:	f107 0308 	add.w	r3, r7, #8
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fe46 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fb29 	bl	800be9c <SDMMC_GetCmdResp7>
 800b84a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b84c:	69fb      	ldr	r3, [r7, #28]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b088      	sub	sp, #32
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b864:	2337      	movs	r3, #55	; 0x37
 800b866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b86c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b876:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b878:	f107 0308 	add.w	r3, r7, #8
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff fe26 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b884:	f241 3288 	movw	r2, #5000	; 0x1388
 800b888:	2137      	movs	r1, #55	; 0x37
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f912 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b892:	69fb      	ldr	r3, [r7, #28]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b8aa:	2329      	movs	r3, #41	; 0x29
 800b8ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8be:	f107 0308 	add.w	r3, r7, #8
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff fe03 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa2e 	bl	800bd2c <SDMMC_GetCmdResp3>
 800b8d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8d2:	69fb      	ldr	r3, [r7, #28]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8ea:	2306      	movs	r3, #6
 800b8ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8fe:	f107 0308 	add.w	r3, r7, #8
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff fde3 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b90e:	2106      	movs	r1, #6
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f8cf 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b918:	69fb      	ldr	r3, [r7, #28]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b088      	sub	sp, #32
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b92e:	2333      	movs	r3, #51	; 0x33
 800b930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b932:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b938:	2300      	movs	r3, #0
 800b93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b93c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b942:	f107 0308 	add.w	r3, r7, #8
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff fdc1 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b952:	2133      	movs	r1, #51	; 0x33
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f8ad 	bl	800bab4 <SDMMC_GetCmdResp1>
 800b95a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b95c:	69fb      	ldr	r3, [r7, #28]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b088      	sub	sp, #32
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b96e:	2300      	movs	r3, #0
 800b970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b972:	2302      	movs	r3, #2
 800b974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b97a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b97c:	2300      	movs	r3, #0
 800b97e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b984:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b986:	f107 0308 	add.w	r3, r7, #8
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff fd9f 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f980 	bl	800bc98 <SDMMC_GetCmdResp2>
 800b998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b99a:	69fb      	ldr	r3, [r7, #28]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b088      	sub	sp, #32
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b9b2:	2309      	movs	r3, #9
 800b9b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b9b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b9ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9c6:	f107 0308 	add.w	r3, r7, #8
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7ff fd7f 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f960 	bl	800bc98 <SDMMC_GetCmdResp2>
 800b9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9da:	69fb      	ldr	r3, [r7, #28]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba06:	f107 0308 	add.w	r3, r7, #8
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff fd5f 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	2103      	movs	r1, #3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f9c8 	bl	800bdac <SDMMC_GetCmdResp6>
 800ba1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba1e:	69fb      	ldr	r3, [r7, #28]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3720      	adds	r7, #32
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba36:	230d      	movs	r3, #13
 800ba38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba40:	2300      	movs	r3, #0
 800ba42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba4a:	f107 0308 	add.w	r3, r7, #8
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff fd3d 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5a:	210d      	movs	r1, #13
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f829 	bl	800bab4 <SDMMC_GetCmdResp1>
 800ba62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba64:	69fb      	ldr	r3, [r7, #28]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b088      	sub	sp, #32
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ba7a:	230d      	movs	r3, #13
 800ba7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba8e:	f107 0308 	add.w	r3, r7, #8
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fd1b 	bl	800b4d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ba9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba9e:	210d      	movs	r1, #13
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f807 	bl	800bab4 <SDMMC_GetCmdResp1>
 800baa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa8:	69fb      	ldr	r3, [r7, #28]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	460b      	mov	r3, r1
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bac2:	4b70      	ldr	r3, [pc, #448]	; (800bc84 <SDMMC_GetCmdResp1+0x1d0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a70      	ldr	r2, [pc, #448]	; (800bc88 <SDMMC_GetCmdResp1+0x1d4>)
 800bac8:	fba2 2303 	umull	r2, r3, r2, r3
 800bacc:	0a5a      	lsrs	r2, r3, #9
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	fb02 f303 	mul.w	r3, r2, r3
 800bad4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	1e5a      	subs	r2, r3, #1
 800bada:	61fa      	str	r2, [r7, #28]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bae4:	e0c9      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	4b67      	ldr	r3, [pc, #412]	; (800bc8c <SDMMC_GetCmdResp1+0x1d8>)
 800baf0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0ef      	beq.n	800bad6 <SDMMC_GetCmdResp1+0x22>
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1ea      	bne.n	800bad6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d004      	beq.n	800bb16 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2204      	movs	r2, #4
 800bb10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb12:	2304      	movs	r3, #4
 800bb14:	e0b1      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d004      	beq.n	800bb2c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2201      	movs	r2, #1
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e0a6      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4a58      	ldr	r2, [pc, #352]	; (800bc90 <SDMMC_GetCmdResp1+0x1dc>)
 800bb30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7ff fcf6 	bl	800b524 <SDMMC_GetCommandResponse>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	7afb      	ldrb	r3, [r7, #11]
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d001      	beq.n	800bb46 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e099      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb46:	2100      	movs	r1, #0
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7ff fcf8 	bl	800b53e <SDMMC_GetResponse>
 800bb4e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	4b50      	ldr	r3, [pc, #320]	; (800bc94 <SDMMC_GetCmdResp1+0x1e0>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e08d      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da02      	bge.n	800bb6a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb68:	e087      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb74:	2340      	movs	r3, #64	; 0x40
 800bb76:	e080      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb82:	2380      	movs	r3, #128	; 0x80
 800bb84:	e079      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb94:	e071      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bba4:	e069      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bbb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb4:	e061      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bbc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbc4:	e059      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbd4:	e051      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbe4:	e049      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbf4:	e041      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bc00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc04:	e039      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc14:	e031      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc24:	e029      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc34:	e021      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc44:	e019      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc54:	e011      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc64:	e009      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f003 0308 	and.w	r3, r3, #8
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc74:	e001      	b.n	800bc7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3720      	adds	r7, #32
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	24000000 	.word	0x24000000
 800bc88:	10624dd3 	.word	0x10624dd3
 800bc8c:	00200045 	.word	0x00200045
 800bc90:	002000c5 	.word	0x002000c5
 800bc94:	fdffe008 	.word	0xfdffe008

0800bc98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bca0:	4b1f      	ldr	r3, [pc, #124]	; (800bd20 <SDMMC_GetCmdResp2+0x88>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a1f      	ldr	r2, [pc, #124]	; (800bd24 <SDMMC_GetCmdResp2+0x8c>)
 800bca6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcaa:	0a5b      	lsrs	r3, r3, #9
 800bcac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	1e5a      	subs	r2, r3, #1
 800bcba:	60fa      	str	r2, [r7, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcc4:	e026      	b.n	800bd14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0ef      	beq.n	800bcb6 <SDMMC_GetCmdResp2+0x1e>
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1ea      	bne.n	800bcb6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d004      	beq.n	800bcf6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2204      	movs	r2, #4
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcf2:	2304      	movs	r3, #4
 800bcf4:	e00e      	b.n	800bd14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d004      	beq.n	800bd0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e003      	b.n	800bd14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a06      	ldr	r2, [pc, #24]	; (800bd28 <SDMMC_GetCmdResp2+0x90>)
 800bd10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	24000000 	.word	0x24000000
 800bd24:	10624dd3 	.word	0x10624dd3
 800bd28:	002000c5 	.word	0x002000c5

0800bd2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd34:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <SDMMC_GetCmdResp3+0x74>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a1a      	ldr	r2, [pc, #104]	; (800bda4 <SDMMC_GetCmdResp3+0x78>)
 800bd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3e:	0a5b      	lsrs	r3, r3, #9
 800bd40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd44:	fb02 f303 	mul.w	r3, r2, r3
 800bd48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	1e5a      	subs	r2, r3, #1
 800bd4e:	60fa      	str	r2, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d102      	bne.n	800bd5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd58:	e01b      	b.n	800bd92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0ef      	beq.n	800bd4a <SDMMC_GetCmdResp3+0x1e>
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1ea      	bne.n	800bd4a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd78:	f003 0304 	and.w	r3, r3, #4
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d004      	beq.n	800bd8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2204      	movs	r2, #4
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd86:	2304      	movs	r3, #4
 800bd88:	e003      	b.n	800bd92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a06      	ldr	r2, [pc, #24]	; (800bda8 <SDMMC_GetCmdResp3+0x7c>)
 800bd8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	24000000 	.word	0x24000000
 800bda4:	10624dd3 	.word	0x10624dd3
 800bda8:	002000c5 	.word	0x002000c5

0800bdac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdba:	4b35      	ldr	r3, [pc, #212]	; (800be90 <SDMMC_GetCmdResp6+0xe4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a35      	ldr	r2, [pc, #212]	; (800be94 <SDMMC_GetCmdResp6+0xe8>)
 800bdc0:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc4:	0a5b      	lsrs	r3, r3, #9
 800bdc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdca:	fb02 f303 	mul.w	r3, r2, r3
 800bdce:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	1e5a      	subs	r2, r3, #1
 800bdd4:	61fa      	str	r2, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d102      	bne.n	800bde0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdde:	e052      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d0ef      	beq.n	800bdd0 <SDMMC_GetCmdResp6+0x24>
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1ea      	bne.n	800bdd0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfe:	f003 0304 	and.w	r3, r3, #4
 800be02:	2b00      	cmp	r3, #0
 800be04:	d004      	beq.n	800be10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2204      	movs	r2, #4
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be0c:	2304      	movs	r3, #4
 800be0e:	e03a      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d004      	beq.n	800be26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be22:	2301      	movs	r3, #1
 800be24:	e02f      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fb7c 	bl	800b524 <SDMMC_GetCommandResponse>
 800be2c:	4603      	mov	r3, r0
 800be2e:	461a      	mov	r2, r3
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	4293      	cmp	r3, r2
 800be34:	d001      	beq.n	800be3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be36:	2301      	movs	r3, #1
 800be38:	e025      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4a16      	ldr	r2, [pc, #88]	; (800be98 <SDMMC_GetCmdResp6+0xec>)
 800be3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be40:	2100      	movs	r1, #0
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fb7b 	bl	800b53e <SDMMC_GetResponse>
 800be48:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	0c1b      	lsrs	r3, r3, #16
 800be58:	b29a      	uxth	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800be5e:	2300      	movs	r3, #0
 800be60:	e011      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be70:	e009      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be80:	e001      	b.n	800be86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be86:	4618      	mov	r0, r3
 800be88:	3720      	adds	r7, #32
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	24000000 	.word	0x24000000
 800be94:	10624dd3 	.word	0x10624dd3
 800be98:	002000c5 	.word	0x002000c5

0800be9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bea4:	4b22      	ldr	r3, [pc, #136]	; (800bf30 <SDMMC_GetCmdResp7+0x94>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a22      	ldr	r2, [pc, #136]	; (800bf34 <SDMMC_GetCmdResp7+0x98>)
 800beaa:	fba2 2303 	umull	r2, r3, r2, r3
 800beae:	0a5b      	lsrs	r3, r3, #9
 800beb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800beb4:	fb02 f303 	mul.w	r3, r2, r3
 800beb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	1e5a      	subs	r2, r3, #1
 800bebe:	60fa      	str	r2, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d102      	bne.n	800beca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bec8:	e02c      	b.n	800bf24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bece:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0ef      	beq.n	800beba <SDMMC_GetCmdResp7+0x1e>
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1ea      	bne.n	800beba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d004      	beq.n	800befa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2204      	movs	r2, #4
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bef6:	2304      	movs	r3, #4
 800bef8:	e014      	b.n	800bf24 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d004      	beq.n	800bf10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e009      	b.n	800bf24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2240      	movs	r2, #64	; 0x40
 800bf20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf22:	2300      	movs	r3, #0

}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	24000000 	.word	0x24000000
 800bf34:	10624dd3 	.word	0x10624dd3

0800bf38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf40:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <SDMMC_GetCmdError+0x50>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a11      	ldr	r2, [pc, #68]	; (800bf8c <SDMMC_GetCmdError+0x54>)
 800bf46:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4a:	0a5b      	lsrs	r3, r3, #9
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	fb02 f303 	mul.w	r3, r2, r3
 800bf54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	1e5a      	subs	r2, r3, #1
 800bf5a:	60fa      	str	r2, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf64:	e009      	b.n	800bf7a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0f1      	beq.n	800bf56 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <SDMMC_GetCmdError+0x58>)
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	24000000 	.word	0x24000000
 800bf8c:	10624dd3 	.word	0x10624dd3
 800bf90:	002000c5 	.word	0x002000c5

0800bf94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf98:	4904      	ldr	r1, [pc, #16]	; (800bfac <MX_FATFS_Init+0x18>)
 800bf9a:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <MX_FATFS_Init+0x1c>)
 800bf9c:	f003 fb46 	bl	800f62c <FATFS_LinkDriver>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4b03      	ldr	r3, [pc, #12]	; (800bfb4 <MX_FATFS_Init+0x20>)
 800bfa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bfa8:	bf00      	nop
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	240017a8 	.word	0x240017a8
 800bfb0:	0800f9a4 	.word	0x0800f9a4
 800bfb4:	240017a4 	.word	0x240017a4

0800bfb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bfbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bfd2:	f000 f879 	bl	800c0c8 <BSP_SD_IsDetected>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d001      	beq.n	800bfe0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e012      	b.n	800c006 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bfe0:	480b      	ldr	r0, [pc, #44]	; (800c010 <BSP_SD_Init+0x48>)
 800bfe2:	f7fc fd85 	bl	8008af0 <HAL_SD_Init>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d109      	bne.n	800c004 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bff4:	4806      	ldr	r0, [pc, #24]	; (800c010 <BSP_SD_Init+0x48>)
 800bff6:	f7fd fc41 	bl	800987c <HAL_SD_ConfigWideBusOperation>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c004:	79fb      	ldrb	r3, [r7, #7]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	2400067c 	.word	0x2400067c

0800c014 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af02      	add	r7, sp, #8
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	4806      	ldr	r0, [pc, #24]	; (800c04c <BSP_SD_ReadBlocks+0x38>)
 800c032:	f7fc fe7d 	bl	8008d30 <HAL_SD_ReadBlocks>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c040:	7dfb      	ldrb	r3, [r7, #23]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	2400067c 	.word	0x2400067c

0800c050 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af02      	add	r7, sp, #8
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	4806      	ldr	r0, [pc, #24]	; (800c088 <BSP_SD_WriteBlocks+0x38>)
 800c06e:	f7fc ffe9 	bl	8009044 <HAL_SD_WriteBlocks>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	2400067c 	.word	0x2400067c

0800c08c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c090:	4805      	ldr	r0, [pc, #20]	; (800c0a8 <BSP_SD_GetCardState+0x1c>)
 800c092:	f7fd fd05 	bl	8009aa0 <HAL_SD_GetCardState>
 800c096:	4603      	mov	r3, r0
 800c098:	2b04      	cmp	r3, #4
 800c09a:	bf14      	ite	ne
 800c09c:	2301      	movne	r3, #1
 800c09e:	2300      	moveq	r3, #0
 800c0a0:	b2db      	uxtb	r3, r3
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	2400067c 	.word	0x2400067c

0800c0ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	4803      	ldr	r0, [pc, #12]	; (800c0c4 <BSP_SD_GetCardInfo+0x18>)
 800c0b8:	f7fd fbb4 	bl	8009824 <HAL_SD_GetCardInfo>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	2400067c 	.word	0x2400067c

0800c0c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c0d2:	f000 f80b 	bl	800c0ec <BSP_PlatformIsDetected>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	b2db      	uxtb	r3, r3
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c0f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0fa:	4806      	ldr	r0, [pc, #24]	; (800c114 <BSP_PlatformIsDetected+0x28>)
 800c0fc:	f7f8 fb6a 	bl	80047d4 <HAL_GPIO_ReadPin>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c106:	2300      	movs	r3, #0
 800c108:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c10a:	79fb      	ldrb	r3, [r7, #7]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	58022000 	.word	0x58022000

0800c118 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c122:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <SD_CheckStatus+0x38>)
 800c124:	2201      	movs	r2, #1
 800c126:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c128:	f7ff ffb0 	bl	800c08c <BSP_SD_GetCardState>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d107      	bne.n	800c142 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <SD_CheckStatus+0x38>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	f023 0301 	bic.w	r3, r3, #1
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	4b04      	ldr	r3, [pc, #16]	; (800c150 <SD_CheckStatus+0x38>)
 800c140:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c142:	4b03      	ldr	r3, [pc, #12]	; (800c150 <SD_CheckStatus+0x38>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b2db      	uxtb	r3, r3
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	24000045 	.word	0x24000045

0800c154 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c15e:	4b0b      	ldr	r3, [pc, #44]	; (800c18c <SD_initialize+0x38>)
 800c160:	2201      	movs	r2, #1
 800c162:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c164:	f7ff ff30 	bl	800bfc8 <BSP_SD_Init>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d107      	bne.n	800c17e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c16e:	79fb      	ldrb	r3, [r7, #7]
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff ffd1 	bl	800c118 <SD_CheckStatus>
 800c176:	4603      	mov	r3, r0
 800c178:	461a      	mov	r2, r3
 800c17a:	4b04      	ldr	r3, [pc, #16]	; (800c18c <SD_initialize+0x38>)
 800c17c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c17e:	4b03      	ldr	r3, [pc, #12]	; (800c18c <SD_initialize+0x38>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	b2db      	uxtb	r3, r3
}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	24000045 	.word	0x24000045

0800c190 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c19a:	79fb      	ldrb	r3, [r7, #7]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff ffbb 	bl	800c118 <SD_CheckStatus>
 800c1a2:	4603      	mov	r3, r0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	607a      	str	r2, [r7, #4]
 800c1b6:	603b      	str	r3, [r7, #0]
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	68b8      	ldr	r0, [r7, #8]
 800c1ca:	f7ff ff23 	bl	800c014 <BSP_SD_ReadBlocks>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d107      	bne.n	800c1e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c1d4:	bf00      	nop
 800c1d6:	f7ff ff59 	bl	800c08c <BSP_SD_GetCardState>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1fa      	bne.n	800c1d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b086      	sub	sp, #24
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c202:	f04f 33ff 	mov.w	r3, #4294967295
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	68b8      	ldr	r0, [r7, #8]
 800c20c:	f7ff ff20 	bl	800c050 <BSP_SD_WriteBlocks>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d107      	bne.n	800c226 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c216:	bf00      	nop
 800c218:	f7ff ff38 	bl	800c08c <BSP_SD_GetCardState>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1fa      	bne.n	800c218 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c226:	7dfb      	ldrb	r3, [r7, #23]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08c      	sub	sp, #48	; 0x30
 800c234:	af00      	add	r7, sp, #0
 800c236:	4603      	mov	r3, r0
 800c238:	603a      	str	r2, [r7, #0]
 800c23a:	71fb      	strb	r3, [r7, #7]
 800c23c:	460b      	mov	r3, r1
 800c23e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c246:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <SD_ioctl+0xac>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <SD_ioctl+0x28>
 800c254:	2303      	movs	r3, #3
 800c256:	e03c      	b.n	800c2d2 <SD_ioctl+0xa2>

  switch (cmd)
 800c258:	79bb      	ldrb	r3, [r7, #6]
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d834      	bhi.n	800c2c8 <SD_ioctl+0x98>
 800c25e:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <SD_ioctl+0x34>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c275 	.word	0x0800c275
 800c268:	0800c27d 	.word	0x0800c27d
 800c26c:	0800c295 	.word	0x0800c295
 800c270:	0800c2af 	.word	0x0800c2af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c27a:	e028      	b.n	800c2ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c27c:	f107 0308 	add.w	r3, r7, #8
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff ff13 	bl	800c0ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c286:	6a3a      	ldr	r2, [r7, #32]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c292:	e01c      	b.n	800c2ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff ff07 	bl	800c0ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2ac:	e00f      	b.n	800c2ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2ae:	f107 0308 	add.w	r3, r7, #8
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fefa 	bl	800c0ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	0a5a      	lsrs	r2, r3, #9
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2c6:	e002      	b.n	800c2ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c2c8:	2304      	movs	r3, #4
 800c2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c2ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3730      	adds	r7, #48	; 0x30
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	24000045 	.word	0x24000045

0800c2e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c2ec:	88fb      	ldrh	r3, [r7, #6]
 800c2ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f0:	d802      	bhi.n	800c2f8 <ff_convert+0x18>
		c = chr;
 800c2f2:	88fb      	ldrh	r3, [r7, #6]
 800c2f4:	81fb      	strh	r3, [r7, #14]
 800c2f6:	e025      	b.n	800c344 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00b      	beq.n	800c316 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c2fe:	88fb      	ldrh	r3, [r7, #6]
 800c300:	2bff      	cmp	r3, #255	; 0xff
 800c302:	d805      	bhi.n	800c310 <ff_convert+0x30>
 800c304:	88fb      	ldrh	r3, [r7, #6]
 800c306:	3b80      	subs	r3, #128	; 0x80
 800c308:	4a12      	ldr	r2, [pc, #72]	; (800c354 <ff_convert+0x74>)
 800c30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c30e:	e000      	b.n	800c312 <ff_convert+0x32>
 800c310:	2300      	movs	r3, #0
 800c312:	81fb      	strh	r3, [r7, #14]
 800c314:	e016      	b.n	800c344 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c316:	2300      	movs	r3, #0
 800c318:	81fb      	strh	r3, [r7, #14]
 800c31a:	e009      	b.n	800c330 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c31c:	89fb      	ldrh	r3, [r7, #14]
 800c31e:	4a0d      	ldr	r2, [pc, #52]	; (800c354 <ff_convert+0x74>)
 800c320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c324:	88fa      	ldrh	r2, [r7, #6]
 800c326:	429a      	cmp	r2, r3
 800c328:	d006      	beq.n	800c338 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c32a:	89fb      	ldrh	r3, [r7, #14]
 800c32c:	3301      	adds	r3, #1
 800c32e:	81fb      	strh	r3, [r7, #14]
 800c330:	89fb      	ldrh	r3, [r7, #14]
 800c332:	2b7f      	cmp	r3, #127	; 0x7f
 800c334:	d9f2      	bls.n	800c31c <ff_convert+0x3c>
 800c336:	e000      	b.n	800c33a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c338:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c33a:	89fb      	ldrh	r3, [r7, #14]
 800c33c:	3380      	adds	r3, #128	; 0x80
 800c33e:	b29b      	uxth	r3, r3
 800c340:	b2db      	uxtb	r3, r3
 800c342:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c344:	89fb      	ldrh	r3, [r7, #14]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	0800f9b8 	.word	0x0800f9b8

0800c358 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c358:	b480      	push	{r7}
 800c35a:	b087      	sub	sp, #28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	4603      	mov	r3, r0
 800c360:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c362:	88fb      	ldrh	r3, [r7, #6]
 800c364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c368:	d201      	bcs.n	800c36e <ff_wtoupper+0x16>
 800c36a:	4b3e      	ldr	r3, [pc, #248]	; (800c464 <ff_wtoupper+0x10c>)
 800c36c:	e000      	b.n	800c370 <ff_wtoupper+0x18>
 800c36e:	4b3e      	ldr	r3, [pc, #248]	; (800c468 <ff_wtoupper+0x110>)
 800c370:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	1c9a      	adds	r2, r3, #2
 800c376:	617a      	str	r2, [r7, #20]
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c37c:	8a7b      	ldrh	r3, [r7, #18]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d068      	beq.n	800c454 <ff_wtoupper+0xfc>
 800c382:	88fa      	ldrh	r2, [r7, #6]
 800c384:	8a7b      	ldrh	r3, [r7, #18]
 800c386:	429a      	cmp	r2, r3
 800c388:	d364      	bcc.n	800c454 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	1c9a      	adds	r2, r3, #2
 800c38e:	617a      	str	r2, [r7, #20]
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	823b      	strh	r3, [r7, #16]
 800c394:	8a3b      	ldrh	r3, [r7, #16]
 800c396:	0a1b      	lsrs	r3, r3, #8
 800c398:	81fb      	strh	r3, [r7, #14]
 800c39a:	8a3b      	ldrh	r3, [r7, #16]
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c3a0:	88fa      	ldrh	r2, [r7, #6]
 800c3a2:	8a79      	ldrh	r1, [r7, #18]
 800c3a4:	8a3b      	ldrh	r3, [r7, #16]
 800c3a6:	440b      	add	r3, r1
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	da49      	bge.n	800c440 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c3ac:	89fb      	ldrh	r3, [r7, #14]
 800c3ae:	2b08      	cmp	r3, #8
 800c3b0:	d84f      	bhi.n	800c452 <ff_wtoupper+0xfa>
 800c3b2:	a201      	add	r2, pc, #4	; (adr r2, 800c3b8 <ff_wtoupper+0x60>)
 800c3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b8:	0800c3dd 	.word	0x0800c3dd
 800c3bc:	0800c3ef 	.word	0x0800c3ef
 800c3c0:	0800c405 	.word	0x0800c405
 800c3c4:	0800c40d 	.word	0x0800c40d
 800c3c8:	0800c415 	.word	0x0800c415
 800c3cc:	0800c41d 	.word	0x0800c41d
 800c3d0:	0800c425 	.word	0x0800c425
 800c3d4:	0800c42d 	.word	0x0800c42d
 800c3d8:	0800c435 	.word	0x0800c435
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3dc:	88fa      	ldrh	r2, [r7, #6]
 800c3de:	8a7b      	ldrh	r3, [r7, #18]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	80fb      	strh	r3, [r7, #6]
 800c3ec:	e027      	b.n	800c43e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c3ee:	88fa      	ldrh	r2, [r7, #6]
 800c3f0:	8a7b      	ldrh	r3, [r7, #18]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	88fa      	ldrh	r2, [r7, #6]
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	80fb      	strh	r3, [r7, #6]
 800c402:	e01c      	b.n	800c43e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c404:	88fb      	ldrh	r3, [r7, #6]
 800c406:	3b10      	subs	r3, #16
 800c408:	80fb      	strh	r3, [r7, #6]
 800c40a:	e018      	b.n	800c43e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	3b20      	subs	r3, #32
 800c410:	80fb      	strh	r3, [r7, #6]
 800c412:	e014      	b.n	800c43e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	3b30      	subs	r3, #48	; 0x30
 800c418:	80fb      	strh	r3, [r7, #6]
 800c41a:	e010      	b.n	800c43e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	3b1a      	subs	r3, #26
 800c420:	80fb      	strh	r3, [r7, #6]
 800c422:	e00c      	b.n	800c43e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	3308      	adds	r3, #8
 800c428:	80fb      	strh	r3, [r7, #6]
 800c42a:	e008      	b.n	800c43e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c42c:	88fb      	ldrh	r3, [r7, #6]
 800c42e:	3b50      	subs	r3, #80	; 0x50
 800c430:	80fb      	strh	r3, [r7, #6]
 800c432:	e004      	b.n	800c43e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c434:	88fb      	ldrh	r3, [r7, #6]
 800c436:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c43a:	80fb      	strh	r3, [r7, #6]
 800c43c:	bf00      	nop
			}
			break;
 800c43e:	e008      	b.n	800c452 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c440:	89fb      	ldrh	r3, [r7, #14]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d195      	bne.n	800c372 <ff_wtoupper+0x1a>
 800c446:	8a3b      	ldrh	r3, [r7, #16]
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	4413      	add	r3, r2
 800c44e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c450:	e78f      	b.n	800c372 <ff_wtoupper+0x1a>
			break;
 800c452:	bf00      	nop
	}

	return chr;
 800c454:	88fb      	ldrh	r3, [r7, #6]
}
 800c456:	4618      	mov	r0, r3
 800c458:	371c      	adds	r7, #28
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	0800fab8 	.word	0x0800fab8
 800c468:	0800fcac 	.word	0x0800fcac

0800c46c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	4603      	mov	r3, r0
 800c474:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	4a08      	ldr	r2, [pc, #32]	; (800c49c <disk_status+0x30>)
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	79fa      	ldrb	r2, [r7, #7]
 800c484:	4905      	ldr	r1, [pc, #20]	; (800c49c <disk_status+0x30>)
 800c486:	440a      	add	r2, r1
 800c488:	7a12      	ldrb	r2, [r2, #8]
 800c48a:	4610      	mov	r0, r2
 800c48c:	4798      	blx	r3
 800c48e:	4603      	mov	r3, r0
 800c490:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	240017d4 	.word	0x240017d4

0800c4a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	4a0d      	ldr	r2, [pc, #52]	; (800c4e8 <disk_initialize+0x48>)
 800c4b2:	5cd3      	ldrb	r3, [r2, r3]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d111      	bne.n	800c4dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	4a0b      	ldr	r2, [pc, #44]	; (800c4e8 <disk_initialize+0x48>)
 800c4bc:	2101      	movs	r1, #1
 800c4be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c4c0:	79fb      	ldrb	r3, [r7, #7]
 800c4c2:	4a09      	ldr	r2, [pc, #36]	; (800c4e8 <disk_initialize+0x48>)
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	79fa      	ldrb	r2, [r7, #7]
 800c4ce:	4906      	ldr	r1, [pc, #24]	; (800c4e8 <disk_initialize+0x48>)
 800c4d0:	440a      	add	r2, r1
 800c4d2:	7a12      	ldrb	r2, [r2, #8]
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4798      	blx	r3
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	240017d4 	.word	0x240017d4

0800c4ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c4ec:	b590      	push	{r4, r7, lr}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
 800c4fe:	4a0a      	ldr	r2, [pc, #40]	; (800c528 <disk_read+0x3c>)
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	689c      	ldr	r4, [r3, #8]
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	4a07      	ldr	r2, [pc, #28]	; (800c528 <disk_read+0x3c>)
 800c50c:	4413      	add	r3, r2
 800c50e:	7a18      	ldrb	r0, [r3, #8]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	47a0      	blx	r4
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	371c      	adds	r7, #28
 800c522:	46bd      	mov	sp, r7
 800c524:	bd90      	pop	{r4, r7, pc}
 800c526:	bf00      	nop
 800c528:	240017d4 	.word	0x240017d4

0800c52c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	4a0a      	ldr	r2, [pc, #40]	; (800c568 <disk_write+0x3c>)
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4413      	add	r3, r2
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	68dc      	ldr	r4, [r3, #12]
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	4a07      	ldr	r2, [pc, #28]	; (800c568 <disk_write+0x3c>)
 800c54c:	4413      	add	r3, r2
 800c54e:	7a18      	ldrb	r0, [r3, #8]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	47a0      	blx	r4
 800c558:	4603      	mov	r3, r0
 800c55a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	371c      	adds	r7, #28
 800c562:	46bd      	mov	sp, r7
 800c564:	bd90      	pop	{r4, r7, pc}
 800c566:	bf00      	nop
 800c568:	240017d4 	.word	0x240017d4

0800c56c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	4603      	mov	r3, r0
 800c574:	603a      	str	r2, [r7, #0]
 800c576:	71fb      	strb	r3, [r7, #7]
 800c578:	460b      	mov	r3, r1
 800c57a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	4a09      	ldr	r2, [pc, #36]	; (800c5a4 <disk_ioctl+0x38>)
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	79fa      	ldrb	r2, [r7, #7]
 800c58a:	4906      	ldr	r1, [pc, #24]	; (800c5a4 <disk_ioctl+0x38>)
 800c58c:	440a      	add	r2, r1
 800c58e:	7a10      	ldrb	r0, [r2, #8]
 800c590:	79b9      	ldrb	r1, [r7, #6]
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	4798      	blx	r3
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]
  return res;
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	240017d4 	.word	0x240017d4

0800c5a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c5b8:	89fb      	ldrh	r3, [r7, #14]
 800c5ba:	021b      	lsls	r3, r3, #8
 800c5bc:	b21a      	sxth	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	b21b      	sxth	r3, r3
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	b21b      	sxth	r3, r3
 800c5c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c5ca:	89fb      	ldrh	r3, [r7, #14]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3303      	adds	r3, #3
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	021b      	lsls	r3, r3, #8
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	3202      	adds	r2, #2
 800c5f0:	7812      	ldrb	r2, [r2, #0]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	021b      	lsls	r3, r3, #8
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	3201      	adds	r2, #1
 800c5fe:	7812      	ldrb	r2, [r2, #0]
 800c600:	4313      	orrs	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	021b      	lsls	r3, r3, #8
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	7812      	ldrb	r2, [r2, #0]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c610:	68fb      	ldr	r3, [r7, #12]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	460b      	mov	r3, r1
 800c628:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	887a      	ldrh	r2, [r7, #2]
 800c632:	b2d2      	uxtb	r2, r2
 800c634:	701a      	strb	r2, [r3, #0]
 800c636:	887b      	ldrh	r3, [r7, #2]
 800c638:	0a1b      	lsrs	r3, r3, #8
 800c63a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	607a      	str	r2, [r7, #4]
 800c642:	887a      	ldrh	r2, [r7, #2]
 800c644:	b2d2      	uxtb	r2, r2
 800c646:	701a      	strb	r2, [r3, #0]
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	b2d2      	uxtb	r2, r2
 800c668:	701a      	strb	r2, [r3, #0]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	0a1b      	lsrs	r3, r3, #8
 800c66e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	607a      	str	r2, [r7, #4]
 800c676:	683a      	ldr	r2, [r7, #0]
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	0a1b      	lsrs	r3, r3, #8
 800c680:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	0a1b      	lsrs	r3, r3, #8
 800c692:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	607a      	str	r2, [r7, #4]
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	701a      	strb	r2, [r3, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c6ac:	b480      	push	{r7}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00d      	beq.n	800c6e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	1c53      	adds	r3, r2, #1
 800c6ca:	613b      	str	r3, [r7, #16]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	1c59      	adds	r1, r3, #1
 800c6d0:	6179      	str	r1, [r7, #20]
 800c6d2:	7812      	ldrb	r2, [r2, #0]
 800c6d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	607b      	str	r3, [r7, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1f1      	bne.n	800c6c6 <mem_cpy+0x1a>
	}
}
 800c6e2:	bf00      	nop
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c6ee:	b480      	push	{r7}
 800c6f0:	b087      	sub	sp, #28
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	60f8      	str	r0, [r7, #12]
 800c6f6:	60b9      	str	r1, [r7, #8]
 800c6f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	1c5a      	adds	r2, r3, #1
 800c702:	617a      	str	r2, [r7, #20]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	607b      	str	r3, [r7, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f3      	bne.n	800c6fe <mem_set+0x10>
}
 800c716:	bf00      	nop
 800c718:	bf00      	nop
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c724:	b480      	push	{r7}
 800c726:	b089      	sub	sp, #36	; 0x24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	61fb      	str	r3, [r7, #28]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	1c5a      	adds	r2, r3, #1
 800c740:	61fa      	str	r2, [r7, #28]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4619      	mov	r1, r3
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	1c5a      	adds	r2, r3, #1
 800c74a:	61ba      	str	r2, [r7, #24]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	1acb      	subs	r3, r1, r3
 800c750:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3b01      	subs	r3, #1
 800c756:	607b      	str	r3, [r7, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <mem_cmp+0x40>
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0eb      	beq.n	800c73c <mem_cmp+0x18>

	return r;
 800c764:	697b      	ldr	r3, [r7, #20]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3724      	adds	r7, #36	; 0x24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c77c:	e002      	b.n	800c784 <chk_chr+0x12>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3301      	adds	r3, #1
 800c782:	607b      	str	r3, [r7, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <chk_chr+0x26>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	461a      	mov	r2, r3
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	4293      	cmp	r3, r2
 800c796:	d1f2      	bne.n	800c77e <chk_chr+0xc>
	return *str;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	781b      	ldrb	r3, [r3, #0]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60bb      	str	r3, [r7, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	e029      	b.n	800c810 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c7bc:	4a27      	ldr	r2, [pc, #156]	; (800c85c <chk_lock+0xb4>)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	011b      	lsls	r3, r3, #4
 800c7c2:	4413      	add	r3, r2
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d01d      	beq.n	800c806 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c7ca:	4a24      	ldr	r2, [pc, #144]	; (800c85c <chk_lock+0xb4>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	011b      	lsls	r3, r3, #4
 800c7d0:	4413      	add	r3, r2
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d116      	bne.n	800c80a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c7dc:	4a1f      	ldr	r2, [pc, #124]	; (800c85c <chk_lock+0xb4>)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	011b      	lsls	r3, r3, #4
 800c7e2:	4413      	add	r3, r2
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d10c      	bne.n	800c80a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c7f0:	4a1a      	ldr	r2, [pc, #104]	; (800c85c <chk_lock+0xb4>)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	011b      	lsls	r3, r3, #4
 800c7f6:	4413      	add	r3, r2
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c800:	429a      	cmp	r2, r3
 800c802:	d102      	bne.n	800c80a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c804:	e007      	b.n	800c816 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c806:	2301      	movs	r3, #1
 800c808:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	3301      	adds	r3, #1
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d9d2      	bls.n	800c7bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d109      	bne.n	800c830 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d102      	bne.n	800c828 <chk_lock+0x80>
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d101      	bne.n	800c82c <chk_lock+0x84>
 800c828:	2300      	movs	r3, #0
 800c82a:	e010      	b.n	800c84e <chk_lock+0xa6>
 800c82c:	2312      	movs	r3, #18
 800c82e:	e00e      	b.n	800c84e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d108      	bne.n	800c848 <chk_lock+0xa0>
 800c836:	4a09      	ldr	r2, [pc, #36]	; (800c85c <chk_lock+0xb4>)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	4413      	add	r3, r2
 800c83e:	330c      	adds	r3, #12
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c846:	d101      	bne.n	800c84c <chk_lock+0xa4>
 800c848:	2310      	movs	r3, #16
 800c84a:	e000      	b.n	800c84e <chk_lock+0xa6>
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	240017b4 	.word	0x240017b4

0800c860 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c866:	2300      	movs	r3, #0
 800c868:	607b      	str	r3, [r7, #4]
 800c86a:	e002      	b.n	800c872 <enq_lock+0x12>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	3301      	adds	r3, #1
 800c870:	607b      	str	r3, [r7, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d806      	bhi.n	800c886 <enq_lock+0x26>
 800c878:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <enq_lock+0x40>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	4413      	add	r3, r2
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1f2      	bne.n	800c86c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b02      	cmp	r3, #2
 800c88a:	bf14      	ite	ne
 800c88c:	2301      	movne	r3, #1
 800c88e:	2300      	moveq	r3, #0
 800c890:	b2db      	uxtb	r3, r3
}
 800c892:	4618      	mov	r0, r3
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	240017b4 	.word	0x240017b4

0800c8a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60fb      	str	r3, [r7, #12]
 800c8b2:	e01f      	b.n	800c8f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c8b4:	4a41      	ldr	r2, [pc, #260]	; (800c9bc <inc_lock+0x118>)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	011b      	lsls	r3, r3, #4
 800c8ba:	4413      	add	r3, r2
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d113      	bne.n	800c8ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c8c6:	4a3d      	ldr	r2, [pc, #244]	; (800c9bc <inc_lock+0x118>)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	011b      	lsls	r3, r3, #4
 800c8cc:	4413      	add	r3, r2
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d109      	bne.n	800c8ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c8da:	4a38      	ldr	r2, [pc, #224]	; (800c9bc <inc_lock+0x118>)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	011b      	lsls	r3, r3, #4
 800c8e0:	4413      	add	r3, r2
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d006      	beq.n	800c8fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d9dc      	bls.n	800c8b4 <inc_lock+0x10>
 800c8fa:	e000      	b.n	800c8fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c8fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b02      	cmp	r3, #2
 800c902:	d132      	bne.n	800c96a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c904:	2300      	movs	r3, #0
 800c906:	60fb      	str	r3, [r7, #12]
 800c908:	e002      	b.n	800c910 <inc_lock+0x6c>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d806      	bhi.n	800c924 <inc_lock+0x80>
 800c916:	4a29      	ldr	r2, [pc, #164]	; (800c9bc <inc_lock+0x118>)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	011b      	lsls	r3, r3, #4
 800c91c:	4413      	add	r3, r2
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1f2      	bne.n	800c90a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b02      	cmp	r3, #2
 800c928:	d101      	bne.n	800c92e <inc_lock+0x8a>
 800c92a:	2300      	movs	r3, #0
 800c92c:	e040      	b.n	800c9b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	4922      	ldr	r1, [pc, #136]	; (800c9bc <inc_lock+0x118>)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	011b      	lsls	r3, r3, #4
 800c938:	440b      	add	r3, r1
 800c93a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	491e      	ldr	r1, [pc, #120]	; (800c9bc <inc_lock+0x118>)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	440b      	add	r3, r1
 800c948:	3304      	adds	r3, #4
 800c94a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	695a      	ldr	r2, [r3, #20]
 800c950:	491a      	ldr	r1, [pc, #104]	; (800c9bc <inc_lock+0x118>)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	011b      	lsls	r3, r3, #4
 800c956:	440b      	add	r3, r1
 800c958:	3308      	adds	r3, #8
 800c95a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c95c:	4a17      	ldr	r2, [pc, #92]	; (800c9bc <inc_lock+0x118>)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	011b      	lsls	r3, r3, #4
 800c962:	4413      	add	r3, r2
 800c964:	330c      	adds	r3, #12
 800c966:	2200      	movs	r2, #0
 800c968:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d009      	beq.n	800c984 <inc_lock+0xe0>
 800c970:	4a12      	ldr	r2, [pc, #72]	; (800c9bc <inc_lock+0x118>)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	011b      	lsls	r3, r3, #4
 800c976:	4413      	add	r3, r2
 800c978:	330c      	adds	r3, #12
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <inc_lock+0xe0>
 800c980:	2300      	movs	r3, #0
 800c982:	e015      	b.n	800c9b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d108      	bne.n	800c99c <inc_lock+0xf8>
 800c98a:	4a0c      	ldr	r2, [pc, #48]	; (800c9bc <inc_lock+0x118>)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	4413      	add	r3, r2
 800c992:	330c      	adds	r3, #12
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	3301      	adds	r3, #1
 800c998:	b29a      	uxth	r2, r3
 800c99a:	e001      	b.n	800c9a0 <inc_lock+0xfc>
 800c99c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9a0:	4906      	ldr	r1, [pc, #24]	; (800c9bc <inc_lock+0x118>)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	011b      	lsls	r3, r3, #4
 800c9a6:	440b      	add	r3, r1
 800c9a8:	330c      	adds	r3, #12
 800c9aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3301      	adds	r3, #1
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	240017b4 	.word	0x240017b4

0800c9c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d825      	bhi.n	800ca20 <dec_lock+0x60>
		n = Files[i].ctr;
 800c9d4:	4a17      	ldr	r2, [pc, #92]	; (800ca34 <dec_lock+0x74>)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	4413      	add	r3, r2
 800c9dc:	330c      	adds	r3, #12
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c9e2:	89fb      	ldrh	r3, [r7, #14]
 800c9e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e8:	d101      	bne.n	800c9ee <dec_lock+0x2e>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c9ee:	89fb      	ldrh	r3, [r7, #14]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <dec_lock+0x3a>
 800c9f4:	89fb      	ldrh	r3, [r7, #14]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c9fa:	4a0e      	ldr	r2, [pc, #56]	; (800ca34 <dec_lock+0x74>)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	011b      	lsls	r3, r3, #4
 800ca00:	4413      	add	r3, r2
 800ca02:	330c      	adds	r3, #12
 800ca04:	89fa      	ldrh	r2, [r7, #14]
 800ca06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca08:	89fb      	ldrh	r3, [r7, #14]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d105      	bne.n	800ca1a <dec_lock+0x5a>
 800ca0e:	4a09      	ldr	r2, [pc, #36]	; (800ca34 <dec_lock+0x74>)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	011b      	lsls	r3, r3, #4
 800ca14:	4413      	add	r3, r2
 800ca16:	2200      	movs	r2, #0
 800ca18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	737b      	strb	r3, [r7, #13]
 800ca1e:	e001      	b.n	800ca24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca20:	2302      	movs	r3, #2
 800ca22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca24:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	240017b4 	.word	0x240017b4

0800ca38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ca40:	2300      	movs	r3, #0
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	e010      	b.n	800ca68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ca46:	4a0d      	ldr	r2, [pc, #52]	; (800ca7c <clear_lock+0x44>)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	4413      	add	r3, r2
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d105      	bne.n	800ca62 <clear_lock+0x2a>
 800ca56:	4a09      	ldr	r2, [pc, #36]	; (800ca7c <clear_lock+0x44>)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	011b      	lsls	r3, r3, #4
 800ca5c:	4413      	add	r3, r2
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3301      	adds	r3, #1
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d9eb      	bls.n	800ca46 <clear_lock+0xe>
	}
}
 800ca6e:	bf00      	nop
 800ca70:	bf00      	nop
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	240017b4 	.word	0x240017b4

0800ca80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	78db      	ldrb	r3, [r3, #3]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d034      	beq.n	800cafe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	7858      	ldrb	r0, [r3, #1]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800caa4:	2301      	movs	r3, #1
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	f7ff fd40 	bl	800c52c <disk_write>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d002      	beq.n	800cab8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	73fb      	strb	r3, [r7, #15]
 800cab6:	e022      	b.n	800cafe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	1ad2      	subs	r2, r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d217      	bcs.n	800cafe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	789b      	ldrb	r3, [r3, #2]
 800cad2:	613b      	str	r3, [r7, #16]
 800cad4:	e010      	b.n	800caf8 <sync_window+0x78>
					wsect += fs->fsize;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	4413      	add	r3, r2
 800cade:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7858      	ldrb	r0, [r3, #1]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800caea:	2301      	movs	r3, #1
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	f7ff fd1d 	bl	800c52c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	613b      	str	r3, [r7, #16]
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d8eb      	bhi.n	800cad6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d01b      	beq.n	800cb58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ffad 	bl	800ca80 <sync_window>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d113      	bne.n	800cb58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	7858      	ldrb	r0, [r3, #1]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	f7ff fcd5 	bl	800c4ec <disk_read>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d004      	beq.n	800cb52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cb48:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
	...

0800cb64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff ff87 	bl	800ca80 <sync_window>
 800cb72:	4603      	mov	r3, r0
 800cb74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d158      	bne.n	800cc2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d148      	bne.n	800cc16 <sync_fs+0xb2>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	791b      	ldrb	r3, [r3, #4]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d144      	bne.n	800cc16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3334      	adds	r3, #52	; 0x34
 800cb90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb94:	2100      	movs	r1, #0
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7ff fda9 	bl	800c6ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3334      	adds	r3, #52	; 0x34
 800cba0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cba4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7ff fd38 	bl	800c61e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3334      	adds	r3, #52	; 0x34
 800cbb2:	4921      	ldr	r1, [pc, #132]	; (800cc38 <sync_fs+0xd4>)
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff fd4d 	bl	800c654 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	3334      	adds	r3, #52	; 0x34
 800cbbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbc2:	491e      	ldr	r1, [pc, #120]	; (800cc3c <sync_fs+0xd8>)
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7ff fd45 	bl	800c654 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3334      	adds	r3, #52	; 0x34
 800cbce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7ff fd3b 	bl	800c654 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3334      	adds	r3, #52	; 0x34
 800cbe2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7ff fd31 	bl	800c654 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7858      	ldrb	r0, [r3, #1]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f7ff fc8e 	bl	800c52c <disk_write>
			fs->fsi_flag = 0;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	785b      	ldrb	r3, [r3, #1]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fca4 	bl	800c56c <disk_ioctl>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <sync_fs+0xca>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	41615252 	.word	0x41615252
 800cc3c:	61417272 	.word	0x61417272

0800cc40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	3b02      	subs	r3, #2
 800cc4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	3b02      	subs	r3, #2
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d301      	bcc.n	800cc60 <clust2sect+0x20>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e008      	b.n	800cc72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	895b      	ldrh	r3, [r3, #10]
 800cc64:	461a      	mov	r2, r3
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	fb03 f202 	mul.w	r2, r3, r2
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc70:	4413      	add	r3, r2
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b086      	sub	sp, #24
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d904      	bls.n	800cc9e <get_fat+0x20>
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d302      	bcc.n	800cca4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc9e:	2301      	movs	r3, #1
 800cca0:	617b      	str	r3, [r7, #20]
 800cca2:	e08f      	b.n	800cdc4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cca4:	f04f 33ff 	mov.w	r3, #4294967295
 800cca8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d062      	beq.n	800cd78 <get_fat+0xfa>
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	dc7c      	bgt.n	800cdb0 <get_fat+0x132>
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d002      	beq.n	800ccc0 <get_fat+0x42>
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d042      	beq.n	800cd44 <get_fat+0xc6>
 800ccbe:	e077      	b.n	800cdb0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	085b      	lsrs	r3, r3, #1
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	4413      	add	r3, r2
 800cccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	0a5b      	lsrs	r3, r3, #9
 800ccd6:	4413      	add	r3, r2
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6938      	ldr	r0, [r7, #16]
 800ccdc:	f7ff ff14 	bl	800cb08 <move_window>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d167      	bne.n	800cdb6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	60fa      	str	r2, [r7, #12]
 800ccec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	0a5b      	lsrs	r3, r3, #9
 800cd02:	4413      	add	r3, r2
 800cd04:	4619      	mov	r1, r3
 800cd06:	6938      	ldr	r0, [r7, #16]
 800cd08:	f7ff fefe 	bl	800cb08 <move_window>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d153      	bne.n	800cdba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	461a      	mov	r2, r3
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <get_fat+0xbc>
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	091b      	lsrs	r3, r3, #4
 800cd38:	e002      	b.n	800cd40 <get_fat+0xc2>
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd40:	617b      	str	r3, [r7, #20]
			break;
 800cd42:	e03f      	b.n	800cdc4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	0a1b      	lsrs	r3, r3, #8
 800cd4c:	4413      	add	r3, r2
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6938      	ldr	r0, [r7, #16]
 800cd52:	f7ff fed9 	bl	800cb08 <move_window>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d130      	bne.n	800cdbe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cd6a:	4413      	add	r3, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7ff fc1b 	bl	800c5a8 <ld_word>
 800cd72:	4603      	mov	r3, r0
 800cd74:	617b      	str	r3, [r7, #20]
			break;
 800cd76:	e025      	b.n	800cdc4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	09db      	lsrs	r3, r3, #7
 800cd80:	4413      	add	r3, r2
 800cd82:	4619      	mov	r1, r3
 800cd84:	6938      	ldr	r0, [r7, #16]
 800cd86:	f7ff febf 	bl	800cb08 <move_window>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d118      	bne.n	800cdc2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd9e:	4413      	add	r3, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fc19 	bl	800c5d8 <ld_dword>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cdac:	617b      	str	r3, [r7, #20]
			break;
 800cdae:	e009      	b.n	800cdc4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	617b      	str	r3, [r7, #20]
 800cdb4:	e006      	b.n	800cdc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdb6:	bf00      	nop
 800cdb8:	e004      	b.n	800cdc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdba:	bf00      	nop
 800cdbc:	e002      	b.n	800cdc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdbe:	bf00      	nop
 800cdc0:	e000      	b.n	800cdc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdc2:	bf00      	nop
		}
	}

	return val;
 800cdc4:	697b      	ldr	r3, [r7, #20]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cdce:	b590      	push	{r4, r7, lr}
 800cdd0:	b089      	sub	sp, #36	; 0x24
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cdda:	2302      	movs	r3, #2
 800cddc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	f240 80d2 	bls.w	800cf8a <put_fat+0x1bc>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	f080 80cc 	bcs.w	800cf8a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	f000 8096 	beq.w	800cf28 <put_fat+0x15a>
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	f300 80cd 	bgt.w	800cf9c <put_fat+0x1ce>
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d002      	beq.n	800ce0c <put_fat+0x3e>
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d06e      	beq.n	800cee8 <put_fat+0x11a>
 800ce0a:	e0c7      	b.n	800cf9c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	61bb      	str	r3, [r7, #24]
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	085b      	lsrs	r3, r3, #1
 800ce14:	69ba      	ldr	r2, [r7, #24]
 800ce16:	4413      	add	r3, r2
 800ce18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	0a5b      	lsrs	r3, r3, #9
 800ce22:	4413      	add	r3, r2
 800ce24:	4619      	mov	r1, r3
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff fe6e 	bl	800cb08 <move_window>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce30:	7ffb      	ldrb	r3, [r7, #31]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f040 80ab 	bne.w	800cf8e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	1c59      	adds	r1, r3, #1
 800ce42:	61b9      	str	r1, [r7, #24]
 800ce44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce48:	4413      	add	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00d      	beq.n	800ce72 <put_fat+0xa4>
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	b25b      	sxtb	r3, r3
 800ce5c:	f003 030f 	and.w	r3, r3, #15
 800ce60:	b25a      	sxtb	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	b25b      	sxtb	r3, r3
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	b25b      	sxtb	r3, r3
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	e001      	b.n	800ce76 <put_fat+0xa8>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	0a5b      	lsrs	r3, r3, #9
 800ce88:	4413      	add	r3, r2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff fe3b 	bl	800cb08 <move_window>
 800ce92:	4603      	mov	r3, r0
 800ce94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce96:	7ffb      	ldrb	r3, [r7, #31]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d17a      	bne.n	800cf92 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea8:	4413      	add	r3, r2
 800ceaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <put_fat+0xf0>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	091b      	lsrs	r3, r3, #4
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	e00e      	b.n	800cedc <put_fat+0x10e>
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	b25b      	sxtb	r3, r3
 800cec4:	f023 030f 	bic.w	r3, r3, #15
 800cec8:	b25a      	sxtb	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	0a1b      	lsrs	r3, r3, #8
 800cece:	b25b      	sxtb	r3, r3
 800ced0:	f003 030f 	and.w	r3, r3, #15
 800ced4:	b25b      	sxtb	r3, r3
 800ced6:	4313      	orrs	r3, r2
 800ced8:	b25b      	sxtb	r3, r3
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	697a      	ldr	r2, [r7, #20]
 800cede:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2201      	movs	r2, #1
 800cee4:	70da      	strb	r2, [r3, #3]
			break;
 800cee6:	e059      	b.n	800cf9c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	0a1b      	lsrs	r3, r3, #8
 800cef0:	4413      	add	r3, r2
 800cef2:	4619      	mov	r1, r3
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7ff fe07 	bl	800cb08 <move_window>
 800cefa:	4603      	mov	r3, r0
 800cefc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cefe:	7ffb      	ldrb	r3, [r7, #31]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d148      	bne.n	800cf96 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	005b      	lsls	r3, r3, #1
 800cf0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf12:	4413      	add	r3, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	b292      	uxth	r2, r2
 800cf18:	4611      	mov	r1, r2
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff fb7f 	bl	800c61e <st_word>
			fs->wflag = 1;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2201      	movs	r2, #1
 800cf24:	70da      	strb	r2, [r3, #3]
			break;
 800cf26:	e039      	b.n	800cf9c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	09db      	lsrs	r3, r3, #7
 800cf30:	4413      	add	r3, r2
 800cf32:	4619      	mov	r1, r3
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f7ff fde7 	bl	800cb08 <move_window>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf3e:	7ffb      	ldrb	r3, [r7, #31]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d12a      	bne.n	800cf9a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf58:	4413      	add	r3, r2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff fb3c 	bl	800c5d8 <ld_dword>
 800cf60:	4603      	mov	r3, r0
 800cf62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf66:	4323      	orrs	r3, r4
 800cf68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf78:	4413      	add	r3, r2
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff fb69 	bl	800c654 <st_dword>
			fs->wflag = 1;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	70da      	strb	r2, [r3, #3]
			break;
 800cf88:	e008      	b.n	800cf9c <put_fat+0x1ce>
		}
	}
 800cf8a:	bf00      	nop
 800cf8c:	e006      	b.n	800cf9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf8e:	bf00      	nop
 800cf90:	e004      	b.n	800cf9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf92:	bf00      	nop
 800cf94:	e002      	b.n	800cf9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf96:	bf00      	nop
 800cf98:	e000      	b.n	800cf9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf9a:	bf00      	nop
	return res;
 800cf9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3724      	adds	r7, #36	; 0x24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd90      	pop	{r4, r7, pc}

0800cfa6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b088      	sub	sp, #32
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d904      	bls.n	800cfcc <remove_chain+0x26>
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	699b      	ldr	r3, [r3, #24]
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d301      	bcc.n	800cfd0 <remove_chain+0x2a>
 800cfcc:	2302      	movs	r3, #2
 800cfce:	e04b      	b.n	800d068 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00c      	beq.n	800cff0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfda:	6879      	ldr	r1, [r7, #4]
 800cfdc:	69b8      	ldr	r0, [r7, #24]
 800cfde:	f7ff fef6 	bl	800cdce <put_fat>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cfe6:	7ffb      	ldrb	r3, [r7, #31]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <remove_chain+0x4a>
 800cfec:	7ffb      	ldrb	r3, [r7, #31]
 800cfee:	e03b      	b.n	800d068 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7ff fe43 	bl	800cc7e <get_fat>
 800cff8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d031      	beq.n	800d064 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d101      	bne.n	800d00a <remove_chain+0x64>
 800d006:	2302      	movs	r3, #2
 800d008:	e02e      	b.n	800d068 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d010:	d101      	bne.n	800d016 <remove_chain+0x70>
 800d012:	2301      	movs	r3, #1
 800d014:	e028      	b.n	800d068 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d016:	2200      	movs	r2, #0
 800d018:	68b9      	ldr	r1, [r7, #8]
 800d01a:	69b8      	ldr	r0, [r7, #24]
 800d01c:	f7ff fed7 	bl	800cdce <put_fat>
 800d020:	4603      	mov	r3, r0
 800d022:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d024:	7ffb      	ldrb	r3, [r7, #31]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <remove_chain+0x88>
 800d02a:	7ffb      	ldrb	r3, [r7, #31]
 800d02c:	e01c      	b.n	800d068 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	695a      	ldr	r2, [r3, #20]
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	3b02      	subs	r3, #2
 800d038:	429a      	cmp	r2, r3
 800d03a:	d20b      	bcs.n	800d054 <remove_chain+0xae>
			fs->free_clst++;
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	791b      	ldrb	r3, [r3, #4]
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d3c6      	bcc.n	800cff0 <remove_chain+0x4a>
 800d062:	e000      	b.n	800d066 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d064:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3720      	adds	r7, #32
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b088      	sub	sp, #32
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10d      	bne.n	800d0a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d004      	beq.n	800d09c <create_chain+0x2c>
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d31b      	bcc.n	800d0d4 <create_chain+0x64>
 800d09c:	2301      	movs	r3, #1
 800d09e:	61bb      	str	r3, [r7, #24]
 800d0a0:	e018      	b.n	800d0d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff fdea 	bl	800cc7e <get_fat>
 800d0aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d801      	bhi.n	800d0b6 <create_chain+0x46>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e070      	b.n	800d198 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0bc:	d101      	bne.n	800d0c2 <create_chain+0x52>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	e06a      	b.n	800d198 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	699b      	ldr	r3, [r3, #24]
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d201      	bcs.n	800d0d0 <create_chain+0x60>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	e063      	b.n	800d198 <create_chain+0x128>
		scl = clst;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	69fa      	ldr	r2, [r7, #28]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d307      	bcc.n	800d0f8 <create_chain+0x88>
				ncl = 2;
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d0ec:	69fa      	ldr	r2, [r7, #28]
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d901      	bls.n	800d0f8 <create_chain+0x88>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e04f      	b.n	800d198 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d0f8:	69f9      	ldr	r1, [r7, #28]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fdbf 	bl	800cc7e <get_fat>
 800d100:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00e      	beq.n	800d126 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d003      	beq.n	800d116 <create_chain+0xa6>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d114:	d101      	bne.n	800d11a <create_chain+0xaa>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	e03e      	b.n	800d198 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d11a:	69fa      	ldr	r2, [r7, #28]
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d1da      	bne.n	800d0d8 <create_chain+0x68>
 800d122:	2300      	movs	r3, #0
 800d124:	e038      	b.n	800d198 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d126:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d128:	f04f 32ff 	mov.w	r2, #4294967295
 800d12c:	69f9      	ldr	r1, [r7, #28]
 800d12e:	6938      	ldr	r0, [r7, #16]
 800d130:	f7ff fe4d 	bl	800cdce <put_fat>
 800d134:	4603      	mov	r3, r0
 800d136:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d138:	7dfb      	ldrb	r3, [r7, #23]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d109      	bne.n	800d152 <create_chain+0xe2>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6938      	ldr	r0, [r7, #16]
 800d14a:	f7ff fe40 	bl	800cdce <put_fat>
 800d14e:	4603      	mov	r3, r0
 800d150:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d152:	7dfb      	ldrb	r3, [r7, #23]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d116      	bne.n	800d186 <create_chain+0x116>
		fs->last_clst = ncl;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	69fa      	ldr	r2, [r7, #28]
 800d15c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	695a      	ldr	r2, [r3, #20]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	3b02      	subs	r3, #2
 800d168:	429a      	cmp	r2, r3
 800d16a:	d804      	bhi.n	800d176 <create_chain+0x106>
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	1e5a      	subs	r2, r3, #1
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	791b      	ldrb	r3, [r3, #4]
 800d17a:	f043 0301 	orr.w	r3, r3, #1
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	711a      	strb	r2, [r3, #4]
 800d184:	e007      	b.n	800d196 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d102      	bne.n	800d192 <create_chain+0x122>
 800d18c:	f04f 33ff 	mov.w	r3, #4294967295
 800d190:	e000      	b.n	800d194 <create_chain+0x124>
 800d192:	2301      	movs	r3, #1
 800d194:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d196:	69fb      	ldr	r3, [r7, #28]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3720      	adds	r7, #32
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b087      	sub	sp, #28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	0a5b      	lsrs	r3, r3, #9
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	8952      	ldrh	r2, [r2, #10]
 800d1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	1d1a      	adds	r2, r3, #4
 800d1ca:	613a      	str	r2, [r7, #16]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d101      	bne.n	800d1da <clmt_clust+0x3a>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	e010      	b.n	800d1fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d307      	bcc.n	800d1f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	617b      	str	r3, [r7, #20]
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	3304      	adds	r3, #4
 800d1ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1f0:	e7e9      	b.n	800d1c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d1f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	4413      	add	r3, r2
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	371c      	adds	r7, #28
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d21e:	d204      	bcs.n	800d22a <dir_sdi+0x22>
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	f003 031f 	and.w	r3, r3, #31
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <dir_sdi+0x26>
		return FR_INT_ERR;
 800d22a:	2302      	movs	r3, #2
 800d22c:	e063      	b.n	800d2f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <dir_sdi+0x46>
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	2b02      	cmp	r3, #2
 800d246:	d902      	bls.n	800d24e <dir_sdi+0x46>
		clst = fs->dirbase;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10c      	bne.n	800d26e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	095b      	lsrs	r3, r3, #5
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	8912      	ldrh	r2, [r2, #8]
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d301      	bcc.n	800d264 <dir_sdi+0x5c>
 800d260:	2302      	movs	r3, #2
 800d262:	e048      	b.n	800d2f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	61da      	str	r2, [r3, #28]
 800d26c:	e029      	b.n	800d2c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	895b      	ldrh	r3, [r3, #10]
 800d272:	025b      	lsls	r3, r3, #9
 800d274:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d276:	e019      	b.n	800d2ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6979      	ldr	r1, [r7, #20]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fcfe 	bl	800cc7e <get_fat>
 800d282:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28a:	d101      	bne.n	800d290 <dir_sdi+0x88>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e032      	b.n	800d2f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d904      	bls.n	800d2a0 <dir_sdi+0x98>
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d301      	bcc.n	800d2a4 <dir_sdi+0x9c>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	e028      	b.n	800d2f6 <dir_sdi+0xee>
			ofs -= csz;
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d2e1      	bcs.n	800d278 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d2b4:	6979      	ldr	r1, [r7, #20]
 800d2b6:	6938      	ldr	r0, [r7, #16]
 800d2b8:	f7ff fcc2 	bl	800cc40 <clust2sect>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	69db      	ldr	r3, [r3, #28]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <dir_sdi+0xcc>
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	e010      	b.n	800d2f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	69da      	ldr	r2, [r3, #28]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	0a5b      	lsrs	r3, r3, #9
 800d2dc:	441a      	add	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ee:	441a      	add	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b086      	sub	sp, #24
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	3320      	adds	r3, #32
 800d314:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <dir_next+0x28>
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d324:	d301      	bcc.n	800d32a <dir_next+0x2c>
 800d326:	2304      	movs	r3, #4
 800d328:	e0aa      	b.n	800d480 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d330:	2b00      	cmp	r3, #0
 800d332:	f040 8098 	bne.w	800d466 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	699b      	ldr	r3, [r3, #24]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10b      	bne.n	800d360 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	095b      	lsrs	r3, r3, #5
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	8912      	ldrh	r2, [r2, #8]
 800d350:	4293      	cmp	r3, r2
 800d352:	f0c0 8088 	bcc.w	800d466 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	61da      	str	r2, [r3, #28]
 800d35c:	2304      	movs	r3, #4
 800d35e:	e08f      	b.n	800d480 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	0a5b      	lsrs	r3, r3, #9
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	8952      	ldrh	r2, [r2, #10]
 800d368:	3a01      	subs	r2, #1
 800d36a:	4013      	ands	r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d17a      	bne.n	800d466 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	4619      	mov	r1, r3
 800d378:	4610      	mov	r0, r2
 800d37a:	f7ff fc80 	bl	800cc7e <get_fat>
 800d37e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d801      	bhi.n	800d38a <dir_next+0x8c>
 800d386:	2302      	movs	r3, #2
 800d388:	e07a      	b.n	800d480 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d390:	d101      	bne.n	800d396 <dir_next+0x98>
 800d392:	2301      	movs	r3, #1
 800d394:	e074      	b.n	800d480 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d358      	bcc.n	800d452 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d104      	bne.n	800d3b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	61da      	str	r2, [r3, #28]
 800d3ac:	2304      	movs	r3, #4
 800d3ae:	e067      	b.n	800d480 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f7ff fe59 	bl	800d070 <create_chain>
 800d3be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <dir_next+0xcc>
 800d3c6:	2307      	movs	r3, #7
 800d3c8:	e05a      	b.n	800d480 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d101      	bne.n	800d3d4 <dir_next+0xd6>
 800d3d0:	2302      	movs	r3, #2
 800d3d2:	e055      	b.n	800d480 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3da:	d101      	bne.n	800d3e0 <dir_next+0xe2>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e04f      	b.n	800d480 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff fb4d 	bl	800ca80 <sync_window>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d001      	beq.n	800d3f0 <dir_next+0xf2>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e047      	b.n	800d480 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3334      	adds	r3, #52	; 0x34
 800d3f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff f977 	bl	800c6ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d400:	2300      	movs	r3, #0
 800d402:	613b      	str	r3, [r7, #16]
 800d404:	6979      	ldr	r1, [r7, #20]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7ff fc1a 	bl	800cc40 <clust2sect>
 800d40c:	4602      	mov	r2, r0
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	631a      	str	r2, [r3, #48]	; 0x30
 800d412:	e012      	b.n	800d43a <dir_next+0x13c>
						fs->wflag = 1;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2201      	movs	r2, #1
 800d418:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7ff fb30 	bl	800ca80 <sync_window>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <dir_next+0x12c>
 800d426:	2301      	movs	r3, #1
 800d428:	e02a      	b.n	800d480 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	3301      	adds	r3, #1
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	631a      	str	r2, [r3, #48]	; 0x30
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	895b      	ldrh	r3, [r3, #10]
 800d43e:	461a      	mov	r2, r3
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	4293      	cmp	r3, r2
 800d444:	d3e6      	bcc.n	800d414 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	1ad2      	subs	r2, r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d458:	6979      	ldr	r1, [r7, #20]
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff fbf0 	bl	800cc40 <clust2sect>
 800d460:	4602      	mov	r2, r0
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d478:	441a      	add	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d498:	2100      	movs	r1, #0
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7ff feb4 	bl	800d208 <dir_sdi>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d12b      	bne.n	800d502 <dir_alloc+0x7a>
		n = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff fb27 	bl	800cb08 <move_window>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d4be:	7dfb      	ldrb	r3, [r7, #23]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d11d      	bne.n	800d500 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a1b      	ldr	r3, [r3, #32]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2be5      	cmp	r3, #229	; 0xe5
 800d4cc:	d004      	beq.n	800d4d8 <dir_alloc+0x50>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a1b      	ldr	r3, [r3, #32]
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d107      	bne.n	800d4e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	613b      	str	r3, [r7, #16]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d102      	bne.n	800d4ec <dir_alloc+0x64>
 800d4e6:	e00c      	b.n	800d502 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d4ec:	2101      	movs	r1, #1
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff ff05 	bl	800d2fe <dir_next>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d0d7      	beq.n	800d4ae <dir_alloc+0x26>
 800d4fe:	e000      	b.n	800d502 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d500:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d502:	7dfb      	ldrb	r3, [r7, #23]
 800d504:	2b04      	cmp	r3, #4
 800d506:	d101      	bne.n	800d50c <dir_alloc+0x84>
 800d508:	2307      	movs	r3, #7
 800d50a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	331a      	adds	r3, #26
 800d524:	4618      	mov	r0, r3
 800d526:	f7ff f83f 	bl	800c5a8 <ld_word>
 800d52a:	4603      	mov	r3, r0
 800d52c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b03      	cmp	r3, #3
 800d534:	d109      	bne.n	800d54a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	3314      	adds	r3, #20
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff f834 	bl	800c5a8 <ld_word>
 800d540:	4603      	mov	r3, r0
 800d542:	041b      	lsls	r3, r3, #16
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	4313      	orrs	r3, r2
 800d548:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d54a:	68fb      	ldr	r3, [r7, #12]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	331a      	adds	r3, #26
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	b292      	uxth	r2, r2
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff f857 	bl	800c61e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2b03      	cmp	r3, #3
 800d576:	d109      	bne.n	800d58c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f103 0214 	add.w	r2, r3, #20
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	0c1b      	lsrs	r3, r3, #16
 800d582:	b29b      	uxth	r3, r3
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7ff f849 	bl	800c61e <st_word>
	}
}
 800d58c:	bf00      	nop
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d594:	b590      	push	{r4, r7, lr}
 800d596:	b087      	sub	sp, #28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	331a      	adds	r3, #26
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff f800 	bl	800c5a8 <ld_word>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <cmp_lfn+0x1e>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e059      	b.n	800d666 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5ba:	1e5a      	subs	r2, r3, #1
 800d5bc:	4613      	mov	r3, r2
 800d5be:	005b      	lsls	r3, r3, #1
 800d5c0:	4413      	add	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	81fb      	strh	r3, [r7, #14]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	613b      	str	r3, [r7, #16]
 800d5d0:	e033      	b.n	800d63a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d5d2:	4a27      	ldr	r2, [pc, #156]	; (800d670 <cmp_lfn+0xdc>)
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	4413      	add	r3, r2
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe ffe1 	bl	800c5a8 <ld_word>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d5ea:	89fb      	ldrh	r3, [r7, #14]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01a      	beq.n	800d626 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	2bfe      	cmp	r3, #254	; 0xfe
 800d5f4:	d812      	bhi.n	800d61c <cmp_lfn+0x88>
 800d5f6:	89bb      	ldrh	r3, [r7, #12]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fe fead 	bl	800c358 <ff_wtoupper>
 800d5fe:	4603      	mov	r3, r0
 800d600:	461c      	mov	r4, r3
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	1c5a      	adds	r2, r3, #1
 800d606:	617a      	str	r2, [r7, #20]
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	4413      	add	r3, r2
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	4618      	mov	r0, r3
 800d612:	f7fe fea1 	bl	800c358 <ff_wtoupper>
 800d616:	4603      	mov	r3, r0
 800d618:	429c      	cmp	r4, r3
 800d61a:	d001      	beq.n	800d620 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d61c:	2300      	movs	r3, #0
 800d61e:	e022      	b.n	800d666 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d620:	89bb      	ldrh	r3, [r7, #12]
 800d622:	81fb      	strh	r3, [r7, #14]
 800d624:	e006      	b.n	800d634 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d626:	89bb      	ldrh	r3, [r7, #12]
 800d628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d001      	beq.n	800d634 <cmp_lfn+0xa0>
 800d630:	2300      	movs	r3, #0
 800d632:	e018      	b.n	800d666 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	3301      	adds	r3, #1
 800d638:	613b      	str	r3, [r7, #16]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b0c      	cmp	r3, #12
 800d63e:	d9c8      	bls.n	800d5d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <cmp_lfn+0xd0>
 800d64c:	89fb      	ldrh	r3, [r7, #14]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d008      	beq.n	800d664 <cmp_lfn+0xd0>
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	4413      	add	r3, r2
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <cmp_lfn+0xd0>
 800d660:	2300      	movs	r3, #0
 800d662:	e000      	b.n	800d666 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d664:	2301      	movs	r3, #1
}
 800d666:	4618      	mov	r0, r3
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd90      	pop	{r4, r7, pc}
 800d66e:	bf00      	nop
 800d670:	0800fde8 	.word	0x0800fde8

0800d674 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b088      	sub	sp, #32
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	4611      	mov	r1, r2
 800d680:	461a      	mov	r2, r3
 800d682:	460b      	mov	r3, r1
 800d684:	71fb      	strb	r3, [r7, #7]
 800d686:	4613      	mov	r3, r2
 800d688:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	330d      	adds	r3, #13
 800d68e:	79ba      	ldrb	r2, [r7, #6]
 800d690:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	330b      	adds	r3, #11
 800d696:	220f      	movs	r2, #15
 800d698:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	330c      	adds	r3, #12
 800d69e:	2200      	movs	r2, #0
 800d6a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	331a      	adds	r3, #26
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fe ffb8 	bl	800c61e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	1e5a      	subs	r2, r3, #1
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	4413      	add	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	82fb      	strh	r3, [r7, #22]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d6c6:	8afb      	ldrh	r3, [r7, #22]
 800d6c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d007      	beq.n	800d6e0 <put_lfn+0x6c>
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	61fa      	str	r2, [r7, #28]
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	4413      	add	r3, r2
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d6e0:	4a17      	ldr	r2, [pc, #92]	; (800d740 <put_lfn+0xcc>)
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	8afa      	ldrh	r2, [r7, #22]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe ff93 	bl	800c61e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d6f8:	8afb      	ldrh	r3, [r7, #22]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d102      	bne.n	800d704 <put_lfn+0x90>
 800d6fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d702:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	3301      	adds	r3, #1
 800d708:	61bb      	str	r3, [r7, #24]
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	2b0c      	cmp	r3, #12
 800d70e:	d9da      	bls.n	800d6c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d710:	8afb      	ldrh	r3, [r7, #22]
 800d712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d716:	4293      	cmp	r3, r2
 800d718:	d006      	beq.n	800d728 <put_lfn+0xb4>
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	4413      	add	r3, r2
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d103      	bne.n	800d730 <put_lfn+0xbc>
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d72e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	79fa      	ldrb	r2, [r7, #7]
 800d734:	701a      	strb	r2, [r3, #0]
}
 800d736:	bf00      	nop
 800d738:	3720      	adds	r7, #32
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0800fde8 	.word	0x0800fde8

0800d744 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08c      	sub	sp, #48	; 0x30
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d752:	220b      	movs	r2, #11
 800d754:	68b9      	ldr	r1, [r7, #8]
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7fe ffa8 	bl	800c6ac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	2b05      	cmp	r3, #5
 800d760:	d929      	bls.n	800d7b6 <gen_numname+0x72>
		sr = seq;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d766:	e020      	b.n	800d7aa <gen_numname+0x66>
			wc = *lfn++;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	1c9a      	adds	r2, r3, #2
 800d76c:	607a      	str	r2, [r7, #4]
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d772:	2300      	movs	r3, #0
 800d774:	62bb      	str	r3, [r7, #40]	; 0x28
 800d776:	e015      	b.n	800d7a4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	005a      	lsls	r2, r3, #1
 800d77c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	4413      	add	r3, r2
 800d784:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d788:	085b      	lsrs	r3, r3, #1
 800d78a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <gen_numname+0x5a>
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	4b30      	ldr	r3, [pc, #192]	; (800d85c <gen_numname+0x118>)
 800d79a:	4053      	eors	r3, r2
 800d79c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	2b0f      	cmp	r3, #15
 800d7a8:	d9e6      	bls.n	800d778 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1da      	bne.n	800d768 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d7b6:	2307      	movs	r3, #7
 800d7b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	f003 030f 	and.w	r3, r3, #15
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	3330      	adds	r3, #48	; 0x30
 800d7c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d7ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ce:	2b39      	cmp	r3, #57	; 0x39
 800d7d0:	d904      	bls.n	800d7dc <gen_numname+0x98>
 800d7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7d6:	3307      	adds	r3, #7
 800d7d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	1e5a      	subs	r2, r3, #1
 800d7e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d7e2:	3330      	adds	r3, #48	; 0x30
 800d7e4:	443b      	add	r3, r7
 800d7e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d7ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	091b      	lsrs	r3, r3, #4
 800d7f2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1df      	bne.n	800d7ba <gen_numname+0x76>
	ns[i] = '~';
 800d7fa:	f107 0214 	add.w	r2, r7, #20
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	4413      	add	r3, r2
 800d802:	227e      	movs	r2, #126	; 0x7e
 800d804:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d806:	2300      	movs	r3, #0
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
 800d80a:	e002      	b.n	800d812 <gen_numname+0xce>
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	3301      	adds	r3, #1
 800d810:	627b      	str	r3, [r7, #36]	; 0x24
 800d812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	429a      	cmp	r2, r3
 800d818:	d205      	bcs.n	800d826 <gen_numname+0xe2>
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	4413      	add	r3, r2
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b20      	cmp	r3, #32
 800d824:	d1f2      	bne.n	800d80c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d828:	2b07      	cmp	r3, #7
 800d82a:	d807      	bhi.n	800d83c <gen_numname+0xf8>
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	62ba      	str	r2, [r7, #40]	; 0x28
 800d832:	3330      	adds	r3, #48	; 0x30
 800d834:	443b      	add	r3, r7
 800d836:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d83a:	e000      	b.n	800d83e <gen_numname+0xfa>
 800d83c:	2120      	movs	r1, #32
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	1c5a      	adds	r2, r3, #1
 800d842:	627a      	str	r2, [r7, #36]	; 0x24
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4413      	add	r3, r2
 800d848:	460a      	mov	r2, r1
 800d84a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	2b07      	cmp	r3, #7
 800d850:	d9e9      	bls.n	800d826 <gen_numname+0xe2>
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	3730      	adds	r7, #48	; 0x30
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	00011021 	.word	0x00011021

0800d860 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d860:	b480      	push	{r7}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d86c:	230b      	movs	r3, #11
 800d86e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	b2da      	uxtb	r2, r3
 800d874:	0852      	lsrs	r2, r2, #1
 800d876:	01db      	lsls	r3, r3, #7
 800d878:	4313      	orrs	r3, r2
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	1c59      	adds	r1, r3, #1
 800d880:	6079      	str	r1, [r7, #4]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	4413      	add	r3, r2
 800d886:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	3b01      	subs	r3, #1
 800d88c:	60bb      	str	r3, [r7, #8]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1ed      	bne.n	800d870 <sum_sfn+0x10>
	return sum;
 800d894:	7bfb      	ldrb	r3, [r7, #15]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b086      	sub	sp, #24
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fca8 	bl	800d208 <dir_sdi>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d8bc:	7dfb      	ldrb	r3, [r7, #23]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <dir_find+0x24>
 800d8c2:	7dfb      	ldrb	r3, [r7, #23]
 800d8c4:	e0a9      	b.n	800da1a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d8c6:	23ff      	movs	r3, #255	; 0xff
 800d8c8:	753b      	strb	r3, [r7, #20]
 800d8ca:	7d3b      	ldrb	r3, [r7, #20]
 800d8cc:	757b      	strb	r3, [r7, #21]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	69db      	ldr	r3, [r3, #28]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6938      	ldr	r0, [r7, #16]
 800d8de:	f7ff f913 	bl	800cb08 <move_window>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d8e6:	7dfb      	ldrb	r3, [r7, #23]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f040 8090 	bne.w	800da0e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d8f6:	7dbb      	ldrb	r3, [r7, #22]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <dir_find+0x60>
 800d8fc:	2304      	movs	r3, #4
 800d8fe:	75fb      	strb	r3, [r7, #23]
 800d900:	e08a      	b.n	800da18 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a1b      	ldr	r3, [r3, #32]
 800d906:	330b      	adds	r3, #11
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d90e:	73fb      	strb	r3, [r7, #15]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7bfa      	ldrb	r2, [r7, #15]
 800d914:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d916:	7dbb      	ldrb	r3, [r7, #22]
 800d918:	2be5      	cmp	r3, #229	; 0xe5
 800d91a:	d007      	beq.n	800d92c <dir_find+0x8a>
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	f003 0308 	and.w	r3, r3, #8
 800d922:	2b00      	cmp	r3, #0
 800d924:	d009      	beq.n	800d93a <dir_find+0x98>
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	2b0f      	cmp	r3, #15
 800d92a:	d006      	beq.n	800d93a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d92c:	23ff      	movs	r3, #255	; 0xff
 800d92e:	757b      	strb	r3, [r7, #21]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f04f 32ff 	mov.w	r2, #4294967295
 800d936:	631a      	str	r2, [r3, #48]	; 0x30
 800d938:	e05e      	b.n	800d9f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
 800d93c:	2b0f      	cmp	r3, #15
 800d93e:	d136      	bne.n	800d9ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d154      	bne.n	800d9f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d94e:	7dbb      	ldrb	r3, [r7, #22]
 800d950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00d      	beq.n	800d974 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	7b5b      	ldrb	r3, [r3, #13]
 800d95e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d960:	7dbb      	ldrb	r3, [r7, #22]
 800d962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d966:	75bb      	strb	r3, [r7, #22]
 800d968:	7dbb      	ldrb	r3, [r7, #22]
 800d96a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	695a      	ldr	r2, [r3, #20]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d974:	7dba      	ldrb	r2, [r7, #22]
 800d976:	7d7b      	ldrb	r3, [r7, #21]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d115      	bne.n	800d9a8 <dir_find+0x106>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a1b      	ldr	r3, [r3, #32]
 800d980:	330d      	adds	r3, #13
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	7d3a      	ldrb	r2, [r7, #20]
 800d986:	429a      	cmp	r2, r3
 800d988:	d10e      	bne.n	800d9a8 <dir_find+0x106>
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6a1b      	ldr	r3, [r3, #32]
 800d992:	4619      	mov	r1, r3
 800d994:	4610      	mov	r0, r2
 800d996:	f7ff fdfd 	bl	800d594 <cmp_lfn>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d003      	beq.n	800d9a8 <dir_find+0x106>
 800d9a0:	7d7b      	ldrb	r3, [r7, #21]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	e000      	b.n	800d9aa <dir_find+0x108>
 800d9a8:	23ff      	movs	r3, #255	; 0xff
 800d9aa:	757b      	strb	r3, [r7, #21]
 800d9ac:	e024      	b.n	800d9f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d9ae:	7d7b      	ldrb	r3, [r7, #21]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d109      	bne.n	800d9c8 <dir_find+0x126>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff ff51 	bl	800d860 <sum_sfn>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	7d3b      	ldrb	r3, [r7, #20]
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d024      	beq.n	800da12 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10a      	bne.n	800d9ec <dir_find+0x14a>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a18      	ldr	r0, [r3, #32]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3324      	adds	r3, #36	; 0x24
 800d9de:	220b      	movs	r2, #11
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	f7fe fe9f 	bl	800c724 <mem_cmp>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d014      	beq.n	800da16 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9ec:	23ff      	movs	r3, #255	; 0xff
 800d9ee:	757b      	strb	r3, [r7, #21]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff fc7f 	bl	800d2fe <dir_next>
 800da00:	4603      	mov	r3, r0
 800da02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800da04:	7dfb      	ldrb	r3, [r7, #23]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f43f af65 	beq.w	800d8d6 <dir_find+0x34>
 800da0c:	e004      	b.n	800da18 <dir_find+0x176>
		if (res != FR_OK) break;
 800da0e:	bf00      	nop
 800da10:	e002      	b.n	800da18 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da12:	bf00      	nop
 800da14:	e000      	b.n	800da18 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da16:	bf00      	nop

	return res;
 800da18:	7dfb      	ldrb	r3, [r7, #23]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08c      	sub	sp, #48	; 0x30
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <dir_register+0x20>
 800da40:	2306      	movs	r3, #6
 800da42:	e0e0      	b.n	800dc06 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800da44:	2300      	movs	r3, #0
 800da46:	627b      	str	r3, [r7, #36]	; 0x24
 800da48:	e002      	b.n	800da50 <dir_register+0x2c>
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	3301      	adds	r3, #1
 800da4e:	627b      	str	r3, [r7, #36]	; 0x24
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	68da      	ldr	r2, [r3, #12]
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	005b      	lsls	r3, r3, #1
 800da58:	4413      	add	r3, r2
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1f4      	bne.n	800da4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800da66:	f107 030c 	add.w	r3, r7, #12
 800da6a:	220c      	movs	r2, #12
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fe fe1d 	bl	800c6ac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d032      	beq.n	800dae2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2240      	movs	r2, #64	; 0x40
 800da80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800da84:	2301      	movs	r3, #1
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28
 800da88:	e016      	b.n	800dab8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	68da      	ldr	r2, [r3, #12]
 800da94:	f107 010c 	add.w	r1, r7, #12
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	f7ff fe53 	bl	800d744 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7ff feff 	bl	800d8a2 <dir_find>
 800daa4:	4603      	mov	r3, r0
 800daa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800daaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d106      	bne.n	800dac0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	3301      	adds	r3, #1
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	2b63      	cmp	r3, #99	; 0x63
 800dabc:	d9e5      	bls.n	800da8a <dir_register+0x66>
 800dabe:	e000      	b.n	800dac2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dac0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	2b64      	cmp	r3, #100	; 0x64
 800dac6:	d101      	bne.n	800dacc <dir_register+0xa8>
 800dac8:	2307      	movs	r3, #7
 800daca:	e09c      	b.n	800dc06 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dacc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dad0:	2b04      	cmp	r3, #4
 800dad2:	d002      	beq.n	800dada <dir_register+0xb6>
 800dad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dad8:	e095      	b.n	800dc06 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dada:	7dfa      	ldrb	r2, [r7, #23]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	f003 0302 	and.w	r3, r3, #2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d007      	beq.n	800dafc <dir_register+0xd8>
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	330c      	adds	r3, #12
 800daf0:	4a47      	ldr	r2, [pc, #284]	; (800dc10 <dir_register+0x1ec>)
 800daf2:	fba2 2303 	umull	r2, r3, r2, r3
 800daf6:	089b      	lsrs	r3, r3, #2
 800daf8:	3301      	adds	r3, #1
 800dafa:	e000      	b.n	800dafe <dir_register+0xda>
 800dafc:	2301      	movs	r3, #1
 800dafe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800db00:	6a39      	ldr	r1, [r7, #32]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff fcc0 	bl	800d488 <dir_alloc>
 800db08:	4603      	mov	r3, r0
 800db0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800db0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db12:	2b00      	cmp	r3, #0
 800db14:	d148      	bne.n	800dba8 <dir_register+0x184>
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	3b01      	subs	r3, #1
 800db1a:	623b      	str	r3, [r7, #32]
 800db1c:	6a3b      	ldr	r3, [r7, #32]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d042      	beq.n	800dba8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	695a      	ldr	r2, [r3, #20]
 800db26:	6a3b      	ldr	r3, [r7, #32]
 800db28:	015b      	lsls	r3, r3, #5
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	4619      	mov	r1, r3
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff fb6a 	bl	800d208 <dir_sdi>
 800db34:	4603      	mov	r3, r0
 800db36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800db3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d132      	bne.n	800dba8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	3324      	adds	r3, #36	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f7ff fe8a 	bl	800d860 <sum_sfn>
 800db4c:	4603      	mov	r3, r0
 800db4e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	69db      	ldr	r3, [r3, #28]
 800db54:	4619      	mov	r1, r3
 800db56:	69f8      	ldr	r0, [r7, #28]
 800db58:	f7fe ffd6 	bl	800cb08 <move_window>
 800db5c:	4603      	mov	r3, r0
 800db5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800db62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db66:	2b00      	cmp	r3, #0
 800db68:	d11d      	bne.n	800dba6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	68d8      	ldr	r0, [r3, #12]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a19      	ldr	r1, [r3, #32]
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	b2da      	uxtb	r2, r3
 800db76:	7efb      	ldrb	r3, [r7, #27]
 800db78:	f7ff fd7c 	bl	800d674 <put_lfn>
				fs->wflag = 1;
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	2201      	movs	r2, #1
 800db80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800db82:	2100      	movs	r1, #0
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff fbba 	bl	800d2fe <dir_next>
 800db8a:	4603      	mov	r3, r0
 800db8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800db90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db94:	2b00      	cmp	r3, #0
 800db96:	d107      	bne.n	800dba8 <dir_register+0x184>
 800db98:	6a3b      	ldr	r3, [r7, #32]
 800db9a:	3b01      	subs	r3, #1
 800db9c:	623b      	str	r3, [r7, #32]
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1d5      	bne.n	800db50 <dir_register+0x12c>
 800dba4:	e000      	b.n	800dba8 <dir_register+0x184>
				if (res != FR_OK) break;
 800dba6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d128      	bne.n	800dc02 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	69f8      	ldr	r0, [r7, #28]
 800dbb8:	f7fe ffa6 	bl	800cb08 <move_window>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d11b      	bne.n	800dc02 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	2220      	movs	r2, #32
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe fd8b 	bl	800c6ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a18      	ldr	r0, [r3, #32]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3324      	adds	r3, #36	; 0x24
 800dbe0:	220b      	movs	r2, #11
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	f7fe fd62 	bl	800c6ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	330c      	adds	r3, #12
 800dbf4:	f002 0218 	and.w	r2, r2, #24
 800dbf8:	b2d2      	uxtb	r2, r2
 800dbfa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3730      	adds	r7, #48	; 0x30
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	4ec4ec4f 	.word	0x4ec4ec4f

0800dc14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b08a      	sub	sp, #40	; 0x28
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	613b      	str	r3, [r7, #16]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	60fb      	str	r3, [r7, #12]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	617b      	str	r3, [r7, #20]
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	61ba      	str	r2, [r7, #24]
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dc42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc44:	2b1f      	cmp	r3, #31
 800dc46:	d940      	bls.n	800dcca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dc48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc4a:	2b2f      	cmp	r3, #47	; 0x2f
 800dc4c:	d006      	beq.n	800dc5c <create_name+0x48>
 800dc4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc50:	2b5c      	cmp	r3, #92	; 0x5c
 800dc52:	d110      	bne.n	800dc76 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc54:	e002      	b.n	800dc5c <create_name+0x48>
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	61bb      	str	r3, [r7, #24]
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	4413      	add	r3, r2
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	2b2f      	cmp	r3, #47	; 0x2f
 800dc66:	d0f6      	beq.n	800dc56 <create_name+0x42>
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b5c      	cmp	r3, #92	; 0x5c
 800dc72:	d0f0      	beq.n	800dc56 <create_name+0x42>
			break;
 800dc74:	e02a      	b.n	800dccc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2bfe      	cmp	r3, #254	; 0xfe
 800dc7a:	d901      	bls.n	800dc80 <create_name+0x6c>
 800dc7c:	2306      	movs	r3, #6
 800dc7e:	e17d      	b.n	800df7c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dc80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dc86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc88:	2101      	movs	r1, #1
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fe fb28 	bl	800c2e0 <ff_convert>
 800dc90:	4603      	mov	r3, r0
 800dc92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <create_name+0x8a>
 800dc9a:	2306      	movs	r3, #6
 800dc9c:	e16e      	b.n	800df7c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dc9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dca0:	2b7f      	cmp	r3, #127	; 0x7f
 800dca2:	d809      	bhi.n	800dcb8 <create_name+0xa4>
 800dca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dca6:	4619      	mov	r1, r3
 800dca8:	488d      	ldr	r0, [pc, #564]	; (800dee0 <create_name+0x2cc>)
 800dcaa:	f7fe fd62 	bl	800c772 <chk_chr>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <create_name+0xa4>
 800dcb4:	2306      	movs	r3, #6
 800dcb6:	e161      	b.n	800df7c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	617a      	str	r2, [r7, #20]
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcc6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dcc8:	e7b4      	b.n	800dc34 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dcca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	441a      	add	r2, r3
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dcd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd8:	2b1f      	cmp	r3, #31
 800dcda:	d801      	bhi.n	800dce0 <create_name+0xcc>
 800dcdc:	2304      	movs	r3, #4
 800dcde:	e000      	b.n	800dce2 <create_name+0xce>
 800dce0:	2300      	movs	r3, #0
 800dce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dce6:	e011      	b.n	800dd0c <create_name+0xf8>
		w = lfn[di - 1];
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dcee:	4413      	add	r3, r2
 800dcf0:	005b      	lsls	r3, r3, #1
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	881b      	ldrh	r3, [r3, #0]
 800dcf8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dcfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcfc:	2b20      	cmp	r3, #32
 800dcfe:	d002      	beq.n	800dd06 <create_name+0xf2>
 800dd00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd02:	2b2e      	cmp	r3, #46	; 0x2e
 800dd04:	d106      	bne.n	800dd14 <create_name+0x100>
		di--;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1ea      	bne.n	800dce8 <create_name+0xd4>
 800dd12:	e000      	b.n	800dd16 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dd14:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <create_name+0x118>
 800dd28:	2306      	movs	r3, #6
 800dd2a:	e127      	b.n	800df7c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	3324      	adds	r3, #36	; 0x24
 800dd30:	220b      	movs	r2, #11
 800dd32:	2120      	movs	r1, #32
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fe fcda 	bl	800c6ee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	61bb      	str	r3, [r7, #24]
 800dd3e:	e002      	b.n	800dd46 <create_name+0x132>
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	3301      	adds	r3, #1
 800dd44:	61bb      	str	r3, [r7, #24]
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	2b20      	cmp	r3, #32
 800dd52:	d0f5      	beq.n	800dd40 <create_name+0x12c>
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	2b2e      	cmp	r3, #46	; 0x2e
 800dd60:	d0ee      	beq.n	800dd40 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d009      	beq.n	800dd7c <create_name+0x168>
 800dd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd6c:	f043 0303 	orr.w	r3, r3, #3
 800dd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dd74:	e002      	b.n	800dd7c <create_name+0x168>
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d009      	beq.n	800dd96 <create_name+0x182>
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd88:	4413      	add	r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	4413      	add	r3, r2
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	2b2e      	cmp	r3, #46	; 0x2e
 800dd94:	d1ef      	bne.n	800dd76 <create_name+0x162>

	i = b = 0; ni = 8;
 800dd96:	2300      	movs	r3, #0
 800dd98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	623b      	str	r3, [r7, #32]
 800dda0:	2308      	movs	r3, #8
 800dda2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	1c5a      	adds	r2, r3, #1
 800dda8:	61ba      	str	r2, [r7, #24]
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	4413      	add	r3, r2
 800ddb0:	881b      	ldrh	r3, [r3, #0]
 800ddb2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ddb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 8090 	beq.w	800dedc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ddbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddbe:	2b20      	cmp	r3, #32
 800ddc0:	d006      	beq.n	800ddd0 <create_name+0x1bc>
 800ddc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddc4:	2b2e      	cmp	r3, #46	; 0x2e
 800ddc6:	d10a      	bne.n	800ddde <create_name+0x1ca>
 800ddc8:	69ba      	ldr	r2, [r7, #24]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d006      	beq.n	800ddde <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ddd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd4:	f043 0303 	orr.w	r3, r3, #3
 800ddd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dddc:	e07d      	b.n	800deda <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ddde:	6a3a      	ldr	r2, [r7, #32]
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d203      	bcs.n	800ddee <create_name+0x1da>
 800dde6:	69ba      	ldr	r2, [r7, #24]
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d123      	bne.n	800de36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	2b0b      	cmp	r3, #11
 800ddf2:	d106      	bne.n	800de02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ddf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf8:	f043 0303 	orr.w	r3, r3, #3
 800ddfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de00:	e075      	b.n	800deee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800de02:	69ba      	ldr	r2, [r7, #24]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	429a      	cmp	r2, r3
 800de08:	d005      	beq.n	800de16 <create_name+0x202>
 800de0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de0e:	f043 0303 	orr.w	r3, r3, #3
 800de12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800de16:	69ba      	ldr	r2, [r7, #24]
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d866      	bhi.n	800deec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	61bb      	str	r3, [r7, #24]
 800de22:	2308      	movs	r3, #8
 800de24:	623b      	str	r3, [r7, #32]
 800de26:	230b      	movs	r3, #11
 800de28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800de2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de34:	e051      	b.n	800deda <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800de36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de38:	2b7f      	cmp	r3, #127	; 0x7f
 800de3a:	d914      	bls.n	800de66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800de3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de3e:	2100      	movs	r1, #0
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe fa4d 	bl	800c2e0 <ff_convert>
 800de46:	4603      	mov	r3, r0
 800de48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800de4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d004      	beq.n	800de5a <create_name+0x246>
 800de50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de52:	3b80      	subs	r3, #128	; 0x80
 800de54:	4a23      	ldr	r2, [pc, #140]	; (800dee4 <create_name+0x2d0>)
 800de56:	5cd3      	ldrb	r3, [r2, r3]
 800de58:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800de5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de5e:	f043 0302 	orr.w	r3, r3, #2
 800de62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800de66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d007      	beq.n	800de7c <create_name+0x268>
 800de6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de6e:	4619      	mov	r1, r3
 800de70:	481d      	ldr	r0, [pc, #116]	; (800dee8 <create_name+0x2d4>)
 800de72:	f7fe fc7e 	bl	800c772 <chk_chr>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d008      	beq.n	800de8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800de7c:	235f      	movs	r3, #95	; 0x5f
 800de7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de84:	f043 0303 	orr.w	r3, r3, #3
 800de88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de8c:	e01b      	b.n	800dec6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800de8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de90:	2b40      	cmp	r3, #64	; 0x40
 800de92:	d909      	bls.n	800dea8 <create_name+0x294>
 800de94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de96:	2b5a      	cmp	r3, #90	; 0x5a
 800de98:	d806      	bhi.n	800dea8 <create_name+0x294>
					b |= 2;
 800de9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de9e:	f043 0302 	orr.w	r3, r3, #2
 800dea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dea6:	e00e      	b.n	800dec6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deaa:	2b60      	cmp	r3, #96	; 0x60
 800deac:	d90b      	bls.n	800dec6 <create_name+0x2b2>
 800deae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deb0:	2b7a      	cmp	r3, #122	; 0x7a
 800deb2:	d808      	bhi.n	800dec6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800deb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deb8:	f043 0301 	orr.w	r3, r3, #1
 800debc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec2:	3b20      	subs	r3, #32
 800dec4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	623a      	str	r2, [r7, #32]
 800decc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dece:	b2d1      	uxtb	r1, r2
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	4413      	add	r3, r2
 800ded4:	460a      	mov	r2, r1
 800ded6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800deda:	e763      	b.n	800dda4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dedc:	bf00      	nop
 800dede:	e006      	b.n	800deee <create_name+0x2da>
 800dee0:	0800f91c 	.word	0x0800f91c
 800dee4:	0800fd68 	.word	0x0800fd68
 800dee8:	0800f928 	.word	0x0800f928
			if (si > di) break;			/* No extension */
 800deec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800def4:	2be5      	cmp	r3, #229	; 0xe5
 800def6:	d103      	bne.n	800df00 <create_name+0x2ec>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2205      	movs	r2, #5
 800defc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	2b08      	cmp	r3, #8
 800df04:	d104      	bne.n	800df10 <create_name+0x2fc>
 800df06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800df10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df14:	f003 030c 	and.w	r3, r3, #12
 800df18:	2b0c      	cmp	r3, #12
 800df1a:	d005      	beq.n	800df28 <create_name+0x314>
 800df1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df20:	f003 0303 	and.w	r3, r3, #3
 800df24:	2b03      	cmp	r3, #3
 800df26:	d105      	bne.n	800df34 <create_name+0x320>
 800df28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df2c:	f043 0302 	orr.w	r3, r3, #2
 800df30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800df34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d117      	bne.n	800df70 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800df40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df44:	f003 0303 	and.w	r3, r3, #3
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d105      	bne.n	800df58 <create_name+0x344>
 800df4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df50:	f043 0310 	orr.w	r3, r3, #16
 800df54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800df58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df5c:	f003 030c 	and.w	r3, r3, #12
 800df60:	2b04      	cmp	r3, #4
 800df62:	d105      	bne.n	800df70 <create_name+0x35c>
 800df64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df68:	f043 0308 	orr.w	r3, r3, #8
 800df6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800df76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800df7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3728      	adds	r7, #40	; 0x28
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df98:	e002      	b.n	800dfa0 <follow_path+0x1c>
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	3301      	adds	r3, #1
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	2b2f      	cmp	r3, #47	; 0x2f
 800dfa6:	d0f8      	beq.n	800df9a <follow_path+0x16>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b5c      	cmp	r3, #92	; 0x5c
 800dfae:	d0f4      	beq.n	800df9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b1f      	cmp	r3, #31
 800dfbc:	d80a      	bhi.n	800dfd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2280      	movs	r2, #128	; 0x80
 800dfc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff f91d 	bl	800d208 <dir_sdi>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	75fb      	strb	r3, [r7, #23]
 800dfd2:	e043      	b.n	800e05c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfd4:	463b      	mov	r3, r7
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7ff fe1b 	bl	800dc14 <create_name>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d134      	bne.n	800e052 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f7ff fc5a 	bl	800d8a2 <dir_find>
 800dfee:	4603      	mov	r3, r0
 800dff0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dff8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dffa:	7dfb      	ldrb	r3, [r7, #23]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00a      	beq.n	800e016 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e000:	7dfb      	ldrb	r3, [r7, #23]
 800e002:	2b04      	cmp	r3, #4
 800e004:	d127      	bne.n	800e056 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e006:	7afb      	ldrb	r3, [r7, #11]
 800e008:	f003 0304 	and.w	r3, r3, #4
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d122      	bne.n	800e056 <follow_path+0xd2>
 800e010:	2305      	movs	r3, #5
 800e012:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e014:	e01f      	b.n	800e056 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e016:	7afb      	ldrb	r3, [r7, #11]
 800e018:	f003 0304 	and.w	r3, r3, #4
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d11c      	bne.n	800e05a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	799b      	ldrb	r3, [r3, #6]
 800e024:	f003 0310 	and.w	r3, r3, #16
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d102      	bne.n	800e032 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e02c:	2305      	movs	r3, #5
 800e02e:	75fb      	strb	r3, [r7, #23]
 800e030:	e014      	b.n	800e05c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	695b      	ldr	r3, [r3, #20]
 800e03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e040:	4413      	add	r3, r2
 800e042:	4619      	mov	r1, r3
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff fa66 	bl	800d516 <ld_clust>
 800e04a:	4602      	mov	r2, r0
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e050:	e7c0      	b.n	800dfd4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e052:	bf00      	nop
 800e054:	e002      	b.n	800e05c <follow_path+0xd8>
				break;
 800e056:	bf00      	nop
 800e058:	e000      	b.n	800e05c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e05a:	bf00      	nop
			}
		}
	}

	return res;
 800e05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e066:	b480      	push	{r7}
 800e068:	b087      	sub	sp, #28
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e06e:	f04f 33ff 	mov.w	r3, #4294967295
 800e072:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d031      	beq.n	800e0e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	617b      	str	r3, [r7, #20]
 800e082:	e002      	b.n	800e08a <get_ldnumber+0x24>
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	3301      	adds	r3, #1
 800e088:	617b      	str	r3, [r7, #20]
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b1f      	cmp	r3, #31
 800e090:	d903      	bls.n	800e09a <get_ldnumber+0x34>
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b3a      	cmp	r3, #58	; 0x3a
 800e098:	d1f4      	bne.n	800e084 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	2b3a      	cmp	r3, #58	; 0x3a
 800e0a0:	d11c      	bne.n	800e0dc <get_ldnumber+0x76>
			tp = *path;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	60fa      	str	r2, [r7, #12]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	3b30      	subs	r3, #48	; 0x30
 800e0b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b09      	cmp	r3, #9
 800e0b8:	d80e      	bhi.n	800e0d8 <get_ldnumber+0x72>
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d10a      	bne.n	800e0d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d107      	bne.n	800e0d8 <get_ldnumber+0x72>
					vol = (int)i;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	617b      	str	r3, [r7, #20]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	e002      	b.n	800e0e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e0dc:	2300      	movs	r3, #0
 800e0de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e0e0:	693b      	ldr	r3, [r7, #16]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	371c      	adds	r7, #28
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
	...

0800e0f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	70da      	strb	r2, [r3, #3]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f04f 32ff 	mov.w	r2, #4294967295
 800e106:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7fe fcfc 	bl	800cb08 <move_window>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <check_fs+0x2a>
 800e116:	2304      	movs	r3, #4
 800e118:	e038      	b.n	800e18c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3334      	adds	r3, #52	; 0x34
 800e11e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe fa40 	bl	800c5a8 <ld_word>
 800e128:	4603      	mov	r3, r0
 800e12a:	461a      	mov	r2, r3
 800e12c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e130:	429a      	cmp	r2, r3
 800e132:	d001      	beq.n	800e138 <check_fs+0x48>
 800e134:	2303      	movs	r3, #3
 800e136:	e029      	b.n	800e18c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e13e:	2be9      	cmp	r3, #233	; 0xe9
 800e140:	d009      	beq.n	800e156 <check_fs+0x66>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e148:	2beb      	cmp	r3, #235	; 0xeb
 800e14a:	d11e      	bne.n	800e18a <check_fs+0x9a>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e152:	2b90      	cmp	r3, #144	; 0x90
 800e154:	d119      	bne.n	800e18a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	3334      	adds	r3, #52	; 0x34
 800e15a:	3336      	adds	r3, #54	; 0x36
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe fa3b 	bl	800c5d8 <ld_dword>
 800e162:	4603      	mov	r3, r0
 800e164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e168:	4a0a      	ldr	r2, [pc, #40]	; (800e194 <check_fs+0xa4>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d101      	bne.n	800e172 <check_fs+0x82>
 800e16e:	2300      	movs	r3, #0
 800e170:	e00c      	b.n	800e18c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	3334      	adds	r3, #52	; 0x34
 800e176:	3352      	adds	r3, #82	; 0x52
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe fa2d 	bl	800c5d8 <ld_dword>
 800e17e:	4603      	mov	r3, r0
 800e180:	4a05      	ldr	r2, [pc, #20]	; (800e198 <check_fs+0xa8>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d101      	bne.n	800e18a <check_fs+0x9a>
 800e186:	2300      	movs	r3, #0
 800e188:	e000      	b.n	800e18c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e18a:	2302      	movs	r3, #2
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	00544146 	.word	0x00544146
 800e198:	33544146 	.word	0x33544146

0800e19c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b096      	sub	sp, #88	; 0x58
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f7ff ff58 	bl	800e066 <get_ldnumber>
 800e1b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	da01      	bge.n	800e1c2 <find_volume+0x26>
 800e1be:	230b      	movs	r3, #11
 800e1c0:	e22d      	b.n	800e61e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e1c2:	4aa1      	ldr	r2, [pc, #644]	; (800e448 <find_volume+0x2ac>)
 800e1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d101      	bne.n	800e1d6 <find_volume+0x3a>
 800e1d2:	230c      	movs	r3, #12
 800e1d4:	e223      	b.n	800e61e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	f023 0301 	bic.w	r3, r3, #1
 800e1e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d01a      	beq.n	800e222 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	785b      	ldrb	r3, [r3, #1]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fe f93b 	bl	800c46c <disk_status>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10c      	bne.n	800e222 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d007      	beq.n	800e21e <find_volume+0x82>
 800e20e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e212:	f003 0304 	and.w	r3, r3, #4
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e21a:	230a      	movs	r3, #10
 800e21c:	e1ff      	b.n	800e61e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e21e:	2300      	movs	r3, #0
 800e220:	e1fd      	b.n	800e61e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e224:	2200      	movs	r2, #0
 800e226:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22a:	b2da      	uxtb	r2, r3
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	785b      	ldrb	r3, [r3, #1]
 800e234:	4618      	mov	r0, r3
 800e236:	f7fe f933 	bl	800c4a0 <disk_initialize>
 800e23a:	4603      	mov	r3, r0
 800e23c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e244:	f003 0301 	and.w	r3, r3, #1
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e24c:	2303      	movs	r3, #3
 800e24e:	e1e6      	b.n	800e61e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d007      	beq.n	800e266 <find_volume+0xca>
 800e256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e25a:	f003 0304 	and.w	r3, r3, #4
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d001      	beq.n	800e266 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e262:	230a      	movs	r3, #10
 800e264:	e1db      	b.n	800e61e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e26a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e26c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e26e:	f7ff ff3f 	bl	800e0f0 <check_fs>
 800e272:	4603      	mov	r3, r0
 800e274:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d149      	bne.n	800e314 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e280:	2300      	movs	r3, #0
 800e282:	643b      	str	r3, [r7, #64]	; 0x40
 800e284:	e01e      	b.n	800e2c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e288:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e28e:	011b      	lsls	r3, r3, #4
 800e290:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e294:	4413      	add	r3, r2
 800e296:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29a:	3304      	adds	r3, #4
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d006      	beq.n	800e2b0 <find_volume+0x114>
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe f996 	bl	800c5d8 <ld_dword>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	e000      	b.n	800e2b2 <find_volume+0x116>
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	3358      	adds	r3, #88	; 0x58
 800e2b8:	443b      	add	r3, r7
 800e2ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d9dd      	bls.n	800e286 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <find_volume+0x13e>
 800e2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	3358      	adds	r3, #88	; 0x58
 800e2e0:	443b      	add	r3, r7
 800e2e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e2e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d005      	beq.n	800e2fa <find_volume+0x15e>
 800e2ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2f2:	f7ff fefd 	bl	800e0f0 <check_fs>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	e000      	b.n	800e2fc <find_volume+0x160>
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e304:	2b01      	cmp	r3, #1
 800e306:	d905      	bls.n	800e314 <find_volume+0x178>
 800e308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e30a:	3301      	adds	r3, #1
 800e30c:	643b      	str	r3, [r7, #64]	; 0x40
 800e30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e310:	2b03      	cmp	r3, #3
 800e312:	d9e2      	bls.n	800e2da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e318:	2b04      	cmp	r3, #4
 800e31a:	d101      	bne.n	800e320 <find_volume+0x184>
 800e31c:	2301      	movs	r3, #1
 800e31e:	e17e      	b.n	800e61e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e324:	2b01      	cmp	r3, #1
 800e326:	d901      	bls.n	800e32c <find_volume+0x190>
 800e328:	230d      	movs	r3, #13
 800e32a:	e178      	b.n	800e61e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32e:	3334      	adds	r3, #52	; 0x34
 800e330:	330b      	adds	r3, #11
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe f938 	bl	800c5a8 <ld_word>
 800e338:	4603      	mov	r3, r0
 800e33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e33e:	d001      	beq.n	800e344 <find_volume+0x1a8>
 800e340:	230d      	movs	r3, #13
 800e342:	e16c      	b.n	800e61e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e346:	3334      	adds	r3, #52	; 0x34
 800e348:	3316      	adds	r3, #22
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe f92c 	bl	800c5a8 <ld_word>
 800e350:	4603      	mov	r3, r0
 800e352:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <find_volume+0x1cc>
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	3334      	adds	r3, #52	; 0x34
 800e35e:	3324      	adds	r3, #36	; 0x24
 800e360:	4618      	mov	r0, r3
 800e362:	f7fe f939 	bl	800c5d8 <ld_dword>
 800e366:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e36c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e370:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	789b      	ldrb	r3, [r3, #2]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d005      	beq.n	800e38c <find_volume+0x1f0>
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	789b      	ldrb	r3, [r3, #2]
 800e384:	2b02      	cmp	r3, #2
 800e386:	d001      	beq.n	800e38c <find_volume+0x1f0>
 800e388:	230d      	movs	r3, #13
 800e38a:	e148      	b.n	800e61e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38e:	789b      	ldrb	r3, [r3, #2]
 800e390:	461a      	mov	r2, r3
 800e392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e394:	fb02 f303 	mul.w	r3, r2, r3
 800e398:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a8:	895b      	ldrh	r3, [r3, #10]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d008      	beq.n	800e3c0 <find_volume+0x224>
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	895b      	ldrh	r3, [r3, #10]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b6:	895b      	ldrh	r3, [r3, #10]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <find_volume+0x228>
 800e3c0:	230d      	movs	r3, #13
 800e3c2:	e12c      	b.n	800e61e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c6:	3334      	adds	r3, #52	; 0x34
 800e3c8:	3311      	adds	r3, #17
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe f8ec 	bl	800c5a8 <ld_word>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	891b      	ldrh	r3, [r3, #8]
 800e3dc:	f003 030f 	and.w	r3, r3, #15
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <find_volume+0x24e>
 800e3e6:	230d      	movs	r3, #13
 800e3e8:	e119      	b.n	800e61e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ec:	3334      	adds	r3, #52	; 0x34
 800e3ee:	3313      	adds	r3, #19
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe f8d9 	bl	800c5a8 <ld_word>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d106      	bne.n	800e40e <find_volume+0x272>
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	3334      	adds	r3, #52	; 0x34
 800e404:	3320      	adds	r3, #32
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe f8e6 	bl	800c5d8 <ld_dword>
 800e40c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e410:	3334      	adds	r3, #52	; 0x34
 800e412:	330e      	adds	r3, #14
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe f8c7 	bl	800c5a8 <ld_word>
 800e41a:	4603      	mov	r3, r0
 800e41c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e41e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e420:	2b00      	cmp	r3, #0
 800e422:	d101      	bne.n	800e428 <find_volume+0x28c>
 800e424:	230d      	movs	r3, #13
 800e426:	e0fa      	b.n	800e61e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e428:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e42c:	4413      	add	r3, r2
 800e42e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e430:	8912      	ldrh	r2, [r2, #8]
 800e432:	0912      	lsrs	r2, r2, #4
 800e434:	b292      	uxth	r2, r2
 800e436:	4413      	add	r3, r2
 800e438:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e43a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	429a      	cmp	r2, r3
 800e440:	d204      	bcs.n	800e44c <find_volume+0x2b0>
 800e442:	230d      	movs	r3, #13
 800e444:	e0eb      	b.n	800e61e <find_volume+0x482>
 800e446:	bf00      	nop
 800e448:	240017ac 	.word	0x240017ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e44c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e454:	8952      	ldrh	r2, [r2, #10]
 800e456:	fbb3 f3f2 	udiv	r3, r3, r2
 800e45a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <find_volume+0x2ca>
 800e462:	230d      	movs	r3, #13
 800e464:	e0db      	b.n	800e61e <find_volume+0x482>
		fmt = FS_FAT32;
 800e466:	2303      	movs	r3, #3
 800e468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e472:	4293      	cmp	r3, r2
 800e474:	d802      	bhi.n	800e47c <find_volume+0x2e0>
 800e476:	2302      	movs	r3, #2
 800e478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e482:	4293      	cmp	r3, r2
 800e484:	d802      	bhi.n	800e48c <find_volume+0x2f0>
 800e486:	2301      	movs	r3, #1
 800e488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	1c9a      	adds	r2, r3, #2
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e498:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e49a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e49e:	441a      	add	r2, r3
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e4a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	441a      	add	r2, r3
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e4ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4b2:	2b03      	cmp	r3, #3
 800e4b4:	d11e      	bne.n	800e4f4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	3334      	adds	r3, #52	; 0x34
 800e4ba:	332a      	adds	r3, #42	; 0x2a
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fe f873 	bl	800c5a8 <ld_word>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <find_volume+0x330>
 800e4c8:	230d      	movs	r3, #13
 800e4ca:	e0a8      	b.n	800e61e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ce:	891b      	ldrh	r3, [r3, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <find_volume+0x33c>
 800e4d4:	230d      	movs	r3, #13
 800e4d6:	e0a2      	b.n	800e61e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	3334      	adds	r3, #52	; 0x34
 800e4dc:	332c      	adds	r3, #44	; 0x2c
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe f87a 	bl	800c5d8 <ld_dword>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	647b      	str	r3, [r7, #68]	; 0x44
 800e4f2:	e01f      	b.n	800e534 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f6:	891b      	ldrh	r3, [r3, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <find_volume+0x364>
 800e4fc:	230d      	movs	r3, #13
 800e4fe:	e08e      	b.n	800e61e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e506:	441a      	add	r2, r3
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e50c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e510:	2b02      	cmp	r3, #2
 800e512:	d103      	bne.n	800e51c <find_volume+0x380>
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	e00a      	b.n	800e532 <find_volume+0x396>
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	699a      	ldr	r2, [r3, #24]
 800e520:	4613      	mov	r3, r2
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	4413      	add	r3, r2
 800e526:	085a      	lsrs	r2, r3, #1
 800e528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52a:	699b      	ldr	r3, [r3, #24]
 800e52c:	f003 0301 	and.w	r3, r3, #1
 800e530:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e532:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	69da      	ldr	r2, [r3, #28]
 800e538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e53a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e53e:	0a5b      	lsrs	r3, r3, #9
 800e540:	429a      	cmp	r2, r3
 800e542:	d201      	bcs.n	800e548 <find_volume+0x3ac>
 800e544:	230d      	movs	r3, #13
 800e546:	e06a      	b.n	800e61e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54a:	f04f 32ff 	mov.w	r2, #4294967295
 800e54e:	615a      	str	r2, [r3, #20]
 800e550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e552:	695a      	ldr	r2, [r3, #20]
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	2280      	movs	r2, #128	; 0x80
 800e55c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e55e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e562:	2b03      	cmp	r3, #3
 800e564:	d149      	bne.n	800e5fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	3334      	adds	r3, #52	; 0x34
 800e56a:	3330      	adds	r3, #48	; 0x30
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe f81b 	bl	800c5a8 <ld_word>
 800e572:	4603      	mov	r3, r0
 800e574:	2b01      	cmp	r3, #1
 800e576:	d140      	bne.n	800e5fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e57a:	3301      	adds	r3, #1
 800e57c:	4619      	mov	r1, r3
 800e57e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e580:	f7fe fac2 	bl	800cb08 <move_window>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d137      	bne.n	800e5fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	2200      	movs	r2, #0
 800e58e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	3334      	adds	r3, #52	; 0x34
 800e594:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe f805 	bl	800c5a8 <ld_word>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d127      	bne.n	800e5fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	3334      	adds	r3, #52	; 0x34
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe f812 	bl	800c5d8 <ld_dword>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	4a1c      	ldr	r2, [pc, #112]	; (800e628 <find_volume+0x48c>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d11e      	bne.n	800e5fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	3334      	adds	r3, #52	; 0x34
 800e5c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fe f807 	bl	800c5d8 <ld_dword>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	4a17      	ldr	r2, [pc, #92]	; (800e62c <find_volume+0x490>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d113      	bne.n	800e5fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d4:	3334      	adds	r3, #52	; 0x34
 800e5d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fd fffc 	bl	800c5d8 <ld_dword>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e8:	3334      	adds	r3, #52	; 0x34
 800e5ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fd fff2 	bl	800c5d8 <ld_dword>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e600:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e602:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <find_volume+0x494>)
 800e604:	881b      	ldrh	r3, [r3, #0]
 800e606:	3301      	adds	r3, #1
 800e608:	b29a      	uxth	r2, r3
 800e60a:	4b09      	ldr	r3, [pc, #36]	; (800e630 <find_volume+0x494>)
 800e60c:	801a      	strh	r2, [r3, #0]
 800e60e:	4b08      	ldr	r3, [pc, #32]	; (800e630 <find_volume+0x494>)
 800e610:	881a      	ldrh	r2, [r3, #0]
 800e612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e614:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e616:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e618:	f7fe fa0e 	bl	800ca38 <clear_lock>
#endif
	return FR_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3758      	adds	r7, #88	; 0x58
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	41615252 	.word	0x41615252
 800e62c:	61417272 	.word	0x61417272
 800e630:	240017b0 	.word	0x240017b0

0800e634 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e63e:	2309      	movs	r3, #9
 800e640:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d01c      	beq.n	800e682 <validate+0x4e>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d018      	beq.n	800e682 <validate+0x4e>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d013      	beq.n	800e682 <validate+0x4e>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	889a      	ldrh	r2, [r3, #4]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	88db      	ldrh	r3, [r3, #6]
 800e664:	429a      	cmp	r2, r3
 800e666:	d10c      	bne.n	800e682 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	785b      	ldrb	r3, [r3, #1]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fd fefc 	bl	800c46c <disk_status>
 800e674:	4603      	mov	r3, r0
 800e676:	f003 0301 	and.w	r3, r3, #1
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d101      	bne.n	800e682 <validate+0x4e>
			res = FR_OK;
 800e67e:	2300      	movs	r3, #0
 800e680:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e682:	7bfb      	ldrb	r3, [r7, #15]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d102      	bne.n	800e68e <validate+0x5a>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	e000      	b.n	800e690 <validate+0x5c>
 800e68e:	2300      	movs	r3, #0
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	6013      	str	r3, [r2, #0]
	return res;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
	...

0800e6a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e6b2:	f107 0310 	add.w	r3, r7, #16
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff fcd5 	bl	800e066 <get_ldnumber>
 800e6bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	da01      	bge.n	800e6c8 <f_mount+0x28>
 800e6c4:	230b      	movs	r3, #11
 800e6c6:	e02b      	b.n	800e720 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e6c8:	4a17      	ldr	r2, [pc, #92]	; (800e728 <f_mount+0x88>)
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d005      	beq.n	800e6e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e6d8:	69b8      	ldr	r0, [r7, #24]
 800e6da:	f7fe f9ad 	bl	800ca38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d002      	beq.n	800e6f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	490d      	ldr	r1, [pc, #52]	; (800e728 <f_mount+0x88>)
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <f_mount+0x66>
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d001      	beq.n	800e70a <f_mount+0x6a>
 800e706:	2300      	movs	r3, #0
 800e708:	e00a      	b.n	800e720 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e70a:	f107 010c 	add.w	r1, r7, #12
 800e70e:	f107 0308 	add.w	r3, r7, #8
 800e712:	2200      	movs	r2, #0
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff fd41 	bl	800e19c <find_volume>
 800e71a:	4603      	mov	r3, r0
 800e71c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3720      	adds	r7, #32
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	240017ac 	.word	0x240017ac

0800e72c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b09a      	sub	sp, #104	; 0x68
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4613      	mov	r3, r2
 800e738:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <f_open+0x18>
 800e740:	2309      	movs	r3, #9
 800e742:	e1bd      	b.n	800eac0 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e74a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e74c:	79fa      	ldrb	r2, [r7, #7]
 800e74e:	f107 0110 	add.w	r1, r7, #16
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff fd20 	bl	800e19c <find_volume>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e762:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e766:	2b00      	cmp	r3, #0
 800e768:	f040 81a1 	bne.w	800eaae <f_open+0x382>
		dj.obj.fs = fs;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800e770:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e774:	f000 ff69 	bl	800f64a <ff_memalloc>
 800e778:	65b8      	str	r0, [r7, #88]	; 0x58
 800e77a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <f_open+0x58>
 800e780:	2311      	movs	r3, #17
 800e782:	e19d      	b.n	800eac0 <f_open+0x394>
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e788:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	f107 0314 	add.w	r3, r7, #20
 800e790:	4611      	mov	r1, r2
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff fbf6 	bl	800df84 <follow_path>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e79e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d11a      	bne.n	800e7dc <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e7a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7aa:	b25b      	sxtb	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	da03      	bge.n	800e7b8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800e7b0:	2306      	movs	r3, #6
 800e7b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7b6:	e011      	b.n	800e7dc <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	f023 0301 	bic.w	r3, r3, #1
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	bf14      	ite	ne
 800e7c2:	2301      	movne	r3, #1
 800e7c4:	2300      	moveq	r3, #0
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	f107 0314 	add.w	r3, r7, #20
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fd ffe9 	bl	800c7a8 <chk_lock>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	f003 031c 	and.w	r3, r3, #28
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d07f      	beq.n	800e8e6 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800e7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d017      	beq.n	800e81e <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e7ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	d10e      	bne.n	800e814 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e7f6:	f7fe f833 	bl	800c860 <enq_lock>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d006      	beq.n	800e80e <f_open+0xe2>
 800e800:	f107 0314 	add.w	r3, r7, #20
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff f90d 	bl	800da24 <dir_register>
 800e80a:	4603      	mov	r3, r0
 800e80c:	e000      	b.n	800e810 <f_open+0xe4>
 800e80e:	2312      	movs	r3, #18
 800e810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	f043 0308 	orr.w	r3, r3, #8
 800e81a:	71fb      	strb	r3, [r7, #7]
 800e81c:	e010      	b.n	800e840 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e81e:	7ebb      	ldrb	r3, [r7, #26]
 800e820:	f003 0311 	and.w	r3, r3, #17
 800e824:	2b00      	cmp	r3, #0
 800e826:	d003      	beq.n	800e830 <f_open+0x104>
					res = FR_DENIED;
 800e828:	2307      	movs	r3, #7
 800e82a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e82e:	e007      	b.n	800e840 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	f003 0304 	and.w	r3, r3, #4
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <f_open+0x114>
 800e83a:	2308      	movs	r3, #8
 800e83c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e840:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e844:	2b00      	cmp	r3, #0
 800e846:	d168      	bne.n	800e91a <f_open+0x1ee>
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	f003 0308 	and.w	r3, r3, #8
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d063      	beq.n	800e91a <f_open+0x1ee>
				dw = GET_FATTIME();
 800e852:	f7fd fbb1 	bl	800bfb8 <get_fattime>
 800e856:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85a:	330e      	adds	r3, #14
 800e85c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fd fef8 	bl	800c654 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e866:	3316      	adds	r3, #22
 800e868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fd fef2 	bl	800c654 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e872:	330b      	adds	r3, #11
 800e874:	2220      	movs	r2, #32
 800e876:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e87c:	4611      	mov	r1, r2
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe fe49 	bl	800d516 <ld_clust>
 800e884:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e88a:	2200      	movs	r2, #0
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe fe61 	bl	800d554 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e894:	331c      	adds	r3, #28
 800e896:	2100      	movs	r1, #0
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fd fedb 	bl	800c654 <st_dword>
					fs->wflag = 1;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d037      	beq.n	800e91a <f_open+0x1ee>
						dw = fs->winsect;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ae:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800e8b0:	f107 0314 	add.w	r3, r7, #20
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fb74 	bl	800cfa6 <remove_chain>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e8c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d126      	bne.n	800e91a <f_open+0x1ee>
							res = move_window(fs, dw);
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe f919 	bl	800cb08 <move_window>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8e0:	3a01      	subs	r2, #1
 800e8e2:	611a      	str	r2, [r3, #16]
 800e8e4:	e019      	b.n	800e91a <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e8e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d115      	bne.n	800e91a <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e8ee:	7ebb      	ldrb	r3, [r7, #26]
 800e8f0:	f003 0310 	and.w	r3, r3, #16
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d003      	beq.n	800e900 <f_open+0x1d4>
					res = FR_NO_FILE;
 800e8f8:	2304      	movs	r3, #4
 800e8fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e8fe:	e00c      	b.n	800e91a <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e900:	79fb      	ldrb	r3, [r7, #7]
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	d007      	beq.n	800e91a <f_open+0x1ee>
 800e90a:	7ebb      	ldrb	r3, [r7, #26]
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <f_open+0x1ee>
						res = FR_DENIED;
 800e914:	2307      	movs	r3, #7
 800e916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e91a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d128      	bne.n	800e974 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e922:	79fb      	ldrb	r3, [r7, #7]
 800e924:	f003 0308 	and.w	r3, r3, #8
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d003      	beq.n	800e934 <f_open+0x208>
				mode |= FA_MODIFIED;
 800e92c:	79fb      	ldrb	r3, [r7, #7]
 800e92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e932:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e93c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	f023 0301 	bic.w	r3, r3, #1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bf14      	ite	ne
 800e94c:	2301      	movne	r3, #1
 800e94e:	2300      	moveq	r3, #0
 800e950:	b2db      	uxtb	r3, r3
 800e952:	461a      	mov	r2, r3
 800e954:	f107 0314 	add.w	r3, r7, #20
 800e958:	4611      	mov	r1, r2
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fd ffa2 	bl	800c8a4 <inc_lock>
 800e960:	4602      	mov	r2, r0
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d102      	bne.n	800e974 <f_open+0x248>
 800e96e:	2302      	movs	r3, #2
 800e970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e974:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f040 8095 	bne.w	800eaa8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e982:	4611      	mov	r1, r2
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fdc6 	bl	800d516 <ld_clust>
 800e98a:	4602      	mov	r2, r0
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e992:	331c      	adds	r3, #28
 800e994:	4618      	mov	r0, r3
 800e996:	f7fd fe1f 	bl	800c5d8 <ld_dword>
 800e99a:	4602      	mov	r2, r0
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	88da      	ldrh	r2, [r3, #6]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	79fa      	ldrb	r2, [r7, #7]
 800e9b8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3330      	adds	r3, #48	; 0x30
 800e9d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fd fe89 	bl	800c6ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e9dc:	79fb      	ldrb	r3, [r7, #7]
 800e9de:	f003 0320 	and.w	r3, r3, #32
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d060      	beq.n	800eaa8 <f_open+0x37c>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d05c      	beq.n	800eaa8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	68da      	ldr	r2, [r3, #12]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	895b      	ldrh	r3, [r3, #10]
 800e9fa:	025b      	lsls	r3, r3, #9
 800e9fc:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea0a:	e016      	b.n	800ea3a <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fe f934 	bl	800cc7e <get_fat>
 800ea16:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ea18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d802      	bhi.n	800ea24 <f_open+0x2f8>
 800ea1e:	2302      	movs	r3, #2
 800ea20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2a:	d102      	bne.n	800ea32 <f_open+0x306>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d103      	bne.n	800ea4a <f_open+0x31e>
 800ea42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d8e0      	bhi.n	800ea0c <f_open+0x2e0>
				}
				fp->clust = clst;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea4e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d127      	bne.n	800eaa8 <f_open+0x37c>
 800ea58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d022      	beq.n	800eaa8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe f8ea 	bl	800cc40 <clust2sect>
 800ea6c:	64b8      	str	r0, [r7, #72]	; 0x48
 800ea6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d103      	bne.n	800ea7c <f_open+0x350>
						res = FR_INT_ERR;
 800ea74:	2302      	movs	r3, #2
 800ea76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea7a:	e015      	b.n	800eaa8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea7e:	0a5a      	lsrs	r2, r3, #9
 800ea80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea82:	441a      	add	r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	7858      	ldrb	r0, [r3, #1]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6a1a      	ldr	r2, [r3, #32]
 800ea96:	2301      	movs	r3, #1
 800ea98:	f7fd fd28 	bl	800c4ec <disk_read>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d002      	beq.n	800eaa8 <f_open+0x37c>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800eaa8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eaaa:	f000 fdda 	bl	800f662 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eaae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <f_open+0x390>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eabc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3768      	adds	r7, #104	; 0x68
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b08e      	sub	sp, #56	; 0x38
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2200      	movs	r2, #0
 800eade:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f107 0214 	add.w	r2, r7, #20
 800eae6:	4611      	mov	r1, r2
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fda3 	bl	800e634 <validate>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eaf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d107      	bne.n	800eb0c <f_read+0x44>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	7d5b      	ldrb	r3, [r3, #21]
 800eb00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eb04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <f_read+0x4a>
 800eb0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb10:	e115      	b.n	800ed3e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	7d1b      	ldrb	r3, [r3, #20]
 800eb16:	f003 0301 	and.w	r3, r3, #1
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d101      	bne.n	800eb22 <f_read+0x5a>
 800eb1e:	2307      	movs	r3, #7
 800eb20:	e10d      	b.n	800ed3e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	68da      	ldr	r2, [r3, #12]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	f240 80fe 	bls.w	800ed34 <f_read+0x26c>
 800eb38:	6a3b      	ldr	r3, [r7, #32]
 800eb3a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb3c:	e0fa      	b.n	800ed34 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f040 80c6 	bne.w	800ecd8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	699b      	ldr	r3, [r3, #24]
 800eb50:	0a5b      	lsrs	r3, r3, #9
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	8952      	ldrh	r2, [r2, #10]
 800eb56:	3a01      	subs	r2, #1
 800eb58:	4013      	ands	r3, r2
 800eb5a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d12f      	bne.n	800ebc2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d103      	bne.n	800eb72 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	633b      	str	r3, [r7, #48]	; 0x30
 800eb70:	e013      	b.n	800eb9a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d007      	beq.n	800eb8a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7fe fb0d 	bl	800d1a0 <clmt_clust>
 800eb86:	6338      	str	r0, [r7, #48]	; 0x30
 800eb88:	e007      	b.n	800eb9a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	69db      	ldr	r3, [r3, #28]
 800eb90:	4619      	mov	r1, r3
 800eb92:	4610      	mov	r0, r2
 800eb94:	f7fe f873 	bl	800cc7e <get_fat>
 800eb98:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d804      	bhi.n	800ebaa <f_read+0xe2>
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2202      	movs	r2, #2
 800eba4:	755a      	strb	r2, [r3, #21]
 800eba6:	2302      	movs	r3, #2
 800eba8:	e0c9      	b.n	800ed3e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb0:	d104      	bne.n	800ebbc <f_read+0xf4>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	755a      	strb	r2, [r3, #21]
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e0c0      	b.n	800ed3e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebc0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	69db      	ldr	r3, [r3, #28]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4610      	mov	r0, r2
 800ebcc:	f7fe f838 	bl	800cc40 <clust2sect>
 800ebd0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d104      	bne.n	800ebe2 <f_read+0x11a>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2202      	movs	r2, #2
 800ebdc:	755a      	strb	r2, [r3, #21]
 800ebde:	2302      	movs	r3, #2
 800ebe0:	e0ad      	b.n	800ed3e <f_read+0x276>
			sect += csect;
 800ebe2:	69ba      	ldr	r2, [r7, #24]
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	0a5b      	lsrs	r3, r3, #9
 800ebee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d039      	beq.n	800ec6a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ebf6:	69fa      	ldr	r2, [r7, #28]
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	4413      	add	r3, r2
 800ebfc:	697a      	ldr	r2, [r7, #20]
 800ebfe:	8952      	ldrh	r2, [r2, #10]
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d905      	bls.n	800ec10 <f_read+0x148>
					cc = fs->csize - csect;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	895b      	ldrh	r3, [r3, #10]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	7858      	ldrb	r0, [r3, #1]
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	69ba      	ldr	r2, [r7, #24]
 800ec18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec1a:	f7fd fc67 	bl	800c4ec <disk_read>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d004      	beq.n	800ec2e <f_read+0x166>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2201      	movs	r2, #1
 800ec28:	755a      	strb	r2, [r3, #21]
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e087      	b.n	800ed3e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	7d1b      	ldrb	r3, [r3, #20]
 800ec32:	b25b      	sxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	da14      	bge.n	800ec62 <f_read+0x19a>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6a1a      	ldr	r2, [r3, #32]
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d90d      	bls.n	800ec62 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6a1a      	ldr	r2, [r3, #32]
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	025b      	lsls	r3, r3, #9
 800ec50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec52:	18d0      	adds	r0, r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	3330      	adds	r3, #48	; 0x30
 800ec58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	f7fd fd25 	bl	800c6ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	025b      	lsls	r3, r3, #9
 800ec66:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ec68:	e050      	b.n	800ed0c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d02e      	beq.n	800ecd2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	7d1b      	ldrb	r3, [r3, #20]
 800ec78:	b25b      	sxtb	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da18      	bge.n	800ecb0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	7858      	ldrb	r0, [r3, #1]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6a1a      	ldr	r2, [r3, #32]
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	f7fd fc4d 	bl	800c52c <disk_write>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d004      	beq.n	800eca2 <f_read+0x1da>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	755a      	strb	r2, [r3, #21]
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e04d      	b.n	800ed3e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	7d1b      	ldrb	r3, [r3, #20]
 800eca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecaa:	b2da      	uxtb	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	7858      	ldrb	r0, [r3, #1]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecba:	2301      	movs	r3, #1
 800ecbc:	69ba      	ldr	r2, [r7, #24]
 800ecbe:	f7fd fc15 	bl	800c4ec <disk_read>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d004      	beq.n	800ecd2 <f_read+0x20a>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2201      	movs	r2, #1
 800eccc:	755a      	strb	r2, [r3, #21]
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e035      	b.n	800ed3e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	69ba      	ldr	r2, [r7, #24]
 800ecd6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	699b      	ldr	r3, [r3, #24]
 800ecdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ece4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ece6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d901      	bls.n	800ecf2 <f_read+0x22a>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed00:	4413      	add	r3, r2
 800ed02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed04:	4619      	mov	r1, r3
 800ed06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed08:	f7fd fcd0 	bl	800c6ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed10:	4413      	add	r3, r2
 800ed12:	627b      	str	r3, [r7, #36]	; 0x24
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	699a      	ldr	r2, [r3, #24]
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	441a      	add	r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	619a      	str	r2, [r3, #24]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	441a      	add	r2, r3
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f47f af01 	bne.w	800eb3e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3738      	adds	r7, #56	; 0x38
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b08c      	sub	sp, #48	; 0x30
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	60f8      	str	r0, [r7, #12]
 800ed4e:	60b9      	str	r1, [r7, #8]
 800ed50:	607a      	str	r2, [r7, #4]
 800ed52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f107 0210 	add.w	r2, r7, #16
 800ed64:	4611      	mov	r1, r2
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7ff fc64 	bl	800e634 <validate>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d107      	bne.n	800ed8a <f_write+0x44>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	7d5b      	ldrb	r3, [r3, #21]
 800ed7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ed82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <f_write+0x4a>
 800ed8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed8e:	e14b      	b.n	800f028 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	7d1b      	ldrb	r3, [r3, #20]
 800ed94:	f003 0302 	and.w	r3, r3, #2
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <f_write+0x5a>
 800ed9c:	2307      	movs	r3, #7
 800ed9e:	e143      	b.n	800f028 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	699a      	ldr	r2, [r3, #24]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	441a      	add	r2, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	699b      	ldr	r3, [r3, #24]
 800edac:	429a      	cmp	r2, r3
 800edae:	f080 812d 	bcs.w	800f00c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	699b      	ldr	r3, [r3, #24]
 800edb6:	43db      	mvns	r3, r3
 800edb8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800edba:	e127      	b.n	800f00c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 80e3 	bne.w	800ef90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	0a5b      	lsrs	r3, r3, #9
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	8952      	ldrh	r2, [r2, #10]
 800edd4:	3a01      	subs	r2, #1
 800edd6:	4013      	ands	r3, r2
 800edd8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d143      	bne.n	800ee68 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10c      	bne.n	800ee02 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800edee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d11a      	bne.n	800ee2a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2100      	movs	r1, #0
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe f939 	bl	800d070 <create_chain>
 800edfe:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee00:	e013      	b.n	800ee2a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d007      	beq.n	800ee1a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f7fe f9c5 	bl	800d1a0 <clmt_clust>
 800ee16:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee18:	e007      	b.n	800ee2a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	69db      	ldr	r3, [r3, #28]
 800ee20:	4619      	mov	r1, r3
 800ee22:	4610      	mov	r0, r2
 800ee24:	f7fe f924 	bl	800d070 <create_chain>
 800ee28:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 80f2 	beq.w	800f016 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d104      	bne.n	800ee42 <f_write+0xfc>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	755a      	strb	r2, [r3, #21]
 800ee3e:	2302      	movs	r3, #2
 800ee40:	e0f2      	b.n	800f028 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee48:	d104      	bne.n	800ee54 <f_write+0x10e>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	755a      	strb	r2, [r3, #21]
 800ee50:	2301      	movs	r3, #1
 800ee52:	e0e9      	b.n	800f028 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d102      	bne.n	800ee68 <f_write+0x122>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	7d1b      	ldrb	r3, [r3, #20]
 800ee6c:	b25b      	sxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	da18      	bge.n	800eea4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	7858      	ldrb	r0, [r3, #1]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6a1a      	ldr	r2, [r3, #32]
 800ee80:	2301      	movs	r3, #1
 800ee82:	f7fd fb53 	bl	800c52c <disk_write>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d004      	beq.n	800ee96 <f_write+0x150>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	755a      	strb	r2, [r3, #21]
 800ee92:	2301      	movs	r3, #1
 800ee94:	e0c8      	b.n	800f028 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	7d1b      	ldrb	r3, [r3, #20]
 800ee9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee9e:	b2da      	uxtb	r2, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eea4:	693a      	ldr	r2, [r7, #16]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	69db      	ldr	r3, [r3, #28]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	4610      	mov	r0, r2
 800eeae:	f7fd fec7 	bl	800cc40 <clust2sect>
 800eeb2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d104      	bne.n	800eec4 <f_write+0x17e>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2202      	movs	r2, #2
 800eebe:	755a      	strb	r2, [r3, #21]
 800eec0:	2302      	movs	r3, #2
 800eec2:	e0b1      	b.n	800f028 <f_write+0x2e2>
			sect += csect;
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	4413      	add	r3, r2
 800eeca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	0a5b      	lsrs	r3, r3, #9
 800eed0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d03c      	beq.n	800ef52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eed8:	69ba      	ldr	r2, [r7, #24]
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	4413      	add	r3, r2
 800eede:	693a      	ldr	r2, [r7, #16]
 800eee0:	8952      	ldrh	r2, [r2, #10]
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d905      	bls.n	800eef2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	895b      	ldrh	r3, [r3, #10]
 800eeea:	461a      	mov	r2, r3
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	7858      	ldrb	r0, [r3, #1]
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	69f9      	ldr	r1, [r7, #28]
 800eefc:	f7fd fb16 	bl	800c52c <disk_write>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d004      	beq.n	800ef10 <f_write+0x1ca>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	755a      	strb	r2, [r3, #21]
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e08b      	b.n	800f028 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6a1a      	ldr	r2, [r3, #32]
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	6a3a      	ldr	r2, [r7, #32]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d915      	bls.n	800ef4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6a1a      	ldr	r2, [r3, #32]
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	025b      	lsls	r3, r3, #9
 800ef2e:	69fa      	ldr	r2, [r7, #28]
 800ef30:	4413      	add	r3, r2
 800ef32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef36:	4619      	mov	r1, r3
 800ef38:	f7fd fbb8 	bl	800c6ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	7d1b      	ldrb	r3, [r3, #20]
 800ef40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ef4a:	6a3b      	ldr	r3, [r7, #32]
 800ef4c:	025b      	lsls	r3, r3, #9
 800ef4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ef50:	e03f      	b.n	800efd2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	697a      	ldr	r2, [r7, #20]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d016      	beq.n	800ef8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	699a      	ldr	r2, [r3, #24]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d210      	bcs.n	800ef8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	7858      	ldrb	r0, [r3, #1]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef72:	2301      	movs	r3, #1
 800ef74:	697a      	ldr	r2, [r7, #20]
 800ef76:	f7fd fab9 	bl	800c4ec <disk_read>
 800ef7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d004      	beq.n	800ef8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2201      	movs	r2, #1
 800ef84:	755a      	strb	r2, [r3, #21]
 800ef86:	2301      	movs	r3, #1
 800ef88:	e04e      	b.n	800f028 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	697a      	ldr	r2, [r7, #20]
 800ef8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ef9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d901      	bls.n	800efaa <f_write+0x264>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	699b      	ldr	r3, [r3, #24]
 800efb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efb8:	4413      	add	r3, r2
 800efba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efbc:	69f9      	ldr	r1, [r7, #28]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fd fb74 	bl	800c6ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	7d1b      	ldrb	r3, [r3, #20]
 800efc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800efd2:	69fa      	ldr	r2, [r7, #28]
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	4413      	add	r3, r2
 800efd8:	61fb      	str	r3, [r7, #28]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	699a      	ldr	r2, [r3, #24]
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	441a      	add	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	619a      	str	r2, [r3, #24]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	68da      	ldr	r2, [r3, #12]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	429a      	cmp	r2, r3
 800eff0:	bf38      	it	cc
 800eff2:	461a      	movcc	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	60da      	str	r2, [r3, #12]
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	441a      	add	r2, r3
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f47f aed4 	bne.w	800edbc <f_write+0x76>
 800f014:	e000      	b.n	800f018 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f016:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	7d1b      	ldrb	r3, [r3, #20]
 800f01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f020:	b2da      	uxtb	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3730      	adds	r7, #48	; 0x30
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f107 0208 	add.w	r2, r7, #8
 800f03e:	4611      	mov	r1, r2
 800f040:	4618      	mov	r0, r3
 800f042:	f7ff faf7 	bl	800e634 <validate>
 800f046:	4603      	mov	r3, r0
 800f048:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f04a:	7dfb      	ldrb	r3, [r7, #23]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d168      	bne.n	800f122 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	7d1b      	ldrb	r3, [r3, #20]
 800f054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d062      	beq.n	800f122 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	7d1b      	ldrb	r3, [r3, #20]
 800f060:	b25b      	sxtb	r3, r3
 800f062:	2b00      	cmp	r3, #0
 800f064:	da15      	bge.n	800f092 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	7858      	ldrb	r0, [r3, #1]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6a1a      	ldr	r2, [r3, #32]
 800f074:	2301      	movs	r3, #1
 800f076:	f7fd fa59 	bl	800c52c <disk_write>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d001      	beq.n	800f084 <f_sync+0x54>
 800f080:	2301      	movs	r3, #1
 800f082:	e04f      	b.n	800f124 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	7d1b      	ldrb	r3, [r3, #20]
 800f088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f092:	f7fc ff91 	bl	800bfb8 <get_fattime>
 800f096:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09e:	4619      	mov	r1, r3
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	f7fd fd31 	bl	800cb08 <move_window>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d138      	bne.n	800f122 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	330b      	adds	r3, #11
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	330b      	adds	r3, #11
 800f0c0:	f042 0220 	orr.w	r2, r2, #32
 800f0c4:	b2d2      	uxtb	r2, r2
 800f0c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6818      	ldr	r0, [r3, #0]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	68f9      	ldr	r1, [r7, #12]
 800f0d4:	f7fe fa3e 	bl	800d554 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f103 021c 	add.w	r2, r3, #28
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	f7fd fab5 	bl	800c654 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	3316      	adds	r3, #22
 800f0ee:	6939      	ldr	r1, [r7, #16]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fd faaf 	bl	800c654 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	3312      	adds	r3, #18
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fd fa8e 	bl	800c61e <st_word>
					fs->wflag = 1;
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2201      	movs	r2, #1
 800f106:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fd fd2a 	bl	800cb64 <sync_fs>
 800f110:	4603      	mov	r3, r0
 800f112:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	7d1b      	ldrb	r3, [r3, #20]
 800f118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f122:	7dfb      	ldrb	r3, [r7, #23]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ff7b 	bl	800f030 <f_sync>
 800f13a:	4603      	mov	r3, r0
 800f13c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d118      	bne.n	800f176 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f107 0208 	add.w	r2, r7, #8
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7ff fa71 	bl	800e634 <validate>
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10c      	bne.n	800f176 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	4618      	mov	r0, r3
 800f162:	f7fd fc2d 	bl	800c9c0 <dec_lock>
 800f166:	4603      	mov	r3, r0
 800f168:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f176:	7bfb      	ldrb	r3, [r7, #15]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b090      	sub	sp, #64	; 0x40
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f107 0208 	add.w	r2, r7, #8
 800f190:	4611      	mov	r1, r2
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff fa4e 	bl	800e634 <validate>
 800f198:	4603      	mov	r3, r0
 800f19a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f19e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d103      	bne.n	800f1ae <f_lseek+0x2e>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7d5b      	ldrb	r3, [r3, #21]
 800f1aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f1ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <f_lseek+0x3c>
 800f1b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1ba:	e1e6      	b.n	800f58a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f000 80d1 	beq.w	800f368 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1cc:	d15a      	bne.n	800f284 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	1d1a      	adds	r2, r3, #4
 800f1d8:	627a      	str	r2, [r7, #36]	; 0x24
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	617b      	str	r3, [r7, #20]
 800f1de:	2302      	movs	r3, #2
 800f1e0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d03a      	beq.n	800f264 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	613b      	str	r3, [r7, #16]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	3302      	adds	r3, #2
 800f1fa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	3301      	adds	r3, #1
 800f204:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fd fd37 	bl	800cc7e <get_fat>
 800f210:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f214:	2b01      	cmp	r3, #1
 800f216:	d804      	bhi.n	800f222 <f_lseek+0xa2>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2202      	movs	r2, #2
 800f21c:	755a      	strb	r2, [r3, #21]
 800f21e:	2302      	movs	r3, #2
 800f220:	e1b3      	b.n	800f58a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f228:	d104      	bne.n	800f234 <f_lseek+0xb4>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2201      	movs	r2, #1
 800f22e:	755a      	strb	r2, [r3, #21]
 800f230:	2301      	movs	r3, #1
 800f232:	e1aa      	b.n	800f58a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3301      	adds	r3, #1
 800f238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d0de      	beq.n	800f1fc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	429a      	cmp	r2, r3
 800f244:	d809      	bhi.n	800f25a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f248:	1d1a      	adds	r2, r3, #4
 800f24a:	627a      	str	r2, [r7, #36]	; 0x24
 800f24c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	1d1a      	adds	r2, r3, #4
 800f254:	627a      	str	r2, [r7, #36]	; 0x24
 800f256:	693a      	ldr	r2, [r7, #16]
 800f258:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f260:	429a      	cmp	r2, r3
 800f262:	d3c4      	bcc.n	800f1ee <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f26a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	429a      	cmp	r2, r3
 800f272:	d803      	bhi.n	800f27c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	2200      	movs	r2, #0
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	e184      	b.n	800f586 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f27c:	2311      	movs	r3, #17
 800f27e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f282:	e180      	b.n	800f586 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d902      	bls.n	800f294 <f_lseek+0x114>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f000 8172 	beq.w	800f586 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7fd ff79 	bl	800d1a0 <clmt_clust>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	69db      	ldr	r3, [r3, #28]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	4610      	mov	r0, r2
 800f2be:	f7fd fcbf 	bl	800cc40 <clust2sect>
 800f2c2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d104      	bne.n	800f2d4 <f_lseek+0x154>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2202      	movs	r2, #2
 800f2ce:	755a      	strb	r2, [r3, #21]
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	e15a      	b.n	800f58a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	0a5b      	lsrs	r3, r3, #9
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	8952      	ldrh	r2, [r2, #10]
 800f2de:	3a01      	subs	r2, #1
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	69ba      	ldr	r2, [r7, #24]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 8148 	beq.w	800f586 <f_lseek+0x406>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a1b      	ldr	r3, [r3, #32]
 800f2fa:	69ba      	ldr	r2, [r7, #24]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	f000 8142 	beq.w	800f586 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	7d1b      	ldrb	r3, [r3, #20]
 800f306:	b25b      	sxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	da18      	bge.n	800f33e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	7858      	ldrb	r0, [r3, #1]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6a1a      	ldr	r2, [r3, #32]
 800f31a:	2301      	movs	r3, #1
 800f31c:	f7fd f906 	bl	800c52c <disk_write>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <f_lseek+0x1b0>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	755a      	strb	r2, [r3, #21]
 800f32c:	2301      	movs	r3, #1
 800f32e:	e12c      	b.n	800f58a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	7d1b      	ldrb	r3, [r3, #20]
 800f334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f338:	b2da      	uxtb	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	7858      	ldrb	r0, [r3, #1]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f348:	2301      	movs	r3, #1
 800f34a:	69ba      	ldr	r2, [r7, #24]
 800f34c:	f7fd f8ce 	bl	800c4ec <disk_read>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <f_lseek+0x1e0>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2201      	movs	r2, #1
 800f35a:	755a      	strb	r2, [r3, #21]
 800f35c:	2301      	movs	r3, #1
 800f35e:	e114      	b.n	800f58a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	69ba      	ldr	r2, [r7, #24]
 800f364:	621a      	str	r2, [r3, #32]
 800f366:	e10e      	b.n	800f586 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	683a      	ldr	r2, [r7, #0]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d908      	bls.n	800f384 <f_lseek+0x204>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	7d1b      	ldrb	r3, [r3, #20]
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	699b      	ldr	r3, [r3, #24]
 800f388:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f38a:	2300      	movs	r3, #0
 800f38c:	637b      	str	r3, [r7, #52]	; 0x34
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f392:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	f000 80a7 	beq.w	800f4ea <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	025b      	lsls	r3, r3, #9
 800f3a2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d01b      	beq.n	800f3e2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	1e5a      	subs	r2, r3, #1
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800f3b4:	6a3b      	ldr	r3, [r7, #32]
 800f3b6:	1e59      	subs	r1, r3, #1
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d30f      	bcc.n	800f3e2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	1e5a      	subs	r2, r3, #1
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	425b      	negs	r3, r3
 800f3ca:	401a      	ands	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	699b      	ldr	r3, [r3, #24]
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	69db      	ldr	r3, [r3, #28]
 800f3de:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3e0:	e022      	b.n	800f428 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d119      	bne.n	800f422 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fd fe3c 	bl	800d070 <create_chain>
 800f3f8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d104      	bne.n	800f40a <f_lseek+0x28a>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2202      	movs	r2, #2
 800f404:	755a      	strb	r2, [r3, #21]
 800f406:	2302      	movs	r3, #2
 800f408:	e0bf      	b.n	800f58a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f410:	d104      	bne.n	800f41c <f_lseek+0x29c>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	755a      	strb	r2, [r3, #21]
 800f418:	2301      	movs	r3, #1
 800f41a:	e0b6      	b.n	800f58a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f420:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f426:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d05d      	beq.n	800f4ea <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f42e:	e03a      	b.n	800f4a6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	603b      	str	r3, [r7, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	699a      	ldr	r2, [r3, #24]
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	441a      	add	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7d1b      	ldrb	r3, [r3, #20]
 800f448:	f003 0302 	and.w	r3, r3, #2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00b      	beq.n	800f468 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f454:	4618      	mov	r0, r3
 800f456:	f7fd fe0b 	bl	800d070 <create_chain>
 800f45a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d108      	bne.n	800f474 <f_lseek+0x2f4>
							ofs = 0; break;
 800f462:	2300      	movs	r3, #0
 800f464:	603b      	str	r3, [r7, #0]
 800f466:	e022      	b.n	800f4ae <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fd fc06 	bl	800cc7e <get_fat>
 800f472:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47a:	d104      	bne.n	800f486 <f_lseek+0x306>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	755a      	strb	r2, [r3, #21]
 800f482:	2301      	movs	r3, #1
 800f484:	e081      	b.n	800f58a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d904      	bls.n	800f496 <f_lseek+0x316>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	699b      	ldr	r3, [r3, #24]
 800f490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f492:	429a      	cmp	r2, r3
 800f494:	d304      	bcc.n	800f4a0 <f_lseek+0x320>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2202      	movs	r2, #2
 800f49a:	755a      	strb	r2, [r3, #21]
 800f49c:	2302      	movs	r3, #2
 800f49e:	e074      	b.n	800f58a <f_lseek+0x40a>
					fp->clust = clst;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4a4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d8c0      	bhi.n	800f430 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	699a      	ldr	r2, [r3, #24]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	441a      	add	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d012      	beq.n	800f4ea <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fd fbb9 	bl	800cc40 <clust2sect>
 800f4ce:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d104      	bne.n	800f4e0 <f_lseek+0x360>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2202      	movs	r2, #2
 800f4da:	755a      	strb	r2, [r3, #21]
 800f4dc:	2302      	movs	r3, #2
 800f4de:	e054      	b.n	800f58a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	0a5b      	lsrs	r3, r3, #9
 800f4e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e6:	4413      	add	r3, r2
 800f4e8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	699a      	ldr	r2, [r3, #24]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d90a      	bls.n	800f50c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	699a      	ldr	r2, [r3, #24]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	7d1b      	ldrb	r3, [r3, #20]
 800f502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f506:	b2da      	uxtb	r2, r3
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f514:	2b00      	cmp	r3, #0
 800f516:	d036      	beq.n	800f586 <f_lseek+0x406>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f51e:	429a      	cmp	r2, r3
 800f520:	d031      	beq.n	800f586 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	7d1b      	ldrb	r3, [r3, #20]
 800f526:	b25b      	sxtb	r3, r3
 800f528:	2b00      	cmp	r3, #0
 800f52a:	da18      	bge.n	800f55e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	7858      	ldrb	r0, [r3, #1]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6a1a      	ldr	r2, [r3, #32]
 800f53a:	2301      	movs	r3, #1
 800f53c:	f7fc fff6 	bl	800c52c <disk_write>
 800f540:	4603      	mov	r3, r0
 800f542:	2b00      	cmp	r3, #0
 800f544:	d004      	beq.n	800f550 <f_lseek+0x3d0>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2201      	movs	r2, #1
 800f54a:	755a      	strb	r2, [r3, #21]
 800f54c:	2301      	movs	r3, #1
 800f54e:	e01c      	b.n	800f58a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7d1b      	ldrb	r3, [r3, #20]
 800f554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f558:	b2da      	uxtb	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	7858      	ldrb	r0, [r3, #1]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f568:	2301      	movs	r3, #1
 800f56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f56c:	f7fc ffbe 	bl	800c4ec <disk_read>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d004      	beq.n	800f580 <f_lseek+0x400>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2201      	movs	r2, #1
 800f57a:	755a      	strb	r2, [r3, #21]
 800f57c:	2301      	movs	r3, #1
 800f57e:	e004      	b.n	800f58a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f584:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3740      	adds	r7, #64	; 0x40
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f594:	b480      	push	{r7}
 800f596:	b087      	sub	sp, #28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f5aa:	4b1f      	ldr	r3, [pc, #124]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5ac:	7a5b      	ldrb	r3, [r3, #9]
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d131      	bne.n	800f618 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f5b4:	4b1c      	ldr	r3, [pc, #112]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5b6:	7a5b      	ldrb	r3, [r3, #9]
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	4b1a      	ldr	r3, [pc, #104]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5be:	2100      	movs	r1, #0
 800f5c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f5c2:	4b19      	ldr	r3, [pc, #100]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5c4:	7a5b      	ldrb	r3, [r3, #9]
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	4a17      	ldr	r2, [pc, #92]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4413      	add	r3, r2
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f5d2:	4b15      	ldr	r3, [pc, #84]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5d4:	7a5b      	ldrb	r3, [r3, #9]
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4b13      	ldr	r3, [pc, #76]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5dc:	4413      	add	r3, r2
 800f5de:	79fa      	ldrb	r2, [r7, #7]
 800f5e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f5e2:	4b11      	ldr	r3, [pc, #68]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5e4:	7a5b      	ldrb	r3, [r3, #9]
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	b2d1      	uxtb	r1, r2
 800f5ec:	4a0e      	ldr	r2, [pc, #56]	; (800f628 <FATFS_LinkDriverEx+0x94>)
 800f5ee:	7251      	strb	r1, [r2, #9]
 800f5f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f5f2:	7dbb      	ldrb	r3, [r7, #22]
 800f5f4:	3330      	adds	r3, #48	; 0x30
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	3301      	adds	r3, #1
 800f600:	223a      	movs	r2, #58	; 0x3a
 800f602:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	3302      	adds	r3, #2
 800f608:	222f      	movs	r2, #47	; 0x2f
 800f60a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	3303      	adds	r3, #3
 800f610:	2200      	movs	r2, #0
 800f612:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f618:	7dfb      	ldrb	r3, [r7, #23]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	371c      	adds	r7, #28
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	240017d4 	.word	0x240017d4

0800f62c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f636:	2200      	movs	r2, #0
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7ff ffaa 	bl	800f594 <FATFS_LinkDriverEx>
 800f640:	4603      	mov	r3, r0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b082      	sub	sp, #8
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f83a 	bl	800f6cc <malloc>
 800f658:	4603      	mov	r3, r0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b082      	sub	sp, #8
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 f836 	bl	800f6dc <free>
}
 800f670:	bf00      	nop
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <__errno>:
 800f678:	4b01      	ldr	r3, [pc, #4]	; (800f680 <__errno+0x8>)
 800f67a:	6818      	ldr	r0, [r3, #0]
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	24000048 	.word	0x24000048

0800f684 <__libc_init_array>:
 800f684:	b570      	push	{r4, r5, r6, lr}
 800f686:	4d0d      	ldr	r5, [pc, #52]	; (800f6bc <__libc_init_array+0x38>)
 800f688:	4c0d      	ldr	r4, [pc, #52]	; (800f6c0 <__libc_init_array+0x3c>)
 800f68a:	1b64      	subs	r4, r4, r5
 800f68c:	10a4      	asrs	r4, r4, #2
 800f68e:	2600      	movs	r6, #0
 800f690:	42a6      	cmp	r6, r4
 800f692:	d109      	bne.n	800f6a8 <__libc_init_array+0x24>
 800f694:	4d0b      	ldr	r5, [pc, #44]	; (800f6c4 <__libc_init_array+0x40>)
 800f696:	4c0c      	ldr	r4, [pc, #48]	; (800f6c8 <__libc_init_array+0x44>)
 800f698:	f000 f92e 	bl	800f8f8 <_init>
 800f69c:	1b64      	subs	r4, r4, r5
 800f69e:	10a4      	asrs	r4, r4, #2
 800f6a0:	2600      	movs	r6, #0
 800f6a2:	42a6      	cmp	r6, r4
 800f6a4:	d105      	bne.n	800f6b2 <__libc_init_array+0x2e>
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}
 800f6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ac:	4798      	blx	r3
 800f6ae:	3601      	adds	r6, #1
 800f6b0:	e7ee      	b.n	800f690 <__libc_init_array+0xc>
 800f6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6b6:	4798      	blx	r3
 800f6b8:	3601      	adds	r6, #1
 800f6ba:	e7f2      	b.n	800f6a2 <__libc_init_array+0x1e>
 800f6bc:	0800fe00 	.word	0x0800fe00
 800f6c0:	0800fe00 	.word	0x0800fe00
 800f6c4:	0800fe00 	.word	0x0800fe00
 800f6c8:	0800fe04 	.word	0x0800fe04

0800f6cc <malloc>:
 800f6cc:	4b02      	ldr	r3, [pc, #8]	; (800f6d8 <malloc+0xc>)
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	f000 b87f 	b.w	800f7d4 <_malloc_r>
 800f6d6:	bf00      	nop
 800f6d8:	24000048 	.word	0x24000048

0800f6dc <free>:
 800f6dc:	4b02      	ldr	r3, [pc, #8]	; (800f6e8 <free+0xc>)
 800f6de:	4601      	mov	r1, r0
 800f6e0:	6818      	ldr	r0, [r3, #0]
 800f6e2:	f000 b80b 	b.w	800f6fc <_free_r>
 800f6e6:	bf00      	nop
 800f6e8:	24000048 	.word	0x24000048

0800f6ec <memset>:
 800f6ec:	4402      	add	r2, r0
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d100      	bne.n	800f6f6 <memset+0xa>
 800f6f4:	4770      	bx	lr
 800f6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f6fa:	e7f9      	b.n	800f6f0 <memset+0x4>

0800f6fc <_free_r>:
 800f6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6fe:	2900      	cmp	r1, #0
 800f700:	d044      	beq.n	800f78c <_free_r+0x90>
 800f702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f706:	9001      	str	r0, [sp, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f1a1 0404 	sub.w	r4, r1, #4
 800f70e:	bfb8      	it	lt
 800f710:	18e4      	addlt	r4, r4, r3
 800f712:	f000 f8e3 	bl	800f8dc <__malloc_lock>
 800f716:	4a1e      	ldr	r2, [pc, #120]	; (800f790 <_free_r+0x94>)
 800f718:	9801      	ldr	r0, [sp, #4]
 800f71a:	6813      	ldr	r3, [r2, #0]
 800f71c:	b933      	cbnz	r3, 800f72c <_free_r+0x30>
 800f71e:	6063      	str	r3, [r4, #4]
 800f720:	6014      	str	r4, [r2, #0]
 800f722:	b003      	add	sp, #12
 800f724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f728:	f000 b8de 	b.w	800f8e8 <__malloc_unlock>
 800f72c:	42a3      	cmp	r3, r4
 800f72e:	d908      	bls.n	800f742 <_free_r+0x46>
 800f730:	6825      	ldr	r5, [r4, #0]
 800f732:	1961      	adds	r1, r4, r5
 800f734:	428b      	cmp	r3, r1
 800f736:	bf01      	itttt	eq
 800f738:	6819      	ldreq	r1, [r3, #0]
 800f73a:	685b      	ldreq	r3, [r3, #4]
 800f73c:	1949      	addeq	r1, r1, r5
 800f73e:	6021      	streq	r1, [r4, #0]
 800f740:	e7ed      	b.n	800f71e <_free_r+0x22>
 800f742:	461a      	mov	r2, r3
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	b10b      	cbz	r3, 800f74c <_free_r+0x50>
 800f748:	42a3      	cmp	r3, r4
 800f74a:	d9fa      	bls.n	800f742 <_free_r+0x46>
 800f74c:	6811      	ldr	r1, [r2, #0]
 800f74e:	1855      	adds	r5, r2, r1
 800f750:	42a5      	cmp	r5, r4
 800f752:	d10b      	bne.n	800f76c <_free_r+0x70>
 800f754:	6824      	ldr	r4, [r4, #0]
 800f756:	4421      	add	r1, r4
 800f758:	1854      	adds	r4, r2, r1
 800f75a:	42a3      	cmp	r3, r4
 800f75c:	6011      	str	r1, [r2, #0]
 800f75e:	d1e0      	bne.n	800f722 <_free_r+0x26>
 800f760:	681c      	ldr	r4, [r3, #0]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	6053      	str	r3, [r2, #4]
 800f766:	4421      	add	r1, r4
 800f768:	6011      	str	r1, [r2, #0]
 800f76a:	e7da      	b.n	800f722 <_free_r+0x26>
 800f76c:	d902      	bls.n	800f774 <_free_r+0x78>
 800f76e:	230c      	movs	r3, #12
 800f770:	6003      	str	r3, [r0, #0]
 800f772:	e7d6      	b.n	800f722 <_free_r+0x26>
 800f774:	6825      	ldr	r5, [r4, #0]
 800f776:	1961      	adds	r1, r4, r5
 800f778:	428b      	cmp	r3, r1
 800f77a:	bf04      	itt	eq
 800f77c:	6819      	ldreq	r1, [r3, #0]
 800f77e:	685b      	ldreq	r3, [r3, #4]
 800f780:	6063      	str	r3, [r4, #4]
 800f782:	bf04      	itt	eq
 800f784:	1949      	addeq	r1, r1, r5
 800f786:	6021      	streq	r1, [r4, #0]
 800f788:	6054      	str	r4, [r2, #4]
 800f78a:	e7ca      	b.n	800f722 <_free_r+0x26>
 800f78c:	b003      	add	sp, #12
 800f78e:	bd30      	pop	{r4, r5, pc}
 800f790:	240017e0 	.word	0x240017e0

0800f794 <sbrk_aligned>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	4e0e      	ldr	r6, [pc, #56]	; (800f7d0 <sbrk_aligned+0x3c>)
 800f798:	460c      	mov	r4, r1
 800f79a:	6831      	ldr	r1, [r6, #0]
 800f79c:	4605      	mov	r5, r0
 800f79e:	b911      	cbnz	r1, 800f7a6 <sbrk_aligned+0x12>
 800f7a0:	f000 f88c 	bl	800f8bc <_sbrk_r>
 800f7a4:	6030      	str	r0, [r6, #0]
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	f000 f887 	bl	800f8bc <_sbrk_r>
 800f7ae:	1c43      	adds	r3, r0, #1
 800f7b0:	d00a      	beq.n	800f7c8 <sbrk_aligned+0x34>
 800f7b2:	1cc4      	adds	r4, r0, #3
 800f7b4:	f024 0403 	bic.w	r4, r4, #3
 800f7b8:	42a0      	cmp	r0, r4
 800f7ba:	d007      	beq.n	800f7cc <sbrk_aligned+0x38>
 800f7bc:	1a21      	subs	r1, r4, r0
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 f87c 	bl	800f8bc <_sbrk_r>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d101      	bne.n	800f7cc <sbrk_aligned+0x38>
 800f7c8:	f04f 34ff 	mov.w	r4, #4294967295
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
 800f7d0:	240017e4 	.word	0x240017e4

0800f7d4 <_malloc_r>:
 800f7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d8:	1ccd      	adds	r5, r1, #3
 800f7da:	f025 0503 	bic.w	r5, r5, #3
 800f7de:	3508      	adds	r5, #8
 800f7e0:	2d0c      	cmp	r5, #12
 800f7e2:	bf38      	it	cc
 800f7e4:	250c      	movcc	r5, #12
 800f7e6:	2d00      	cmp	r5, #0
 800f7e8:	4607      	mov	r7, r0
 800f7ea:	db01      	blt.n	800f7f0 <_malloc_r+0x1c>
 800f7ec:	42a9      	cmp	r1, r5
 800f7ee:	d905      	bls.n	800f7fc <_malloc_r+0x28>
 800f7f0:	230c      	movs	r3, #12
 800f7f2:	603b      	str	r3, [r7, #0]
 800f7f4:	2600      	movs	r6, #0
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7fc:	4e2e      	ldr	r6, [pc, #184]	; (800f8b8 <_malloc_r+0xe4>)
 800f7fe:	f000 f86d 	bl	800f8dc <__malloc_lock>
 800f802:	6833      	ldr	r3, [r6, #0]
 800f804:	461c      	mov	r4, r3
 800f806:	bb34      	cbnz	r4, 800f856 <_malloc_r+0x82>
 800f808:	4629      	mov	r1, r5
 800f80a:	4638      	mov	r0, r7
 800f80c:	f7ff ffc2 	bl	800f794 <sbrk_aligned>
 800f810:	1c43      	adds	r3, r0, #1
 800f812:	4604      	mov	r4, r0
 800f814:	d14d      	bne.n	800f8b2 <_malloc_r+0xde>
 800f816:	6834      	ldr	r4, [r6, #0]
 800f818:	4626      	mov	r6, r4
 800f81a:	2e00      	cmp	r6, #0
 800f81c:	d140      	bne.n	800f8a0 <_malloc_r+0xcc>
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	4631      	mov	r1, r6
 800f822:	4638      	mov	r0, r7
 800f824:	eb04 0803 	add.w	r8, r4, r3
 800f828:	f000 f848 	bl	800f8bc <_sbrk_r>
 800f82c:	4580      	cmp	r8, r0
 800f82e:	d13a      	bne.n	800f8a6 <_malloc_r+0xd2>
 800f830:	6821      	ldr	r1, [r4, #0]
 800f832:	3503      	adds	r5, #3
 800f834:	1a6d      	subs	r5, r5, r1
 800f836:	f025 0503 	bic.w	r5, r5, #3
 800f83a:	3508      	adds	r5, #8
 800f83c:	2d0c      	cmp	r5, #12
 800f83e:	bf38      	it	cc
 800f840:	250c      	movcc	r5, #12
 800f842:	4629      	mov	r1, r5
 800f844:	4638      	mov	r0, r7
 800f846:	f7ff ffa5 	bl	800f794 <sbrk_aligned>
 800f84a:	3001      	adds	r0, #1
 800f84c:	d02b      	beq.n	800f8a6 <_malloc_r+0xd2>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	442b      	add	r3, r5
 800f852:	6023      	str	r3, [r4, #0]
 800f854:	e00e      	b.n	800f874 <_malloc_r+0xa0>
 800f856:	6822      	ldr	r2, [r4, #0]
 800f858:	1b52      	subs	r2, r2, r5
 800f85a:	d41e      	bmi.n	800f89a <_malloc_r+0xc6>
 800f85c:	2a0b      	cmp	r2, #11
 800f85e:	d916      	bls.n	800f88e <_malloc_r+0xba>
 800f860:	1961      	adds	r1, r4, r5
 800f862:	42a3      	cmp	r3, r4
 800f864:	6025      	str	r5, [r4, #0]
 800f866:	bf18      	it	ne
 800f868:	6059      	strne	r1, [r3, #4]
 800f86a:	6863      	ldr	r3, [r4, #4]
 800f86c:	bf08      	it	eq
 800f86e:	6031      	streq	r1, [r6, #0]
 800f870:	5162      	str	r2, [r4, r5]
 800f872:	604b      	str	r3, [r1, #4]
 800f874:	4638      	mov	r0, r7
 800f876:	f104 060b 	add.w	r6, r4, #11
 800f87a:	f000 f835 	bl	800f8e8 <__malloc_unlock>
 800f87e:	f026 0607 	bic.w	r6, r6, #7
 800f882:	1d23      	adds	r3, r4, #4
 800f884:	1af2      	subs	r2, r6, r3
 800f886:	d0b6      	beq.n	800f7f6 <_malloc_r+0x22>
 800f888:	1b9b      	subs	r3, r3, r6
 800f88a:	50a3      	str	r3, [r4, r2]
 800f88c:	e7b3      	b.n	800f7f6 <_malloc_r+0x22>
 800f88e:	6862      	ldr	r2, [r4, #4]
 800f890:	42a3      	cmp	r3, r4
 800f892:	bf0c      	ite	eq
 800f894:	6032      	streq	r2, [r6, #0]
 800f896:	605a      	strne	r2, [r3, #4]
 800f898:	e7ec      	b.n	800f874 <_malloc_r+0xa0>
 800f89a:	4623      	mov	r3, r4
 800f89c:	6864      	ldr	r4, [r4, #4]
 800f89e:	e7b2      	b.n	800f806 <_malloc_r+0x32>
 800f8a0:	4634      	mov	r4, r6
 800f8a2:	6876      	ldr	r6, [r6, #4]
 800f8a4:	e7b9      	b.n	800f81a <_malloc_r+0x46>
 800f8a6:	230c      	movs	r3, #12
 800f8a8:	603b      	str	r3, [r7, #0]
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	f000 f81c 	bl	800f8e8 <__malloc_unlock>
 800f8b0:	e7a1      	b.n	800f7f6 <_malloc_r+0x22>
 800f8b2:	6025      	str	r5, [r4, #0]
 800f8b4:	e7de      	b.n	800f874 <_malloc_r+0xa0>
 800f8b6:	bf00      	nop
 800f8b8:	240017e0 	.word	0x240017e0

0800f8bc <_sbrk_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d06      	ldr	r5, [pc, #24]	; (800f8d8 <_sbrk_r+0x1c>)
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	4608      	mov	r0, r1
 800f8c6:	602b      	str	r3, [r5, #0]
 800f8c8:	f7f1 ffac 	bl	8001824 <_sbrk>
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	d102      	bne.n	800f8d6 <_sbrk_r+0x1a>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	b103      	cbz	r3, 800f8d6 <_sbrk_r+0x1a>
 800f8d4:	6023      	str	r3, [r4, #0]
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	240017e8 	.word	0x240017e8

0800f8dc <__malloc_lock>:
 800f8dc:	4801      	ldr	r0, [pc, #4]	; (800f8e4 <__malloc_lock+0x8>)
 800f8de:	f000 b809 	b.w	800f8f4 <__retarget_lock_acquire_recursive>
 800f8e2:	bf00      	nop
 800f8e4:	240017ec 	.word	0x240017ec

0800f8e8 <__malloc_unlock>:
 800f8e8:	4801      	ldr	r0, [pc, #4]	; (800f8f0 <__malloc_unlock+0x8>)
 800f8ea:	f000 b804 	b.w	800f8f6 <__retarget_lock_release_recursive>
 800f8ee:	bf00      	nop
 800f8f0:	240017ec 	.word	0x240017ec

0800f8f4 <__retarget_lock_acquire_recursive>:
 800f8f4:	4770      	bx	lr

0800f8f6 <__retarget_lock_release_recursive>:
 800f8f6:	4770      	bx	lr

0800f8f8 <_init>:
 800f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fa:	bf00      	nop
 800f8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8fe:	bc08      	pop	{r3}
 800f900:	469e      	mov	lr, r3
 800f902:	4770      	bx	lr

0800f904 <_fini>:
 800f904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f906:	bf00      	nop
 800f908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f90a:	bc08      	pop	{r3}
 800f90c:	469e      	mov	lr, r3
 800f90e:	4770      	bx	lr

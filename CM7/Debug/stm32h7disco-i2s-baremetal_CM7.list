
stm32h7disco-i2s-baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f670  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800f908  0800f908  0001f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf0  0800fdf0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf0  0800fdf0  0001fdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdf8  0800fdf8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  24000000  0800fe00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001744  240000ac  0800feac  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240017f0  0800feac  000217f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1c8  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000382d  00000000  00000000  0003c2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00040fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043259  00000000  00000000  000422f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020705  00000000  00000000  00085551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f2d8  00000000  00000000  000a5c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00244f2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e4  00000000  00000000  00244f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000ac 	.word	0x240000ac
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f8f0 	.word	0x0800f8f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000b0 	.word	0x240000b0
 80002d4:	0800f8f0 	.word	0x0800f8f0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <sd_card_init>:
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
static uint8_t first_play = 0;
void sd_card_init()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	4907      	ldr	r1, [pc, #28]	; (800072c <sd_card_init+0x24>)
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <sd_card_init+0x28>)
 8000712:	f00d ffc1 	bl	800e698 <f_mount>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <sd_card_init+0x2c>)
 800071c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <sd_card_init+0x2c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <sd_card_init+0x20>
	{
//		printf("error in mounting an sd card: %d \n", sd_result);
		while(1);
 8000726:	e7fe      	b.n	8000726 <sd_card_init+0x1e>
	}
//	else
//	{
//		printf("succeded in mounting an sd card \n");
//	}
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	240017a8 	.word	0x240017a8
 8000730:	240000cc 	.word	0x240000cc
 8000734:	240000c8 	.word	0x240000c8

08000738 <start_recording>:

void start_recording(uint32_t frequency)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	static char file_name[] = "samp.wav";

	uint32_t byte_rate = frequency * 2 * 2;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
	wav_file_header[24] = (uint8_t)frequency;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <start_recording+0x84>)
 800074c:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <start_recording+0x84>)
 8000756:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <start_recording+0x84>)
 8000760:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0e1b      	lsrs	r3, r3, #24
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <start_recording+0x84>)
 800076a:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <start_recording+0x84>)
 8000772:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <start_recording+0x84>)
 800077c:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <start_recording+0x84>)
 8000786:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <start_recording+0x84>)
 8000790:	77da      	strb	r2, [r3, #31]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 8000792:	220a      	movs	r2, #10
 8000794:	490a      	ldr	r1, [pc, #40]	; (80007c0 <start_recording+0x88>)
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <start_recording+0x8c>)
 8000798:	f00d ffc4 	bl	800e724 <f_open>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <start_recording+0x90>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <start_recording+0x90>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d000      	beq.n	80007ae <start_recording+0x76>
	{
//		printf("error in creating a file: %d \n", sd_result);
		while(1);
 80007ac:	e7fe      	b.n	80007ac <start_recording+0x74>
	}
//	else
//	{
//		printf("succeeded in opening a file \n");
//	}
	wav_file_size = 0;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <start_recording+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]


}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000008 	.word	0x24000008
 80007c0:	24000034 	.word	0x24000034
 80007c4:	24000300 	.word	0x24000300
 80007c8:	240000c8 	.word	0x240000c8
 80007cc:	24000530 	.word	0x24000530

080007d0 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
//	printf("w\n");
	if(first_time == 0)
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <write2wave_file+0x70>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d113      	bne.n	800080c <write2wave_file+0x3c>
	{
		for(int i = 0; i < 44; i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e00a      	b.n	8000800 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	4914      	ldr	r1, [pc, #80]	; (8000844 <write2wave_file+0x74>)
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	440a      	add	r2, r1
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b2b      	cmp	r3, #43	; 0x2b
 8000804:	ddf1      	ble.n	80007ea <write2wave_file+0x1a>
		}
		first_time = 1;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <write2wave_file+0x70>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <write2wave_file+0x78>)
 8000816:	f00e fa92 	bl	800ed3e <f_write>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <write2wave_file+0x7c>)
 8000820:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <write2wave_file+0x7c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <write2wave_file+0x5c>
	{
//		printf("error in writing to the file: %d \n", sd_result);
		while(1);
 800082a:	e7fe      	b.n	800082a <write2wave_file+0x5a>
	}
	wav_file_size += data_size;
 800082c:	887a      	ldrh	r2, [r7, #2]
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <write2wave_file+0x80>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <write2wave_file+0x80>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000534 	.word	0x24000534
 8000844:	24000008 	.word	0x24000008
 8000848:	24000300 	.word	0x24000300
 800084c:	240000c8 	.word	0x240000c8
 8000850:	24000530 	.word	0x24000530

08000854 <stop_recording>:

void stop_recording()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <stop_recording+0xb0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3b08      	subs	r3, #8
 8000860:	4a28      	ldr	r2, [pc, #160]	; (8000904 <stop_recording+0xb0>)
 8000862:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <stop_recording+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <stop_recording+0xb4>)
 800086c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <stop_recording+0xb0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <stop_recording+0xb4>)
 8000878:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <stop_recording+0xb0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <stop_recording+0xb4>)
 8000884:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <stop_recording+0xb0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <stop_recording+0xb4>)
 8000890:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <stop_recording+0xb0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3b24      	subs	r3, #36	; 0x24
 8000898:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <stop_recording+0xb0>)
 800089a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <stop_recording+0xb0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <stop_recording+0xb4>)
 80008a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <stop_recording+0xb0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <stop_recording+0xb4>)
 80008b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <stop_recording+0xb0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	0c1b      	lsrs	r3, r3, #16
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <stop_recording+0xb4>)
 80008c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <stop_recording+0xb0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0e1b      	lsrs	r3, r3, #24
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <stop_recording+0xb4>)
 80008ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80008d2:	2100      	movs	r1, #0
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <stop_recording+0xb8>)
 80008d6:	f00e fc4f 	bl	800f178 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80008da:	1dbb      	adds	r3, r7, #6
 80008dc:	222c      	movs	r2, #44	; 0x2c
 80008de:	490a      	ldr	r1, [pc, #40]	; (8000908 <stop_recording+0xb4>)
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <stop_recording+0xb8>)
 80008e2:	f00e fa2c 	bl	800ed3e <f_write>
	if(sd_result != 0)
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <stop_recording+0xbc>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d000      	beq.n	80008f0 <stop_recording+0x9c>
	{
//		printf("error in updating the first sector: %d \n", sd_result);
		while(1);
 80008ee:	e7fe      	b.n	80008ee <stop_recording+0x9a>
	}
	f_close(&wavFile);
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <stop_recording+0xb8>)
 80008f2:	f00e fc17 	bl	800f124 <f_close>
	first_time = 0;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <stop_recording+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
//	printf("closed the file \n");
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000530 	.word	0x24000530
 8000908:	24000008 	.word	0x24000008
 800090c:	24000300 	.word	0x24000300
 8000910:	240000c8 	.word	0x240000c8
 8000914:	24000534 	.word	0x24000534

08000918 <play_record>:

bool play_record(uint8_t *data, uint16_t data_size){
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
	FRESULT fr = FR_NOT_READY;
 8000924:	2303      	movs	r3, #3
 8000926:	77fb      	strb	r3, [r7, #31]
	UINT bytesRead = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]

	char folderPath[] = "0:samp.wav";
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <play_record+0x84>)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	ca07      	ldmia	r2, {r0, r1, r2}
 8000934:	c303      	stmia	r3!, {r0, r1}
 8000936:	801a      	strh	r2, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
	if(first_play == 0){
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <play_record+0x88>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d112      	bne.n	800096c <play_record+0x54>
		fr = f_open(&wavFile, folderPath, FA_READ);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <play_record+0x8c>)
 8000950:	f00d fee8 	bl	800e724 <f_open>
 8000954:	4603      	mov	r3, r0
 8000956:	77fb      	strb	r3, [r7, #31]

		if (fr == FR_OK)
 8000958:	7ffb      	ldrb	r3, [r7, #31]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <play_record+0x4e>
		{
		  f_lseek(&wavFile, 44);
 800095e:	212c      	movs	r1, #44	; 0x2c
 8000960:	4810      	ldr	r0, [pc, #64]	; (80009a4 <play_record+0x8c>)
 8000962:	f00e fc09 	bl	800f178 <f_lseek>
		}
		first_play = 1;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <play_record+0x88>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
	}

	f_read(&wavFile, data, data_size, &bytesRead);
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <play_record+0x8c>)
 8000976:	f00e f8a3 	bl	800eac0 <f_read>
	if(bytesRead < data_size){
 800097a:	887a      	ldrh	r2, [r7, #2]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <play_record+0x7a>
		f_close(&wavFile);
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <play_record+0x8c>)
 8000984:	f00e fbce 	bl	800f124 <f_close>
		first_play = 0;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <play_record+0x88>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <play_record+0x7c>
	}

	return true;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800f908 	.word	0x0800f908
 80009a0:	24000535 	.word	0x24000535
 80009a4:	24000300 	.word	0x24000300

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009b4:	bf00      	nop
 80009b6:	4ba4      	ldr	r3, [pc, #656]	; (8000c48 <main+0x2a0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <main+0x24>
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dcf4      	bgt.n	80009b6 <main+0xe>
  if ( timeout < 0 )
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da01      	bge.n	80009d6 <main+0x2e>
  {
  Error_Handler();
 80009d2:	f000 fc91 	bl	80012f8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 ff81 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 fa01 	bl	8000de0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009de:	4b9a      	ldr	r3, [pc, #616]	; (8000c48 <main+0x2a0>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a98      	ldr	r2, [pc, #608]	; (8000c48 <main+0x2a0>)
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b96      	ldr	r3, [pc, #600]	; (8000c48 <main+0x2a0>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 ff17 	bl	8004830 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f003 ff2d 	bl	8004864 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a10:	bf00      	nop
 8000a12:	4b8d      	ldr	r3, [pc, #564]	; (8000c48 <main+0x2a0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <main+0x80>
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	617a      	str	r2, [r7, #20]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dcf4      	bgt.n	8000a12 <main+0x6a>
if ( timeout < 0 )
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da01      	bge.n	8000a32 <main+0x8a>
{
Error_Handler();
 8000a2e:	f000 fc63 	bl	80012f8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 fb1f 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a36:	f000 fafd 	bl	8001034 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a3a:	f000 faaf 	bl	8000f9c <MX_USART1_UART_Init>
  MX_I2S1_Init();
 8000a3e:	f000 fa55 	bl	8000eec <MX_I2S1_Init>
  MX_SDMMC1_SD_Init();
 8000a42:	f000 fa87 	bl	8000f54 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a46:	f00b faa1 	bl	800bf8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4e:	f000 ffd7 	bl	8001a00 <HAL_Delay>
  sd_card_init();
 8000a52:	f7ff fe59 	bl	8000708 <sd_card_init>
  HAL_Delay(500);
 8000a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5a:	f000 ffd1 	bl	8001a00 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // RECORD BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000a5e:	2108      	movs	r1, #8
 8000a60:	487a      	ldr	r0, [pc, #488]	; (8000c4c <main+0x2a4>)
 8000a62:	f003 feb3 	bl	80047cc <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10c      	bne.n	8000a86 <main+0xde>
		  recordBtnState++;
 8000a6c:	4b78      	ldr	r3, [pc, #480]	; (8000c50 <main+0x2a8>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b76      	ldr	r3, [pc, #472]	; (8000c50 <main+0x2a8>)
 8000a76:	801a      	strh	r2, [r3, #0]
		  if(recordBtnState > 100)
 8000a78:	4b75      	ldr	r3, [pc, #468]	; (8000c50 <main+0x2a8>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b64      	cmp	r3, #100	; 0x64
 8000a7e:	d902      	bls.n	8000a86 <main+0xde>
			  recordBtnState = 100;
 8000a80:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <main+0x2a8>)
 8000a82:	2264      	movs	r2, #100	; 0x64
 8000a84:	801a      	strh	r2, [r3, #0]
	  }
	  if(recordBtnState == 100 && recordBtnPrevState != HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)){
 8000a86:	4b72      	ldr	r3, [pc, #456]	; (8000c50 <main+0x2a8>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	2b64      	cmp	r3, #100	; 0x64
 8000a8c:	d10f      	bne.n	8000aae <main+0x106>
 8000a8e:	2108      	movs	r1, #8
 8000a90:	486e      	ldr	r0, [pc, #440]	; (8000c4c <main+0x2a4>)
 8000a92:	f003 fe9b 	bl	80047cc <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b6e      	ldr	r3, [pc, #440]	; (8000c54 <main+0x2ac>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d005      	beq.n	8000aae <main+0x106>
		  recordBtnState = 0;
 8000aa2:	4b6b      	ldr	r3, [pc, #428]	; (8000c50 <main+0x2a8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
		  recordBtnPressed = 1;
 8000aa8:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <main+0x2b0>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
	  }
	  recordBtnPrevState = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4866      	ldr	r0, [pc, #408]	; (8000c4c <main+0x2a4>)
 8000ab2:	f003 fe8b 	bl	80047cc <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b66      	ldr	r3, [pc, #408]	; (8000c54 <main+0x2ac>)
 8000abc:	701a      	strb	r2, [r3, #0]

	  // PLAY BUTTON STATE
	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == 0){
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	4862      	ldr	r0, [pc, #392]	; (8000c4c <main+0x2a4>)
 8000ac2:	f003 fe83 	bl	80047cc <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10c      	bne.n	8000ae6 <main+0x13e>
		  playBtnState++;
 8000acc:	4b63      	ldr	r3, [pc, #396]	; (8000c5c <main+0x2b4>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b61      	ldr	r3, [pc, #388]	; (8000c5c <main+0x2b4>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		  if(playBtnState > 100)
 8000ad8:	4b60      	ldr	r3, [pc, #384]	; (8000c5c <main+0x2b4>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b64      	cmp	r3, #100	; 0x64
 8000ade:	d902      	bls.n	8000ae6 <main+0x13e>
			  playBtnState = 100;
 8000ae0:	4b5e      	ldr	r3, [pc, #376]	; (8000c5c <main+0x2b4>)
 8000ae2:	2264      	movs	r2, #100	; 0x64
 8000ae4:	801a      	strh	r2, [r3, #0]
	  }
	  if(playBtnState == 100 && playBtnPrevState != HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin)){
 8000ae6:	4b5d      	ldr	r3, [pc, #372]	; (8000c5c <main+0x2b4>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d10f      	bne.n	8000b0e <main+0x166>
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4856      	ldr	r0, [pc, #344]	; (8000c4c <main+0x2a4>)
 8000af2:	f003 fe6b 	bl	80047cc <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <main+0x2b8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d005      	beq.n	8000b0e <main+0x166>
		  playBtnState = 0;
 8000b02:	4b56      	ldr	r3, [pc, #344]	; (8000c5c <main+0x2b4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
		  playBtnPressed = 1;
 8000b08:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <main+0x2bc>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	  }
	  playBtnPrevState = HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin);
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	484e      	ldr	r0, [pc, #312]	; (8000c4c <main+0x2a4>)
 8000b12:	f003 fe5b 	bl	80047cc <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <main+0x2b8>)
 8000b1c:	701a      	strb	r2, [r3, #0]

	  // RECORD WAV FILE ROUTINE BY USING I2S_RX AND SD CARD
	  if(recordBtnPressed == 1 && playWAV_File == 0){
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	; (8000c58 <main+0x2b0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d12d      	bne.n	8000b82 <main+0x1da>
 8000b26:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <main+0x2c0>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d129      	bne.n	8000b82 <main+0x1da>
		  recordWAV_File ^= 0x01;
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <main+0x2c4>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f083 0301 	eor.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <main+0x2c4>)
 8000b3a:	701a      	strb	r2, [r3, #0]
		  if(recordWAV_File){
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <main+0x2c4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d013      	beq.n	8000b6c <main+0x1c4>
			  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4a:	4849      	ldr	r0, [pc, #292]	; (8000c70 <main+0x2c8>)
 8000b4c:	f003 fe56 	bl	80047fc <HAL_GPIO_WritePin>
			  I2S1_ReInit(I2S_MODE_MASTER_RX);
 8000b50:	2006      	movs	r0, #6
 8000b52:	f000 fb55 	bl	8001200 <I2S1_ReInit>
			  start_recording(I2S_AUDIOFREQ_11K);
 8000b56:	f642 3011 	movw	r0, #11025	; 0x2b11
 8000b5a:	f7ff fded 	bl	8000738 <start_recording>
			  HAL_I2S_Receive_DMA(&hi2s1, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 8000b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b62:	4944      	ldr	r1, [pc, #272]	; (8000c74 <main+0x2cc>)
 8000b64:	4844      	ldr	r0, [pc, #272]	; (8000c78 <main+0x2d0>)
 8000b66:	f004 f857 	bl	8004c18 <HAL_I2S_Receive_DMA>
 8000b6a:	e00a      	b.n	8000b82 <main+0x1da>
		  }
		  else{
			  HAL_I2S_DMAStop(&hi2s1);
 8000b6c:	4842      	ldr	r0, [pc, #264]	; (8000c78 <main+0x2d0>)
 8000b6e:	f004 f8f5 	bl	8004d5c <HAL_I2S_DMAStop>
			  stop_recording();
 8000b72:	f7ff fe6f 	bl	8000854 <stop_recording>
			  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7c:	483c      	ldr	r0, [pc, #240]	; (8000c70 <main+0x2c8>)
 8000b7e:	f003 fe3d 	bl	80047fc <HAL_GPIO_WritePin>
		  }
	  }

	  if(recordWAV_File == 1 && half_i2s == 1){
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <main+0x2c4>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d10c      	bne.n	8000ba4 <main+0x1fc>
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <main+0x2d4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d107      	bne.n	8000ba4 <main+0x1fc>
		  write2wave_file(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT);
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	4836      	ldr	r0, [pc, #216]	; (8000c74 <main+0x2cc>)
 8000b9a:	f7ff fe19 	bl	80007d0 <write2wave_file>
		  half_i2s = 0;
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <main+0x2d4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	  }
	  if(recordWAV_File == 1 && full_i2s == 1){
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <main+0x2c4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d10d      	bne.n	8000bc8 <main+0x220>
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <main+0x2d8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <main+0x220>
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <main+0x2dc>)
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fe07 	bl	80007d0 <write2wave_file>
		  full_i2s = 0;
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <main+0x2d8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	  }

	  // PLAY RECORDED WAV FILE ROUTINE BY USING I2S_TX AND SD CARD
	  if(endOfWavFile == 1 && full_i2s_tx == 1){
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <main+0x2e0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d116      	bne.n	8000bfe <main+0x256>
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <main+0x2e4>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d111      	bne.n	8000bfe <main+0x256>
		  endOfWavFile = 0;
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <main+0x2e0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
		  full_i2s_tx = 0;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <main+0x2e4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
		  playWAV_File = 0;
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <main+0x2c0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
		  HAL_I2S_DMAStop(&hi2s1);
 8000bec:	4822      	ldr	r0, [pc, #136]	; (8000c78 <main+0x2d0>)
 8000bee:	f004 f8b5 	bl	8004d5c <HAL_I2S_DMAStop>
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf8:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x2c8>)
 8000bfa:	f003 fdff 	bl	80047fc <HAL_GPIO_WritePin>
	  }

	  if(playBtnPressed == 1 &&  recordWAV_File == 0){
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <main+0x2bc>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d15c      	bne.n	8000cc0 <main+0x318>
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <main+0x2c4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d158      	bne.n	8000cc0 <main+0x318>
		  playWAV_File = 1;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <main+0x2c0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4815      	ldr	r0, [pc, #84]	; (8000c70 <main+0x2c8>)
 8000c1c:	f003 fdee 	bl	80047fc <HAL_GPIO_WritePin>
		  I2S1_ReInit(I2S_MODE_MASTER_TX);
 8000c20:	2004      	movs	r0, #4
 8000c22:	f000 faed 	bl	8001200 <I2S1_ReInit>
		  if(!play_record(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT*2)){
 8000c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <main+0x2cc>)
 8000c2c:	f7ff fe74 	bl	8000918 <play_record>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f083 0301 	eor.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <main+0x29a>
			  endOfWavFile = 1;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <main+0x2e0>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		  }
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e031      	b.n	8000cac <main+0x304>
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58022800 	.word	0x58022800
 8000c50:	2400078e 	.word	0x2400078e
 8000c54:	2400078d 	.word	0x2400078d
 8000c58:	2400078c 	.word	0x2400078c
 8000c5c:	24000792 	.word	0x24000792
 8000c60:	24000791 	.word	0x24000791
 8000c64:	24000790 	.word	0x24000790
 8000c68:	24001797 	.word	0x24001797
 8000c6c:	24001796 	.word	0x24001796
 8000c70:	58022000 	.word	0x58022000
 8000c74:	24000794 	.word	0x24000794
 8000c78:	24000538 	.word	0x24000538
 8000c7c:	24001794 	.word	0x24001794
 8000c80:	24001795 	.word	0x24001795
 8000c84:	24000f94 	.word	0x24000f94
 8000c88:	24001798 	.word	0x24001798
 8000c8c:	24001799 	.word	0x24001799
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	005a      	lsls	r2, r3, #1
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4948      	ldr	r1, [pc, #288]	; (8000dbc <main+0x414>)
 8000c9c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000ca0:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <main+0x414>)
 8000ca2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb2:	dbed      	blt.n	8000c90 <main+0x2e8>
		  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)data_i2s, WAV_WRITE_SAMPLE_COUNT);
 8000cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb8:	4940      	ldr	r1, [pc, #256]	; (8000dbc <main+0x414>)
 8000cba:	4841      	ldr	r0, [pc, #260]	; (8000dc0 <main+0x418>)
 8000cbc:	f003 ff0a 	bl	8004ad4 <HAL_I2S_Transmit_DMA>
	  }

	  if(playWAV_File == 1 && half_i2s_tx == 1){
 8000cc0:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <main+0x41c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d12a      	bne.n	8000d1e <main+0x376>
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <main+0x420>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d125      	bne.n	8000d1e <main+0x376>
		  if(!play_record(((uint8_t*)data_i2s), WAV_WRITE_SAMPLE_COUNT)){
 8000cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd6:	4839      	ldr	r0, [pc, #228]	; (8000dbc <main+0x414>)
 8000cd8:	f7ff fe1e 	bl	8000918 <play_record>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f083 0301 	eor.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <main+0x346>
			  endOfWavFile = 1;
 8000ce8:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <main+0x424>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
		  }
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/4; i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e00d      	b.n	8000d10 <main+0x368>
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	005a      	lsls	r2, r3, #1
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	492f      	ldr	r1, [pc, #188]	; (8000dbc <main+0x414>)
 8000d00:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000d04:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <main+0x414>)
 8000d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0; i<WAV_WRITE_SAMPLE_COUNT/4; i++)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d16:	dbed      	blt.n	8000cf4 <main+0x34c>
		  half_i2s_tx = 0;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <main+0x420>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	  }
	  if(playWAV_File == 1 && full_i2s_tx == 1){
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <main+0x41c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d129      	bne.n	8000d7a <main+0x3d2>
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <main+0x428>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d124      	bne.n	8000d7a <main+0x3d2>
		  if(!play_record(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT)){
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <main+0x42c>)
 8000d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fdee 	bl	8000918 <play_record>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <main+0x3a6>
			  endOfWavFile = 1;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <main+0x424>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
		  }
		  for(int i = WAV_WRITE_SAMPLE_COUNT/4; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	e00d      	b.n	8000d72 <main+0x3ca>
			  data_i2s[2*i+1] = data_i2s[2*i];
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	005a      	lsls	r2, r3, #1
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4916      	ldr	r1, [pc, #88]	; (8000dbc <main+0x414>)
 8000d62:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <main+0x414>)
 8000d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = WAV_WRITE_SAMPLE_COUNT/4; i<WAV_WRITE_SAMPLE_COUNT/2; i++)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d78:	dbed      	blt.n	8000d56 <main+0x3ae>
	  }

	  if(playWAV_File == 1 && full_i2s_tx == 1){
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <main+0x41c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d114      	bne.n	8000dac <main+0x404>
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <main+0x428>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <main+0x404>
		  full_i2s_tx = 0;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <main+0x428>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
//		  HAL_I2S_Transmit(&hi2s1, data_i2s, WAV_WRITE_SAMPLE_COUNT, 1000);
		  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)data_i2s, WAV_WRITE_SAMPLE_COUNT);
 8000d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d96:	4909      	ldr	r1, [pc, #36]	; (8000dbc <main+0x414>)
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <main+0x418>)
 8000d9a:	f003 fe9b 	bl	8004ad4 <HAL_I2S_Transmit_DMA>
		  if(endOfWavFile){
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <main+0x424>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <main+0x404>
			  playWAV_File = 0;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <main+0x41c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  recordBtnPressed = 0;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <main+0x430>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	  playBtnPressed = 0;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <main+0x434>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == 0){
 8000db8:	e651      	b.n	8000a5e <main+0xb6>
 8000dba:	bf00      	nop
 8000dbc:	24000794 	.word	0x24000794
 8000dc0:	24000538 	.word	0x24000538
 8000dc4:	24001797 	.word	0x24001797
 8000dc8:	2400179a 	.word	0x2400179a
 8000dcc:	24001798 	.word	0x24001798
 8000dd0:	24001799 	.word	0x24001799
 8000dd4:	24000f94 	.word	0x24000f94
 8000dd8:	2400078c 	.word	0x2400078c
 8000ddc:	24000790 	.word	0x24000790

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09c      	sub	sp, #112	; 0x70
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	224c      	movs	r2, #76	; 0x4c
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00e fc78 	bl	800f6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2220      	movs	r2, #32
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00e fc72 	bl	800f6e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e00:	2004      	movs	r0, #4
 8000e02:	f004 f889 	bl	8004f18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <SystemClock_Config+0x104>)
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	4a35      	ldr	r2, [pc, #212]	; (8000ee4 <SystemClock_Config+0x104>)
 8000e10:	f023 0301 	bic.w	r3, r3, #1
 8000e14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <SystemClock_Config+0x104>)
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <SystemClock_Config+0x108>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <SystemClock_Config+0x108>)
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <SystemClock_Config+0x108>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e38:	bf00      	nop
 8000e3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <SystemClock_Config+0x108>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e46:	d1f8      	bne.n	8000e3a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e48:	230b      	movs	r3, #11
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e56:	2340      	movs	r3, #64	; 0x40
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	2302      	movs	r3, #2
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e66:	2305      	movs	r3, #5
 8000e68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f004 f89e 	bl	8004fcc <HAL_RCC_OscConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e96:	f000 fa2f 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	233f      	movs	r3, #63	; 0x3f
 8000e9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 fcdd 	bl	8005880 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000ecc:	f000 fa14 	bl	80012f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ed0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f004 fe88 	bl	8005bec <HAL_RCC_MCOConfig>
}
 8000edc:	bf00      	nop
 8000ede:	3770      	adds	r7, #112	; 0x70
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58000400 	.word	0x58000400
 8000ee8:	58024800 	.word	0x58024800

08000eec <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <MX_I2S1_Init+0x64>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000ef8:	2206      	movs	r2, #6
 8000efa:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_11K;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f12:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000f16:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1, I2S_MODE_MASTER_RX) != HAL_OK)
 8000f36:	2106      	movs	r1, #6
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_I2S1_Init+0x60>)
 8000f3a:	f003 fca7 	bl	800488c <HAL_I2S_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f000 f9d8 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	24000538 	.word	0x24000538
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <MX_SDMMC1_SD_Init+0x44>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f70:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_SDMMC1_SD_Init+0x40>)
 8000f80:	f007 fdb2 	bl	8008ae8 <HAL_SD_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000f8a:	f000 f9b5 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2400067c 	.word	0x2400067c
 8000f98:	52007000 	.word	0x52007000

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <MX_USART1_UART_Init+0x94>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000fe6:	f009 f931 	bl	800a24c <HAL_UART_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ff0:	f000 f982 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_USART1_UART_Init+0x90>)
 8000ff8:	f00a f933 	bl	800b262 <HAL_UARTEx_SetTxFifoThreshold>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001002:	f000 f979 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001006:	2100      	movs	r1, #0
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <MX_USART1_UART_Init+0x90>)
 800100a:	f00a f968 	bl	800b2de <HAL_UARTEx_SetRxFifoThreshold>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001014:	f000 f970 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_USART1_UART_Init+0x90>)
 800101a:	f00a f8e9 	bl	800b1f0 <HAL_UARTEx_DisableFifoMode>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001024:	f000 f968 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	240006f8 	.word	0x240006f8
 8001030:	40011000 	.word	0x40011000

08001034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_DMA_Init+0x3c>)
 800103c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <MX_DMA_Init+0x3c>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_DMA_Init+0x3c>)
 800104c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	200b      	movs	r0, #11
 800105e:	f000 fdda 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001062:	200b      	movs	r0, #11
 8001064:	f000 fdf1 	bl	8001c4a <HAL_NVIC_EnableIRQ>
//  /* DMA2_Stream0_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800108a:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <MX_GPIO_Init+0x17c>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a57      	ldr	r2, [pc, #348]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <MX_GPIO_Init+0x17c>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a41      	ldr	r2, [pc, #260]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <MX_GPIO_Init+0x17c>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a39      	ldr	r2, [pc, #228]	; (80011f0 <MX_GPIO_Init+0x17c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin JOY_UP_Pin JOY_DOWN_Pin
                           JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin
 800115c:	237c      	movs	r3, #124	; 0x7c
 800115e:	61fb      	str	r3, [r7, #28]
                          |JOY_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4821      	ldr	r0, [pc, #132]	; (80011f4 <MX_GPIO_Init+0x180>)
 8001170:	f003 f97c 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <MX_GPIO_Init+0x184>)
 800118a:	f003 f96f 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4814      	ldr	r0, [pc, #80]	; (80011fc <MX_GPIO_Init+0x188>)
 80011ac:	f003 f95e 	bl	800446c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80011b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode= GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <MX_GPIO_Init+0x184>)
 80011ca:	f003 f94f 	bl	800446c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <MX_GPIO_Init+0x184>)
 80011d6:	f003 fb11 	bl	80047fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_GPIO_Init+0x184>)
 80011e2:	f003 fb0b 	bl	80047fc <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	; 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58022800 	.word	0x58022800
 80011f8:	58022000 	.word	0x58022000
 80011fc:	58020000 	.word	0x58020000

08001200 <I2S1_ReInit>:

/* USER CODE BEGIN 4 */

static void I2S1_ReInit(uint32_t Mode)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.State = HAL_I2S_STATE_RESET;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <I2S1_ReInit+0x70>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s1.Instance = SPI1;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <I2S1_ReInit+0x70>)
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <I2S1_ReInit+0x74>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = Mode;
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <I2S1_ReInit+0x70>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6053      	str	r3, [r2, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <I2S1_ReInit+0x70>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <I2S1_ReInit+0x70>)
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <I2S1_ReInit+0x70>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_11K;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <I2S1_ReInit+0x70>)
 8001232:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001236:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <I2S1_ReInit+0x70>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <I2S1_ReInit+0x70>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <I2S1_ReInit+0x70>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <I2S1_ReInit+0x70>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <I2S1_ReInit+0x70>)
 8001252:	2200      	movs	r2, #0
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1, Mode) != HAL_OK)
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <I2S1_ReInit+0x70>)
 800125a:	f003 fb17 	bl	800488c <HAL_I2S_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <I2S1_ReInit+0x68>
  {
    Error_Handler();
 8001264:	f000 f848 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24000538 	.word	0x24000538
 8001274:	40013000 	.word	0x40013000

08001278 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	full_i2s = 1;
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_I2S_RxCpltCallback+0x1c>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	24001795 	.word	0x24001795

08001298 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	half_i2s = 1;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24001794 	.word	0x24001794

080012b8 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	full_i2s_tx = 1;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_I2S_TxCpltCallback+0x1c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	24001799 	.word	0x24001799

080012d8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	half_i2s_tx = 1;
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2400179a 	.word	0x2400179a

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_MspInit+0x30>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x30>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x30>)
 800131c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	58024400 	.word	0x58024400

08001338 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s, uint32_t Mode)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0be      	sub	sp, #248	; 0xf8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	22c8      	movs	r2, #200	; 0xc8
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f00e f9c2 	bl	800f6e4 <memset>
  if(hi2s->Instance==SPI1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a7e      	ldr	r2, [pc, #504]	; (8001560 <HAL_I2S_MspInit+0x228>)
 8001366:	4293      	cmp	r3, r2
 8001368:	f040 80f5 	bne.w	8001556 <HAL_I2S_MspInit+0x21e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4618      	mov	r0, r3
 8001384:	f004 fe72 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 800138e:	f7ff ffb3 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 8001394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001398:	4a72      	ldr	r2, [pc, #456]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 800139a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800139e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013a2:	4b70      	ldr	r3, [pc, #448]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a6b      	ldr	r2, [pc, #428]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b68      	ldr	r3, [pc, #416]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	4a5c      	ldr	r2, [pc, #368]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_I2S_MspInit+0x22c>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    PB3 (JTDO/TRACESWO)     ------> I2S1_CK
    PD7     ------> I2S1_SDO
    PA6     ------> I2S1_SDI
    PA4     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140a:	2308      	movs	r3, #8
 800140c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001422:	2305      	movs	r3, #5
 8001424:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800142c:	4619      	mov	r1, r3
 800142e:	484e      	ldr	r0, [pc, #312]	; (8001568 <HAL_I2S_MspInit+0x230>)
 8001430:	f003 f81c 	bl	800446c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144c:	2305      	movs	r3, #5
 800144e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001456:	4619      	mov	r1, r3
 8001458:	4844      	ldr	r0, [pc, #272]	; (800156c <HAL_I2S_MspInit+0x234>)
 800145a:	f003 f807 	bl	800446c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4;
 800145e:	2350      	movs	r3, #80	; 0x50
 8001460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001476:	2305      	movs	r3, #5
 8001478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001480:	4619      	mov	r1, r3
 8001482:	483b      	ldr	r0, [pc, #236]	; (8001570 <HAL_I2S_MspInit+0x238>)
 8001484:	f002 fff2 	bl	800446c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
    if(Mode == I2S_MODE_MASTER_TX){
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d130      	bne.n	80014f0 <HAL_I2S_MspInit+0x1b8>
		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Stream0;
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 8001490:	4a39      	ldr	r2, [pc, #228]	; (8001578 <HAL_I2S_MspInit+0x240>)
 8001492:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 8001496:	2226      	movs	r2, #38	; 0x26
 8001498:	605a      	str	r2, [r3, #4]
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	609a      	str	r2, [r3, #8]
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	611a      	str	r2, [r3, #16]
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b4:	615a      	str	r2, [r3, #20]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014bc:	619a      	str	r2, [r3, #24]
		hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	61da      	str	r2, [r3, #28]
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
		hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014d2:	4828      	ldr	r0, [pc, #160]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014d4:	f000 fbd4 	bl	8001c80 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2S_MspInit+0x1aa>
		{
		  Error_Handler();
 80014de:	f7ff ff0b 	bl	80012f8 <Error_Handler>
		}

		__HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_I2S_MspInit+0x23c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
	}
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ee:	e032      	b.n	8001556 <HAL_I2S_MspInit+0x21e>
	else if(Mode == I2S_MODE_MASTER_RX){
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d12f      	bne.n	8001556 <HAL_I2S_MspInit+0x21e>
		hdma_spi1_rx.Instance = DMA1_Stream0;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_I2S_MspInit+0x244>)
 80014f8:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <HAL_I2S_MspInit+0x240>)
 80014fa:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_I2S_MspInit+0x244>)
 80014fe:	2225      	movs	r2, #37	; 0x25
 8001500:	605a      	str	r2, [r3, #4]
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_I2S_MspInit+0x244>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001514:	611a      	str	r2, [r3, #16]
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	615a      	str	r2, [r3, #20]
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001524:	619a      	str	r2, [r3, #24]
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152c:	61da      	str	r2, [r3, #28]
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
		hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800153a:	4810      	ldr	r0, [pc, #64]	; (800157c <HAL_I2S_MspInit+0x244>)
 800153c:	f000 fba0 	bl	8001c80 <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2S_MspInit+0x212>
		  Error_Handler();
 8001546:	f7ff fed7 	bl	80012f8 <Error_Handler>
		__HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_I2S_MspInit+0x244>)
 800154e:	649a      	str	r2, [r3, #72]	; 0x48
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_I2S_MspInit+0x244>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001556:	bf00      	nop
 8001558:	37f8      	adds	r7, #248	; 0xf8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40013000 	.word	0x40013000
 8001564:	58024400 	.word	0x58024400
 8001568:	58020400 	.word	0x58020400
 800156c:	58020c00 	.word	0x58020c00
 8001570:	58020000 	.word	0x58020000
 8001574:	2400058c 	.word	0x2400058c
 8001578:	40020010 	.word	0x40020010
 800157c:	24000604 	.word	0x24000604

08001580 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0be      	sub	sp, #248	; 0xf8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	22c8      	movs	r2, #200	; 0xc8
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00e f89f 	bl	800f6e4 <memset>
  if(hsd->Instance==SDMMC1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a41      	ldr	r2, [pc, #260]	; (80016b0 <HAL_SD_MspInit+0x130>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d17a      	bne.n	80016a6 <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80015b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80015c0:	230c      	movs	r3, #12
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015d0:	23c0      	movs	r3, #192	; 0xc0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80015d4:	2320      	movs	r3, #32
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80015dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fd40 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 80015f2:	f7ff fe81 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_SD_MspInit+0x134>)
 80015f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015fc:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_SD_MspInit+0x134>)
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_SD_MspInit+0x134>)
 8001608:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_SD_MspInit+0x134>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_SD_MspInit+0x134>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_SD_MspInit+0x134>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_SD_MspInit+0x134>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_SD_MspInit+0x134>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_SD_MspInit+0x134>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001650:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800166a:	230c      	movs	r3, #12
 800166c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001674:	4619      	mov	r1, r3
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <HAL_SD_MspInit+0x138>)
 8001678:	f002 fef8 	bl	800446c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800167c:	2304      	movs	r3, #4
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001694:	230c      	movs	r3, #12
 8001696:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800169e:	4619      	mov	r1, r3
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <HAL_SD_MspInit+0x13c>)
 80016a2:	f002 fee3 	bl	800446c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	37f8      	adds	r7, #248	; 0xf8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	52007000 	.word	0x52007000
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58020800 	.word	0x58020800
 80016bc:	58020c00 	.word	0x58020c00

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0bc      	sub	sp, #240	; 0xf0
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	22c8      	movs	r2, #200	; 0xc8
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00d ffff 	bl	800f6e4 <memset>
  if(huart->Instance==USART1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_UART_MspInit+0xc8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d146      	bne.n	800177e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016f0:	f04f 0201 	mov.w	r2, #1
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fcb0 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001712:	f7ff fdf1 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_UART_MspInit+0xcc>)
 8001718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <HAL_UART_MspInit+0xcc>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_UART_MspInit+0xcc>)
 8001728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_UART_MspInit+0xcc>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <HAL_UART_MspInit+0xcc>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_UART_MspInit+0xcc>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001752:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800176c:	2307      	movs	r3, #7
 800176e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_UART_MspInit+0xd0>)
 800177a:	f002 fe77 	bl	800446c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	37f0      	adds	r7, #240	; 0xf0
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40011000 	.word	0x40011000
 800178c:	58024400 	.word	0x58024400
 8001790:	58020000 	.word	0x58020000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f8ee 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
	if(hi2s1.Init.Mode == I2S_MODE_MASTER_TX)
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <DMA1_Stream0_IRQHandler+0x28>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d103      	bne.n	80017fc <DMA1_Stream0_IRQHandler+0x14>
		HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <DMA1_Stream0_IRQHandler+0x2c>)
 80017f6:	f001 fb27 	bl	8002e48 <HAL_DMA_IRQHandler>
	else if(hi2s1.Init.Mode == I2S_MODE_MASTER_RX)
		HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017fa:	e006      	b.n	800180a <DMA1_Stream0_IRQHandler+0x22>
	else if(hi2s1.Init.Mode == I2S_MODE_MASTER_RX)
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <DMA1_Stream0_IRQHandler+0x28>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b06      	cmp	r3, #6
 8001802:	d102      	bne.n	800180a <DMA1_Stream0_IRQHandler+0x22>
		HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <DMA1_Stream0_IRQHandler+0x30>)
 8001806:	f001 fb1f 	bl	8002e48 <HAL_DMA_IRQHandler>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000538 	.word	0x24000538
 8001814:	2400058c 	.word	0x2400058c
 8001818:	24000604 	.word	0x24000604

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f00d ff10 	bl	800f670 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24080000 	.word	0x24080000
 800187c:	00000400 	.word	0x00000400
 8001880:	2400179c 	.word	0x2400179c
 8001884:	240017f0 	.word	0x240017f0

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f7fe fea6 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f00d fee1 	bl	800f67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff f875 	bl	80009a8 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 80018cc:	0800fe00 	.word	0x0800fe00
  ldr r2, =_sbss
 80018d0:	240000ac 	.word	0x240000ac
  ldr r4, =_ebss
 80018d4:	240017f0 	.word	0x240017f0

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f98c 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e8:	f004 f9ea 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	4913      	ldr	r1, [pc, #76]	; (8001948 <HAL_Init+0x6c>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_Init+0x68>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_Init+0x6c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_Init+0x70>)
 800191e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x74>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f814 	bl	8001954 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e002      	b.n	800193c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001936:	f7ff fce5 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	0800f95c 	.word	0x0800f95c
 800194c:	24000004 	.word	0x24000004
 8001950:	24000000 	.word	0x24000000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_InitTick+0x60>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e021      	b.n	80019ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_InitTick+0x64>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f971 	bl	8001c66 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f93b 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x68>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	24000044 	.word	0x24000044
 80019b8:	24000000 	.word	0x24000000
 80019bc:	24000040 	.word	0x24000040

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	24000044 	.word	0x24000044
 80019e4:	240017a0 	.word	0x240017a0

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	240017a0 	.word	0x240017a0

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	24000044 	.word	0x24000044

08001a48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetREVID+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c1b      	lsrs	r3, r3, #16
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5c001000 	.word	0x5c001000

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	05fa0000 	.word	0x05fa0000

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff40 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff90 	bl	8001b54 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5f 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff33 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa4 	bl	8001bbc <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff feae 	bl	80019e8 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e316      	b.n	80022c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a66      	ldr	r2, [pc, #408]	; (8001e38 <HAL_DMA_Init+0x1b8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d04a      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_DMA_Init+0x1bc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d045      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <HAL_DMA_Init+0x1c0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d040      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a62      	ldr	r2, [pc, #392]	; (8001e44 <HAL_DMA_Init+0x1c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d03b      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_DMA_Init+0x1c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d036      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5f      	ldr	r2, [pc, #380]	; (8001e4c <HAL_DMA_Init+0x1cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d031      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <HAL_DMA_Init+0x1d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02c      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <HAL_DMA_Init+0x1d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d027      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HAL_DMA_Init+0x1d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d022      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a59      	ldr	r2, [pc, #356]	; (8001e5c <HAL_DMA_Init+0x1dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d01d      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <HAL_DMA_Init+0x1e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_DMA_Init+0x1e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a54      	ldr	r2, [pc, #336]	; (8001e68 <HAL_DMA_Init+0x1e8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00e      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a53      	ldr	r2, [pc, #332]	; (8001e6c <HAL_DMA_Init+0x1ec>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_DMA_Init+0x1f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <HAL_DMA_Init+0x1f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA_Init+0xbc>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_DMA_Init+0xbe>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 813b 	beq.w	8001fba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_DMA_Init+0x1b8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d04a      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_DMA_Init+0x1bc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d045      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_DMA_Init+0x1c0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d040      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <HAL_DMA_Init+0x1c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d03b      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_DMA_Init+0x1c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d036      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_DMA_Init+0x1cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d031      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_DMA_Init+0x1d0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02c      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_DMA_Init+0x1d4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d027      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DMA_Init+0x1d8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_DMA_Init+0x1dc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01d      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_DMA_Init+0x1e0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_DMA_Init+0x1e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_DMA_Init+0x1e8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_DMA_Init+0x1ec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Init+0x1f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_DMA_Init+0x1f4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <HAL_DMA_Init+0x186>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e007      	b.n	8001e16 <HAL_DMA_Init+0x196>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e16:	e02f      	b.n	8001e78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e18:	f7ff fde6 	bl	80019e8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d928      	bls.n	8001e78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e246      	b.n	80022c6 <HAL_DMA_Init+0x646>
 8001e38:	40020010 	.word	0x40020010
 8001e3c:	40020028 	.word	0x40020028
 8001e40:	40020040 	.word	0x40020040
 8001e44:	40020058 	.word	0x40020058
 8001e48:	40020070 	.word	0x40020070
 8001e4c:	40020088 	.word	0x40020088
 8001e50:	400200a0 	.word	0x400200a0
 8001e54:	400200b8 	.word	0x400200b8
 8001e58:	40020410 	.word	0x40020410
 8001e5c:	40020428 	.word	0x40020428
 8001e60:	40020440 	.word	0x40020440
 8001e64:	40020458 	.word	0x40020458
 8001e68:	40020470 	.word	0x40020470
 8001e6c:	40020488 	.word	0x40020488
 8001e70:	400204a0 	.word	0x400204a0
 8001e74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1c8      	bne.n	8001e18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4b83      	ldr	r3, [pc, #524]	; (80020a0 <HAL_DMA_Init+0x420>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <HAL_DMA_Init+0x424>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <HAL_DMA_Init+0x428>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee8:	d328      	bcc.n	8001f3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b28      	cmp	r3, #40	; 0x28
 8001ef0:	d903      	bls.n	8001efa <HAL_DMA_Init+0x27a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8001ef8:	d917      	bls.n	8001f2a <HAL_DMA_Init+0x2aa>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b3e      	cmp	r3, #62	; 0x3e
 8001f00:	d903      	bls.n	8001f0a <HAL_DMA_Init+0x28a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b42      	cmp	r3, #66	; 0x42
 8001f08:	d90f      	bls.n	8001f2a <HAL_DMA_Init+0x2aa>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b46      	cmp	r3, #70	; 0x46
 8001f10:	d903      	bls.n	8001f1a <HAL_DMA_Init+0x29a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b48      	cmp	r3, #72	; 0x48
 8001f18:	d907      	bls.n	8001f2a <HAL_DMA_Init+0x2aa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b4e      	cmp	r3, #78	; 0x4e
 8001f20:	d905      	bls.n	8001f2e <HAL_DMA_Init+0x2ae>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b52      	cmp	r3, #82	; 0x52
 8001f28:	d801      	bhi.n	8001f2e <HAL_DMA_Init+0x2ae>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_Init+0x2b0>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d117      	bne.n	8001f96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f002 f8ed 	bl	8004158 <DMA_CheckFifoParam>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e197      	b.n	80022c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f002 f828 	bl	8003ff4 <DMA_CalcBaseAndBitshift>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	223f      	movs	r2, #63	; 0x3f
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e0cd      	b.n	8002156 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_DMA_Init+0x42c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a39      	ldr	r2, [pc, #228]	; (80020b0 <HAL_DMA_Init+0x430>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01d      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_DMA_Init+0x434>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a36      	ldr	r2, [pc, #216]	; (80020b8 <HAL_DMA_Init+0x438>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a35      	ldr	r2, [pc, #212]	; (80020bc <HAL_DMA_Init+0x43c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a33      	ldr	r2, [pc, #204]	; (80020c0 <HAL_DMA_Init+0x440>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_DMA_Init+0x444>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <HAL_DMA_Init+0x448>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_DMA_Init+0x38e>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_DMA_Init+0x390>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8097 	beq.w	8002144 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_DMA_Init+0x42c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d021      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_DMA_Init+0x430>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01c      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_DMA_Init+0x434>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d017      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_DMA_Init+0x438>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d012      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_DMA_Init+0x43c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_DMA_Init+0x440>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d008      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_DMA_Init+0x444>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_DMA_Init+0x448>)
 8002062:	4293      	cmp	r3, r2
 8002064:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_DMA_Init+0x44c>)
 8002082:	4013      	ands	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d020      	beq.n	80020d0 <HAL_DMA_Init+0x450>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b80      	cmp	r3, #128	; 0x80
 8002094:	d102      	bne.n	800209c <HAL_DMA_Init+0x41c>
 8002096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209a:	e01a      	b.n	80020d2 <HAL_DMA_Init+0x452>
 800209c:	2300      	movs	r3, #0
 800209e:	e018      	b.n	80020d2 <HAL_DMA_Init+0x452>
 80020a0:	fe10803f 	.word	0xfe10803f
 80020a4:	5c001000 	.word	0x5c001000
 80020a8:	ffff0000 	.word	0xffff0000
 80020ac:	58025408 	.word	0x58025408
 80020b0:	5802541c 	.word	0x5802541c
 80020b4:	58025430 	.word	0x58025430
 80020b8:	58025444 	.word	0x58025444
 80020bc:	58025458 	.word	0x58025458
 80020c0:	5802546c 	.word	0x5802546c
 80020c4:	58025480 	.word	0x58025480
 80020c8:	58025494 	.word	0x58025494
 80020cc:	fffe000f 	.word	0xfffe000f
 80020d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002100:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <HAL_DMA_Init+0x650>)
 8002118:	4413      	add	r3, r2
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_DMA_Init+0x654>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f001 ff63 	bl	8003ff4 <DMA_CalcBaseAndBitshift>
 800212e:	4603      	mov	r3, r0
 8002130:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e008      	b.n	8002156 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2240      	movs	r2, #64	; 0x40
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0b7      	b.n	80022c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <HAL_DMA_Init+0x658>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d072      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_DMA_Init+0x65c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d06d      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5c      	ldr	r2, [pc, #368]	; (80022e0 <HAL_DMA_Init+0x660>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d068      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_DMA_Init+0x664>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d063      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <HAL_DMA_Init+0x668>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d05e      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_DMA_Init+0x66c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d059      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_DMA_Init+0x670>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d054      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_DMA_Init+0x674>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d04f      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <HAL_DMA_Init+0x678>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <HAL_DMA_Init+0x67c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_DMA_Init+0x680>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_DMA_Init+0x684>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_DMA_Init+0x688>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_DMA_Init+0x68c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_DMA_Init+0x690>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_DMA_Init+0x694>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_DMA_Init+0x698>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_DMA_Init+0x69c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a44      	ldr	r2, [pc, #272]	; (8002320 <HAL_DMA_Init+0x6a0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a42      	ldr	r2, [pc, #264]	; (8002324 <HAL_DMA_Init+0x6a4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a41      	ldr	r2, [pc, #260]	; (8002328 <HAL_DMA_Init+0x6a8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_DMA_Init+0x6ac>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <HAL_DMA_Init+0x6b0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <HAL_DMA_Init+0x6b4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_DMA_Init+0x5ca>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_DMA_Init+0x5cc>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d032      	beq.n	80022b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f001 fffd 	bl	8004250 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d102      	bne.n	8002264 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002278:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_DMA_Init+0x624>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d80c      	bhi.n	80022a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f002 f87a 	bl	8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e008      	b.n	80022b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	a7fdabf8 	.word	0xa7fdabf8
 80022d4:	cccccccd 	.word	0xcccccccd
 80022d8:	40020010 	.word	0x40020010
 80022dc:	40020028 	.word	0x40020028
 80022e0:	40020040 	.word	0x40020040
 80022e4:	40020058 	.word	0x40020058
 80022e8:	40020070 	.word	0x40020070
 80022ec:	40020088 	.word	0x40020088
 80022f0:	400200a0 	.word	0x400200a0
 80022f4:	400200b8 	.word	0x400200b8
 80022f8:	40020410 	.word	0x40020410
 80022fc:	40020428 	.word	0x40020428
 8002300:	40020440 	.word	0x40020440
 8002304:	40020458 	.word	0x40020458
 8002308:	40020470 	.word	0x40020470
 800230c:	40020488 	.word	0x40020488
 8002310:	400204a0 	.word	0x400204a0
 8002314:	400204b8 	.word	0x400204b8
 8002318:	58025408 	.word	0x58025408
 800231c:	5802541c 	.word	0x5802541c
 8002320:	58025430 	.word	0x58025430
 8002324:	58025444 	.word	0x58025444
 8002328:	58025458 	.word	0x58025458
 800232c:	5802546c 	.word	0x5802546c
 8002330:	58025480 	.word	0x58025480
 8002334:	58025494 	.word	0x58025494

08002338 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e226      	b.n	80027a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_DMA_Start_IT+0x2a>
 800235e:	2302      	movs	r3, #2
 8002360:	e21f      	b.n	80027a2 <HAL_DMA_Start_IT+0x46a>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 820a 	bne.w	800278c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a68      	ldr	r2, [pc, #416]	; (800252c <HAL_DMA_Start_IT+0x1f4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d04a      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a66      	ldr	r2, [pc, #408]	; (8002530 <HAL_DMA_Start_IT+0x1f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d045      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_DMA_Start_IT+0x1fc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d040      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_DMA_Start_IT+0x200>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d03b      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a62      	ldr	r2, [pc, #392]	; (800253c <HAL_DMA_Start_IT+0x204>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d036      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a60      	ldr	r2, [pc, #384]	; (8002540 <HAL_DMA_Start_IT+0x208>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5f      	ldr	r2, [pc, #380]	; (8002544 <HAL_DMA_Start_IT+0x20c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d02c      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <HAL_DMA_Start_IT+0x210>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d027      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5c      	ldr	r2, [pc, #368]	; (800254c <HAL_DMA_Start_IT+0x214>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HAL_DMA_Start_IT+0x218>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01d      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a59      	ldr	r2, [pc, #356]	; (8002554 <HAL_DMA_Start_IT+0x21c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_DMA_Start_IT+0x220>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a56      	ldr	r2, [pc, #344]	; (800255c <HAL_DMA_Start_IT+0x224>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a54      	ldr	r2, [pc, #336]	; (8002560 <HAL_DMA_Start_IT+0x228>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a53      	ldr	r2, [pc, #332]	; (8002564 <HAL_DMA_Start_IT+0x22c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_DMA_Start_IT+0x230>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <HAL_DMA_Start_IT+0x100>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e007      	b.n	8002448 <HAL_DMA_Start_IT+0x110>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f001 fc24 	bl	8003c9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_DMA_Start_IT+0x1f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d04a      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_DMA_Start_IT+0x1f8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d045      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_DMA_Start_IT+0x1fc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d040      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a30      	ldr	r2, [pc, #192]	; (8002538 <HAL_DMA_Start_IT+0x200>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d03b      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2e      	ldr	r2, [pc, #184]	; (800253c <HAL_DMA_Start_IT+0x204>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d036      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_DMA_Start_IT+0x208>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d031      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <HAL_DMA_Start_IT+0x20c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02c      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <HAL_DMA_Start_IT+0x210>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d027      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_DMA_Start_IT+0x214>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d022      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_DMA_Start_IT+0x218>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01d      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_DMA_Start_IT+0x21c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d018      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_DMA_Start_IT+0x220>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_DMA_Start_IT+0x224>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00e      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_DMA_Start_IT+0x228>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_DMA_Start_IT+0x22c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <HAL_DMA_Start_IT+0x230>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Start_IT+0x1c0>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_DMA_Start_IT+0x1c2>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d036      	beq.n	800256c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 021e 	bic.w	r2, r3, #30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0216 	orr.w	r2, r2, #22
 8002510:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03e      	beq.n	8002598 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0208 	orr.w	r2, r2, #8
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e035      	b.n	8002598 <HAL_DMA_Start_IT+0x260>
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 020e 	bic.w	r2, r3, #14
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 020a 	orr.w	r2, r2, #10
 800257e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0204 	orr.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a83      	ldr	r2, [pc, #524]	; (80027ac <HAL_DMA_Start_IT+0x474>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d072      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a82      	ldr	r2, [pc, #520]	; (80027b0 <HAL_DMA_Start_IT+0x478>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d06d      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_DMA_Start_IT+0x47c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d068      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <HAL_DMA_Start_IT+0x480>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d063      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7d      	ldr	r2, [pc, #500]	; (80027bc <HAL_DMA_Start_IT+0x484>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d05e      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_DMA_Start_IT+0x488>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d059      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_DMA_Start_IT+0x48c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d054      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a79      	ldr	r2, [pc, #484]	; (80027c8 <HAL_DMA_Start_IT+0x490>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04f      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_DMA_Start_IT+0x494>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a76      	ldr	r2, [pc, #472]	; (80027d0 <HAL_DMA_Start_IT+0x498>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a74      	ldr	r2, [pc, #464]	; (80027d4 <HAL_DMA_Start_IT+0x49c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <HAL_DMA_Start_IT+0x4a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a71      	ldr	r2, [pc, #452]	; (80027dc <HAL_DMA_Start_IT+0x4a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a70      	ldr	r2, [pc, #448]	; (80027e0 <HAL_DMA_Start_IT+0x4a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6e      	ldr	r2, [pc, #440]	; (80027e4 <HAL_DMA_Start_IT+0x4ac>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6d      	ldr	r2, [pc, #436]	; (80027e8 <HAL_DMA_Start_IT+0x4b0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <HAL_DMA_Start_IT+0x4b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6a      	ldr	r2, [pc, #424]	; (80027f0 <HAL_DMA_Start_IT+0x4b8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a68      	ldr	r2, [pc, #416]	; (80027f4 <HAL_DMA_Start_IT+0x4bc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <HAL_DMA_Start_IT+0x4c0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <HAL_DMA_Start_IT+0x4c4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a64      	ldr	r2, [pc, #400]	; (8002800 <HAL_DMA_Start_IT+0x4c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	; (8002804 <HAL_DMA_Start_IT+0x4cc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a61      	ldr	r2, [pc, #388]	; (8002808 <HAL_DMA_Start_IT+0x4d0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_DMA_Start_IT+0x354>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_DMA_Start_IT+0x356>
 800268c:	2300      	movs	r3, #0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a37      	ldr	r2, [pc, #220]	; (80027ac <HAL_DMA_Start_IT+0x474>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04a      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a36      	ldr	r2, [pc, #216]	; (80027b0 <HAL_DMA_Start_IT+0x478>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d045      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_DMA_Start_IT+0x47c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <HAL_DMA_Start_IT+0x480>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d03b      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a31      	ldr	r2, [pc, #196]	; (80027bc <HAL_DMA_Start_IT+0x484>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d036      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_DMA_Start_IT+0x488>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d031      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <HAL_DMA_Start_IT+0x48c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02c      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_DMA_Start_IT+0x490>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d027      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <HAL_DMA_Start_IT+0x494>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d022      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <HAL_DMA_Start_IT+0x498>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01d      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <HAL_DMA_Start_IT+0x49c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d018      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_DMA_Start_IT+0x4a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <HAL_DMA_Start_IT+0x4a4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_DMA_Start_IT+0x4a8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_DMA_Start_IT+0x4ac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_DMA_Start_IT+0x4b0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <HAL_DMA_Start_IT+0x442>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e012      	b.n	80027a0 <HAL_DMA_Start_IT+0x468>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e009      	b.n	80027a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
 80027ec:	58025408 	.word	0x58025408
 80027f0:	5802541c 	.word	0x5802541c
 80027f4:	58025430 	.word	0x58025430
 80027f8:	58025444 	.word	0x58025444
 80027fc:	58025458 	.word	0x58025458
 8002800:	5802546c 	.word	0x5802546c
 8002804:	58025480 	.word	0x58025480
 8002808:	58025494 	.word	0x58025494

0800280c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff f8e8 	bl	80019e8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e2dc      	b.n	8002dde <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e2cd      	b.n	8002dde <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a76      	ldr	r2, [pc, #472]	; (8002a20 <HAL_DMA_Abort+0x214>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04a      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a74      	ldr	r2, [pc, #464]	; (8002a24 <HAL_DMA_Abort+0x218>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d045      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a73      	ldr	r2, [pc, #460]	; (8002a28 <HAL_DMA_Abort+0x21c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_DMA_Abort+0x220>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03b      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_DMA_Abort+0x224>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d036      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_DMA_Abort+0x228>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6d      	ldr	r2, [pc, #436]	; (8002a38 <HAL_DMA_Abort+0x22c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d02c      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <HAL_DMA_Abort+0x230>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d027      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_DMA_Abort+0x234>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_DMA_Abort+0x238>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a67      	ldr	r2, [pc, #412]	; (8002a48 <HAL_DMA_Abort+0x23c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_DMA_Abort+0x240>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a64      	ldr	r2, [pc, #400]	; (8002a50 <HAL_DMA_Abort+0x244>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_DMA_Abort+0x248>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a61      	ldr	r2, [pc, #388]	; (8002a58 <HAL_DMA_Abort+0x24c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_DMA_Abort+0x250>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_DMA_Abort+0xda>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_DMA_Abort+0xdc>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 021e 	bic.w	r2, r2, #30
 80028fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800290a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 020e 	bic.w	r2, r2, #14
 8002922:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <HAL_DMA_Abort+0x214>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d072      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <HAL_DMA_Abort+0x218>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d06d      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a39      	ldr	r2, [pc, #228]	; (8002a28 <HAL_DMA_Abort+0x21c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d068      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a37      	ldr	r2, [pc, #220]	; (8002a2c <HAL_DMA_Abort+0x220>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d063      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a36      	ldr	r2, [pc, #216]	; (8002a30 <HAL_DMA_Abort+0x224>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d05e      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_DMA_Abort+0x228>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d059      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <HAL_DMA_Abort+0x22c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d054      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a31      	ldr	r2, [pc, #196]	; (8002a3c <HAL_DMA_Abort+0x230>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04f      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_DMA_Abort+0x234>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d04a      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_DMA_Abort+0x238>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d045      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_DMA_Abort+0x23c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d040      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <HAL_DMA_Abort+0x240>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d03b      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_DMA_Abort+0x244>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d036      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_DMA_Abort+0x248>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_DMA_Abort+0x24c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d02c      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <HAL_DMA_Abort+0x250>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <HAL_DMA_Abort+0x254>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_DMA_Abort+0x258>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <HAL_DMA_Abort+0x25c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_DMA_Abort+0x260>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_DMA_Abort+0x264>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_DMA_Abort+0x268>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_DMA_Abort+0x26c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_DMA_Abort+0x270>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d132      	bne.n	8002a80 <HAL_DMA_Abort+0x274>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e031      	b.n	8002a82 <HAL_DMA_Abort+0x276>
 8002a1e:	bf00      	nop
 8002a20:	40020010 	.word	0x40020010
 8002a24:	40020028 	.word	0x40020028
 8002a28:	40020040 	.word	0x40020040
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	40020070 	.word	0x40020070
 8002a34:	40020088 	.word	0x40020088
 8002a38:	400200a0 	.word	0x400200a0
 8002a3c:	400200b8 	.word	0x400200b8
 8002a40:	40020410 	.word	0x40020410
 8002a44:	40020428 	.word	0x40020428
 8002a48:	40020440 	.word	0x40020440
 8002a4c:	40020458 	.word	0x40020458
 8002a50:	40020470 	.word	0x40020470
 8002a54:	40020488 	.word	0x40020488
 8002a58:	400204a0 	.word	0x400204a0
 8002a5c:	400204b8 	.word	0x400204b8
 8002a60:	58025408 	.word	0x58025408
 8002a64:	5802541c 	.word	0x5802541c
 8002a68:	58025430 	.word	0x58025430
 8002a6c:	58025444 	.word	0x58025444
 8002a70:	58025458 	.word	0x58025458
 8002a74:	5802546c 	.word	0x5802546c
 8002a78:	58025480 	.word	0x58025480
 8002a7c:	58025494 	.word	0x58025494
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_DMA_Abort+0x444>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d04a      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6b      	ldr	r2, [pc, #428]	; (8002c54 <HAL_DMA_Abort+0x448>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d045      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <HAL_DMA_Abort+0x44c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d040      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a68      	ldr	r2, [pc, #416]	; (8002c5c <HAL_DMA_Abort+0x450>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d03b      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_DMA_Abort+0x454>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d036      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a65      	ldr	r2, [pc, #404]	; (8002c64 <HAL_DMA_Abort+0x458>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d031      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a64      	ldr	r2, [pc, #400]	; (8002c68 <HAL_DMA_Abort+0x45c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d02c      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a62      	ldr	r2, [pc, #392]	; (8002c6c <HAL_DMA_Abort+0x460>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d027      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a61      	ldr	r2, [pc, #388]	; (8002c70 <HAL_DMA_Abort+0x464>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a5f      	ldr	r2, [pc, #380]	; (8002c74 <HAL_DMA_Abort+0x468>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01d      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_DMA_Abort+0x46c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d018      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_DMA_Abort+0x470>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a5b      	ldr	r2, [pc, #364]	; (8002c80 <HAL_DMA_Abort+0x474>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a59      	ldr	r2, [pc, #356]	; (8002c84 <HAL_DMA_Abort+0x478>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_DMA_Abort+0x47c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <HAL_DMA_Abort+0x480>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <HAL_DMA_Abort+0x33c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e007      	b.n	8002b58 <HAL_DMA_Abort+0x34c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b58:	e013      	b.n	8002b82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5a:	f7fe ff45 	bl	80019e8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d90c      	bls.n	8002b82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e12d      	b.n	8002dde <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e5      	bne.n	8002b5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <HAL_DMA_Abort+0x444>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04a      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <HAL_DMA_Abort+0x448>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d045      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <HAL_DMA_Abort+0x44c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_DMA_Abort+0x450>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d03b      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_DMA_Abort+0x454>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_DMA_Abort+0x458>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_DMA_Abort+0x45c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d02c      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_DMA_Abort+0x460>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_DMA_Abort+0x464>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_DMA_Abort+0x468>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_DMA_Abort+0x46c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_DMA_Abort+0x470>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_DMA_Abort+0x474>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_DMA_Abort+0x478>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <HAL_DMA_Abort+0x47c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_DMA_Abort+0x480>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_DMA_Abort+0x426>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_DMA_Abort+0x428>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02b      	beq.n	8002c90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	223f      	movs	r2, #63	; 0x3f
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	e02a      	b.n	8002ca6 <HAL_DMA_Abort+0x49a>
 8002c50:	40020010 	.word	0x40020010
 8002c54:	40020028 	.word	0x40020028
 8002c58:	40020040 	.word	0x40020040
 8002c5c:	40020058 	.word	0x40020058
 8002c60:	40020070 	.word	0x40020070
 8002c64:	40020088 	.word	0x40020088
 8002c68:	400200a0 	.word	0x400200a0
 8002c6c:	400200b8 	.word	0x400200b8
 8002c70:	40020410 	.word	0x40020410
 8002c74:	40020428 	.word	0x40020428
 8002c78:	40020440 	.word	0x40020440
 8002c7c:	40020458 	.word	0x40020458
 8002c80:	40020470 	.word	0x40020470
 8002c84:	40020488 	.word	0x40020488
 8002c88:	400204a0 	.word	0x400204a0
 8002c8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <HAL_DMA_Abort+0x5dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d072      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_DMA_Abort+0x5e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d06d      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_DMA_Abort+0x5e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d068      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_DMA_Abort+0x5e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d063      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <HAL_DMA_Abort+0x5ec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d05e      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a47      	ldr	r2, [pc, #284]	; (8002dfc <HAL_DMA_Abort+0x5f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d059      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a46      	ldr	r2, [pc, #280]	; (8002e00 <HAL_DMA_Abort+0x5f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d054      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a44      	ldr	r2, [pc, #272]	; (8002e04 <HAL_DMA_Abort+0x5f8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d04f      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <HAL_DMA_Abort+0x5fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04a      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <HAL_DMA_Abort+0x600>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d045      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <HAL_DMA_Abort+0x604>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d040      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <HAL_DMA_Abort+0x608>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d03b      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3d      	ldr	r2, [pc, #244]	; (8002e18 <HAL_DMA_Abort+0x60c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d036      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <HAL_DMA_Abort+0x610>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d031      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_DMA_Abort+0x614>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d02c      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <HAL_DMA_Abort+0x618>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d027      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_DMA_Abort+0x61c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a35      	ldr	r2, [pc, #212]	; (8002e2c <HAL_DMA_Abort+0x620>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01d      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_DMA_Abort+0x624>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <HAL_DMA_Abort+0x628>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_DMA_Abort+0x62c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00e      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_DMA_Abort+0x630>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_DMA_Abort+0x634>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <HAL_DMA_Abort+0x638>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_DMA_Abort+0x58e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_Abort+0x590>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002da8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
 8002e28:	58025408 	.word	0x58025408
 8002e2c:	5802541c 	.word	0x5802541c
 8002e30:	58025430 	.word	0x58025430
 8002e34:	58025444 	.word	0x58025444
 8002e38:	58025458 	.word	0x58025458
 8002e3c:	5802546c 	.word	0x5802546c
 8002e40:	58025480 	.word	0x58025480
 8002e44:	58025494 	.word	0x58025494

08002e48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e54:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_DMA_IRQHandler+0x1ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a67      	ldr	r2, [pc, #412]	; (8002ff8 <HAL_DMA_IRQHandler+0x1b0>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5f      	ldr	r2, [pc, #380]	; (8002ffc <HAL_DMA_IRQHandler+0x1b4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04a      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	; (8003000 <HAL_DMA_IRQHandler+0x1b8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d045      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_DMA_IRQHandler+0x1bc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d040      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5a      	ldr	r2, [pc, #360]	; (8003008 <HAL_DMA_IRQHandler+0x1c0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d03b      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_DMA_IRQHandler+0x1c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d036      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a57      	ldr	r2, [pc, #348]	; (8003010 <HAL_DMA_IRQHandler+0x1c8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d031      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_DMA_IRQHandler+0x1cc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d02c      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a54      	ldr	r2, [pc, #336]	; (8003018 <HAL_DMA_IRQHandler+0x1d0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d027      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a53      	ldr	r2, [pc, #332]	; (800301c <HAL_DMA_IRQHandler+0x1d4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_DMA_IRQHandler+0x1d8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_DMA_IRQHandler+0x1dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_DMA_IRQHandler+0x1e0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a4d      	ldr	r2, [pc, #308]	; (800302c <HAL_DMA_IRQHandler+0x1e4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a4b      	ldr	r2, [pc, #300]	; (8003030 <HAL_DMA_IRQHandler+0x1e8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4a      	ldr	r2, [pc, #296]	; (8003034 <HAL_DMA_IRQHandler+0x1ec>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xd2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_DMA_IRQHandler+0x1f0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA_IRQHandler+0xd6>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 842b 	beq.w	800377c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2208      	movs	r2, #8
 8002f30:	409a      	lsls	r2, r3
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80a2 	beq.w	8003080 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_DMA_IRQHandler+0x1b4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d04a      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <HAL_DMA_IRQHandler+0x1b8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d045      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_DMA_IRQHandler+0x1bc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d040      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_DMA_IRQHandler+0x1c0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d03b      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_DMA_IRQHandler+0x1c4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d036      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_DMA_IRQHandler+0x1c8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d031      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_DMA_IRQHandler+0x1cc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d02c      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_DMA_IRQHandler+0x1d0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d027      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_DMA_IRQHandler+0x1d4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	; (8003020 <HAL_DMA_IRQHandler+0x1d8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01d      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_DMA_IRQHandler+0x1dc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <HAL_DMA_IRQHandler+0x1e0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_DMA_IRQHandler+0x1e4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_DMA_IRQHandler+0x1e8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_DMA_IRQHandler+0x1ec>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x194>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_DMA_IRQHandler+0x1f0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d12f      	bne.n	800303c <HAL_DMA_IRQHandler+0x1f4>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e02e      	b.n	8003050 <HAL_DMA_IRQHandler+0x208>
 8002ff2:	bf00      	nop
 8002ff4:	24000000 	.word	0x24000000
 8002ff8:	1b4e81b5 	.word	0x1b4e81b5
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2208      	movs	r2, #8
 800306e:	409a      	lsls	r2, r3
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d06e      	beq.n	8003174 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a69      	ldr	r2, [pc, #420]	; (8003240 <HAL_DMA_IRQHandler+0x3f8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d04a      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a67      	ldr	r2, [pc, #412]	; (8003244 <HAL_DMA_IRQHandler+0x3fc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d045      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a66      	ldr	r2, [pc, #408]	; (8003248 <HAL_DMA_IRQHandler+0x400>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d040      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a64      	ldr	r2, [pc, #400]	; (800324c <HAL_DMA_IRQHandler+0x404>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d03b      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a63      	ldr	r2, [pc, #396]	; (8003250 <HAL_DMA_IRQHandler+0x408>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d036      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_DMA_IRQHandler+0x40c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a60      	ldr	r2, [pc, #384]	; (8003258 <HAL_DMA_IRQHandler+0x410>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d02c      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_DMA_IRQHandler+0x414>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d027      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5d      	ldr	r2, [pc, #372]	; (8003260 <HAL_DMA_IRQHandler+0x418>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d022      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_DMA_IRQHandler+0x41c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5a      	ldr	r2, [pc, #360]	; (8003268 <HAL_DMA_IRQHandler+0x420>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d018      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_DMA_IRQHandler+0x424>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a57      	ldr	r2, [pc, #348]	; (8003270 <HAL_DMA_IRQHandler+0x428>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a55      	ldr	r2, [pc, #340]	; (8003274 <HAL_DMA_IRQHandler+0x42c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a54      	ldr	r2, [pc, #336]	; (8003278 <HAL_DMA_IRQHandler+0x430>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_DMA_IRQHandler+0x434>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10a      	bne.n	800314c <HAL_DMA_IRQHandler+0x304>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e003      	b.n	8003154 <HAL_DMA_IRQHandler+0x30c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2201      	movs	r2, #1
 8003162:	409a      	lsls	r2, r3
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f043 0202 	orr.w	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2204      	movs	r2, #4
 800317e:	409a      	lsls	r2, r3
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 808f 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <HAL_DMA_IRQHandler+0x3f8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_DMA_IRQHandler+0x3fc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a29      	ldr	r2, [pc, #164]	; (8003248 <HAL_DMA_IRQHandler+0x400>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_DMA_IRQHandler+0x404>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a26      	ldr	r2, [pc, #152]	; (8003250 <HAL_DMA_IRQHandler+0x408>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_DMA_IRQHandler+0x40c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a23      	ldr	r2, [pc, #140]	; (8003258 <HAL_DMA_IRQHandler+0x410>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_DMA_IRQHandler+0x414>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_DMA_IRQHandler+0x418>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_DMA_IRQHandler+0x41c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_DMA_IRQHandler+0x420>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_DMA_IRQHandler+0x424>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <HAL_DMA_IRQHandler+0x428>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_DMA_IRQHandler+0x42c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <HAL_DMA_IRQHandler+0x430>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_IRQHandler+0x3e2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <HAL_DMA_IRQHandler+0x434>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d12a      	bne.n	8003280 <HAL_DMA_IRQHandler+0x438>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e023      	b.n	8003288 <HAL_DMA_IRQHandler+0x440>
 8003240:	40020010 	.word	0x40020010
 8003244:	40020028 	.word	0x40020028
 8003248:	40020040 	.word	0x40020040
 800324c:	40020058 	.word	0x40020058
 8003250:	40020070 	.word	0x40020070
 8003254:	40020088 	.word	0x40020088
 8003258:	400200a0 	.word	0x400200a0
 800325c:	400200b8 	.word	0x400200b8
 8003260:	40020410 	.word	0x40020410
 8003264:	40020428 	.word	0x40020428
 8003268:	40020440 	.word	0x40020440
 800326c:	40020458 	.word	0x40020458
 8003270:	40020470 	.word	0x40020470
 8003274:	40020488 	.word	0x40020488
 8003278:	400204a0 	.word	0x400204a0
 800327c:	400204b8 	.word	0x400204b8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2204      	movs	r2, #4
 8003296:	409a      	lsls	r2, r3
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0204 	orr.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2210      	movs	r2, #16
 80032b2:	409a      	lsls	r2, r3
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a6 	beq.w	800340a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a85      	ldr	r2, [pc, #532]	; (80034d8 <HAL_DMA_IRQHandler+0x690>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a83      	ldr	r2, [pc, #524]	; (80034dc <HAL_DMA_IRQHandler+0x694>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a82      	ldr	r2, [pc, #520]	; (80034e0 <HAL_DMA_IRQHandler+0x698>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a80      	ldr	r2, [pc, #512]	; (80034e4 <HAL_DMA_IRQHandler+0x69c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7f      	ldr	r2, [pc, #508]	; (80034e8 <HAL_DMA_IRQHandler+0x6a0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a7d      	ldr	r2, [pc, #500]	; (80034ec <HAL_DMA_IRQHandler+0x6a4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7c      	ldr	r2, [pc, #496]	; (80034f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_DMA_IRQHandler+0x6ac>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a79      	ldr	r2, [pc, #484]	; (80034f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a77      	ldr	r2, [pc, #476]	; (80034fc <HAL_DMA_IRQHandler+0x6b4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a76      	ldr	r2, [pc, #472]	; (8003500 <HAL_DMA_IRQHandler+0x6b8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a74      	ldr	r2, [pc, #464]	; (8003504 <HAL_DMA_IRQHandler+0x6bc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a73      	ldr	r2, [pc, #460]	; (8003508 <HAL_DMA_IRQHandler+0x6c0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a71      	ldr	r2, [pc, #452]	; (800350c <HAL_DMA_IRQHandler+0x6c4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a70      	ldr	r2, [pc, #448]	; (8003510 <HAL_DMA_IRQHandler+0x6c8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_IRQHandler+0x516>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a6e      	ldr	r2, [pc, #440]	; (8003514 <HAL_DMA_IRQHandler+0x6cc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10a      	bne.n	8003374 <HAL_DMA_IRQHandler+0x52c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e009      	b.n	8003388 <HAL_DMA_IRQHandler+0x540>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d03e      	beq.n	800340a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2210      	movs	r2, #16
 8003396:	409a      	lsls	r2, r3
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d018      	beq.n	80033dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d108      	bne.n	80033ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d024      	beq.n	800340a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e01f      	b.n	800340a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01b      	beq.n	800340a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
 80033da:	e016      	b.n	800340a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0208 	bic.w	r2, r2, #8
 80033f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2220      	movs	r2, #32
 8003414:	409a      	lsls	r2, r3
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8110 	beq.w	8003640 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <HAL_DMA_IRQHandler+0x690>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d04a      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2b      	ldr	r2, [pc, #172]	; (80034dc <HAL_DMA_IRQHandler+0x694>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d045      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <HAL_DMA_IRQHandler+0x698>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d040      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <HAL_DMA_IRQHandler+0x69c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d03b      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <HAL_DMA_IRQHandler+0x6a0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d036      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_DMA_IRQHandler+0x6a4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d031      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02c      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <HAL_DMA_IRQHandler+0x6ac>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d027      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d022      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <HAL_DMA_IRQHandler+0x6b4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01d      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_DMA_IRQHandler+0x6b8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d018      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <HAL_DMA_IRQHandler+0x6bc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <HAL_DMA_IRQHandler+0x6c0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a19      	ldr	r2, [pc, #100]	; (800350c <HAL_DMA_IRQHandler+0x6c4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_DMA_IRQHandler+0x6c8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x678>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_DMA_IRQHandler+0x6cc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d12b      	bne.n	8003518 <HAL_DMA_IRQHandler+0x6d0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e02a      	b.n	800352c <HAL_DMA_IRQHandler+0x6e4>
 80034d6:	bf00      	nop
 80034d8:	40020010 	.word	0x40020010
 80034dc:	40020028 	.word	0x40020028
 80034e0:	40020040 	.word	0x40020040
 80034e4:	40020058 	.word	0x40020058
 80034e8:	40020070 	.word	0x40020070
 80034ec:	40020088 	.word	0x40020088
 80034f0:	400200a0 	.word	0x400200a0
 80034f4:	400200b8 	.word	0x400200b8
 80034f8:	40020410 	.word	0x40020410
 80034fc:	40020428 	.word	0x40020428
 8003500:	40020440 	.word	0x40020440
 8003504:	40020458 	.word	0x40020458
 8003508:	40020470 	.word	0x40020470
 800350c:	40020488 	.word	0x40020488
 8003510:	400204a0 	.word	0x400204a0
 8003514:	400204b8 	.word	0x400204b8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8087 	beq.w	8003640 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2220      	movs	r2, #32
 800353c:	409a      	lsls	r2, r3
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b04      	cmp	r3, #4
 800354c:	d139      	bne.n	80035c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0216 	bic.w	r2, r2, #22
 800355c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_DMA_IRQHandler+0x736>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0208 	bic.w	r2, r2, #8
 800358c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	223f      	movs	r2, #63	; 0x3f
 8003598:	409a      	lsls	r2, r3
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 834a 	beq.w	8003c4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
          }
          return;
 80035c0:	e344      	b.n	8003c4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d018      	beq.n	8003602 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02c      	beq.n	8003640 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
 80035ee:	e027      	b.n	8003640 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d023      	beq.n	8003640 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
 8003600:	e01e      	b.n	8003640 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10f      	bne.n	8003630 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0210 	bic.w	r2, r2, #16
 800361e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8306 	beq.w	8003c56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8088 	beq.w	8003768 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7a      	ldr	r2, [pc, #488]	; (8003850 <HAL_DMA_IRQHandler+0xa08>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d04a      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a79      	ldr	r2, [pc, #484]	; (8003854 <HAL_DMA_IRQHandler+0xa0c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d045      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a77      	ldr	r2, [pc, #476]	; (8003858 <HAL_DMA_IRQHandler+0xa10>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d040      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a76      	ldr	r2, [pc, #472]	; (800385c <HAL_DMA_IRQHandler+0xa14>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d03b      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a74      	ldr	r2, [pc, #464]	; (8003860 <HAL_DMA_IRQHandler+0xa18>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d036      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a73      	ldr	r2, [pc, #460]	; (8003864 <HAL_DMA_IRQHandler+0xa1c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d031      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a71      	ldr	r2, [pc, #452]	; (8003868 <HAL_DMA_IRQHandler+0xa20>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d02c      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a70      	ldr	r2, [pc, #448]	; (800386c <HAL_DMA_IRQHandler+0xa24>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d027      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_DMA_IRQHandler+0xa28>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d022      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6d      	ldr	r2, [pc, #436]	; (8003874 <HAL_DMA_IRQHandler+0xa2c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d01d      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6b      	ldr	r2, [pc, #428]	; (8003878 <HAL_DMA_IRQHandler+0xa30>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d018      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6a      	ldr	r2, [pc, #424]	; (800387c <HAL_DMA_IRQHandler+0xa34>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d013      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a68      	ldr	r2, [pc, #416]	; (8003880 <HAL_DMA_IRQHandler+0xa38>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a67      	ldr	r2, [pc, #412]	; (8003884 <HAL_DMA_IRQHandler+0xa3c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a65      	ldr	r2, [pc, #404]	; (8003888 <HAL_DMA_IRQHandler+0xa40>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_DMA_IRQHandler+0x8b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a64      	ldr	r2, [pc, #400]	; (800388c <HAL_DMA_IRQHandler+0xa44>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <HAL_DMA_IRQHandler+0x8ca>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e007      	b.n	8003722 <HAL_DMA_IRQHandler+0x8da>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	429a      	cmp	r2, r3
 800372c:	d307      	bcc.n	800373e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f2      	bne.n	8003722 <HAL_DMA_IRQHandler+0x8da>
 800373c:	e000      	b.n	8003740 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800373e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2203      	movs	r2, #3
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003756:	e003      	b.n	8003760 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8272 	beq.w	8003c56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
 800377a:	e26c      	b.n	8003c56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a43      	ldr	r2, [pc, #268]	; (8003890 <HAL_DMA_IRQHandler+0xa48>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d022      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a42      	ldr	r2, [pc, #264]	; (8003894 <HAL_DMA_IRQHandler+0xa4c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d01d      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a40      	ldr	r2, [pc, #256]	; (8003898 <HAL_DMA_IRQHandler+0xa50>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d018      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3f      	ldr	r2, [pc, #252]	; (800389c <HAL_DMA_IRQHandler+0xa54>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3d      	ldr	r2, [pc, #244]	; (80038a0 <HAL_DMA_IRQHandler+0xa58>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a3c      	ldr	r2, [pc, #240]	; (80038a4 <HAL_DMA_IRQHandler+0xa5c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3a      	ldr	r2, [pc, #232]	; (80038a8 <HAL_DMA_IRQHandler+0xa60>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_DMA_IRQHandler+0x984>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a39      	ldr	r2, [pc, #228]	; (80038ac <HAL_DMA_IRQHandler+0xa64>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x988>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_DMA_IRQHandler+0x98a>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 823f 	beq.w	8003c56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2204      	movs	r2, #4
 80037ea:	409a      	lsls	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80cd 	beq.w	8003990 <HAL_DMA_IRQHandler+0xb48>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80c7 	beq.w	8003990 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2204      	movs	r2, #4
 800380c:	409a      	lsls	r2, r3
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d049      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8210 	beq.w	8003c50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003838:	e20a      	b.n	8003c50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8206 	beq.w	8003c50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384c:	e200      	b.n	8003c50 <HAL_DMA_IRQHandler+0xe08>
 800384e:	bf00      	nop
 8003850:	40020010 	.word	0x40020010
 8003854:	40020028 	.word	0x40020028
 8003858:	40020040 	.word	0x40020040
 800385c:	40020058 	.word	0x40020058
 8003860:	40020070 	.word	0x40020070
 8003864:	40020088 	.word	0x40020088
 8003868:	400200a0 	.word	0x400200a0
 800386c:	400200b8 	.word	0x400200b8
 8003870:	40020410 	.word	0x40020410
 8003874:	40020428 	.word	0x40020428
 8003878:	40020440 	.word	0x40020440
 800387c:	40020458 	.word	0x40020458
 8003880:	40020470 	.word	0x40020470
 8003884:	40020488 	.word	0x40020488
 8003888:	400204a0 	.word	0x400204a0
 800388c:	400204b8 	.word	0x400204b8
 8003890:	58025408 	.word	0x58025408
 8003894:	5802541c 	.word	0x5802541c
 8003898:	58025430 	.word	0x58025430
 800389c:	58025444 	.word	0x58025444
 80038a0:	58025458 	.word	0x58025458
 80038a4:	5802546c 	.word	0x5802546c
 80038a8:	58025480 	.word	0x58025480
 80038ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d160      	bne.n	800397c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7f      	ldr	r2, [pc, #508]	; (8003abc <HAL_DMA_IRQHandler+0xc74>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d04a      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a7d      	ldr	r2, [pc, #500]	; (8003ac0 <HAL_DMA_IRQHandler+0xc78>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d045      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7c      	ldr	r2, [pc, #496]	; (8003ac4 <HAL_DMA_IRQHandler+0xc7c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d040      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <HAL_DMA_IRQHandler+0xc80>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d03b      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a79      	ldr	r2, [pc, #484]	; (8003acc <HAL_DMA_IRQHandler+0xc84>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d036      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a77      	ldr	r2, [pc, #476]	; (8003ad0 <HAL_DMA_IRQHandler+0xc88>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a76      	ldr	r2, [pc, #472]	; (8003ad4 <HAL_DMA_IRQHandler+0xc8c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02c      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a74      	ldr	r2, [pc, #464]	; (8003ad8 <HAL_DMA_IRQHandler+0xc90>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d027      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a73      	ldr	r2, [pc, #460]	; (8003adc <HAL_DMA_IRQHandler+0xc94>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a71      	ldr	r2, [pc, #452]	; (8003ae0 <HAL_DMA_IRQHandler+0xc98>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a70      	ldr	r2, [pc, #448]	; (8003ae4 <HAL_DMA_IRQHandler+0xc9c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a6e      	ldr	r2, [pc, #440]	; (8003ae8 <HAL_DMA_IRQHandler+0xca0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6d      	ldr	r2, [pc, #436]	; (8003aec <HAL_DMA_IRQHandler+0xca4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6b      	ldr	r2, [pc, #428]	; (8003af0 <HAL_DMA_IRQHandler+0xca8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_DMA_IRQHandler+0xcac>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_DMA_IRQHandler+0xb12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a68      	ldr	r2, [pc, #416]	; (8003af8 <HAL_DMA_IRQHandler+0xcb0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <HAL_DMA_IRQHandler+0xb24>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0208 	bic.w	r2, r2, #8
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <HAL_DMA_IRQHandler+0xb34>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8165 	beq.w	8003c50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800398e:	e15f      	b.n	8003c50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2202      	movs	r2, #2
 800399a:	409a      	lsls	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80c5 	beq.w	8003b30 <HAL_DMA_IRQHandler+0xce8>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80bf 	beq.w	8003b30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2202      	movs	r2, #2
 80039bc:	409a      	lsls	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d018      	beq.n	80039fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 813a 	beq.w	8003c54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e8:	e134      	b.n	8003c54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8130 	beq.w	8003c54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039fc:	e12a      	b.n	8003c54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 8089 	bne.w	8003b1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_DMA_IRQHandler+0xc74>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <HAL_DMA_IRQHandler+0xc78>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <HAL_DMA_IRQHandler+0xc7c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_DMA_IRQHandler+0xc80>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a25      	ldr	r2, [pc, #148]	; (8003acc <HAL_DMA_IRQHandler+0xc84>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <HAL_DMA_IRQHandler+0xc88>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_DMA_IRQHandler+0xc8c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <HAL_DMA_IRQHandler+0xc90>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_DMA_IRQHandler+0xc94>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <HAL_DMA_IRQHandler+0xc98>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_DMA_IRQHandler+0xc9c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_DMA_IRQHandler+0xca0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_DMA_IRQHandler+0xca4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_DMA_IRQHandler+0xca8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_DMA_IRQHandler+0xcac>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xc62>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_DMA_IRQHandler+0xcb0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d128      	bne.n	8003afc <HAL_DMA_IRQHandler+0xcb4>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0214 	bic.w	r2, r2, #20
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e027      	b.n	8003b0c <HAL_DMA_IRQHandler+0xcc4>
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 020a 	bic.w	r2, r2, #10
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8097 	beq.w	8003c54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2e:	e091      	b.n	8003c54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2208      	movs	r2, #8
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8088 	beq.w	8003c56 <HAL_DMA_IRQHandler+0xe0e>
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8082 	beq.w	8003c56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <HAL_DMA_IRQHandler+0xe14>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <HAL_DMA_IRQHandler+0xe18>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <HAL_DMA_IRQHandler+0xe1c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <HAL_DMA_IRQHandler+0xe20>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <HAL_DMA_IRQHandler+0xe24>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a39      	ldr	r2, [pc, #228]	; (8003c70 <HAL_DMA_IRQHandler+0xe28>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <HAL_DMA_IRQHandler+0xe2c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a36      	ldr	r2, [pc, #216]	; (8003c78 <HAL_DMA_IRQHandler+0xe30>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a35      	ldr	r2, [pc, #212]	; (8003c7c <HAL_DMA_IRQHandler+0xe34>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <HAL_DMA_IRQHandler+0xe38>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a32      	ldr	r2, [pc, #200]	; (8003c84 <HAL_DMA_IRQHandler+0xe3c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <HAL_DMA_IRQHandler+0xe40>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <HAL_DMA_IRQHandler+0xe44>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2d      	ldr	r2, [pc, #180]	; (8003c90 <HAL_DMA_IRQHandler+0xe48>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <HAL_DMA_IRQHandler+0xe4c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xdaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <HAL_DMA_IRQHandler+0xe50>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <HAL_DMA_IRQHandler+0xdbc>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 021c 	bic.w	r2, r2, #28
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_DMA_IRQHandler+0xdcc>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 020e 	bic.w	r2, r2, #14
 8003c12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
 8003c4a:	e004      	b.n	8003c56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c56:	3728      	adds	r7, #40	; 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40020010 	.word	0x40020010
 8003c60:	40020028 	.word	0x40020028
 8003c64:	40020040 	.word	0x40020040
 8003c68:	40020058 	.word	0x40020058
 8003c6c:	40020070 	.word	0x40020070
 8003c70:	40020088 	.word	0x40020088
 8003c74:	400200a0 	.word	0x400200a0
 8003c78:	400200b8 	.word	0x400200b8
 8003c7c:	40020410 	.word	0x40020410
 8003c80:	40020428 	.word	0x40020428
 8003c84:	40020440 	.word	0x40020440
 8003c88:	40020458 	.word	0x40020458
 8003c8c:	40020470 	.word	0x40020470
 8003c90:	40020488 	.word	0x40020488
 8003c94:	400204a0 	.word	0x400204a0
 8003c98:	400204b8 	.word	0x400204b8

08003c9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7f      	ldr	r2, [pc, #508]	; (8003eb8 <DMA_SetConfig+0x21c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d072      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7d      	ldr	r2, [pc, #500]	; (8003ebc <DMA_SetConfig+0x220>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d06d      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7c      	ldr	r2, [pc, #496]	; (8003ec0 <DMA_SetConfig+0x224>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d068      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7a      	ldr	r2, [pc, #488]	; (8003ec4 <DMA_SetConfig+0x228>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d063      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a79      	ldr	r2, [pc, #484]	; (8003ec8 <DMA_SetConfig+0x22c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d05e      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a77      	ldr	r2, [pc, #476]	; (8003ecc <DMA_SetConfig+0x230>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d059      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <DMA_SetConfig+0x234>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d054      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a74      	ldr	r2, [pc, #464]	; (8003ed4 <DMA_SetConfig+0x238>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d04f      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a73      	ldr	r2, [pc, #460]	; (8003ed8 <DMA_SetConfig+0x23c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d04a      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a71      	ldr	r2, [pc, #452]	; (8003edc <DMA_SetConfig+0x240>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d045      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a70      	ldr	r2, [pc, #448]	; (8003ee0 <DMA_SetConfig+0x244>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d040      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6e      	ldr	r2, [pc, #440]	; (8003ee4 <DMA_SetConfig+0x248>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d03b      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6d      	ldr	r2, [pc, #436]	; (8003ee8 <DMA_SetConfig+0x24c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d036      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6b      	ldr	r2, [pc, #428]	; (8003eec <DMA_SetConfig+0x250>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d031      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6a      	ldr	r2, [pc, #424]	; (8003ef0 <DMA_SetConfig+0x254>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d02c      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a68      	ldr	r2, [pc, #416]	; (8003ef4 <DMA_SetConfig+0x258>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d027      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a67      	ldr	r2, [pc, #412]	; (8003ef8 <DMA_SetConfig+0x25c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a65      	ldr	r2, [pc, #404]	; (8003efc <DMA_SetConfig+0x260>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <DMA_SetConfig+0x264>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a62      	ldr	r2, [pc, #392]	; (8003f04 <DMA_SetConfig+0x268>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a61      	ldr	r2, [pc, #388]	; (8003f08 <DMA_SetConfig+0x26c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5f      	ldr	r2, [pc, #380]	; (8003f0c <DMA_SetConfig+0x270>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5e      	ldr	r2, [pc, #376]	; (8003f10 <DMA_SetConfig+0x274>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <DMA_SetConfig+0x10a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5c      	ldr	r2, [pc, #368]	; (8003f14 <DMA_SetConfig+0x278>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <DMA_SetConfig+0x10e>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <DMA_SetConfig+0x110>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003db8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	; (8003eb8 <DMA_SetConfig+0x21c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d04a      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <DMA_SetConfig+0x220>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d045      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a36      	ldr	r2, [pc, #216]	; (8003ec0 <DMA_SetConfig+0x224>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d040      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a35      	ldr	r2, [pc, #212]	; (8003ec4 <DMA_SetConfig+0x228>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d03b      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <DMA_SetConfig+0x22c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d036      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a32      	ldr	r2, [pc, #200]	; (8003ecc <DMA_SetConfig+0x230>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d031      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a30      	ldr	r2, [pc, #192]	; (8003ed0 <DMA_SetConfig+0x234>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02c      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2f      	ldr	r2, [pc, #188]	; (8003ed4 <DMA_SetConfig+0x238>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d027      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2d      	ldr	r2, [pc, #180]	; (8003ed8 <DMA_SetConfig+0x23c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d022      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <DMA_SetConfig+0x240>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d01d      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <DMA_SetConfig+0x244>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <DMA_SetConfig+0x248>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <DMA_SetConfig+0x24c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <DMA_SetConfig+0x250>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <DMA_SetConfig+0x254>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <DMA_SetConfig+0x1d0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <DMA_SetConfig+0x258>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <DMA_SetConfig+0x1d4>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <DMA_SetConfig+0x1d6>
 8003e70:	2300      	movs	r3, #0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d059      	beq.n	8003f2a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	223f      	movs	r2, #63	; 0x3f
 8003e80:	409a      	lsls	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d138      	bne.n	8003f18 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eb6:	e086      	b.n	8003fc6 <DMA_SetConfig+0x32a>
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	40020040 	.word	0x40020040
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	40020070 	.word	0x40020070
 8003ecc:	40020088 	.word	0x40020088
 8003ed0:	400200a0 	.word	0x400200a0
 8003ed4:	400200b8 	.word	0x400200b8
 8003ed8:	40020410 	.word	0x40020410
 8003edc:	40020428 	.word	0x40020428
 8003ee0:	40020440 	.word	0x40020440
 8003ee4:	40020458 	.word	0x40020458
 8003ee8:	40020470 	.word	0x40020470
 8003eec:	40020488 	.word	0x40020488
 8003ef0:	400204a0 	.word	0x400204a0
 8003ef4:	400204b8 	.word	0x400204b8
 8003ef8:	58025408 	.word	0x58025408
 8003efc:	5802541c 	.word	0x5802541c
 8003f00:	58025430 	.word	0x58025430
 8003f04:	58025444 	.word	0x58025444
 8003f08:	58025458 	.word	0x58025458
 8003f0c:	5802546c 	.word	0x5802546c
 8003f10:	58025480 	.word	0x58025480
 8003f14:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
}
 8003f28:	e04d      	b.n	8003fc6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <DMA_SetConfig+0x338>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <DMA_SetConfig+0x33c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <DMA_SetConfig+0x340>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <DMA_SetConfig+0x344>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <DMA_SetConfig+0x348>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <DMA_SetConfig+0x34c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	; (8003fec <DMA_SetConfig+0x350>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <DMA_SetConfig+0x2de>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <DMA_SetConfig+0x354>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <DMA_SetConfig+0x2e2>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <DMA_SetConfig+0x2e4>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d108      	bne.n	8003fb6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
}
 8003fb4:	e007      	b.n	8003fc6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	58025408 	.word	0x58025408
 8003fd8:	5802541c 	.word	0x5802541c
 8003fdc:	58025430 	.word	0x58025430
 8003fe0:	58025444 	.word	0x58025444
 8003fe4:	58025458 	.word	0x58025458
 8003fe8:	5802546c 	.word	0x5802546c
 8003fec:	58025480 	.word	0x58025480
 8003ff0:	58025494 	.word	0x58025494

08003ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a42      	ldr	r2, [pc, #264]	; (800410c <DMA_CalcBaseAndBitshift+0x118>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d04a      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a41      	ldr	r2, [pc, #260]	; (8004110 <DMA_CalcBaseAndBitshift+0x11c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d045      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3f      	ldr	r2, [pc, #252]	; (8004114 <DMA_CalcBaseAndBitshift+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d040      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3e      	ldr	r2, [pc, #248]	; (8004118 <DMA_CalcBaseAndBitshift+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d03b      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a3c      	ldr	r2, [pc, #240]	; (800411c <DMA_CalcBaseAndBitshift+0x128>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d036      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3b      	ldr	r2, [pc, #236]	; (8004120 <DMA_CalcBaseAndBitshift+0x12c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d031      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a39      	ldr	r2, [pc, #228]	; (8004124 <DMA_CalcBaseAndBitshift+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02c      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a38      	ldr	r2, [pc, #224]	; (8004128 <DMA_CalcBaseAndBitshift+0x134>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d027      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a36      	ldr	r2, [pc, #216]	; (800412c <DMA_CalcBaseAndBitshift+0x138>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a35      	ldr	r2, [pc, #212]	; (8004130 <DMA_CalcBaseAndBitshift+0x13c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a33      	ldr	r2, [pc, #204]	; (8004134 <DMA_CalcBaseAndBitshift+0x140>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a32      	ldr	r2, [pc, #200]	; (8004138 <DMA_CalcBaseAndBitshift+0x144>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a30      	ldr	r2, [pc, #192]	; (800413c <DMA_CalcBaseAndBitshift+0x148>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <DMA_CalcBaseAndBitshift+0x14c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <DMA_CalcBaseAndBitshift+0x150>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <DMA_CalcBaseAndBitshift+0xa8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <DMA_CalcBaseAndBitshift+0x154>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <DMA_CalcBaseAndBitshift+0xac>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <DMA_CalcBaseAndBitshift+0xae>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d024      	beq.n	80040f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3b10      	subs	r3, #16
 80040ae:	4a27      	ldr	r2, [pc, #156]	; (800414c <DMA_CalcBaseAndBitshift+0x158>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	4a24      	ldr	r2, [pc, #144]	; (8004150 <DMA_CalcBaseAndBitshift+0x15c>)
 80040c0:	5cd3      	ldrb	r3, [r2, r3]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d908      	bls.n	80040e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <DMA_CalcBaseAndBitshift+0x160>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	659a      	str	r2, [r3, #88]	; 0x58
 80040de:	e00d      	b.n	80040fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <DMA_CalcBaseAndBitshift+0x160>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6593      	str	r3, [r2, #88]	; 0x58
 80040ee:	e005      	b.n	80040fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40020010 	.word	0x40020010
 8004110:	40020028 	.word	0x40020028
 8004114:	40020040 	.word	0x40020040
 8004118:	40020058 	.word	0x40020058
 800411c:	40020070 	.word	0x40020070
 8004120:	40020088 	.word	0x40020088
 8004124:	400200a0 	.word	0x400200a0
 8004128:	400200b8 	.word	0x400200b8
 800412c:	40020410 	.word	0x40020410
 8004130:	40020428 	.word	0x40020428
 8004134:	40020440 	.word	0x40020440
 8004138:	40020458 	.word	0x40020458
 800413c:	40020470 	.word	0x40020470
 8004140:	40020488 	.word	0x40020488
 8004144:	400204a0 	.word	0x400204a0
 8004148:	400204b8 	.word	0x400204b8
 800414c:	aaaaaaab 	.word	0xaaaaaaab
 8004150:	0800f96c 	.word	0x0800f96c
 8004154:	fffffc00 	.word	0xfffffc00

08004158 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d120      	bne.n	80041ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	2b03      	cmp	r3, #3
 8004172:	d858      	bhi.n	8004226 <DMA_CheckFifoParam+0xce>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <DMA_CheckFifoParam+0x24>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800419f 	.word	0x0800419f
 8004184:	0800418d 	.word	0x0800418d
 8004188:	08004227 	.word	0x08004227
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d048      	beq.n	800422a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800419c:	e045      	b.n	800422a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041a6:	d142      	bne.n	800422e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ac:	e03f      	b.n	800422e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b6:	d123      	bne.n	8004200 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d838      	bhi.n	8004232 <DMA_CheckFifoParam+0xda>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <DMA_CheckFifoParam+0x70>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041df 	.word	0x080041df
 80041d0:	080041d9 	.word	0x080041d9
 80041d4:	080041f1 	.word	0x080041f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
        break;
 80041dc:	e030      	b.n	8004240 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d025      	beq.n	8004236 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ee:	e022      	b.n	8004236 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041f8:	d11f      	bne.n	800423a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041fe:	e01c      	b.n	800423a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	2b02      	cmp	r3, #2
 8004206:	d902      	bls.n	800420e <DMA_CheckFifoParam+0xb6>
 8004208:	2b03      	cmp	r3, #3
 800420a:	d003      	beq.n	8004214 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800420c:	e018      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        break;
 8004212:	e015      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
    break;
 8004224:	e00b      	b.n	800423e <DMA_CheckFifoParam+0xe6>
        break;
 8004226:	bf00      	nop
 8004228:	e00a      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        break;
 800422a:	bf00      	nop
 800422c:	e008      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        break;
 800422e:	bf00      	nop
 8004230:	e006      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        break;
 8004232:	bf00      	nop
 8004234:	e004      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
        break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <DMA_CheckFifoParam+0xe8>
    break;
 800423e:	bf00      	nop
    }
  }

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a38      	ldr	r2, [pc, #224]	; (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a36      	ldr	r2, [pc, #216]	; (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a35      	ldr	r2, [pc, #212]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a33      	ldr	r2, [pc, #204]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a32      	ldr	r2, [pc, #200]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a30      	ldr	r2, [pc, #192]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2f      	ldr	r2, [pc, #188]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01a      	beq.n	80042ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	3b08      	subs	r3, #8
 80042c0:	4a28      	ldr	r2, [pc, #160]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	461a      	mov	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a24      	ldr	r2, [pc, #144]	; (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042ec:	e024      	b.n	8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3b10      	subs	r3, #16
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d806      	bhi.n	8004316 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d902      	bls.n	8004316 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3308      	adds	r3, #8
 8004314:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4b18      	ldr	r3, [pc, #96]	; (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004328:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2201      	movs	r2, #1
 8004332:	409a      	lsls	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	58025408 	.word	0x58025408
 8004348:	5802541c 	.word	0x5802541c
 800434c:	58025430 	.word	0x58025430
 8004350:	58025444 	.word	0x58025444
 8004354:	58025458 	.word	0x58025458
 8004358:	5802546c 	.word	0x5802546c
 800435c:	58025480 	.word	0x58025480
 8004360:	58025494 	.word	0x58025494
 8004364:	cccccccd 	.word	0xcccccccd
 8004368:	16009600 	.word	0x16009600
 800436c:	58025880 	.word	0x58025880
 8004370:	aaaaaaab 	.word	0xaaaaaaab
 8004374:	400204b8 	.word	0x400204b8
 8004378:	4002040f 	.word	0x4002040f
 800437c:	10008200 	.word	0x10008200
 8004380:	40020880 	.word	0x40020880

08004384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04a      	beq.n	8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d847      	bhi.n	8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d022      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a24      	ldr	r2, [pc, #144]	; (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d01d      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a22      	ldr	r2, [pc, #136]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d018      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a21      	ldr	r2, [pc, #132]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00e      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d009      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800440c:	671a      	str	r2, [r3, #112]	; 0x70
 800440e:	e009      	b.n	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a11      	ldr	r2, [pc, #68]	; (8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004422:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b01      	subs	r3, #1
 8004428:	2201      	movs	r2, #1
 800442a:	409a      	lsls	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	58025408 	.word	0x58025408
 8004440:	5802541c 	.word	0x5802541c
 8004444:	58025430 	.word	0x58025430
 8004448:	58025444 	.word	0x58025444
 800444c:	58025458 	.word	0x58025458
 8004450:	5802546c 	.word	0x5802546c
 8004454:	58025480 	.word	0x58025480
 8004458:	58025494 	.word	0x58025494
 800445c:	1600963f 	.word	0x1600963f
 8004460:	58025940 	.word	0x58025940
 8004464:	1000823f 	.word	0x1000823f
 8004468:	40020940 	.word	0x40020940

0800446c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800447a:	4b89      	ldr	r3, [pc, #548]	; (80046a0 <HAL_GPIO_Init+0x234>)
 800447c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800447e:	e194      	b.n	80047aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2101      	movs	r1, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8186 	beq.w	80047a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d005      	beq.n	80044b0 <HAL_GPIO_Init+0x44>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d130      	bne.n	8004512 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044e6:	2201      	movs	r2, #1
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0201 	and.w	r2, r3, #1
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b03      	cmp	r3, #3
 800451c:	d017      	beq.n	800454e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	2203      	movs	r2, #3
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d123      	bne.n	80045a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	08da      	lsrs	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3208      	adds	r2, #8
 8004562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	220f      	movs	r2, #15
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	2203      	movs	r2, #3
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 0203 	and.w	r2, r3, #3
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80e0 	beq.w	80047a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e4:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <HAL_GPIO_Init+0x238>)
 80045e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ea:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_GPIO_Init+0x238>)
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_GPIO_Init+0x238>)
 80045f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004602:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_GPIO_Init+0x23c>)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	3302      	adds	r3, #2
 800460a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	220f      	movs	r2, #15
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a20      	ldr	r2, [pc, #128]	; (80046ac <HAL_GPIO_Init+0x240>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d052      	beq.n	80046d4 <HAL_GPIO_Init+0x268>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_GPIO_Init+0x244>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d031      	beq.n	800469a <HAL_GPIO_Init+0x22e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_GPIO_Init+0x248>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d02b      	beq.n	8004696 <HAL_GPIO_Init+0x22a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_GPIO_Init+0x24c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d025      	beq.n	8004692 <HAL_GPIO_Init+0x226>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_GPIO_Init+0x250>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01f      	beq.n	800468e <HAL_GPIO_Init+0x222>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_GPIO_Init+0x254>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d019      	beq.n	800468a <HAL_GPIO_Init+0x21e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_GPIO_Init+0x258>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_GPIO_Init+0x21a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_GPIO_Init+0x25c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00d      	beq.n	8004682 <HAL_GPIO_Init+0x216>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_GPIO_Init+0x260>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <HAL_GPIO_Init+0x212>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_GPIO_Init+0x264>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_GPIO_Init+0x20e>
 8004676:	2309      	movs	r3, #9
 8004678:	e02d      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800467a:	230a      	movs	r3, #10
 800467c:	e02b      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800467e:	2308      	movs	r3, #8
 8004680:	e029      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004682:	2307      	movs	r3, #7
 8004684:	e027      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004686:	2306      	movs	r3, #6
 8004688:	e025      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800468a:	2305      	movs	r3, #5
 800468c:	e023      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800468e:	2304      	movs	r3, #4
 8004690:	e021      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004692:	2303      	movs	r3, #3
 8004694:	e01f      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004696:	2302      	movs	r3, #2
 8004698:	e01d      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800469a:	2301      	movs	r3, #1
 800469c:	e01b      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800469e:	bf00      	nop
 80046a0:	58000080 	.word	0x58000080
 80046a4:	58024400 	.word	0x58024400
 80046a8:	58000400 	.word	0x58000400
 80046ac:	58020000 	.word	0x58020000
 80046b0:	58020400 	.word	0x58020400
 80046b4:	58020800 	.word	0x58020800
 80046b8:	58020c00 	.word	0x58020c00
 80046bc:	58021000 	.word	0x58021000
 80046c0:	58021400 	.word	0x58021400
 80046c4:	58021800 	.word	0x58021800
 80046c8:	58021c00 	.word	0x58021c00
 80046cc:	58022000 	.word	0x58022000
 80046d0:	58022400 	.word	0x58022400
 80046d4:	2300      	movs	r3, #0
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	f002 0203 	and.w	r2, r2, #3
 80046dc:	0092      	lsls	r2, r2, #2
 80046de:	4093      	lsls	r3, r2
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046e6:	4938      	ldr	r1, [pc, #224]	; (80047c8 <HAL_GPIO_Init+0x35c>)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	3302      	adds	r3, #2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800471a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	3301      	adds	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f ae63 	bne.w	8004480 <HAL_GPIO_Init+0x14>
  }
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	3724      	adds	r7, #36	; 0x24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	58000400 	.word	0x58000400

080047cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	887b      	ldrh	r3, [r7, #2]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e001      	b.n	80047ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
 8004808:	4613      	mov	r3, r2
 800480a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800480c:	787b      	ldrb	r3, [r7, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004818:	e003      	b.n	8004822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004838:	4a08      	ldr	r2, [pc, #32]	; (800485c <HAL_HSEM_FastTake+0x2c>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3320      	adds	r3, #32
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <HAL_HSEM_FastTake+0x30>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	58026400 	.word	0x58026400
 8004860:	80000300 	.word	0x80000300

08004864 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800486e:	4906      	ldr	r1, [pc, #24]	; (8004888 <HAL_HSEM_Release+0x24>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	58026400 	.word	0x58026400

0800488c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s, uint32_t Mode)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_I2S_Init+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e10e      	b.n	8004abe <HAL_I2S_Init+0x232>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d107      	bne.n	80048bc <HAL_I2S_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s, Mode);
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fd3e 	bl	8001338 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_I2S_Init+0x56>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d008      	beq.n	8004904 <HAL_I2S_Init+0x78>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d004      	beq.n	8004904 <HAL_I2S_Init+0x78>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b0a      	cmp	r3, #10
 8004900:	f040 8087 	bne.w	8004a12 <HAL_I2S_Init+0x186>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d05a      	beq.n	80049c2 <HAL_I2S_Init+0x136>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_I2S_Init+0x8e>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004914:	2302      	movs	r3, #2
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e001      	b.n	800491e <HAL_I2S_Init+0x92>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800491a:	2301      	movs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b30      	cmp	r3, #48	; 0x30
 8004924:	d003      	beq.n	800492e <HAL_I2S_Init+0xa2>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800492a:	2bb0      	cmp	r3, #176	; 0xb0
 800492c:	d102      	bne.n	8004934 <HAL_I2S_Init+0xa8>
      {
        ispcm = 1UL;
 800492e:	2301      	movs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e001      	b.n	8004938 <HAL_I2S_Init+0xac>
      }
      else
      {
        ispcm = 0UL;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004938:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	f002 fdde 	bl	8007500 <HAL_RCCEx_GetPeriphCLKFreq>
 8004944:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800494e:	d113      	bne.n	8004978 <HAL_I2S_Init+0xec>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	3305      	adds	r3, #5
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e014      	b.n	80049a2 <HAL_I2S_Init+0x116>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004978:	2220      	movs	r2, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	fbb2 f2f3 	udiv	r2, r2, r3
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	3305      	adds	r3, #5
 80049a0:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4a48      	ldr	r2, [pc, #288]	; (8004ac8 <HAL_I2S_Init+0x23c>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e003      	b.n	80049ca <HAL_I2S_Init+0x13e>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80049c2:	2302      	movs	r3, #2
 80049c4:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d102      	bne.n	80049d6 <HAL_I2S_Init+0x14a>
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d002      	beq.n	80049dc <HAL_I2S_Init+0x150>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2bff      	cmp	r3, #255	; 0xff
 80049da:	d907      	bls.n	80049ec <HAL_I2S_Init+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	f043 0210 	orr.w	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e068      	b.n	8004abe <HAL_I2S_Init+0x232>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_I2S_Init+0x16a>
    {
      i2sodd = 1UL;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_I2S_Init+0x240>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	0411      	lsls	r1, r2, #16
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0612      	lsls	r2, r2, #24
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a18:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_I2S_Init+0x244>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6851      	ldr	r1, [r2, #4]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6892      	ldr	r2, [r2, #8]
 8004a24:	4311      	orrs	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68d2      	ldr	r2, [r2, #12]
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6992      	ldr	r2, [r2, #24]
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a12      	ldr	r2, [r2, #32]
 8004a36:	4311      	orrs	r1, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3c:	4311      	orrs	r1, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6912      	ldr	r2, [r2, #16]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f640 72f8 	movw	r2, #4088	; 0xff8
 8004a58:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a68:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d007      	beq.n	8004a98 <HAL_I2S_Init+0x20c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d003      	beq.n	8004a98 <HAL_I2S_Init+0x20c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b0a      	cmp	r3, #10
 8004a96:	d10a      	bne.n	8004aae <HAL_I2S_Init+0x222>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	cccccccd 	.word	0xcccccccd
 8004acc:	fe00ffff 	.word	0xfe00ffff
 8004ad0:	fdff9040 	.word	0xfdff9040

08004ad4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_I2S_Transmit_DMA+0x1e>
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e086      	b.n	8004c04 <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
 8004b04:	e07e      	b.n	8004c04 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_I2S_Transmit_DMA+0x42>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e076      	b.n	8004c04 <HAL_I2S_Transmit_DMA+0x130>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2203      	movs	r2, #3
 8004b22:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_I2S_Transmit_DMA+0x138>)
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <HAL_I2S_Transmit_DMA+0x13c>)
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <HAL_I2S_Transmit_DMA+0x140>)
 8004b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4619      	mov	r1, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3320      	adds	r3, #32
 8004b78:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004b80:	f7fd fbda 	bl	8002338 <HAL_DMA_Start_IT>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d011      	beq.n	8004bae <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	f043 0208 	orr.w	r2, r3, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	e02a      	b.n	8004c04 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf8:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	08004e51 	.word	0x08004e51
 8004c10:	08004e0f 	.word	0x08004e0f
 8004c14:	08004ecb 	.word	0x08004ecb

08004c18 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_I2S_Receive_DMA+0x1e>
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e086      	b.n	8004d48 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
 8004c48:	e07e      	b.n	8004d48 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_I2S_Receive_DMA+0x42>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e076      	b.n	8004d48 <HAL_I2S_Receive_DMA+0x130>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2204      	movs	r2, #4
 8004c66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c98:	4a2d      	ldr	r2, [pc, #180]	; (8004d50 <HAL_I2S_Receive_DMA+0x138>)
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <HAL_I2S_Receive_DMA+0x13c>)
 8004ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_I2S_Receive_DMA+0x140>)
 8004caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3330      	adds	r3, #48	; 0x30
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004cc2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8004cc4:	f7fd fb38 	bl	8002338 <HAL_DMA_Start_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d011      	beq.n	8004cf2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	f043 0208 	orr.w	r2, r3, #8
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	e02a      	b.n	8004d48 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d107      	bne.n	8004d2e <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	08004eaf 	.word	0x08004eaf
 8004d54:	08004e6d 	.word	0x08004e6d
 8004d58:	08004ecb 	.word	0x08004ecb

08004d5c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d76:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d86:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00f      	beq.n	8004db0 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fd fd39 	bl	800280c <HAL_DMA_Abort>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	f043 0208 	orr.w	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00f      	beq.n	8004dd8 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd fd25 	bl	800280c <HAL_DMA_Abort>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	f043 0208 	orr.w	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10e      	bne.n	8004e42 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e32:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7fc fa38 	bl	80012b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7fc fa3a 	bl	80012d8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10e      	bne.n	8004ea0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e90:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7fc f9e9 	bl	8001278 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7fc f9eb 	bl	8001298 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004ee6:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	f043 0208 	orr.w	r2, r3, #8
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff ff76 	bl	8004dfa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f20:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	2b06      	cmp	r3, #6
 8004f2a:	d00a      	beq.n	8004f42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e040      	b.n	8004fc0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e03e      	b.n	8004fc0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f4a:	491f      	ldr	r1, [pc, #124]	; (8004fc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f52:	f7fc fd49 	bl	80019e8 <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f58:	e009      	b.n	8004f6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f5a:	f7fc fd45 	bl	80019e8 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f68:	d901      	bls.n	8004f6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e028      	b.n	8004fc0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f6e:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7a:	d1ee      	bne.n	8004f5a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b1e      	cmp	r3, #30
 8004f80:	d008      	beq.n	8004f94 <HAL_PWREx_ConfigSupply+0x7c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b2e      	cmp	r3, #46	; 0x2e
 8004f86:	d005      	beq.n	8004f94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b1d      	cmp	r3, #29
 8004f8c:	d002      	beq.n	8004f94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b2d      	cmp	r3, #45	; 0x2d
 8004f92:	d114      	bne.n	8004fbe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004f94:	f7fc fd28 	bl	80019e8 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004f9a:	e009      	b.n	8004fb0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f9c:	f7fc fd24 	bl	80019e8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004faa:	d901      	bls.n	8004fb0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e007      	b.n	8004fc0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d1ee      	bne.n	8004f9c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	58024800 	.word	0x58024800

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	; 0x30
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f000 bc48 	b.w	8005870 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8088 	beq.w	80050fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fee:	4b99      	ldr	r3, [pc, #612]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ff8:	4b96      	ldr	r3, [pc, #600]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b10      	cmp	r3, #16
 8005002:	d007      	beq.n	8005014 <HAL_RCC_OscConfig+0x48>
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	2b18      	cmp	r3, #24
 8005008:	d111      	bne.n	800502e <HAL_RCC_OscConfig+0x62>
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d10c      	bne.n	800502e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	4b8f      	ldr	r3, [pc, #572]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d06d      	beq.n	80050fc <HAL_RCC_OscConfig+0x130>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d169      	bne.n	80050fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f000 bc21 	b.w	8005870 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x7a>
 8005038:	4b86      	ldr	r3, [pc, #536]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a85      	ldr	r2, [pc, #532]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e02e      	b.n	80050a4 <HAL_RCC_OscConfig+0xd8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x9c>
 800504e:	4b81      	ldr	r3, [pc, #516]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a80      	ldr	r2, [pc, #512]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b7e      	ldr	r3, [pc, #504]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a7d      	ldr	r2, [pc, #500]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e01d      	b.n	80050a4 <HAL_RCC_OscConfig+0xd8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0xc0>
 8005072:	4b78      	ldr	r3, [pc, #480]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a77      	ldr	r2, [pc, #476]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b75      	ldr	r3, [pc, #468]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a74      	ldr	r2, [pc, #464]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0xd8>
 800508c:	4b71      	ldr	r3, [pc, #452]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a70      	ldr	r2, [pc, #448]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b6e      	ldr	r3, [pc, #440]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6d      	ldr	r2, [pc, #436]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800509e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d013      	beq.n	80050d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc fc9c 	bl	80019e8 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fc fc98 	bl	80019e8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e3d4      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0xe8>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fc fc88 	bl	80019e8 <HAL_GetTick>
 80050d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fc fc84 	bl	80019e8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	; 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e3c0      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050ee:	4b59      	ldr	r3, [pc, #356]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x110>
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80ca 	beq.w	80052a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510c:	4b51      	ldr	r3, [pc, #324]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005114:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005116:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_RCC_OscConfig+0x166>
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	2b18      	cmp	r3, #24
 8005126:	d156      	bne.n	80051d6 <HAL_RCC_OscConfig+0x20a>
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d151      	bne.n	80051d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005132:	4b48      	ldr	r3, [pc, #288]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_RCC_OscConfig+0x17e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e392      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800514a:	4b42      	ldr	r3, [pc, #264]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 0219 	bic.w	r2, r3, #25
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	493f      	ldr	r1, [pc, #252]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fc fc44 	bl	80019e8 <HAL_GetTick>
 8005160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005164:	f7fc fc40 	bl	80019e8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e37c      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005176:	4b37      	ldr	r3, [pc, #220]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	f7fc fc61 	bl	8001a48 <HAL_GetREVID>
 8005186:	4603      	mov	r3, r0
 8005188:	f241 0203 	movw	r2, #4099	; 0x1003
 800518c:	4293      	cmp	r3, r2
 800518e:	d817      	bhi.n	80051c0 <HAL_RCC_OscConfig+0x1f4>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d108      	bne.n	80051aa <HAL_RCC_OscConfig+0x1de>
 8005198:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a8:	e07a      	b.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b2a      	ldr	r3, [pc, #168]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	031b      	lsls	r3, r3, #12
 80051b8:	4926      	ldr	r1, [pc, #152]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051be:	e06f      	b.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	4921      	ldr	r1, [pc, #132]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d4:	e064      	b.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d047      	beq.n	800526e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0219 	bic.w	r2, r3, #25
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	491a      	ldr	r1, [pc, #104]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fc fbfa 	bl	80019e8 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fc fbf6 	bl	80019e8 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e332      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	f7fc fc17 	bl	8001a48 <HAL_GetREVID>
 800521a:	4603      	mov	r3, r0
 800521c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005220:	4293      	cmp	r3, r2
 8005222:	d819      	bhi.n	8005258 <HAL_RCC_OscConfig+0x28c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d108      	bne.n	800523e <HAL_RCC_OscConfig+0x272>
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005234:	4a07      	ldr	r2, [pc, #28]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	6053      	str	r3, [r2, #4]
 800523c:	e030      	b.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	4901      	ldr	r1, [pc, #4]	; (8005254 <HAL_RCC_OscConfig+0x288>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
 8005252:	e025      	b.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
 8005254:	58024400 	.word	0x58024400
 8005258:	4b9a      	ldr	r3, [pc, #616]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	4997      	ldr	r1, [pc, #604]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
 800526c:	e018      	b.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526e:	4b95      	ldr	r3, [pc, #596]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a94      	ldr	r2, [pc, #592]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fc fbb5 	bl	80019e8 <HAL_GetTick>
 800527e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005282:	f7fc fbb1 	bl	80019e8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e2ed      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005294:	4b8b      	ldr	r3, [pc, #556]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a9 	beq.w	8005400 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ae:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b8:	4b82      	ldr	r3, [pc, #520]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d007      	beq.n	80052d4 <HAL_RCC_OscConfig+0x308>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b18      	cmp	r3, #24
 80052c8:	d13a      	bne.n	8005340 <HAL_RCC_OscConfig+0x374>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d135      	bne.n	8005340 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052d4:	4b7b      	ldr	r3, [pc, #492]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_OscConfig+0x320>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e2c1      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ec:	f7fc fbac 	bl	8001a48 <HAL_GetREVID>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d817      	bhi.n	800532a <HAL_RCC_OscConfig+0x35e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d108      	bne.n	8005314 <HAL_RCC_OscConfig+0x348>
 8005302:	4b70      	ldr	r3, [pc, #448]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800530a:	4a6e      	ldr	r2, [pc, #440]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005312:	e075      	b.n	8005400 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005314:	4b6b      	ldr	r3, [pc, #428]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	069b      	lsls	r3, r3, #26
 8005322:	4968      	ldr	r1, [pc, #416]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005328:	e06a      	b.n	8005400 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800532a:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	061b      	lsls	r3, r3, #24
 8005338:	4962      	ldr	r1, [pc, #392]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800533a:	4313      	orrs	r3, r2
 800533c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800533e:	e05f      	b.n	8005400 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d042      	beq.n	80053ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005348:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a5d      	ldr	r2, [pc, #372]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc fb48 	bl	80019e8 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800535c:	f7fc fb44 	bl	80019e8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e280      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800536e:	4b55      	ldr	r3, [pc, #340]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800537a:	f7fc fb65 	bl	8001a48 <HAL_GetREVID>
 800537e:	4603      	mov	r3, r0
 8005380:	f241 0203 	movw	r2, #4099	; 0x1003
 8005384:	4293      	cmp	r3, r2
 8005386:	d817      	bhi.n	80053b8 <HAL_RCC_OscConfig+0x3ec>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	2b20      	cmp	r3, #32
 800538e:	d108      	bne.n	80053a2 <HAL_RCC_OscConfig+0x3d6>
 8005390:	4b4c      	ldr	r3, [pc, #304]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005398:	4a4a      	ldr	r2, [pc, #296]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800539a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e02e      	b.n	8005400 <HAL_RCC_OscConfig+0x434>
 80053a2:	4b48      	ldr	r3, [pc, #288]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	069b      	lsls	r3, r3, #26
 80053b0:	4944      	ldr	r1, [pc, #272]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	604b      	str	r3, [r1, #4]
 80053b6:	e023      	b.n	8005400 <HAL_RCC_OscConfig+0x434>
 80053b8:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	493f      	ldr	r1, [pc, #252]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60cb      	str	r3, [r1, #12]
 80053cc:	e018      	b.n	8005400 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053ce:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a3c      	ldr	r2, [pc, #240]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fc fb05 	bl	80019e8 <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053e2:	f7fc fb01 	bl	80019e8 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e23d      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053f4:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d036      	beq.n	800547a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005414:	4b2b      	ldr	r3, [pc, #172]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fc fae2 	bl	80019e8 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005428:	f7fc fade 	bl	80019e8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e21a      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800543a:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800543c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x45c>
 8005446:	e018      	b.n	800547a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fc fac8 	bl	80019e8 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545c:	f7fc fac4 	bl	80019e8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e200      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d039      	beq.n	80054fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01c      	beq.n	80054c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005498:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800549a:	f7fc faa5 	bl	80019e8 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054a2:	f7fc faa1 	bl	80019e8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e1dd      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x4d6>
 80054c0:	e01b      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
 80054c2:	bf00      	nop
 80054c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054c8:	4b9b      	ldr	r3, [pc, #620]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a9a      	ldr	r2, [pc, #616]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80054ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054d4:	f7fc fa88 	bl	80019e8 <HAL_GetTick>
 80054d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054dc:	f7fc fa84 	bl	80019e8 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e1c0      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054ee:	4b92      	ldr	r3, [pc, #584]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8081 	beq.w	800560a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005508:	4b8c      	ldr	r3, [pc, #560]	; (800573c <HAL_RCC_OscConfig+0x770>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a8b      	ldr	r2, [pc, #556]	; (800573c <HAL_RCC_OscConfig+0x770>)
 800550e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005514:	f7fc fa68 	bl	80019e8 <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551c:	f7fc fa64 	bl	80019e8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	; 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e1a0      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800552e:	4b83      	ldr	r3, [pc, #524]	; (800573c <HAL_RCC_OscConfig+0x770>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d106      	bne.n	8005550 <HAL_RCC_OscConfig+0x584>
 8005542:	4b7d      	ldr	r3, [pc, #500]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	4a7c      	ldr	r2, [pc, #496]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6713      	str	r3, [r2, #112]	; 0x70
 800554e:	e02d      	b.n	80055ac <HAL_RCC_OscConfig+0x5e0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10c      	bne.n	8005572 <HAL_RCC_OscConfig+0x5a6>
 8005558:	4b77      	ldr	r3, [pc, #476]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	4a76      	ldr	r2, [pc, #472]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	6713      	str	r3, [r2, #112]	; 0x70
 8005564:	4b74      	ldr	r3, [pc, #464]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	4a73      	ldr	r2, [pc, #460]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800556a:	f023 0304 	bic.w	r3, r3, #4
 800556e:	6713      	str	r3, [r2, #112]	; 0x70
 8005570:	e01c      	b.n	80055ac <HAL_RCC_OscConfig+0x5e0>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x5c8>
 800557a:	4b6f      	ldr	r3, [pc, #444]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	4a6e      	ldr	r2, [pc, #440]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005580:	f043 0304 	orr.w	r3, r3, #4
 8005584:	6713      	str	r3, [r2, #112]	; 0x70
 8005586:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	4a6b      	ldr	r2, [pc, #428]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	6713      	str	r3, [r2, #112]	; 0x70
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0x5e0>
 8005594:	4b68      	ldr	r3, [pc, #416]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a67      	ldr	r2, [pc, #412]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	4b65      	ldr	r3, [pc, #404]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	4a64      	ldr	r2, [pc, #400]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fc fa18 	bl	80019e8 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fc fa14 	bl	80019e8 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e14e      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d2:	4b59      	ldr	r3, [pc, #356]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ee      	beq.n	80055bc <HAL_RCC_OscConfig+0x5f0>
 80055de:	e014      	b.n	800560a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fc fa02 	bl	80019e8 <HAL_GetTick>
 80055e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fc f9fe 	bl	80019e8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e138      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055fe:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ee      	bne.n	80055e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 812d 	beq.w	800586e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005614:	4b48      	ldr	r3, [pc, #288]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800561c:	2b18      	cmp	r3, #24
 800561e:	f000 80bd 	beq.w	800579c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b02      	cmp	r3, #2
 8005628:	f040 809e 	bne.w	8005768 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562c:	4b42      	ldr	r3, [pc, #264]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a41      	ldr	r2, [pc, #260]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005638:	f7fc f9d6 	bl	80019e8 <HAL_GetTick>
 800563c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005640:	f7fc f9d2 	bl	80019e8 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e10e      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800565e:	4b36      	ldr	r3, [pc, #216]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005662:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCC_OscConfig+0x774>)
 8005664:	4013      	ands	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800566e:	0112      	lsls	r2, r2, #4
 8005670:	430a      	orrs	r2, r1
 8005672:	4931      	ldr	r1, [pc, #196]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005674:	4313      	orrs	r3, r2
 8005676:	628b      	str	r3, [r1, #40]	; 0x28
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	3b01      	subs	r3, #1
 800567e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	3b01      	subs	r3, #1
 8005688:	025b      	lsls	r3, r3, #9
 800568a:	b29b      	uxth	r3, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	3b01      	subs	r3, #1
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a0:	3b01      	subs	r3, #1
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056a8:	4923      	ldr	r1, [pc, #140]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	4a21      	ldr	r2, [pc, #132]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_RCC_OscConfig+0x778>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056c6:	00d2      	lsls	r2, r2, #3
 80056c8:	491b      	ldr	r1, [pc, #108]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056ce:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	f023 020c 	bic.w	r2, r3, #12
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4917      	ldr	r1, [pc, #92]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	f023 0202 	bic.w	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	4912      	ldr	r1, [pc, #72]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	4a10      	ldr	r2, [pc, #64]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	4a0d      	ldr	r2, [pc, #52]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	4a07      	ldr	r2, [pc, #28]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a04      	ldr	r2, [pc, #16]	; (8005738 <HAL_RCC_OscConfig+0x76c>)
 8005728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fc f95b 	bl	80019e8 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005734:	e011      	b.n	800575a <HAL_RCC_OscConfig+0x78e>
 8005736:	bf00      	nop
 8005738:	58024400 	.word	0x58024400
 800573c:	58024800 	.word	0x58024800
 8005740:	fffffc0c 	.word	0xfffffc0c
 8005744:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005748:	f7fc f94e 	bl	80019e8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e08a      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0x77c>
 8005766:	e082      	b.n	800586e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005768:	4b43      	ldr	r3, [pc, #268]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a42      	ldr	r2, [pc, #264]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 800576e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fc f938 	bl	80019e8 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577c:	f7fc f934 	bl	80019e8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e070      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800578e:	4b3a      	ldr	r3, [pc, #232]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x7b0>
 800579a:	e068      	b.n	800586e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057a2:	4b35      	ldr	r3, [pc, #212]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d031      	beq.n	8005814 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f003 0203 	and.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d12a      	bne.n	8005814 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d122      	bne.n	8005814 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d11a      	bne.n	8005814 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	0a5b      	lsrs	r3, r3, #9
 80057e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d111      	bne.n	8005814 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d108      	bne.n	8005814 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	0e1b      	lsrs	r3, r3, #24
 8005806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e02b      	b.n	8005870 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005818:	4b17      	ldr	r3, [pc, #92]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	08db      	lsrs	r3, r3, #3
 800581e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005822:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	429a      	cmp	r2, r3
 800582c:	d01f      	beq.n	800586e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	4a11      	ldr	r2, [pc, #68]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800583a:	f7fc f8d5 	bl	80019e8 <HAL_GetTick>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005840:	bf00      	nop
 8005842:	f7fc f8d1 	bl	80019e8 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	4293      	cmp	r3, r2
 800584c:	d0f9      	beq.n	8005842 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 8005850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_RCC_OscConfig+0x8b0>)
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800585a:	00d2      	lsls	r2, r2, #3
 800585c:	4906      	ldr	r1, [pc, #24]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 800585e:	4313      	orrs	r3, r2
 8005860:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	4a04      	ldr	r2, [pc, #16]	; (8005878 <HAL_RCC_OscConfig+0x8ac>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3730      	adds	r7, #48	; 0x30
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	58024400 	.word	0x58024400
 800587c:	ffff0007 	.word	0xffff0007

08005880 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e19c      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b8a      	ldr	r3, [pc, #552]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d910      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b87      	ldr	r3, [pc, #540]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 020f 	bic.w	r2, r3, #15
 80058aa:	4985      	ldr	r1, [pc, #532]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b83      	ldr	r3, [pc, #524]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e184      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	4b7b      	ldr	r3, [pc, #492]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058dc:	429a      	cmp	r2, r3
 80058de:	d908      	bls.n	80058f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058e0:	4b78      	ldr	r3, [pc, #480]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	4975      	ldr	r1, [pc, #468]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	4b70      	ldr	r3, [pc, #448]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800590a:	429a      	cmp	r2, r3
 800590c:	d908      	bls.n	8005920 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800590e:	4b6d      	ldr	r3, [pc, #436]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	496a      	ldr	r1, [pc, #424]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 800591c:	4313      	orrs	r3, r2
 800591e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	d010      	beq.n	800594e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	4b64      	ldr	r3, [pc, #400]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005938:	429a      	cmp	r2, r3
 800593a:	d908      	bls.n	800594e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800593c:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	495e      	ldr	r1, [pc, #376]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 800594a:	4313      	orrs	r3, r2
 800594c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d010      	beq.n	800597c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	4b59      	ldr	r3, [pc, #356]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005966:	429a      	cmp	r2, r3
 8005968:	d908      	bls.n	800597c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800596a:	4b56      	ldr	r3, [pc, #344]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	4953      	ldr	r1, [pc, #332]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005978:	4313      	orrs	r3, r2
 800597a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	4b4d      	ldr	r3, [pc, #308]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	429a      	cmp	r2, r3
 8005996:	d908      	bls.n	80059aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005998:	4b4a      	ldr	r3, [pc, #296]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f023 020f 	bic.w	r2, r3, #15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4947      	ldr	r1, [pc, #284]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d055      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059b6:	4b43      	ldr	r3, [pc, #268]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4940      	ldr	r1, [pc, #256]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059d0:	4b3c      	ldr	r3, [pc, #240]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d121      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0f6      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d107      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e8:	4b36      	ldr	r3, [pc, #216]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d115      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0ea      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d107      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a00:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0de      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a10:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0d6      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a20:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f023 0207 	bic.w	r2, r3, #7
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4925      	ldr	r1, [pc, #148]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fb ffd9 	bl	80019e8 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3a:	f7fb ffd5 	bl	80019e8 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0be      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a50:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d1eb      	bne.n	8005a3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d208      	bcs.n	8005a90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f023 020f 	bic.w	r2, r3, #15
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	490e      	ldr	r1, [pc, #56]	; (8005ac4 <HAL_RCC_ClockConfig+0x244>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d214      	bcs.n	8005ac8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 020f 	bic.w	r2, r3, #15
 8005aa6:	4906      	ldr	r1, [pc, #24]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <HAL_RCC_ClockConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d005      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e086      	b.n	8005bce <HAL_RCC_ClockConfig+0x34e>
 8005ac0:	52002000 	.word	0x52002000
 8005ac4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d208      	bcs.n	8005af6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	4939      	ldr	r1, [pc, #228]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d208      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b12:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	492e      	ldr	r1, [pc, #184]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d208      	bcs.n	8005b52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	4922      	ldr	r1, [pc, #136]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d010      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d208      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4917      	ldr	r1, [pc, #92]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b80:	f000 f89e 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	4912      	ldr	r1, [pc, #72]	; (8005bdc <HAL_RCC_ClockConfig+0x35c>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <HAL_RCC_ClockConfig+0x358>)
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	4a0d      	ldr	r2, [pc, #52]	; (8005bdc <HAL_RCC_ClockConfig+0x35c>)
 8005ba8:	5cd3      	ldrb	r3, [r2, r3]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb4:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <HAL_RCC_ClockConfig+0x360>)
 8005bb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bb8:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <HAL_RCC_ClockConfig+0x364>)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_RCC_ClockConfig+0x368>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fb fec6 	bl	8001954 <HAL_InitTick>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	58024400 	.word	0x58024400
 8005bdc:	0800f95c 	.word	0x0800f95c
 8005be0:	24000004 	.word	0x24000004
 8005be4:	24000000 	.word	0x24000000
 8005be8:	24000040 	.word	0x24000040

08005bec <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08c      	sub	sp, #48	; 0x30
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d12a      	bne.n	8005c54 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c04:	4a2b      	ldr	r2, [pc, #172]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c0e:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c22:	2302      	movs	r3, #2
 8005c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c26:	2303      	movs	r3, #3
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005c32:	f107 031c 	add.w	r3, r7, #28
 8005c36:	4619      	mov	r1, r3
 8005c38:	481f      	ldr	r0, [pc, #124]	; (8005cb8 <HAL_RCC_MCOConfig+0xcc>)
 8005c3a:	f7fe fc17 	bl	800446c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005c3e:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	4919      	ldr	r1, [pc, #100]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005c52:	e02a      	b.n	8005caa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c5c:	f043 0304 	orr.w	r3, r3, #4
 8005c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c84:	2300      	movs	r3, #0
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c88:	f107 031c 	add.w	r3, r7, #28
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	480b      	ldr	r0, [pc, #44]	; (8005cbc <HAL_RCC_MCOConfig+0xd0>)
 8005c90:	f7fe fbec 	bl	800446c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	01d9      	lsls	r1, r3, #7
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	4903      	ldr	r1, [pc, #12]	; (8005cb4 <HAL_RCC_MCOConfig+0xc8>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	610b      	str	r3, [r1, #16]
}
 8005caa:	bf00      	nop
 8005cac:	3730      	adds	r7, #48	; 0x30
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	58020000 	.word	0x58020000
 8005cbc:	58020800 	.word	0x58020800

08005cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc6:	4bb3      	ldr	r3, [pc, #716]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cce:	2b18      	cmp	r3, #24
 8005cd0:	f200 8155 	bhi.w	8005f7e <HAL_RCC_GetSysClockFreq+0x2be>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d41 	.word	0x08005d41
 8005ce0:	08005f7f 	.word	0x08005f7f
 8005ce4:	08005f7f 	.word	0x08005f7f
 8005ce8:	08005f7f 	.word	0x08005f7f
 8005cec:	08005f7f 	.word	0x08005f7f
 8005cf0:	08005f7f 	.word	0x08005f7f
 8005cf4:	08005f7f 	.word	0x08005f7f
 8005cf8:	08005f7f 	.word	0x08005f7f
 8005cfc:	08005d67 	.word	0x08005d67
 8005d00:	08005f7f 	.word	0x08005f7f
 8005d04:	08005f7f 	.word	0x08005f7f
 8005d08:	08005f7f 	.word	0x08005f7f
 8005d0c:	08005f7f 	.word	0x08005f7f
 8005d10:	08005f7f 	.word	0x08005f7f
 8005d14:	08005f7f 	.word	0x08005f7f
 8005d18:	08005f7f 	.word	0x08005f7f
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005f7f 	.word	0x08005f7f
 8005d24:	08005f7f 	.word	0x08005f7f
 8005d28:	08005f7f 	.word	0x08005f7f
 8005d2c:	08005f7f 	.word	0x08005f7f
 8005d30:	08005f7f 	.word	0x08005f7f
 8005d34:	08005f7f 	.word	0x08005f7f
 8005d38:	08005f7f 	.word	0x08005f7f
 8005d3c:	08005d73 	.word	0x08005d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d40:	4b94      	ldr	r3, [pc, #592]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d4c:	4b91      	ldr	r3, [pc, #580]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	08db      	lsrs	r3, r3, #3
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	4a90      	ldr	r2, [pc, #576]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d5e:	e111      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d60:	4b8d      	ldr	r3, [pc, #564]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d62:	61bb      	str	r3, [r7, #24]
      break;
 8005d64:	e10e      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d66:	4b8d      	ldr	r3, [pc, #564]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d68:	61bb      	str	r3, [r7, #24]
      break;
 8005d6a:	e10b      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d6c:	4b8c      	ldr	r3, [pc, #560]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d6e:	61bb      	str	r3, [r7, #24]
      break;
 8005d70:	e108      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d72:	4b88      	ldr	r3, [pc, #544]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d7c:	4b85      	ldr	r3, [pc, #532]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d88:	4b82      	ldr	r3, [pc, #520]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d92:	4b80      	ldr	r3, [pc, #512]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80e1 	beq.w	8005f78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	f000 8083 	beq.w	8005ec4 <HAL_RCC_GetSysClockFreq+0x204>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	f200 80a1 	bhi.w	8005f08 <HAL_RCC_GetSysClockFreq+0x248>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x114>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d056      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dd2:	e099      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd4:	4b6f      	ldr	r3, [pc, #444]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02d      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de0:	4b6c      	ldr	r3, [pc, #432]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	4a6b      	ldr	r2, [pc, #428]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b62      	ldr	r3, [pc, #392]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e3a:	e087      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b51      	ldr	r3, [pc, #324]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e7e:	e065      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e92:	4b40      	ldr	r3, [pc, #256]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ec2:	e043      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f06:	e021      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f4c:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	0a5b      	lsrs	r3, r3, #9
 8005f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f56:	3301      	adds	r3, #1
 8005f58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f70:	ee17 3a90 	vmov	r3, s15
 8005f74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f76:	e005      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
      break;
 8005f7c:	e002      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f80:	61bb      	str	r3, [r7, #24]
      break;
 8005f82:	bf00      	nop
  }

  return sysclockfreq;
 8005f84:	69bb      	ldr	r3, [r7, #24]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3724      	adds	r7, #36	; 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	58024400 	.word	0x58024400
 8005f98:	03d09000 	.word	0x03d09000
 8005f9c:	003d0900 	.word	0x003d0900
 8005fa0:	017d7840 	.word	0x017d7840
 8005fa4:	46000000 	.word	0x46000000
 8005fa8:	4c742400 	.word	0x4c742400
 8005fac:	4a742400 	.word	0x4a742400
 8005fb0:	4bbebc20 	.word	0x4bbebc20

08005fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fba:	f7ff fe81 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	4b10      	ldr	r3, [pc, #64]	; (8006004 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	490f      	ldr	r1, [pc, #60]	; (8006008 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fcc:	5ccb      	ldrb	r3, [r1, r3]
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	4a09      	ldr	r2, [pc, #36]	; (8006008 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fe2:	5cd3      	ldrb	r3, [r2, r3]
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <HAL_RCC_GetHCLKFreq+0x58>)
 8005ff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ff2:	4a07      	ldr	r2, [pc, #28]	; (8006010 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <HAL_RCC_GetHCLKFreq+0x58>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58024400 	.word	0x58024400
 8006008:	0800f95c 	.word	0x0800f95c
 800600c:	24000004 	.word	0x24000004
 8006010:	24000000 	.word	0x24000000

08006014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006018:	f7ff ffcc 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 800601c:	4602      	mov	r2, r0
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4904      	ldr	r1, [pc, #16]	; (800603c <HAL_RCC_GetPCLK1Freq+0x28>)
 800602a:	5ccb      	ldrb	r3, [r1, r3]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	58024400 	.word	0x58024400
 800603c:	0800f95c 	.word	0x0800f95c

08006040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006044:	f7ff ffb6 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4904      	ldr	r1, [pc, #16]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	58024400 	.word	0x58024400
 8006068:	0800f95c 	.word	0x0800f95c

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006070:	b0cc      	sub	sp, #304	; 0x130
 8006072:	af00      	add	r7, sp, #0
 8006074:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006078:	2300      	movs	r3, #0
 800607a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800607e:	2300      	movs	r3, #0
 8006080:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006084:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006090:	2500      	movs	r5, #0
 8006092:	ea54 0305 	orrs.w	r3, r4, r5
 8006096:	d049      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800609c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060a2:	d02f      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060a8:	d828      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ae:	d01a      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060b4:	d822      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060be:	d007      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060c0:	e01c      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c2:	4bb8      	ldr	r3, [pc, #736]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	4ab7      	ldr	r2, [pc, #732]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060ce:	e01a      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d4:	3308      	adds	r3, #8
 80060d6:	2102      	movs	r1, #2
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 fba1 	bl	8008820 <RCCEx_PLL2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060e4:	e00f      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ea:	3328      	adds	r3, #40	; 0x28
 80060ec:	2102      	movs	r1, #2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f002 fc48 	bl	8008984 <RCCEx_PLL3_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060fa:	e004      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006102:	e000      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006106:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800610e:	4ba5      	ldr	r3, [pc, #660]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006116:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800611a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611c:	4aa1      	ldr	r2, [pc, #644]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611e:	430b      	orrs	r3, r1
 8006120:	6513      	str	r3, [r2, #80]	; 0x50
 8006122:	e003      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006128:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800612c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006138:	f04f 0900 	mov.w	r9, #0
 800613c:	ea58 0309 	orrs.w	r3, r8, r9
 8006140:	d047      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006142:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	2b04      	cmp	r3, #4
 800614a:	d82a      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800614c:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	08006169 	.word	0x08006169
 8006158:	08006177 	.word	0x08006177
 800615c:	0800618d 	.word	0x0800618d
 8006160:	080061ab 	.word	0x080061ab
 8006164:	080061ab 	.word	0x080061ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006168:	4b8e      	ldr	r3, [pc, #568]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a8d      	ldr	r2, [pc, #564]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006174:	e01a      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800617a:	3308      	adds	r3, #8
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f002 fb4e 	bl	8008820 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800618a:	e00f      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800618c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006190:	3328      	adds	r3, #40	; 0x28
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f002 fbf5 	bl	8008984 <RCCEx_PLL3_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a0:	e004      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b4:	4b7b      	ldr	r3, [pc, #492]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	f023 0107 	bic.w	r1, r3, #7
 80061bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	4a78      	ldr	r2, [pc, #480]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6513      	str	r3, [r2, #80]	; 0x50
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80061de:	f04f 0b00 	mov.w	fp, #0
 80061e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80061e6:	d04c      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80061e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f2:	d030      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f8:	d829      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061fa:	2bc0      	cmp	r3, #192	; 0xc0
 80061fc:	d02d      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80061fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006200:	d825      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d018      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006206:	2b80      	cmp	r3, #128	; 0x80
 8006208:	d821      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d007      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006212:	e01c      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006214:	4b63      	ldr	r3, [pc, #396]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a62      	ldr	r2, [pc, #392]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006220:	e01c      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006226:	3308      	adds	r3, #8
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f002 faf8 	bl	8008820 <RCCEx_PLL2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006236:	e011      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006238:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800623c:	3328      	adds	r3, #40	; 0x28
 800623e:	2100      	movs	r1, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f002 fb9f 	bl	8008984 <RCCEx_PLL3_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800624c:	e006      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006264:	4b4f      	ldr	r3, [pc, #316]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800626c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006272:	4a4c      	ldr	r2, [pc, #304]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006274:	430b      	orrs	r3, r1
 8006276:	6513      	str	r3, [r2, #80]	; 0x50
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800627e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006282:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800628e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006292:	2300      	movs	r3, #0
 8006294:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006298:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d053      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ae:	d035      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062b4:	d82e      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ba:	d031      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062c0:	d828      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c6:	d01a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062cc:	d822      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80062d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d6:	d007      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80062d8:	e01c      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062da:	4b32      	ldr	r3, [pc, #200]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	4a31      	ldr	r2, [pc, #196]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e6:	e01c      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ec:	3308      	adds	r3, #8
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f002 fa95 	bl	8008820 <RCCEx_PLL2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062fc:	e011      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006302:	3328      	adds	r3, #40	; 0x28
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f002 fb3c 	bl	8008984 <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006312:	e006      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800631a:	e002      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006322:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800632a:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800633a:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800633c:	430b      	orrs	r3, r1
 800633e:	6593      	str	r3, [r2, #88]	; 0x58
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006342:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006346:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800634a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006356:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800635a:	2300      	movs	r3, #0
 800635c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006360:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006364:	460b      	mov	r3, r1
 8006366:	4313      	orrs	r3, r2
 8006368:	d056      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800636a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800636e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006376:	d038      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800637c:	d831      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800637e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006382:	d034      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006384:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006388:	d82b      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800638a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800638e:	d01d      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006394:	d825      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d006      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800639a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063a0:	e01f      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063a2:	bf00      	nop
 80063a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a8:	4ba2      	ldr	r3, [pc, #648]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4aa1      	ldr	r2, [pc, #644]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063b4:	e01c      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063ba:	3308      	adds	r3, #8
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f002 fa2e 	bl	8008820 <RCCEx_PLL2_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063ca:	e011      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063d0:	3328      	adds	r3, #40	; 0x28
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f002 fad5 	bl	8008984 <RCCEx_PLL3_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063f8:	4b8e      	ldr	r3, [pc, #568]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006400:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006408:	4a8a      	ldr	r2, [pc, #552]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800640a:	430b      	orrs	r3, r1
 800640c:	6593      	str	r3, [r2, #88]	; 0x58
 800640e:	e003      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006414:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006424:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800642e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d03a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006438:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d01f      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006442:	2b30      	cmp	r3, #48	; 0x30
 8006444:	d819      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d00c      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d815      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006452:	2b10      	cmp	r3, #16
 8006454:	d111      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006456:	4b77      	ldr	r3, [pc, #476]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	4a76      	ldr	r2, [pc, #472]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006462:	e011      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006468:	3308      	adds	r3, #8
 800646a:	2102      	movs	r1, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f002 f9d7 	bl	8008820 <RCCEx_PLL2_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006478:	e006      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006480:	e002      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006488:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006490:	4b68      	ldr	r3, [pc, #416]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006494:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800649c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649e:	4a65      	ldr	r2, [pc, #404]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064a4:	e003      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064aa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80064ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d051      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d8:	d035      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064de:	d82e      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064e4:	d031      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ea:	d828      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f0:	d01a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80064f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f6:	d822      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d007      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006502:	e01c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a4a      	ldr	r2, [pc, #296]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006510:	e01c      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006516:	3308      	adds	r3, #8
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f002 f980 	bl	8008820 <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006526:	e011      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800652c:	3328      	adds	r3, #40	; 0x28
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f002 fa27 	bl	8008984 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800653c:	e006      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800654a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006554:	4b37      	ldr	r3, [pc, #220]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800655c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006562:	4a34      	ldr	r2, [pc, #208]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006564:	430b      	orrs	r3, r1
 8006566:	6513      	str	r3, [r2, #80]	; 0x50
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800656e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800657e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006588:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d056      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800659c:	d033      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800659e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a2:	d82c      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a8:	d02f      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065ae:	d826      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065b4:	d02b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ba:	d820      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c0:	d012      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80065c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c6:	d81a      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d022      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d115      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065d6:	3308      	adds	r3, #8
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f002 f920 	bl	8008820 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065e6:	e015      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065ec:	3328      	adds	r3, #40	; 0x28
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f002 f9c7 	bl	8008984 <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00a      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006606:	bf00      	nop
 8006608:	e004      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006614:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006624:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662a:	4a02      	ldr	r2, [pc, #8]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6513      	str	r3, [r2, #80]	; 0x50
 8006630:	e006      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800663c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006640:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800664c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006656:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d055      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800666c:	d033      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800666e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006672:	d82c      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d02f      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d826      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006684:	d02b      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800668a:	d820      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006690:	d012      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006696:	d81a      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d022      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800669c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a0:	d115      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066a6:	3308      	adds	r3, #8
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f002 f8b8 	bl	8008820 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066b6:	e015      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066bc:	3328      	adds	r3, #40	; 0x28
 80066be:	2101      	movs	r1, #1
 80066c0:	4618      	mov	r0, r3
 80066c2:	f002 f95f 	bl	8008984 <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066cc:	e00a      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80066d4:	e006      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066d6:	bf00      	nop
 80066d8:	e004      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066da:	bf00      	nop
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066de:	bf00      	nop
 80066e0:	e000      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066ec:	4bb6      	ldr	r3, [pc, #728]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80066f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066fc:	4ab2      	ldr	r2, [pc, #712]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066fe:	430b      	orrs	r3, r1
 8006700:	6593      	str	r3, [r2, #88]	; 0x58
 8006702:	e003      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006708:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800670c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006722:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006726:	460b      	mov	r3, r1
 8006728:	4313      	orrs	r3, r2
 800672a:	d02a      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800672c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006732:	2b00      	cmp	r3, #0
 8006734:	d011      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673a:	d10a      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800673c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006740:	3308      	adds	r3, #8
 8006742:	2101      	movs	r1, #1
 8006744:	4618      	mov	r0, r3
 8006746:	f002 f86b 	bl	8008820 <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006750:	e004      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006758:	e000      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800675a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800675c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006764:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006768:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800676c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	4a95      	ldr	r2, [pc, #596]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006774:	430b      	orrs	r3, r1
 8006776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006778:	e003      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800677e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006782:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800678e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006792:	2300      	movs	r3, #0
 8006794:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006798:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800679c:	460b      	mov	r3, r1
 800679e:	4313      	orrs	r3, r2
 80067a0:	d037      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ac:	d00e      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80067ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b2:	d816      	bhi.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d018      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80067b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067bc:	d111      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067be:	4b82      	ldr	r3, [pc, #520]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	4a81      	ldr	r2, [pc, #516]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067ca:	e00f      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067d0:	3308      	adds	r3, #8
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f002 f823 	bl	8008820 <RCCEx_PLL2_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067e0:	e004      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80067ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067f4:	4b74      	ldr	r3, [pc, #464]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80067fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6513      	str	r3, [r2, #80]	; 0x50
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800680e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800681e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006822:	2300      	movs	r3, #0
 8006824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006828:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d03a      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006832:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006838:	2b03      	cmp	r3, #3
 800683a:	d81d      	bhi.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800683c:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006881 	.word	0x08006881
 8006848:	08006855 	.word	0x08006855
 800684c:	08006863 	.word	0x08006863
 8006850:	08006881 	.word	0x08006881
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006854:	4b5c      	ldr	r3, [pc, #368]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	4a5b      	ldr	r2, [pc, #364]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800685a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006860:	e00f      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006862:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006866:	3308      	adds	r3, #8
 8006868:	2102      	movs	r1, #2
 800686a:	4618      	mov	r0, r3
 800686c:	f001 ffd8 	bl	8008820 <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006876:	e004      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800687e:	e000      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006882:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800688a:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800688c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688e:	f023 0103 	bic.w	r1, r3, #3
 8006892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006898:	4a4b      	ldr	r2, [pc, #300]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800689a:	430b      	orrs	r3, r1
 800689c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800689e:	e003      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068a4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80068b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f000 80a0 	beq.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ca:	4b40      	ldr	r3, [pc, #256]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a3f      	ldr	r2, [pc, #252]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068d6:	f7fb f887 	bl	80019e8 <HAL_GetTick>
 80068da:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068de:	e00b      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e0:	f7fb f882 	bl	80019e8 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b64      	cmp	r3, #100	; 0x64
 80068ee:	d903      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80068f6:	e005      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f8:	4b34      	ldr	r3, [pc, #208]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0ed      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006904:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006908:	2b00      	cmp	r3, #0
 800690a:	d17a      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800690c:	4b2e      	ldr	r3, [pc, #184]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800690e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006914:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006918:	4053      	eors	r3, r2
 800691a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691e:	2b00      	cmp	r3, #0
 8006920:	d015      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800692e:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006938:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800693a:	4b23      	ldr	r3, [pc, #140]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800693c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693e:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006944:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006946:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006948:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800694e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006952:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d118      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fb f844 	bl	80019e8 <HAL_GetTick>
 8006960:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006964:	e00d      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fb f83f 	bl	80019e8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006970:	1ad2      	subs	r2, r2, r3
 8006972:	f241 3388 	movw	r3, #5000	; 0x1388
 8006976:	429a      	cmp	r2, r3
 8006978:	d903      	bls.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8006980:	e005      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006982:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0eb      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800698e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006992:	2b00      	cmp	r3, #0
 8006994:	d130      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006996:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800699a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800699e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a6:	d115      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80069b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069b8:	091a      	lsrs	r2, r3, #4
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80069bc:	4013      	ands	r3, r2
 80069be:	4a02      	ldr	r2, [pc, #8]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6113      	str	r3, [r2, #16]
 80069c4:	e00c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80069c6:	bf00      	nop
 80069c8:	58024400 	.word	0x58024400
 80069cc:	58024800 	.word	0x58024800
 80069d0:	00ffffcf 	.word	0x00ffffcf
 80069d4:	4bd4      	ldr	r3, [pc, #848]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4ad3      	ldr	r2, [pc, #844]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069de:	6113      	str	r3, [r2, #16]
 80069e0:	4bd1      	ldr	r3, [pc, #836]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80069e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	4acd      	ldr	r2, [pc, #820]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6713      	str	r3, [r2, #112]	; 0x70
 80069f6:	e008      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8006a00:	e003      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a06:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f002 0301 	and.w	r3, r2, #1
 8006a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f000 808b 	beq.w	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a34:	2b28      	cmp	r3, #40	; 0x28
 8006a36:	d86b      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006b19 	.word	0x08006b19
 8006a44:	08006b11 	.word	0x08006b11
 8006a48:	08006b11 	.word	0x08006b11
 8006a4c:	08006b11 	.word	0x08006b11
 8006a50:	08006b11 	.word	0x08006b11
 8006a54:	08006b11 	.word	0x08006b11
 8006a58:	08006b11 	.word	0x08006b11
 8006a5c:	08006b11 	.word	0x08006b11
 8006a60:	08006ae5 	.word	0x08006ae5
 8006a64:	08006b11 	.word	0x08006b11
 8006a68:	08006b11 	.word	0x08006b11
 8006a6c:	08006b11 	.word	0x08006b11
 8006a70:	08006b11 	.word	0x08006b11
 8006a74:	08006b11 	.word	0x08006b11
 8006a78:	08006b11 	.word	0x08006b11
 8006a7c:	08006b11 	.word	0x08006b11
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006b11 	.word	0x08006b11
 8006a88:	08006b11 	.word	0x08006b11
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b11 	.word	0x08006b11
 8006a94:	08006b11 	.word	0x08006b11
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006b11 	.word	0x08006b11
 8006aa0:	08006b19 	.word	0x08006b19
 8006aa4:	08006b11 	.word	0x08006b11
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006b11 	.word	0x08006b11
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b11 	.word	0x08006b11
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b11 	.word	0x08006b11
 8006ae0:	08006b19 	.word	0x08006b19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ae8:	3308      	adds	r3, #8
 8006aea:	2101      	movs	r1, #1
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fe97 	bl	8008820 <RCCEx_PLL2_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006af8:	e00f      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006afe:	3328      	adds	r3, #40	; 0x28
 8006b00:	2101      	movs	r1, #1
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 ff3e 	bl	8008984 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b0e:	e004      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b22:	4b81      	ldr	r3, [pc, #516]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b32:	4a7d      	ldr	r2, [pc, #500]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6553      	str	r3, [r2, #84]	; 0x54
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f002 0302 	and.w	r3, r2, #2
 8006b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d042      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d825      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006bc1 	.word	0x08006bc1
 8006b78:	08006b8d 	.word	0x08006b8d
 8006b7c:	08006ba3 	.word	0x08006ba3
 8006b80:	08006bc1 	.word	0x08006bc1
 8006b84:	08006bc1 	.word	0x08006bc1
 8006b88:	08006bc1 	.word	0x08006bc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b90:	3308      	adds	r3, #8
 8006b92:	2101      	movs	r1, #1
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fe43 	bl	8008820 <RCCEx_PLL2_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ba0:	e00f      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ba6:	3328      	adds	r3, #40	; 0x28
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 feea 	bl	8008984 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bca:	4b57      	ldr	r3, [pc, #348]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f023 0107 	bic.w	r1, r3, #7
 8006bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd8:	4a53      	ldr	r2, [pc, #332]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6553      	str	r3, [r2, #84]	; 0x54
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006be4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f002 0304 	and.w	r3, r2, #4
 8006bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d044      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c10:	2b05      	cmp	r3, #5
 8006c12:	d825      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c69 	.word	0x08006c69
 8006c20:	08006c35 	.word	0x08006c35
 8006c24:	08006c4b 	.word	0x08006c4b
 8006c28:	08006c69 	.word	0x08006c69
 8006c2c:	08006c69 	.word	0x08006c69
 8006c30:	08006c69 	.word	0x08006c69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c38:	3308      	adds	r3, #8
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 fdef 	bl	8008820 <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c48:	e00f      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c4e:	3328      	adds	r3, #40	; 0x28
 8006c50:	2101      	movs	r1, #1
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fe96 	bl	8008984 <RCCEx_PLL3_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c5e:	e004      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006c66:	e000      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c72:	4b2d      	ldr	r3, [pc, #180]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c76:	f023 0107 	bic.w	r1, r3, #7
 8006c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c82:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6593      	str	r3, [r2, #88]	; 0x58
 8006c88:	e003      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006c8e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f002 0320 	and.w	r3, r2, #32
 8006c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cac:	460b      	mov	r3, r1
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	d057      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cbe:	d035      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cc4:	d82c      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cca:	d031      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d826      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cd6:	d02d      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cdc:	d820      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce2:	d012      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce8:	d81a      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d024      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf2:	d115      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fd8f 	bl	8008820 <RCCEx_PLL2_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d08:	e017      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d0e:	3328      	adds	r3, #40	; 0x28
 8006d10:	2102      	movs	r1, #2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fe36 	bl	8008984 <RCCEx_PLL3_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d1e:	e00c      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006d26:	e008      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006d28:	58024400 	.word	0x58024400
        break;
 8006d2c:	bf00      	nop
 8006d2e:	e004      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d42:	4bc2      	ldr	r3, [pc, #776]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d52:	4abe      	ldr	r2, [pc, #760]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6553      	str	r3, [r2, #84]	; 0x54
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006d5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d055      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d8e:	d033      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006d90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d94:	d82c      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9a:	d02f      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	d826      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da6:	d02b      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dac:	d820      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db2:	d012      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db8:	d81a      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d022      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc2:	d115      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 fd27 	bl	8008820 <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dd8:	e015      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dde:	3328      	adds	r3, #40	; 0x28
 8006de0:	2102      	movs	r1, #2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fdce 	bl	8008984 <RCCEx_PLL3_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dee:	e00a      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006df6:	e006      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006df8:	bf00      	nop
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e0e:	4b8f      	ldr	r3, [pc, #572]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e12:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e1e:	4a8b      	ldr	r2, [pc, #556]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6593      	str	r3, [r2, #88]	; 0x58
 8006e24:	e003      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006e2a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006e3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e44:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	d055      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e5a:	d033      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006e5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e60:	d82c      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e66:	d02f      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6c:	d826      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e72:	d02b      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006e74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e78:	d820      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e7e:	d012      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e84:	d81a      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d022      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8e:	d115      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e94:	3308      	adds	r3, #8
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fcc1 	bl	8008820 <RCCEx_PLL2_Config>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e015      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eaa:	3328      	adds	r3, #40	; 0x28
 8006eac:	2102      	movs	r1, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fd68 	bl	8008984 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006eba:	e00a      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006ec2:	e006      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ec4:	bf00      	nop
 8006ec6:	e004      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ec8:	bf00      	nop
 8006eca:	e002      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ecc:	bf00      	nop
 8006ece:	e000      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006eda:	4b5c      	ldr	r3, [pc, #368]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eea:	4a58      	ldr	r2, [pc, #352]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef0:	e003      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ef6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f002 0308 	and.w	r3, r2, #8
 8006f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f10:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006f14:	460b      	mov	r3, r1
 8006f16:	4313      	orrs	r3, r2
 8006f18:	d01e      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f26:	d10c      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f2c:	3328      	adds	r3, #40	; 0x28
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fd27 	bl	8008984 <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f42:	4b42      	ldr	r3, [pc, #264]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f52:	4a3e      	ldr	r2, [pc, #248]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f002 0310 	and.w	r3, r2, #16
 8006f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006f72:	460b      	mov	r3, r1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	d01e      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f8a:	3328      	adds	r3, #40	; 0x28
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 fcf8 	bl	8008984 <RCCEx_PLL3_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fb0:	4a26      	ldr	r2, [pc, #152]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006fc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fcc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	d040      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe2:	d022      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe8:	d81b      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff2:	d00b      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006ff4:	e015      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fc0e 	bl	8008820 <RCCEx_PLL2_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800700a:	e00f      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800700c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007010:	3328      	adds	r3, #40	; 0x28
 8007012:	2102      	movs	r1, #2
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fcb5 	bl	8008984 <RCCEx_PLL3_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007020:	e004      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8007028:	e000      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800702a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10d      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007038:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800703c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007044:	4a01      	ldr	r2, [pc, #4]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007046:	430b      	orrs	r3, r1
 8007048:	6593      	str	r3, [r2, #88]	; 0x58
 800704a:	e005      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800704c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007054:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007064:	67bb      	str	r3, [r7, #120]	; 0x78
 8007066:	2300      	movs	r3, #0
 8007068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800706a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800706e:	460b      	mov	r3, r1
 8007070:	4313      	orrs	r3, r2
 8007072:	d03b      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007074:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800707c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007080:	d01f      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8007082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007086:	d818      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8007088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708c:	d003      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800708e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007092:	d007      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8007094:	e011      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007096:	4b64      	ldr	r3, [pc, #400]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	4a63      	ldr	r2, [pc, #396]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800709c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070a2:	e00f      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070a8:	3328      	adds	r3, #40	; 0x28
 80070aa:	2101      	movs	r1, #1
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 fc69 	bl	8008984 <RCCEx_PLL3_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80070b8:	e004      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80070c0:	e000      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80070c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10b      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070cc:	4b56      	ldr	r3, [pc, #344]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80070d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070dc:	4a52      	ldr	r2, [pc, #328]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070de:	430b      	orrs	r3, r1
 80070e0:	6553      	str	r3, [r2, #84]	; 0x54
 80070e2:	e003      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80070e8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80070f8:	673b      	str	r3, [r7, #112]	; 0x70
 80070fa:	2300      	movs	r3, #0
 80070fc:	677b      	str	r3, [r7, #116]	; 0x74
 80070fe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d031      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8007112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007116:	d007      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007118:	e011      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711a:	4b43      	ldr	r3, [pc, #268]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	4a42      	ldr	r2, [pc, #264]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007126:	e00e      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800712c:	3308      	adds	r3, #8
 800712e:	2102      	movs	r1, #2
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fb75 	bl	8008820 <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800713c:	e003      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8007144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007146:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800714e:	4b36      	ldr	r3, [pc, #216]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007152:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007156:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	4a32      	ldr	r2, [pc, #200]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800715e:	430b      	orrs	r3, r1
 8007160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007162:	e003      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007168:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800716c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007178:	66bb      	str	r3, [r7, #104]	; 0x68
 800717a:	2300      	movs	r3, #0
 800717c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800717e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d00c      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007188:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800718c:	3328      	adds	r3, #40	; 0x28
 800718e:	2102      	movs	r1, #2
 8007190:	4618      	mov	r0, r3
 8007192:	f001 fbf7 	bl	8008984 <RCCEx_PLL3_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80071ae:	663b      	str	r3, [r7, #96]	; 0x60
 80071b0:	2300      	movs	r3, #0
 80071b2:	667b      	str	r3, [r7, #100]	; 0x64
 80071b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80071b8:	460b      	mov	r3, r1
 80071ba:	4313      	orrs	r3, r2
 80071bc:	d03a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ca:	d018      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80071cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d0:	d811      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80071d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071d6:	d014      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80071d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071dc:	d80b      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d011      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e6:	d106      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071f4:	e008      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80071fc:	e004      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80071fe:	bf00      	nop
 8007200:	e002      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007202:	bf00      	nop
 8007204:	e000      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007208:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10d      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007214:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007218:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800721c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007220:	4a01      	ldr	r2, [pc, #4]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007222:	430b      	orrs	r3, r1
 8007224:	6553      	str	r3, [r2, #84]	; 0x54
 8007226:	e005      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007230:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007234:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007240:	65bb      	str	r3, [r7, #88]	; 0x58
 8007242:	2300      	movs	r3, #0
 8007244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007246:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800724a:	460b      	mov	r3, r1
 800724c:	4313      	orrs	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007250:	4baa      	ldr	r3, [pc, #680]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007258:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800725c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800725e:	4aa7      	ldr	r2, [pc, #668]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007260:	430b      	orrs	r3, r1
 8007262:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007264:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007270:	653b      	str	r3, [r7, #80]	; 0x50
 8007272:	2300      	movs	r3, #0
 8007274:	657b      	str	r3, [r7, #84]	; 0x54
 8007276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	d00a      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007280:	4b9e      	ldr	r3, [pc, #632]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800728c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007290:	4a9a      	ldr	r2, [pc, #616]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007292:	430b      	orrs	r3, r1
 8007294:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007296:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80072a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072a4:	2300      	movs	r3, #0
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80072ac:	460b      	mov	r3, r1
 80072ae:	4313      	orrs	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072b2:	4b92      	ldr	r3, [pc, #584]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80072ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a8e      	ldr	r2, [pc, #568]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072c2:	430b      	orrs	r3, r1
 80072c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80072d2:	643b      	str	r3, [r7, #64]	; 0x40
 80072d4:	2300      	movs	r3, #0
 80072d6:	647b      	str	r3, [r7, #68]	; 0x44
 80072d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80072dc:	460b      	mov	r3, r1
 80072de:	4313      	orrs	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072e2:	4b86      	ldr	r3, [pc, #536]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	4a85      	ldr	r2, [pc, #532]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ec:	6113      	str	r3, [r2, #16]
 80072ee:	4b83      	ldr	r3, [pc, #524]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072f0:	6919      	ldr	r1, [r3, #16]
 80072f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072fa:	4a80      	ldr	r2, [pc, #512]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800730c:	63bb      	str	r3, [r7, #56]	; 0x38
 800730e:	2300      	movs	r3, #0
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007312:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007316:	460b      	mov	r3, r1
 8007318:	4313      	orrs	r3, r2
 800731a:	d009      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800731c:	4b77      	ldr	r3, [pc, #476]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800731e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007320:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732a:	4a74      	ldr	r2, [pc, #464]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800732c:	430b      	orrs	r3, r1
 800732e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800733c:	633b      	str	r3, [r7, #48]	; 0x30
 800733e:	2300      	movs	r3, #0
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
 8007342:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007346:	460b      	mov	r3, r1
 8007348:	4313      	orrs	r3, r2
 800734a:	d00a      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800734c:	4b6b      	ldr	r3, [pc, #428]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800734e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007350:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735c:	4a67      	ldr	r2, [pc, #412]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800735e:	430b      	orrs	r3, r1
 8007360:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007362:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	2100      	movs	r1, #0
 800736c:	62b9      	str	r1, [r7, #40]	; 0x28
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007374:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007378:	460b      	mov	r3, r1
 800737a:	4313      	orrs	r3, r2
 800737c:	d011      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800737e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007382:	3308      	adds	r3, #8
 8007384:	2100      	movs	r1, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f001 fa4a 	bl	8008820 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007392:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800739e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	2100      	movs	r1, #0
 80073ac:	6239      	str	r1, [r7, #32]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
 80073b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073b8:	460b      	mov	r3, r1
 80073ba:	4313      	orrs	r3, r2
 80073bc:	d011      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073c2:	3308      	adds	r3, #8
 80073c4:	2101      	movs	r1, #1
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fa2a 	bl	8008820 <RCCEx_PLL2_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80073d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80073de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	2100      	movs	r1, #0
 80073ec:	61b9      	str	r1, [r7, #24]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	61fb      	str	r3, [r7, #28]
 80073f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d011      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007402:	3308      	adds	r3, #8
 8007404:	2102      	movs	r1, #2
 8007406:	4618      	mov	r0, r3
 8007408:	f001 fa0a 	bl	8008820 <RCCEx_PLL2_Config>
 800740c:	4603      	mov	r3, r0
 800740e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007412:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800741e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007422:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	2100      	movs	r1, #0
 800742c:	6139      	str	r1, [r7, #16]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007438:	460b      	mov	r3, r1
 800743a:	4313      	orrs	r3, r2
 800743c:	d011      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800743e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007442:	3328      	adds	r3, #40	; 0x28
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fa9c 	bl	8008984 <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8007452:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800745e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	2100      	movs	r1, #0
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007478:	460b      	mov	r3, r1
 800747a:	4313      	orrs	r3, r2
 800747c:	d011      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800747e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007482:	3328      	adds	r3, #40	; 0x28
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f001 fa7c 	bl	8008984 <RCCEx_PLL3_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8007492:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800749e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	2100      	movs	r1, #0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074b8:	460b      	mov	r3, r1
 80074ba:	4313      	orrs	r3, r2
 80074bc:	d011      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074c2:	3328      	adds	r3, #40	; 0x28
 80074c4:	2102      	movs	r1, #2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 fa5c 	bl	8008984 <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80074d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80074de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80074e2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074f6:	46bd      	mov	sp, r7
 80074f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fc:	58024400 	.word	0x58024400

08007500 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b090      	sub	sp, #64	; 0x40
 8007504:	af00      	add	r7, sp, #0
 8007506:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800750a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007512:	430b      	orrs	r3, r1
 8007514:	f040 8094 	bne.w	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007518:	4b9e      	ldr	r3, [pc, #632]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	2b04      	cmp	r3, #4
 8007526:	f200 8087 	bhi.w	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007545 	.word	0x08007545
 8007534:	0800756d 	.word	0x0800756d
 8007538:	08007595 	.word	0x08007595
 800753c:	08007631 	.word	0x08007631
 8007540:	080075bd 	.word	0x080075bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007544:	4b93      	ldr	r3, [pc, #588]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007550:	d108      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007556:	4618      	mov	r0, r3
 8007558:	f001 f810 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007560:	f000 bd45 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007568:	f000 bd41 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800756c:	4b89      	ldr	r3, [pc, #548]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007578:	d108      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	f107 0318 	add.w	r3, r7, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fd54 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007588:	f000 bd31 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007590:	f000 bd2d 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007594:	4b7f      	ldr	r3, [pc, #508]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800759c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a0:	d108      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a2:	f107 030c 	add.w	r3, r7, #12
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fe94 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b0:	f000 bd1d 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b8:	f000 bd19 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075bc:	4b75      	ldr	r3, [pc, #468]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075c6:	4b73      	ldr	r3, [pc, #460]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d10c      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d8:	4b6e      	ldr	r3, [pc, #440]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	08db      	lsrs	r3, r3, #3
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	4a6d      	ldr	r2, [pc, #436]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ea:	e01f      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075ec:	4b69      	ldr	r3, [pc, #420]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f8:	d106      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007600:	d102      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007602:	4b66      	ldr	r3, [pc, #408]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007606:	e011      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007608:	4b62      	ldr	r3, [pc, #392]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007614:	d106      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761c:	d102      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800761e:	4b60      	ldr	r3, [pc, #384]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007622:	e003      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007628:	f000 bce1 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800762c:	f000 bcdf 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007630:	4b5c      	ldr	r3, [pc, #368]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007634:	f000 bcdb 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800763c:	f000 bcd7 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007644:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007648:	430b      	orrs	r3, r1
 800764a:	f040 80ad 	bne.w	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800764e:	4b51      	ldr	r3, [pc, #324]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007652:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007656:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765e:	d056      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	f200 8090 	bhi.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2bc0      	cmp	r3, #192	; 0xc0
 800766e:	f000 8088 	beq.w	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	2bc0      	cmp	r3, #192	; 0xc0
 8007676:	f200 8088 	bhi.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d032      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	f200 8081 	bhi.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d014      	beq.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007694:	e079      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007696:	4b3f      	ldr	r3, [pc, #252]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076a2:	d108      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 ff67 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076b2:	f000 bc9c 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ba:	f000 bc98 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076be:	4b35      	ldr	r3, [pc, #212]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ca:	d108      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076cc:	f107 0318 	add.w	r3, r7, #24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fcab 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076da:	f000 bc88 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076e2:	f000 bc84 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076e6:	4b2b      	ldr	r3, [pc, #172]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f2:	d108      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f4:	f107 030c 	add.w	r3, r7, #12
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fdeb 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007702:	f000 bc74 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800770a:	f000 bc70 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800770e:	4b21      	ldr	r3, [pc, #132]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007716:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007718:	4b1e      	ldr	r3, [pc, #120]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b04      	cmp	r3, #4
 8007722:	d10c      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800772a:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	08db      	lsrs	r3, r3, #3
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	4a18      	ldr	r2, [pc, #96]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773c:	e01f      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774a:	d106      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007752:	d102      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007754:	4b11      	ldr	r3, [pc, #68]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007758:	e011      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800775a:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007766:	d106      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800776e:	d102      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	e003      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800777a:	f000 bc38 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800777e:	f000 bc36 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007782:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007786:	f000 bc32 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778e:	f000 bc2e 	b.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	003d0900 	.word	0x003d0900
 80077a0:	017d7840 	.word	0x017d7840
 80077a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80077a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80077b0:	430b      	orrs	r3, r1
 80077b2:	f040 809c 	bne.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80077b6:	4b9e      	ldr	r3, [pc, #632]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80077be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077c6:	d054      	beq.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077ce:	f200 808b 	bhi.w	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077d8:	f000 8083 	beq.w	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077e2:	f200 8081 	bhi.w	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ec:	d02f      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077f4:	d878      	bhi.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007802:	d012      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007804:	e070      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007806:	4b8a      	ldr	r3, [pc, #552]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800780e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007812:	d107      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007818:	4618      	mov	r0, r3
 800781a:	f000 feaf 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007822:	e3e4      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007828:	e3e1      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800782a:	4b81      	ldr	r3, [pc, #516]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007836:	d107      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007838:	f107 0318 	add.w	r3, r7, #24
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fbf5 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007846:	e3d2      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800784c:	e3cf      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800784e:	4b78      	ldr	r3, [pc, #480]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785a:	d107      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785c:	f107 030c 	add.w	r3, r7, #12
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fd37 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786a:	e3c0      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007870:	e3bd      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007872:	4b6f      	ldr	r3, [pc, #444]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800787a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800787c:	4b6c      	ldr	r3, [pc, #432]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b04      	cmp	r3, #4
 8007886:	d10c      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800788e:	4b68      	ldr	r3, [pc, #416]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	08db      	lsrs	r3, r3, #3
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	4a66      	ldr	r2, [pc, #408]	; (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800789a:	fa22 f303 	lsr.w	r3, r2, r3
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a0:	e01e      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078a2:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ae:	d106      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b6:	d102      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078b8:	4b5f      	ldr	r3, [pc, #380]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078bc:	e010      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078be:	4b5c      	ldr	r3, [pc, #368]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ca:	d106      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d2:	d102      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078d4:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d8:	e002      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078de:	e386      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078e0:	e385      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078e2:	4b57      	ldr	r3, [pc, #348]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e6:	e382      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ec:	e37f      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80078ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80078f6:	430b      	orrs	r3, r1
 80078f8:	f040 80a7 	bne.w	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80078fc:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007900:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007904:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800790c:	d055      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007914:	f200 8096 	bhi.w	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800791e:	f000 8084 	beq.w	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007928:	f200 808c 	bhi.w	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007932:	d030      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800793a:	f200 8083 	bhi.w	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800794a:	d012      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800794c:	e07a      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800795a:	d107      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800795c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fe0b 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800796a:	e340      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007970:	e33d      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007972:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800797e:	d107      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007980:	f107 0318 	add.w	r3, r7, #24
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fb51 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800798e:	e32e      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007994:	e32b      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007996:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a2:	d107      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fc93 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b2:	e31c      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b8:	e319      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d10c      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80079d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d6:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	4a14      	ldr	r2, [pc, #80]	; (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e8:	e01e      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d106      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079fe:	d102      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a00:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a04:	e010      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a12:	d106      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1a:	d102      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a1c:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a20:	e002      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a26:	e2e2      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a28:	e2e1      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2e:	e2de      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a30:	58024400 	.word	0x58024400
 8007a34:	03d09000 	.word	0x03d09000
 8007a38:	003d0900 	.word	0x003d0900
 8007a3c:	017d7840 	.word	0x017d7840
 8007a40:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a48:	e2d1      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007a52:	430b      	orrs	r3, r1
 8007a54:	f040 809c 	bne.w	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007a58:	4b93      	ldr	r3, [pc, #588]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a68:	d054      	beq.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a70:	f200 808b 	bhi.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a7a:	f000 8083 	beq.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a84:	f200 8081 	bhi.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8e:	d02f      	beq.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a96:	d878      	bhi.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa4:	d012      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007aa6:	e070      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aa8:	4b7f      	ldr	r3, [pc, #508]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ab4:	d107      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fd5e 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ac4:	e293      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aca:	e290      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007acc:	4b76      	ldr	r3, [pc, #472]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad8:	d107      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ada:	f107 0318 	add.w	r3, r7, #24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 faa4 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ae8:	e281      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aee:	e27e      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007af0:	4b6d      	ldr	r3, [pc, #436]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007afc:	d107      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fbe6 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b0c:	e26f      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b12:	e26c      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b14:	4b64      	ldr	r3, [pc, #400]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b1e:	4b62      	ldr	r3, [pc, #392]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d10c      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b30:	4b5d      	ldr	r3, [pc, #372]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	08db      	lsrs	r3, r3, #3
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	4a5c      	ldr	r2, [pc, #368]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b42:	e01e      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b44:	4b58      	ldr	r3, [pc, #352]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b50:	d106      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b58:	d102      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b5a:	4b55      	ldr	r3, [pc, #340]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b5e:	e010      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b60:	4b51      	ldr	r3, [pc, #324]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6c:	d106      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b74:	d102      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b76:	4b4f      	ldr	r3, [pc, #316]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b80:	e235      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b82:	e234      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b84:	4b4c      	ldr	r3, [pc, #304]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b88:	e231      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b8e:	e22e      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b94:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	f040 808f 	bne.w	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007b9e:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bae:	d06b      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bb6:	d874      	bhi.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bbe:	d056      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bc6:	d86c      	bhi.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bce:	d03b      	beq.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bd6:	d864      	bhi.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bde:	d021      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be6:	d85c      	bhi.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf4:	d004      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007bf6:	e054      	b.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f7fe fa0c 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 8007bfc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bfe:	e1f6      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c00:	4b29      	ldr	r3, [pc, #164]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0e:	f107 0318 	add.w	r3, r7, #24
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fa0a 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c1c:	e1e7      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c22:	e1e4      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c24:	4b20      	ldr	r3, [pc, #128]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c30:	d107      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c32:	f107 030c 	add.w	r3, r7, #12
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fb4c 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c40:	e1d5      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c46:	e1d2      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c48:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d109      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c54:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a13      	ldr	r2, [pc, #76]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c66:	e1c2      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c6c:	e1bf      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c80:	e1b5      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c86:	e1b2      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c94:	d102      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c9a:	e1a8      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca0:	e1a5      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca6:	e1a2      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	03d09000 	.word	0x03d09000
 8007cb0:	003d0900 	.word	0x003d0900
 8007cb4:	017d7840 	.word	0x017d7840
 8007cb8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	d173      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007cc8:	4b9c      	ldr	r3, [pc, #624]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd8:	d02f      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce0:	d863      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d004      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cee:	d012      	beq.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007cf0:	e05b      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cf2:	4b92      	ldr	r3, [pc, #584]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cfe:	d107      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d00:	f107 0318 	add.w	r3, r7, #24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 f991 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d0e:	e16e      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d14:	e16b      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d16:	4b89      	ldr	r3, [pc, #548]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d22:	d107      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d24:	f107 030c 	add.w	r3, r7, #12
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fad3 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d32:	e15c      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d38:	e159      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d3a:	4b80      	ldr	r3, [pc, #512]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d44:	4b7d      	ldr	r3, [pc, #500]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d10c      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d56:	4b79      	ldr	r3, [pc, #484]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	08db      	lsrs	r3, r3, #3
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	4a77      	ldr	r2, [pc, #476]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007d62:	fa22 f303 	lsr.w	r3, r2, r3
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d68:	e01e      	b.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d6a:	4b74      	ldr	r3, [pc, #464]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d76:	d106      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d7e:	d102      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d80:	4b70      	ldr	r3, [pc, #448]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d84:	e010      	b.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d86:	4b6d      	ldr	r3, [pc, #436]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d92:	d106      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9a:	d102      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d9c:	4b6a      	ldr	r3, [pc, #424]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007da6:	e122      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007da8:	e121      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dae:	e11e      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007db8:	430b      	orrs	r3, r1
 8007dba:	d133      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007dbc:	4b5f      	ldr	r3, [pc, #380]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd2:	d012      	beq.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007dd4:	e023      	b.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dd6:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fbc7 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df2:	e0fc      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df8:	e0f9      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dfa:	4b50      	ldr	r3, [pc, #320]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e08:	f107 0318 	add.w	r3, r7, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f90d 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e16:	e0ea      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1c:	e0e7      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e22:	e0e4      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e28:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	f040 808d 	bne.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e32:	4b42      	ldr	r3, [pc, #264]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e36:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e3a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e42:	d06b      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e4a:	d874      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d056      	beq.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5a:	d86c      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e62:	d03b      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e6a:	d864      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e72:	d021      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d85c      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e88:	d004      	beq.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007e8a:	e054      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e8c:	f000 f8b8 	bl	8008000 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e90:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e92:	e0ac      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e94:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea2:	f107 0318 	add.w	r3, r7, #24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f8c0 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb0:	e09d      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb6:	e09a      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eb8:	4b20      	ldr	r3, [pc, #128]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec6:	f107 030c 	add.w	r3, r7, #12
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fa02 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed4:	e08b      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eda:	e088      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007edc:	4b17      	ldr	r3, [pc, #92]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d109      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee8:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	08db      	lsrs	r3, r3, #3
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	4a13      	ldr	r2, [pc, #76]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efa:	e078      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f00:	e075      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f14:	e06b      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1a:	e068      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f1c:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f28:	d102      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2e:	e05e      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f34:	e05b      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f3a:	e058      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	03d09000 	.word	0x03d09000
 8007f44:	003d0900 	.word	0x003d0900
 8007f48:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f50:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007f54:	430b      	orrs	r3, r1
 8007f56:	d148      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007f58:	4b27      	ldr	r3, [pc, #156]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f68:	d02a      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f70:	d838      	bhi.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f7e:	d00d      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007f80:	e030      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8e:	d102      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007f90:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f94:	e02b      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9a:	e028      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa8:	d107      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fae4 	bl	800857c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb8:	e019      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbe:	e016      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc0:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fcc:	d107      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fce:	f107 0318 	add.w	r3, r7, #24
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f82a 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fdc:	e007      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe2:	e004      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe8:	e001      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3740      	adds	r7, #64	; 0x40
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	58024400 	.word	0x58024400
 8007ffc:	017d7840 	.word	0x017d7840

08008000 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008004:	f7fd ffd6 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	091b      	lsrs	r3, r3, #4
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4904      	ldr	r1, [pc, #16]	; (8008028 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	58024400 	.word	0x58024400
 8008028:	0800f95c 	.word	0x0800f95c

0800802c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800802c:	b480      	push	{r7}
 800802e:	b089      	sub	sp, #36	; 0x24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008034:	4ba1      	ldr	r3, [pc, #644]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800803e:	4b9f      	ldr	r3, [pc, #636]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	0b1b      	lsrs	r3, r3, #12
 8008044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008048:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800804a:	4b9c      	ldr	r3, [pc, #624]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	091b      	lsrs	r3, r3, #4
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008056:	4b99      	ldr	r3, [pc, #612]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	fb02 f303 	mul.w	r3, r2, r3
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8111 	beq.w	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b02      	cmp	r3, #2
 800807e:	f000 8083 	beq.w	8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f200 80a1 	bhi.w	80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d056      	beq.n	8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008096:	e099      	b.n	80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008098:	4b88      	ldr	r3, [pc, #544]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d02d      	beq.n	8008100 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080a4:	4b85      	ldr	r3, [pc, #532]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	08db      	lsrs	r3, r3, #3
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	4a84      	ldr	r2, [pc, #528]	; (80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
 80080b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	ee07 3a90 	vmov	s15, r3
 80080bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ce:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080de:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80080fe:	e087      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800810e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008112:	4b6a      	ldr	r3, [pc, #424]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a03 	vldr	s12, [r7, #12]
 8008126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008142:	e065      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b59      	ldr	r3, [pc, #356]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	ed97 6a03 	vldr	s12, [r7, #12]
 800816a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008186:	e043      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819a:	4b48      	ldr	r3, [pc, #288]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ca:	e021      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081de:	4b37      	ldr	r3, [pc, #220]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800820e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008210:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	0a5b      	lsrs	r3, r3, #9
 8008216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822a:	edd7 6a07 	vldr	s13, [r7, #28]
 800822e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008236:	ee17 2a90 	vmov	r2, s15
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	0c1b      	lsrs	r3, r3, #16
 8008244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008258:	edd7 6a07 	vldr	s13, [r7, #28]
 800825c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008264:	ee17 2a90 	vmov	r2, s15
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800826c:	4b13      	ldr	r3, [pc, #76]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008286:	edd7 6a07 	vldr	s13, [r7, #28]
 800828a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008292:	ee17 2a90 	vmov	r2, s15
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800829a:	e008      	b.n	80082ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	609a      	str	r2, [r3, #8]
}
 80082ae:	bf00      	nop
 80082b0:	3724      	adds	r7, #36	; 0x24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	46000000 	.word	0x46000000
 80082c8:	4c742400 	.word	0x4c742400
 80082cc:	4a742400 	.word	0x4a742400
 80082d0:	4bbebc20 	.word	0x4bbebc20

080082d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082dc:	4ba1      	ldr	r3, [pc, #644]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80082e6:	4b9f      	ldr	r3, [pc, #636]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	0d1b      	lsrs	r3, r3, #20
 80082ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082f2:	4b9c      	ldr	r3, [pc, #624]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80082fe:	4b99      	ldr	r3, [pc, #612]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	08db      	lsrs	r3, r3, #3
 8008304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8111 	beq.w	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b02      	cmp	r3, #2
 8008326:	f000 8083 	beq.w	8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b02      	cmp	r3, #2
 800832e:	f200 80a1 	bhi.w	8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d056      	beq.n	80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800833e:	e099      	b.n	8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008340:	4b88      	ldr	r3, [pc, #544]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02d      	beq.n	80083a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800834c:	4b85      	ldr	r3, [pc, #532]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	08db      	lsrs	r3, r3, #3
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	4a84      	ldr	r2, [pc, #528]	; (8008568 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
 800835c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	4b7b      	ldr	r3, [pc, #492]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008386:	ed97 6a03 	vldr	s12, [r7, #12]
 800838a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800838e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083a6:	e087      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ba:	4b6a      	ldr	r3, [pc, #424]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ea:	e065      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b59      	ldr	r3, [pc, #356]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800842e:	e043      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b48      	ldr	r3, [pc, #288]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a03 	vldr	s12, [r7, #12]
 8008456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008472:	e021      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a03 	vldr	s12, [r7, #12]
 800849a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084b8:	4b2a      	ldr	r3, [pc, #168]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084de:	ee17 2a90 	vmov	r2, s15
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80084e6:	4b1f      	ldr	r3, [pc, #124]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008500:	edd7 6a07 	vldr	s13, [r7, #28]
 8008504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850c:	ee17 2a90 	vmov	r2, s15
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	0e1b      	lsrs	r3, r3, #24
 800851a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800852a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800852e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853a:	ee17 2a90 	vmov	r2, s15
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008542:	e008      	b.n	8008556 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	609a      	str	r2, [r3, #8]
}
 8008556:	bf00      	nop
 8008558:	3724      	adds	r7, #36	; 0x24
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	58024400 	.word	0x58024400
 8008568:	03d09000 	.word	0x03d09000
 800856c:	46000000 	.word	0x46000000
 8008570:	4c742400 	.word	0x4c742400
 8008574:	4a742400 	.word	0x4a742400
 8008578:	4bbebc20 	.word	0x4bbebc20

0800857c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800857c:	b480      	push	{r7}
 800857e:	b089      	sub	sp, #36	; 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008584:	4ba0      	ldr	r3, [pc, #640]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800858e:	4b9e      	ldr	r3, [pc, #632]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	091b      	lsrs	r3, r3, #4
 8008594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008598:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800859a:	4b9b      	ldr	r3, [pc, #620]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085a4:	4b98      	ldr	r3, [pc, #608]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	08db      	lsrs	r3, r3, #3
 80085aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8111 	beq.w	80087ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	f000 8083 	beq.w	80086d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	f200 80a1 	bhi.w	800871a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d056      	beq.n	8008692 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80085e4:	e099      	b.n	800871a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e6:	4b88      	ldr	r3, [pc, #544]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d02d      	beq.n	800864e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f2:	4b85      	ldr	r3, [pc, #532]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	08db      	lsrs	r3, r3, #3
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	4a83      	ldr	r2, [pc, #524]	; (800880c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80085fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008602:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	ee07 3a90 	vmov	s15, r3
 8008614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861c:	4b7a      	ldr	r3, [pc, #488]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008630:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008648:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800864c:	e087      	b.n	800875e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	ee07 3a90 	vmov	s15, r3
 8008654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008658:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008814 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800865c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008660:	4b69      	ldr	r3, [pc, #420]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008670:	ed97 6a03 	vldr	s12, [r7, #12]
 8008674:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008690:	e065      	b.n	800875e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80086a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a4:	4b58      	ldr	r3, [pc, #352]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ac:	ee07 3a90 	vmov	s15, r3
 80086b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086d4:	e043      	b.n	800875e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	ee07 3a90 	vmov	s15, r3
 80086dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800881c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80086e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e8:	4b47      	ldr	r3, [pc, #284]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008714:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008718:	e021      	b.n	800875e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008724:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008814 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872c:	4b36      	ldr	r3, [pc, #216]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008810 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008758:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800875e:	4b2a      	ldr	r3, [pc, #168]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	0a5b      	lsrs	r3, r3, #9
 8008764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008768:	ee07 3a90 	vmov	s15, r3
 800876c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008778:	edd7 6a07 	vldr	s13, [r7, #28]
 800877c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008784:	ee17 2a90 	vmov	r2, s15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800878c:	4b1e      	ldr	r3, [pc, #120]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b2:	ee17 2a90 	vmov	r2, s15
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	0e1b      	lsrs	r3, r3, #24
 80087c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e0:	ee17 2a90 	vmov	r2, s15
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80087e8:	e008      	b.n	80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	609a      	str	r2, [r3, #8]
}
 80087fc:	bf00      	nop
 80087fe:	3724      	adds	r7, #36	; 0x24
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	58024400 	.word	0x58024400
 800880c:	03d09000 	.word	0x03d09000
 8008810:	46000000 	.word	0x46000000
 8008814:	4c742400 	.word	0x4c742400
 8008818:	4a742400 	.word	0x4a742400
 800881c:	4bbebc20 	.word	0x4bbebc20

08008820 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800882e:	4b53      	ldr	r3, [pc, #332]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	2b03      	cmp	r3, #3
 8008838:	d101      	bne.n	800883e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e099      	b.n	8008972 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800883e:	4b4f      	ldr	r3, [pc, #316]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a4e      	ldr	r2, [pc, #312]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008844:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884a:	f7f9 f8cd 	bl	80019e8 <HAL_GetTick>
 800884e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008850:	e008      	b.n	8008864 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008852:	f7f9 f8c9 	bl	80019e8 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d901      	bls.n	8008864 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e086      	b.n	8008972 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008864:	4b45      	ldr	r3, [pc, #276]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f0      	bne.n	8008852 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008870:	4b42      	ldr	r3, [pc, #264]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	031b      	lsls	r3, r3, #12
 800887e:	493f      	ldr	r1, [pc, #252]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008880:	4313      	orrs	r3, r2
 8008882:	628b      	str	r3, [r1, #40]	; 0x28
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	3b01      	subs	r3, #1
 800888a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	3b01      	subs	r3, #1
 8008894:	025b      	lsls	r3, r3, #9
 8008896:	b29b      	uxth	r3, r3
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	3b01      	subs	r3, #1
 80088a0:	041b      	lsls	r3, r3, #16
 80088a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	061b      	lsls	r3, r3, #24
 80088b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088b4:	4931      	ldr	r1, [pc, #196]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088ba:	4b30      	ldr	r3, [pc, #192]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	492d      	ldr	r1, [pc, #180]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088cc:	4b2b      	ldr	r3, [pc, #172]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	f023 0220 	bic.w	r2, r3, #32
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	4928      	ldr	r1, [pc, #160]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088de:	4b27      	ldr	r3, [pc, #156]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	4a26      	ldr	r2, [pc, #152]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088e4:	f023 0310 	bic.w	r3, r3, #16
 80088e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088ea:	4b24      	ldr	r3, [pc, #144]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ee:	4b24      	ldr	r3, [pc, #144]	; (8008980 <RCCEx_PLL2_Config+0x160>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	69d2      	ldr	r2, [r2, #28]
 80088f6:	00d2      	lsls	r2, r2, #3
 80088f8:	4920      	ldr	r1, [pc, #128]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088fe:	4b1f      	ldr	r3, [pc, #124]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	4a1e      	ldr	r2, [pc, #120]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008904:	f043 0310 	orr.w	r3, r3, #16
 8008908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d106      	bne.n	800891e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008910:	4b1a      	ldr	r3, [pc, #104]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	4a19      	ldr	r2, [pc, #100]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800891a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800891c:	e00f      	b.n	800893e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d106      	bne.n	8008932 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008924:	4b15      	ldr	r3, [pc, #84]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	4a14      	ldr	r2, [pc, #80]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 800892a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800892e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008930:	e005      	b.n	800893e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008932:	4b12      	ldr	r3, [pc, #72]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	4a11      	ldr	r2, [pc, #68]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800893c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800893e:	4b0f      	ldr	r3, [pc, #60]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a0e      	ldr	r2, [pc, #56]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800894a:	f7f9 f84d 	bl	80019e8 <HAL_GetTick>
 800894e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008950:	e008      	b.n	8008964 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008952:	f7f9 f849 	bl	80019e8 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d901      	bls.n	8008964 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e006      	b.n	8008972 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <RCCEx_PLL2_Config+0x15c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0f0      	beq.n	8008952 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	58024400 	.word	0x58024400
 8008980:	ffff0007 	.word	0xffff0007

08008984 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008992:	4b53      	ldr	r3, [pc, #332]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d101      	bne.n	80089a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e099      	b.n	8008ad6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089a2:	4b4f      	ldr	r3, [pc, #316]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a4e      	ldr	r2, [pc, #312]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ae:	f7f9 f81b 	bl	80019e8 <HAL_GetTick>
 80089b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089b4:	e008      	b.n	80089c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089b6:	f7f9 f817 	bl	80019e8 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e086      	b.n	8008ad6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089c8:	4b45      	ldr	r3, [pc, #276]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1f0      	bne.n	80089b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	051b      	lsls	r3, r3, #20
 80089e2:	493f      	ldr	r1, [pc, #252]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	628b      	str	r3, [r1, #40]	; 0x28
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	025b      	lsls	r3, r3, #9
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	041b      	lsls	r3, r3, #16
 8008a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	061b      	lsls	r3, r3, #24
 8008a14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a18:	4931      	ldr	r1, [pc, #196]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a1e:	4b30      	ldr	r3, [pc, #192]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	492d      	ldr	r1, [pc, #180]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a30:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	4928      	ldr	r1, [pc, #160]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a42:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	4a26      	ldr	r2, [pc, #152]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a4e:	4b24      	ldr	r3, [pc, #144]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a52:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <RCCEx_PLL3_Config+0x160>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	69d2      	ldr	r2, [r2, #28]
 8008a5a:	00d2      	lsls	r2, r2, #3
 8008a5c:	4920      	ldr	r1, [pc, #128]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a62:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a74:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a80:	e00f      	b.n	8008aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d106      	bne.n	8008a96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a88:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	4a14      	ldr	r2, [pc, #80]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a94:	e005      	b.n	8008aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a96:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	4a11      	ldr	r2, [pc, #68]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a0e      	ldr	r2, [pc, #56]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aae:	f7f8 ff9b 	bl	80019e8 <HAL_GetTick>
 8008ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ab4:	e008      	b.n	8008ac8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ab6:	f7f8 ff97 	bl	80019e8 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e006      	b.n	8008ad6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <RCCEx_PLL3_Config+0x15c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0f0      	beq.n	8008ab6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	ffff0007 	.word	0xffff0007

08008ae8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e075      	b.n	8008be6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7f8 fd37 	bl	8001580 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2204      	movs	r2, #4
 8008b16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f868 	bl	8008bf0 <HAL_SD_InitCard>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e05d      	b.n	8008be6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fdb5 	bl	80096a0 <HAL_SD_GetCardStatus>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e052      	b.n	8008be6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008b40:	7e3b      	ldrb	r3, [r7, #24]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008b46:	7e7b      	ldrb	r3, [r7, #25]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d10a      	bne.n	8008b6a <HAL_SD_Init+0x82>
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <HAL_SD_Init+0x78>
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b66:	659a      	str	r2, [r3, #88]	; 0x58
 8008b68:	e00b      	b.n	8008b82 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d104      	bne.n	8008b7c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b78:	659a      	str	r2, [r3, #88]	; 0x58
 8008b7a:	e002      	b.n	8008b82 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fe73 	bl	8009874 <HAL_SD_ConfigWideBusOperation>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e026      	b.n	8008be6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008b98:	f7f8 ff26 	bl	80019e8 <HAL_GetTick>
 8008b9c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b9e:	e011      	b.n	8008bc4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ba0:	f7f8 ff22 	bl	80019e8 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d109      	bne.n	8008bc4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bb6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e010      	b.n	8008be6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 ff67 	bl	8009a98 <HAL_SD_GetCardState>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d1e7      	bne.n	8008ba0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3728      	adds	r7, #40	; 0x28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b08d      	sub	sp, #52	; 0x34
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c0c:	f04f 0100 	mov.w	r1, #0
 8008c10:	f7fe fc76 	bl	8007500 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c14:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e070      	b.n	8008d12 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	4a39      	ldr	r2, [pc, #228]	; (8008d1c <HAL_SD_InitCard+0x12c>)
 8008c36:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3a:	091b      	lsrs	r3, r3, #4
 8008c3c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681c      	ldr	r4, [r3, #0]
 8008c42:	466a      	mov	r2, sp
 8008c44:	f107 0318 	add.w	r3, r7, #24
 8008c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008c50:	f107 030c 	add.w	r3, r7, #12
 8008c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c56:	4620      	mov	r0, r4
 8008c58:	f002 fbce 	bl	800b3f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f002 fc11 	bl	800b488 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d007      	beq.n	8008c8e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008c7e:	4a28      	ldr	r2, [pc, #160]	; (8008d20 <HAL_SD_InitCard+0x130>)
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	3301      	adds	r3, #1
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7f8 feb9 	bl	8001a00 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fff0 	bl	8009c74 <SD_PowerON>
 8008c94:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e02e      	b.n	8008d12 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 ff0f 	bl	8009ad8 <SD_InitCard>
 8008cba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e01b      	b.n	8008d12 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 fc66 	bl	800b5b4 <SDMMC_CmdBlockLength>
 8008ce8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00f      	beq.n	8008d10 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a0b      	ldr	r2, [pc, #44]	; (8008d24 <HAL_SD_InitCard+0x134>)
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	372c      	adds	r7, #44	; 0x2c
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd90      	pop	{r4, r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	014f8b59 	.word	0x014f8b59
 8008d20:	00012110 	.word	0x00012110
 8008d24:	1fe00fff 	.word	0x1fe00fff

08008d28 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b092      	sub	sp, #72	; 0x48
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d36:	f7f8 fe57 	bl	80019e8 <HAL_GetTick>
 8008d3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e167      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	f040 815a 	bne.w	800901c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d907      	bls.n	8008d8c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e14e      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2203      	movs	r2, #3
 8008d90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d002      	beq.n	8008daa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	025b      	lsls	r3, r3, #9
 8008da8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008daa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	025b      	lsls	r3, r3, #9
 8008db4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008db6:	2390      	movs	r3, #144	; 0x90
 8008db8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f107 0214 	add.w	r2, r7, #20
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 fbc3 	bl	800b55c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d90a      	bls.n	8008e02 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2202      	movs	r2, #2
 8008df0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f002 fc21 	bl	800b640 <SDMMC_CmdReadMultiBlock>
 8008dfe:	6478      	str	r0, [r7, #68]	; 0x44
 8008e00:	e009      	b.n	8008e16 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f002 fbf3 	bl	800b5fa <SDMMC_CmdReadSingleBlock>
 8008e14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d012      	beq.n	8008e42 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a84      	ldr	r2, [pc, #528]	; (8009034 <HAL_SD_ReadBlocks+0x30c>)
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0f3      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e46:	e058      	b.n	8008efa <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d033      	beq.n	8008ebe <HAL_SD_ReadBlocks+0x196>
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	2b1f      	cmp	r3, #31
 8008e5a:	d930      	bls.n	8008ebe <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e60:	e027      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f002 faf0 	bl	800b44c <SDMMC_ReadFIFO>
 8008e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	3301      	adds	r3, #1
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	0a1b      	lsrs	r3, r3, #8
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	3301      	adds	r3, #1
 8008e8a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	0c1b      	lsrs	r3, r3, #16
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e94:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	3301      	adds	r3, #1
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eae:	3301      	adds	r3, #1
 8008eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8008eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb4:	2b07      	cmp	r3, #7
 8008eb6:	d9d4      	bls.n	8008e62 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eba:	3b20      	subs	r3, #32
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008ebe:	f7f8 fd93 	bl	80019e8 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d902      	bls.n	8008ed4 <HAL_SD_ReadBlocks+0x1ac>
 8008ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d112      	bne.n	8008efa <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a56      	ldr	r2, [pc, #344]	; (8009034 <HAL_SD_ReadBlocks+0x30c>)
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e097      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f00:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d09f      	beq.n	8008e48 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f16:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d022      	beq.n	8008f6c <HAL_SD_ReadBlocks+0x244>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d91f      	bls.n	8008f6c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d01b      	beq.n	8008f6c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f002 fbeb 	bl	800b714 <SDMMC_CmdStopTransfer>
 8008f3e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d012      	beq.n	8008f6c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a3a      	ldr	r2, [pc, #232]	; (8009034 <HAL_SD_ReadBlocks+0x30c>)
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e05e      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d012      	beq.n	8008fa0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <HAL_SD_ReadBlocks+0x30c>)
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f86:	f043 0208 	orr.w	r2, r3, #8
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e044      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d012      	beq.n	8008fd4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a20      	ldr	r2, [pc, #128]	; (8009034 <HAL_SD_ReadBlocks+0x30c>)
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fba:	f043 0202 	orr.w	r2, r3, #2
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e02a      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d012      	beq.n	8009008 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a13      	ldr	r2, [pc, #76]	; (8009034 <HAL_SD_ReadBlocks+0x30c>)
 8008fe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fee:	f043 0220 	orr.w	r2, r3, #32
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e010      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a0a      	ldr	r2, [pc, #40]	; (8009038 <HAL_SD_ReadBlocks+0x310>)
 800900e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	e006      	b.n	800902a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009020:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
  }
}
 800902a:	4618      	mov	r0, r3
 800902c:	3748      	adds	r7, #72	; 0x48
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	1fe00fff 	.word	0x1fe00fff
 8009038:	18000f3a 	.word	0x18000f3a

0800903c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b092      	sub	sp, #72	; 0x48
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800904a:	f7f8 fccd 	bl	80019e8 <HAL_GetTick>
 800904e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d107      	bne.n	800906e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009062:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e16b      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	f040 815e 	bne.w	8009338 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908c:	429a      	cmp	r2, r3
 800908e:	d907      	bls.n	80090a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e152      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2203      	movs	r2, #3
 80090a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2200      	movs	r2, #0
 80090ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d002      	beq.n	80090be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	025b      	lsls	r3, r3, #9
 80090bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090be:	f04f 33ff 	mov.w	r3, #4294967295
 80090c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	025b      	lsls	r3, r3, #9
 80090c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090ca:	2390      	movs	r3, #144	; 0x90
 80090cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f107 0218 	add.w	r2, r7, #24
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f002 fa39 	bl	800b55c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090f8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d90a      	bls.n	8009116 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800910c:	4618      	mov	r0, r3
 800910e:	f002 fadd 	bl	800b6cc <SDMMC_CmdWriteMultiBlock>
 8009112:	6478      	str	r0, [r7, #68]	; 0x44
 8009114:	e009      	b.n	800912a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2210      	movs	r2, #16
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009122:	4618      	mov	r0, r3
 8009124:	f002 faaf 	bl	800b686 <SDMMC_CmdWriteSingleBlock>
 8009128:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800912a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912c:	2b00      	cmp	r3, #0
 800912e:	d012      	beq.n	8009156 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a86      	ldr	r2, [pc, #536]	; (8009350 <HAL_SD_WriteBlocks+0x314>)
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800913c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800913e:	431a      	orrs	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e0f7      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800915a:	e05c      	b.n	8009216 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d037      	beq.n	80091da <HAL_SD_WriteBlocks+0x19e>
 800916a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800916c:	2b1f      	cmp	r3, #31
 800916e:	d934      	bls.n	80091da <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8009170:	2300      	movs	r3, #0
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
 8009174:	e02b      	b.n	80091ce <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800917c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917e:	3301      	adds	r3, #1
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	021a      	lsls	r2, r3, #8
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	3301      	adds	r3, #1
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	041a      	lsls	r2, r3, #16
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a2:	3301      	adds	r3, #1
 80091a4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	061a      	lsls	r2, r3, #24
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b4:	3301      	adds	r3, #1
 80091b6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f107 0214 	add.w	r2, r7, #20
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 f94f 	bl	800b466 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80091c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ca:	3301      	adds	r3, #1
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
 80091ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d0:	2b07      	cmp	r3, #7
 80091d2:	d9d0      	bls.n	8009176 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80091d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d6:	3b20      	subs	r3, #32
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80091da:	f7f8 fc05 	bl	80019e8 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d902      	bls.n	80091f0 <HAL_SD_WriteBlocks+0x1b4>
 80091ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d112      	bne.n	8009216 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a56      	ldr	r2, [pc, #344]	; (8009350 <HAL_SD_WriteBlocks+0x314>)
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091fe:	431a      	orrs	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e097      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009220:	2b00      	cmp	r3, #0
 8009222:	d09b      	beq.n	800915c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009232:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923e:	2b00      	cmp	r3, #0
 8009240:	d022      	beq.n	8009288 <HAL_SD_WriteBlocks+0x24c>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d91f      	bls.n	8009288 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	2b03      	cmp	r3, #3
 800924e:	d01b      	beq.n	8009288 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f002 fa5d 	bl	800b714 <SDMMC_CmdStopTransfer>
 800925a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800925c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800925e:	2b00      	cmp	r3, #0
 8009260:	d012      	beq.n	8009288 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a3a      	ldr	r2, [pc, #232]	; (8009350 <HAL_SD_WriteBlocks+0x314>)
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800926e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009270:	431a      	orrs	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e05e      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b00      	cmp	r3, #0
 8009294:	d012      	beq.n	80092bc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a2d      	ldr	r2, [pc, #180]	; (8009350 <HAL_SD_WriteBlocks+0x314>)
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	f043 0208 	orr.w	r2, r3, #8
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e044      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d012      	beq.n	80092f0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a20      	ldr	r2, [pc, #128]	; (8009350 <HAL_SD_WriteBlocks+0x314>)
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d6:	f043 0202 	orr.w	r2, r3, #2
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e02a      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d012      	beq.n	8009324 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a13      	ldr	r2, [pc, #76]	; (8009350 <HAL_SD_WriteBlocks+0x314>)
 8009304:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930a:	f043 0210 	orr.w	r2, r3, #16
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e010      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a0a      	ldr	r2, [pc, #40]	; (8009354 <HAL_SD_WriteBlocks+0x318>)
 800932a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	e006      	b.n	8009346 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3748      	adds	r7, #72	; 0x48
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	1fe00fff 	.word	0x1fe00fff
 8009354:	18000f3a 	.word	0x18000f3a

08009358 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009366:	0f9b      	lsrs	r3, r3, #30
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009372:	0e9b      	lsrs	r3, r3, #26
 8009374:	b2db      	uxtb	r3, r3
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	b2da      	uxtb	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009384:	0e1b      	lsrs	r3, r3, #24
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009396:	0c1b      	lsrs	r3, r3, #16
 8009398:	b2da      	uxtb	r2, r3
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b8:	0d1b      	lsrs	r3, r3, #20
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c4:	0c1b      	lsrs	r3, r3, #16
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 030f 	and.w	r3, r3, #15
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d6:	0bdb      	lsrs	r3, r3, #15
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e8:	0b9b      	lsrs	r3, r3, #14
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093fa:	0b5b      	lsrs	r3, r3, #13
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940c:	0b1b      	lsrs	r3, r3, #12
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2200      	movs	r2, #0
 800941e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d163      	bne.n	80094f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800942c:	009a      	lsls	r2, r3, #2
 800942e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009432:	4013      	ands	r3, r2
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009438:	0f92      	lsrs	r2, r2, #30
 800943a:	431a      	orrs	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009444:	0edb      	lsrs	r3, r3, #27
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	b2da      	uxtb	r2, r3
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009456:	0e1b      	lsrs	r3, r3, #24
 8009458:	b2db      	uxtb	r3, r3
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	b2da      	uxtb	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009468:	0d5b      	lsrs	r3, r3, #21
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	b2da      	uxtb	r2, r3
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800947a:	0c9b      	lsrs	r3, r3, #18
 800947c:	b2db      	uxtb	r3, r3
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	b2da      	uxtb	r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800948c:	0bdb      	lsrs	r3, r3, #15
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	b2da      	uxtb	r2, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	7e1b      	ldrb	r3, [r3, #24]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	3302      	adds	r3, #2
 80094b0:	2201      	movs	r2, #1
 80094b2:	fa02 f303 	lsl.w	r3, r2, r3
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094ba:	fb03 f202 	mul.w	r2, r3, r2
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	7a1b      	ldrb	r3, [r3, #8]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	2201      	movs	r2, #1
 80094ce:	409a      	lsls	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80094dc:	0a52      	lsrs	r2, r2, #9
 80094de:	fb03 f202 	mul.w	r2, r3, r2
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
 80094ee:	e031      	b.n	8009554 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d11d      	bne.n	8009534 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094fc:	041b      	lsls	r3, r3, #16
 80094fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	431a      	orrs	r2, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	3301      	adds	r3, #1
 8009514:	029a      	lsls	r2, r3, #10
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009528:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	655a      	str	r2, [r3, #84]	; 0x54
 8009532:	e00f      	b.n	8009554 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a58      	ldr	r2, [pc, #352]	; (800969c <HAL_SD_GetCardCSD+0x344>)
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e09d      	b.n	8009690 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009558:	0b9b      	lsrs	r3, r3, #14
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	b2da      	uxtb	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800956a:	09db      	lsrs	r3, r3, #7
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957c:	b2db      	uxtb	r3, r3
 800957e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009582:	b2da      	uxtb	r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800958c:	0fdb      	lsrs	r3, r3, #31
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009598:	0f5b      	lsrs	r3, r3, #29
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095aa:	0e9b      	lsrs	r3, r3, #26
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095bc:	0d9b      	lsrs	r3, r3, #22
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ce:	0d5b      	lsrs	r3, r3, #21
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ea:	0c1b      	lsrs	r3, r3, #16
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095fe:	0bdb      	lsrs	r3, r3, #15
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009612:	0b9b      	lsrs	r3, r3, #14
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009626:	0b5b      	lsrs	r3, r3, #13
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800963a:	0b1b      	lsrs	r3, r3, #12
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800964e:	0a9b      	lsrs	r3, r3, #10
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	b2da      	uxtb	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	b2da      	uxtb	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967e:	b2da      	uxtb	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	1fe00fff 	.word	0x1fe00fff

080096a0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b094      	sub	sp, #80	; 0x50
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d101      	bne.n	80096c0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e0a7      	b.n	8009810 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fb62 	bl	8009d90 <SD_SendSDStatus>
 80096cc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d011      	beq.n	80096f8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a4f      	ldr	r2, [pc, #316]	; (8009818 <HAL_SD_GetCardStatus+0x178>)
 80096da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80096f6:	e070      	b.n	80097da <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	099b      	lsrs	r3, r3, #6
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	b2da      	uxtb	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	b2da      	uxtb	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	b29b      	uxth	r3, r3
 800971e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009722:	b29a      	uxth	r2, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	b29b      	uxth	r3, r3
 800972a:	4313      	orrs	r3, r2
 800972c:	b29a      	uxth	r2, r3
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	061a      	lsls	r2, r3, #24
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	021b      	lsls	r3, r3, #8
 800973a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800973e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	0a1b      	lsrs	r3, r3, #8
 8009744:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009748:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	0e1b      	lsrs	r3, r3, #24
 800974e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	0a1b      	lsrs	r3, r3, #8
 8009760:	b2da      	uxtb	r2, r3
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	0d1b      	lsrs	r3, r3, #20
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 030f 	and.w	r3, r3, #15
 8009770:	b2da      	uxtb	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	0c1b      	lsrs	r3, r3, #16
 800977a:	b29b      	uxth	r3, r3
 800977c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009780:	b29a      	uxth	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	b29b      	uxth	r3, r3
 8009786:	b2db      	uxtb	r3, r3
 8009788:	b29b      	uxth	r3, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	0a9b      	lsrs	r3, r3, #10
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800979c:	b2da      	uxtb	r2, r3
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	091b      	lsrs	r3, r3, #4
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	0e1b      	lsrs	r3, r3, #24
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 fee6 	bl	800b5b4 <SDMMC_CmdBlockLength>
 80097e8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80097ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a08      	ldr	r2, [pc, #32]	; (8009818 <HAL_SD_GetCardStatus+0x178>)
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097fc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800980c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009810:	4618      	mov	r0, r3
 8009812:	3750      	adds	r7, #80	; 0x50
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	1fe00fff 	.word	0x1fe00fff

0800981c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009874:	b590      	push	{r4, r7, lr}
 8009876:	b08d      	sub	sp, #52	; 0x34
 8009878:	af02      	add	r7, sp, #8
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2203      	movs	r2, #3
 8009888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	2b03      	cmp	r3, #3
 8009892:	d02e      	beq.n	80098f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989a:	d106      	bne.n	80098aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	635a      	str	r2, [r3, #52]	; 0x34
 80098a8:	e029      	b.n	80098fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b0:	d10a      	bne.n	80098c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fb64 	bl	8009f80 <SD_WideBus_Enable>
 80098b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	635a      	str	r2, [r3, #52]	; 0x34
 80098c6:	e01a      	b.n	80098fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fba1 	bl	800a016 <SD_WideBus_Disable>
 80098d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	635a      	str	r2, [r3, #52]	; 0x34
 80098e2:	e00c      	b.n	80098fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	635a      	str	r2, [r3, #52]	; 0x34
 80098f0:	e005      	b.n	80098fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009902:	2b00      	cmp	r3, #0
 8009904:	d007      	beq.n	8009916 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a5f      	ldr	r2, [pc, #380]	; (8009a88 <HAL_SD_ConfigWideBusOperation+0x214>)
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009914:	e096      	b.n	8009a44 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009916:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800991a:	f04f 0100 	mov.w	r1, #0
 800991e:	f7fd fdef 	bl	8007500 <HAL_RCCEx_GetPeriphCLKFreq>
 8009922:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8083 	beq.w	8009a32 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695a      	ldr	r2, [r3, #20]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4950      	ldr	r1, [pc, #320]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800994a:	fba1 1303 	umull	r1, r3, r1, r3
 800994e:	0e1b      	lsrs	r3, r3, #24
 8009950:	429a      	cmp	r2, r3
 8009952:	d303      	bcc.n	800995c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	e05a      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009964:	d103      	bne.n	800996e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	61bb      	str	r3, [r7, #24]
 800996c:	e051      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009976:	d126      	bne.n	80099c6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10e      	bne.n	800999e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4a43      	ldr	r2, [pc, #268]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d906      	bls.n	8009996 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4a40      	ldr	r2, [pc, #256]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800998c:	fba2 2303 	umull	r2, r3, r2, r3
 8009990:	0e5b      	lsrs	r3, r3, #25
 8009992:	61bb      	str	r3, [r7, #24]
 8009994:	e03d      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	61bb      	str	r3, [r7, #24]
 800999c:	e039      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099aa:	4a39      	ldr	r2, [pc, #228]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d906      	bls.n	80099be <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4a36      	ldr	r2, [pc, #216]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x218>)
 80099b4:	fba2 2303 	umull	r2, r3, r2, r3
 80099b8:	0e5b      	lsrs	r3, r3, #25
 80099ba:	61bb      	str	r3, [r7, #24]
 80099bc:	e029      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	61bb      	str	r3, [r7, #24]
 80099c4:	e025      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10e      	bne.n	80099ec <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	4a30      	ldr	r2, [pc, #192]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d906      	bls.n	80099e4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	4a2c      	ldr	r2, [pc, #176]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x218>)
 80099da:	fba2 2303 	umull	r2, r3, r2, r3
 80099de:	0e1b      	lsrs	r3, r3, #24
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	e016      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	e012      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f8:	4a26      	ldr	r2, [pc, #152]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d906      	bls.n	8009a0c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	4a22      	ldr	r2, [pc, #136]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	0e1b      	lsrs	r3, r3, #24
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	e002      	b.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681c      	ldr	r4, [r3, #0]
 8009a16:	466a      	mov	r2, sp
 8009a18:	f107 0314 	add.w	r3, r7, #20
 8009a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a20:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f001 fce4 	bl	800b3f8 <SDMMC_Init>
 8009a30:	e008      	b.n	8009a44 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 fdb1 	bl	800b5b4 <SDMMC_CmdBlockLength>
 8009a52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00c      	beq.n	8009a74 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a0a      	ldr	r2, [pc, #40]	; (8009a88 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009a60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	372c      	adds	r7, #44	; 0x2c
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd90      	pop	{r4, r7, pc}
 8009a88:	1fe00fff 	.word	0x1fe00fff
 8009a8c:	55e63b89 	.word	0x55e63b89
 8009a90:	02faf080 	.word	0x02faf080
 8009a94:	017d7840 	.word	0x017d7840

08009a98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009aa4:	f107 030c 	add.w	r3, r7, #12
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa40 	bl	8009f30 <SD_SendStatus>
 8009ab0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	0a5b      	lsrs	r3, r3, #9
 8009ac8:	f003 030f 	and.w	r3, r3, #15
 8009acc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ace:	693b      	ldr	r3, [r7, #16]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b090      	sub	sp, #64	; 0x40
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009ae4:	f7f7 ff80 	bl	80019e8 <HAL_GetTick>
 8009ae8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 fcdb 	bl	800b4aa <SDMMC_GetPowerState>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009afa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009afe:	e0b5      	b.n	8009c6c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d02e      	beq.n	8009b66 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 ff26 	bl	800b95e <SDMMC_CmdSendCID>
 8009b12:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <SD_InitCard+0x46>
    {
      return errorstate;
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	e0a6      	b.n	8009c6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fd06 	bl	800b536 <SDMMC_GetResponse>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2104      	movs	r1, #4
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fcfd 	bl	800b536 <SDMMC_GetResponse>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2108      	movs	r1, #8
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f001 fcf4 	bl	800b536 <SDMMC_GetResponse>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	210c      	movs	r1, #12
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 fceb 	bl	800b536 <SDMMC_GetResponse>
 8009b60:	4602      	mov	r2, r0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d01d      	beq.n	8009baa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009b6e:	e019      	b.n	8009ba4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f107 020a 	add.w	r2, r7, #10
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 ff2e 	bl	800b9dc <SDMMC_CmdSetRelAdd>
 8009b80:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <SD_InitCard+0xb4>
      {
        return errorstate;
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	e06f      	b.n	8009c6c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b8c:	f7f7 ff2c 	bl	80019e8 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f241 3287 	movw	r2, #4999	; 0x1387
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d902      	bls.n	8009ba4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009b9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ba2:	e063      	b.n	8009c6c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009ba4:	897b      	ldrh	r3, [r7, #10]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0e2      	beq.n	8009b70 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d036      	beq.n	8009c20 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bb2:	897b      	ldrh	r3, [r7, #10]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	041b      	lsls	r3, r3, #16
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f001 fee8 	bl	800b99c <SDMMC_CmdSendCSD>
 8009bcc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <SD_InitCard+0x100>
    {
      return errorstate;
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	e049      	b.n	8009c6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 fca9 	bl	800b536 <SDMMC_GetResponse>
 8009be4:	4602      	mov	r2, r0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2104      	movs	r1, #4
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 fca0 	bl	800b536 <SDMMC_GetResponse>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2108      	movs	r1, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 fc97 	bl	800b536 <SDMMC_GetResponse>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	210c      	movs	r1, #12
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 fc8e 	bl	800b536 <SDMMC_GetResponse>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2104      	movs	r1, #4
 8009c26:	4618      	mov	r0, r3
 8009c28:	f001 fc85 	bl	800b536 <SDMMC_GetResponse>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	0d1a      	lsrs	r2, r3, #20
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c34:	f107 030c 	add.w	r3, r7, #12
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fb8c 	bl	8009358 <HAL_SD_GetCardCSD>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c4a:	e00f      	b.n	8009c6c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f001 fd97 	bl	800b78c <SDMMC_CmdSelDesel>
 8009c5e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <SD_InitCard+0x192>
  {
    return errorstate;
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	e000      	b.n	8009c6c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3740      	adds	r7, #64	; 0x40
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 fda0 	bl	800b7d2 <SDMMC_CmdGoIdleState>
 8009c92:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	e072      	b.n	8009d84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f001 fdb3 	bl	800b80e <SDMMC_CmdOperCond>
 8009ca8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cb0:	d10d      	bne.n	8009cce <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 fd88 	bl	800b7d2 <SDMMC_CmdGoIdleState>
 8009cc2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <SD_PowerON+0x60>
    {
      return errorstate;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	e05a      	b.n	8009d84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d137      	bne.n	8009d4c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fdb3 	bl	800b84e <SDMMC_CmdAppCommand>
 8009ce8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d02d      	beq.n	8009d4c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cf4:	e046      	b.n	8009d84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fda6 	bl	800b84e <SDMMC_CmdAppCommand>
 8009d02:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <SD_PowerON+0x9a>
    {
      return errorstate;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	e03a      	b.n	8009d84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	491e      	ldr	r1, [pc, #120]	; (8009d8c <SD_PowerON+0x118>)
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 fdbd 	bl	800b894 <SDMMC_CmdAppOperCommand>
 8009d1a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d26:	e02d      	b.n	8009d84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fc01 	bl	800b536 <SDMMC_GetResponse>
 8009d34:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	0fdb      	lsrs	r3, r3, #31
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <SD_PowerON+0xce>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e000      	b.n	8009d44 <SD_PowerON+0xd0>
 8009d42:	2300      	movs	r3, #0
 8009d44:	613b      	str	r3, [r7, #16]

    count++;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d802      	bhi.n	8009d5c <SD_PowerON+0xe8>
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0cc      	beq.n	8009cf6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d902      	bls.n	8009d6c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d6a:	e00b      	b.n	8009d84 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	c1100000 	.word	0xc1100000

08009d90 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08c      	sub	sp, #48	; 0x30
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d9a:	f7f7 fe25 	bl	80019e8 <HAL_GetTick>
 8009d9e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 fbc3 	bl	800b536 <SDMMC_GetResponse>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dba:	d102      	bne.n	8009dc2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc0:	e0b0      	b.n	8009f24 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2140      	movs	r1, #64	; 0x40
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 fbf3 	bl	800b5b4 <SDMMC_CmdBlockLength>
 8009dce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	e0a0      	b.n	8009f24 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dea:	041b      	lsls	r3, r3, #16
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f001 fd2d 	bl	800b84e <SDMMC_CmdAppCommand>
 8009df4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d005      	beq.n	8009e08 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	e08d      	b.n	8009f24 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009e12:	2360      	movs	r3, #96	; 0x60
 8009e14:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e16:	2302      	movs	r3, #2
 8009e18:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f107 0208 	add.w	r2, r7, #8
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 fb95 	bl	800b55c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f001 fe15 	bl	800ba66 <SDMMC_CmdStatusRegister>
 8009e3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d02b      	beq.n	8009e9c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	e069      	b.n	8009f24 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d013      	beq.n	8009e86 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009e5e:	2300      	movs	r3, #0
 8009e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e62:	e00d      	b.n	8009e80 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f001 faef 	bl	800b44c <SDMMC_ReadFIFO>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	601a      	str	r2, [r3, #0]
        pData++;
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	3304      	adds	r3, #4
 8009e78:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	2b07      	cmp	r3, #7
 8009e84:	d9ee      	bls.n	8009e64 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e86:	f7f7 fdaf 	bl	80019e8 <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	d102      	bne.n	8009e9c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e9a:	e043      	b.n	8009f24 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0d2      	beq.n	8009e50 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009eb8:	2308      	movs	r3, #8
 8009eba:	e033      	b.n	8009f24 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e02a      	b.n	8009f24 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d017      	beq.n	8009f0c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009edc:	2320      	movs	r3, #32
 8009ede:	e021      	b.n	8009f24 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 fab1 	bl	800b44c <SDMMC_ReadFIFO>
 8009eea:	4602      	mov	r2, r0
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	601a      	str	r2, [r3, #0]
    pData++;
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ef6:	f7f7 fd77 	bl	80019e8 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d102      	bne.n	8009f0c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f0a:	e00b      	b.n	8009f24 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e2      	bne.n	8009ee0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a03      	ldr	r2, [pc, #12]	; (8009f2c <SD_SendSDStatus+0x19c>)
 8009f20:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3730      	adds	r7, #48	; 0x30
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	18000f3a 	.word	0x18000f3a

08009f30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f44:	e018      	b.n	8009f78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4e:	041b      	lsls	r3, r3, #16
 8009f50:	4619      	mov	r1, r3
 8009f52:	4610      	mov	r0, r2
 8009f54:	f001 fd64 	bl	800ba20 <SDMMC_CmdSendStatus>
 8009f58:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	e009      	b.n	8009f78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 fae3 	bl	800b536 <SDMMC_GetResponse>
 8009f70:	4602      	mov	r2, r0
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2100      	movs	r1, #0
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 facd 	bl	800b536 <SDMMC_GetResponse>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fa6:	d102      	bne.n	8009fae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fac:	e02f      	b.n	800a00e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fae:	f107 030c 	add.w	r3, r7, #12
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f879 	bl	800a0ac <SD_FindSCR>
 8009fba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	e023      	b.n	800a00e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01c      	beq.n	800a00a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4610      	mov	r0, r2
 8009fde:	f001 fc36 	bl	800b84e <SDMMC_CmdAppCommand>
 8009fe2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	e00f      	b.n	800a00e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fc6d 	bl	800b8d4 <SDMMC_CmdBusWidth>
 8009ffa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	e003      	b.n	800a00e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a006:	2300      	movs	r3, #0
 800a008:	e001      	b.n	800a00e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a00a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b086      	sub	sp, #24
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	2300      	movs	r3, #0
 800a024:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2100      	movs	r1, #0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 fa82 	bl	800b536 <SDMMC_GetResponse>
 800a032:	4603      	mov	r3, r0
 800a034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a03c:	d102      	bne.n	800a044 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a03e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a042:	e02f      	b.n	800a0a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a044:	f107 030c 	add.w	r3, r7, #12
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f82e 	bl	800a0ac <SD_FindSCR>
 800a050:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	e023      	b.n	800a0a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01c      	beq.n	800a0a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a06e:	041b      	lsls	r3, r3, #16
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f001 fbeb 	bl	800b84e <SDMMC_CmdAppCommand>
 800a078:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	e00f      	b.n	800a0a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2100      	movs	r1, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 fc22 	bl	800b8d4 <SDMMC_CmdBusWidth>
 800a090:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	e003      	b.n	800a0a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a09c:	2300      	movs	r3, #0
 800a09e:	e001      	b.n	800a0a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08e      	sub	sp, #56	; 0x38
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0b6:	f7f7 fc97 	bl	80019e8 <HAL_GetTick>
 800a0ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60bb      	str	r3, [r7, #8]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2108      	movs	r1, #8
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f001 fa6e 	bl	800b5b4 <SDMMC_CmdBlockLength>
 800a0d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	e0ad      	b.n	800a240 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ec:	041b      	lsls	r3, r3, #16
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	f001 fbac 	bl	800b84e <SDMMC_CmdAppCommand>
 800a0f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	e09e      	b.n	800a240 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a102:	f04f 33ff 	mov.w	r3, #4294967295
 800a106:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a108:	2308      	movs	r3, #8
 800a10a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a10c:	2330      	movs	r3, #48	; 0x30
 800a10e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a110:	2302      	movs	r3, #2
 800a112:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a114:	2300      	movs	r3, #0
 800a116:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a118:	2301      	movs	r3, #1
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f107 0210 	add.w	r2, r7, #16
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f001 fa18 	bl	800b55c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4618      	mov	r0, r3
 800a132:	f001 fbf2 	bl	800b91a <SDMMC_CmdSendSCR>
 800a136:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d027      	beq.n	800a18e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	e07e      	b.n	800a240 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d113      	bne.n	800a178 <SD_FindSCR+0xcc>
 800a150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a152:	2b00      	cmp	r3, #0
 800a154:	d110      	bne.n	800a178 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 f976 	bl	800b44c <SDMMC_ReadFIFO>
 800a160:	4603      	mov	r3, r0
 800a162:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 f96f 	bl	800b44c <SDMMC_ReadFIFO>
 800a16e:	4603      	mov	r3, r0
 800a170:	60fb      	str	r3, [r7, #12]
      index++;
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	3301      	adds	r3, #1
 800a176:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a178:	f7f7 fc36 	bl	80019e8 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a186:	d102      	bne.n	800a18e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a18c:	e058      	b.n	800a240 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a194:	f240 532a 	movw	r3, #1322	; 0x52a
 800a198:	4013      	ands	r3, r2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0d1      	beq.n	800a142 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a4:	f003 0308 	and.w	r3, r3, #8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d005      	beq.n	800a1b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2208      	movs	r2, #8
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1b4:	2308      	movs	r3, #8
 800a1b6:	e043      	b.n	800a240 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e036      	b.n	800a240 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	f003 0320 	and.w	r3, r3, #32
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	e029      	b.n	800a240 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a15      	ldr	r2, [pc, #84]	; (800a248 <SD_FindSCR+0x19c>)
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	061a      	lsls	r2, r3, #24
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a200:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	0a1b      	lsrs	r3, r3, #8
 800a206:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a20a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	0e1b      	lsrs	r3, r3, #24
 800a210:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	601a      	str	r2, [r3, #0]
    scr++;
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	3304      	adds	r3, #4
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	061a      	lsls	r2, r3, #24
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a228:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a232:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	0e1b      	lsrs	r3, r3, #24
 800a238:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3738      	adds	r7, #56	; 0x38
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	18000f3a 	.word	0x18000f3a

0800a24c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e042      	b.n	800a2e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a264:	2b00      	cmp	r3, #0
 800a266:	d106      	bne.n	800a276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7f7 fa25 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2224      	movs	r2, #36	; 0x24
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 0201 	bic.w	r2, r2, #1
 800a28c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f82c 	bl	800a2ec <UART_SetConfig>
 800a294:	4603      	mov	r3, r0
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e022      	b.n	800a2e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fd88 	bl	800adbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f042 0201 	orr.w	r2, r2, #1
 800a2da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fe0f 	bl	800af00 <UART_CheckIdleState>
 800a2e2:	4603      	mov	r3, r0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2f0:	b092      	sub	sp, #72	; 0x48
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	431a      	orrs	r2, r3
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	4313      	orrs	r3, r2
 800a312:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4bbe      	ldr	r3, [pc, #760]	; (800a614 <UART_SetConfig+0x328>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a324:	430b      	orrs	r3, r1
 800a326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4ab3      	ldr	r2, [pc, #716]	; (800a618 <UART_SetConfig+0x32c>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d004      	beq.n	800a358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a354:	4313      	orrs	r3, r2
 800a356:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	4baf      	ldr	r3, [pc, #700]	; (800a61c <UART_SetConfig+0x330>)
 800a360:	4013      	ands	r3, r2
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	6812      	ldr	r2, [r2, #0]
 800a366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a368:	430b      	orrs	r3, r1
 800a36a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	f023 010f 	bic.w	r1, r3, #15
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4aa6      	ldr	r2, [pc, #664]	; (800a620 <UART_SetConfig+0x334>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d177      	bne.n	800a47c <UART_SetConfig+0x190>
 800a38c:	4ba5      	ldr	r3, [pc, #660]	; (800a624 <UART_SetConfig+0x338>)
 800a38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a394:	2b28      	cmp	r3, #40	; 0x28
 800a396:	d86d      	bhi.n	800a474 <UART_SetConfig+0x188>
 800a398:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <UART_SetConfig+0xb4>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a445 	.word	0x0800a445
 800a3a4:	0800a475 	.word	0x0800a475
 800a3a8:	0800a475 	.word	0x0800a475
 800a3ac:	0800a475 	.word	0x0800a475
 800a3b0:	0800a475 	.word	0x0800a475
 800a3b4:	0800a475 	.word	0x0800a475
 800a3b8:	0800a475 	.word	0x0800a475
 800a3bc:	0800a475 	.word	0x0800a475
 800a3c0:	0800a44d 	.word	0x0800a44d
 800a3c4:	0800a475 	.word	0x0800a475
 800a3c8:	0800a475 	.word	0x0800a475
 800a3cc:	0800a475 	.word	0x0800a475
 800a3d0:	0800a475 	.word	0x0800a475
 800a3d4:	0800a475 	.word	0x0800a475
 800a3d8:	0800a475 	.word	0x0800a475
 800a3dc:	0800a475 	.word	0x0800a475
 800a3e0:	0800a455 	.word	0x0800a455
 800a3e4:	0800a475 	.word	0x0800a475
 800a3e8:	0800a475 	.word	0x0800a475
 800a3ec:	0800a475 	.word	0x0800a475
 800a3f0:	0800a475 	.word	0x0800a475
 800a3f4:	0800a475 	.word	0x0800a475
 800a3f8:	0800a475 	.word	0x0800a475
 800a3fc:	0800a475 	.word	0x0800a475
 800a400:	0800a45d 	.word	0x0800a45d
 800a404:	0800a475 	.word	0x0800a475
 800a408:	0800a475 	.word	0x0800a475
 800a40c:	0800a475 	.word	0x0800a475
 800a410:	0800a475 	.word	0x0800a475
 800a414:	0800a475 	.word	0x0800a475
 800a418:	0800a475 	.word	0x0800a475
 800a41c:	0800a475 	.word	0x0800a475
 800a420:	0800a465 	.word	0x0800a465
 800a424:	0800a475 	.word	0x0800a475
 800a428:	0800a475 	.word	0x0800a475
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a475 	.word	0x0800a475
 800a438:	0800a475 	.word	0x0800a475
 800a43c:	0800a475 	.word	0x0800a475
 800a440:	0800a46d 	.word	0x0800a46d
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e222      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a44c:	2304      	movs	r3, #4
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e21e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a454:	2308      	movs	r3, #8
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e21a      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a45c:	2310      	movs	r3, #16
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e216      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a464:	2320      	movs	r3, #32
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e212      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a46c:	2340      	movs	r3, #64	; 0x40
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e20e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a474:	2380      	movs	r3, #128	; 0x80
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e20a      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a69      	ldr	r2, [pc, #420]	; (800a628 <UART_SetConfig+0x33c>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d130      	bne.n	800a4e8 <UART_SetConfig+0x1fc>
 800a486:	4b67      	ldr	r3, [pc, #412]	; (800a624 <UART_SetConfig+0x338>)
 800a488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d826      	bhi.n	800a4e0 <UART_SetConfig+0x1f4>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <UART_SetConfig+0x1ac>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4b1 	.word	0x0800a4b1
 800a49c:	0800a4b9 	.word	0x0800a4b9
 800a4a0:	0800a4c1 	.word	0x0800a4c1
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a4d1 	.word	0x0800a4d1
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b6:	e1ec      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4be:	e1e8      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c6:	e1e4      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ce:	e1e0      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d6:	e1dc      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4d8:	2340      	movs	r3, #64	; 0x40
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e1d8      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4e0:	2380      	movs	r3, #128	; 0x80
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e6:	e1d4      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a4f      	ldr	r2, [pc, #316]	; (800a62c <UART_SetConfig+0x340>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d130      	bne.n	800a554 <UART_SetConfig+0x268>
 800a4f2:	4b4c      	ldr	r3, [pc, #304]	; (800a624 <UART_SetConfig+0x338>)
 800a4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d826      	bhi.n	800a54c <UART_SetConfig+0x260>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <UART_SetConfig+0x218>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a51d 	.word	0x0800a51d
 800a508:	0800a525 	.word	0x0800a525
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	2300      	movs	r3, #0
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a522:	e1b6      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a524:	2304      	movs	r3, #4
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52a:	e1b2      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a52c:	2308      	movs	r3, #8
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a532:	e1ae      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a534:	2310      	movs	r3, #16
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53a:	e1aa      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a53c:	2320      	movs	r3, #32
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a542:	e1a6      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a544:	2340      	movs	r3, #64	; 0x40
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54a:	e1a2      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a54c:	2380      	movs	r3, #128	; 0x80
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a552:	e19e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a35      	ldr	r2, [pc, #212]	; (800a630 <UART_SetConfig+0x344>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d130      	bne.n	800a5c0 <UART_SetConfig+0x2d4>
 800a55e:	4b31      	ldr	r3, [pc, #196]	; (800a624 <UART_SetConfig+0x338>)
 800a560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b05      	cmp	r3, #5
 800a568:	d826      	bhi.n	800a5b8 <UART_SetConfig+0x2cc>
 800a56a:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <UART_SetConfig+0x284>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a589 	.word	0x0800a589
 800a574:	0800a591 	.word	0x0800a591
 800a578:	0800a599 	.word	0x0800a599
 800a57c:	0800a5a1 	.word	0x0800a5a1
 800a580:	0800a5a9 	.word	0x0800a5a9
 800a584:	0800a5b1 	.word	0x0800a5b1
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58e:	e180      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a590:	2304      	movs	r3, #4
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a596:	e17c      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a598:	2308      	movs	r3, #8
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59e:	e178      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a6:	e174      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ae:	e170      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5b6:	e16c      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a5b8:	2380      	movs	r3, #128	; 0x80
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5be:	e168      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1b      	ldr	r2, [pc, #108]	; (800a634 <UART_SetConfig+0x348>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d142      	bne.n	800a650 <UART_SetConfig+0x364>
 800a5ca:	4b16      	ldr	r3, [pc, #88]	; (800a624 <UART_SetConfig+0x338>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d838      	bhi.n	800a648 <UART_SetConfig+0x35c>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <UART_SetConfig+0x2f0>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5f5 	.word	0x0800a5f5
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a605 	.word	0x0800a605
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a639 	.word	0x0800a639
 800a5f0:	0800a641 	.word	0x0800a641
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fa:	e14a      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a602:	e146      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60a:	e142      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a612:	e13e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a614:	cfff69f3 	.word	0xcfff69f3
 800a618:	58000c00 	.word	0x58000c00
 800a61c:	11fff4ff 	.word	0x11fff4ff
 800a620:	40011000 	.word	0x40011000
 800a624:	58024400 	.word	0x58024400
 800a628:	40004400 	.word	0x40004400
 800a62c:	40004800 	.word	0x40004800
 800a630:	40004c00 	.word	0x40004c00
 800a634:	40005000 	.word	0x40005000
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e128      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e124      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a648:	2380      	movs	r3, #128	; 0x80
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e120      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4acb      	ldr	r2, [pc, #812]	; (800a984 <UART_SetConfig+0x698>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d176      	bne.n	800a748 <UART_SetConfig+0x45c>
 800a65a:	4bcb      	ldr	r3, [pc, #812]	; (800a988 <UART_SetConfig+0x69c>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a662:	2b28      	cmp	r3, #40	; 0x28
 800a664:	d86c      	bhi.n	800a740 <UART_SetConfig+0x454>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <UART_SetConfig+0x380>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a711 	.word	0x0800a711
 800a670:	0800a741 	.word	0x0800a741
 800a674:	0800a741 	.word	0x0800a741
 800a678:	0800a741 	.word	0x0800a741
 800a67c:	0800a741 	.word	0x0800a741
 800a680:	0800a741 	.word	0x0800a741
 800a684:	0800a741 	.word	0x0800a741
 800a688:	0800a741 	.word	0x0800a741
 800a68c:	0800a719 	.word	0x0800a719
 800a690:	0800a741 	.word	0x0800a741
 800a694:	0800a741 	.word	0x0800a741
 800a698:	0800a741 	.word	0x0800a741
 800a69c:	0800a741 	.word	0x0800a741
 800a6a0:	0800a741 	.word	0x0800a741
 800a6a4:	0800a741 	.word	0x0800a741
 800a6a8:	0800a741 	.word	0x0800a741
 800a6ac:	0800a721 	.word	0x0800a721
 800a6b0:	0800a741 	.word	0x0800a741
 800a6b4:	0800a741 	.word	0x0800a741
 800a6b8:	0800a741 	.word	0x0800a741
 800a6bc:	0800a741 	.word	0x0800a741
 800a6c0:	0800a741 	.word	0x0800a741
 800a6c4:	0800a741 	.word	0x0800a741
 800a6c8:	0800a741 	.word	0x0800a741
 800a6cc:	0800a729 	.word	0x0800a729
 800a6d0:	0800a741 	.word	0x0800a741
 800a6d4:	0800a741 	.word	0x0800a741
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a741 	.word	0x0800a741
 800a6e0:	0800a741 	.word	0x0800a741
 800a6e4:	0800a741 	.word	0x0800a741
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a731 	.word	0x0800a731
 800a6f0:	0800a741 	.word	0x0800a741
 800a6f4:	0800a741 	.word	0x0800a741
 800a6f8:	0800a741 	.word	0x0800a741
 800a6fc:	0800a741 	.word	0x0800a741
 800a700:	0800a741 	.word	0x0800a741
 800a704:	0800a741 	.word	0x0800a741
 800a708:	0800a741 	.word	0x0800a741
 800a70c:	0800a739 	.word	0x0800a739
 800a710:	2301      	movs	r3, #1
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a716:	e0bc      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a718:	2304      	movs	r3, #4
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71e:	e0b8      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a720:	2308      	movs	r3, #8
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a726:	e0b4      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a728:	2310      	movs	r3, #16
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72e:	e0b0      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a730:	2320      	movs	r3, #32
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a736:	e0ac      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a738:	2340      	movs	r3, #64	; 0x40
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73e:	e0a8      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a740:	2380      	movs	r3, #128	; 0x80
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a746:	e0a4      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a8f      	ldr	r2, [pc, #572]	; (800a98c <UART_SetConfig+0x6a0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d130      	bne.n	800a7b4 <UART_SetConfig+0x4c8>
 800a752:	4b8d      	ldr	r3, [pc, #564]	; (800a988 <UART_SetConfig+0x69c>)
 800a754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	d826      	bhi.n	800a7ac <UART_SetConfig+0x4c0>
 800a75e:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <UART_SetConfig+0x478>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a77d 	.word	0x0800a77d
 800a768:	0800a785 	.word	0x0800a785
 800a76c:	0800a78d 	.word	0x0800a78d
 800a770:	0800a795 	.word	0x0800a795
 800a774:	0800a79d 	.word	0x0800a79d
 800a778:	0800a7a5 	.word	0x0800a7a5
 800a77c:	2300      	movs	r3, #0
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a782:	e086      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a784:	2304      	movs	r3, #4
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78a:	e082      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a78c:	2308      	movs	r3, #8
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a792:	e07e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a794:	2310      	movs	r3, #16
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79a:	e07a      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a79c:	2320      	movs	r3, #32
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a2:	e076      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a7a4:	2340      	movs	r3, #64	; 0x40
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7aa:	e072      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b2:	e06e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a75      	ldr	r2, [pc, #468]	; (800a990 <UART_SetConfig+0x6a4>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d130      	bne.n	800a820 <UART_SetConfig+0x534>
 800a7be:	4b72      	ldr	r3, [pc, #456]	; (800a988 <UART_SetConfig+0x69c>)
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	2b05      	cmp	r3, #5
 800a7c8:	d826      	bhi.n	800a818 <UART_SetConfig+0x52c>
 800a7ca:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <UART_SetConfig+0x4e4>)
 800a7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d0:	0800a7e9 	.word	0x0800a7e9
 800a7d4:	0800a7f1 	.word	0x0800a7f1
 800a7d8:	0800a7f9 	.word	0x0800a7f9
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a811 	.word	0x0800a811
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ee:	e050      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f6:	e04c      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fe:	e048      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a800:	2310      	movs	r3, #16
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a806:	e044      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a808:	2320      	movs	r3, #32
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80e:	e040      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a810:	2340      	movs	r3, #64	; 0x40
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a816:	e03c      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a818:	2380      	movs	r3, #128	; 0x80
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81e:	e038      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a5b      	ldr	r2, [pc, #364]	; (800a994 <UART_SetConfig+0x6a8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d130      	bne.n	800a88c <UART_SetConfig+0x5a0>
 800a82a:	4b57      	ldr	r3, [pc, #348]	; (800a988 <UART_SetConfig+0x69c>)
 800a82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	2b05      	cmp	r3, #5
 800a834:	d826      	bhi.n	800a884 <UART_SetConfig+0x598>
 800a836:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <UART_SetConfig+0x550>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a855 	.word	0x0800a855
 800a840:	0800a85d 	.word	0x0800a85d
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a86d 	.word	0x0800a86d
 800a84c:	0800a875 	.word	0x0800a875
 800a850:	0800a87d 	.word	0x0800a87d
 800a854:	2302      	movs	r3, #2
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85a:	e01a      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a85c:	2304      	movs	r3, #4
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e016      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a864:	2308      	movs	r3, #8
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e012      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a86c:	2310      	movs	r3, #16
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e00e      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a874:	2320      	movs	r3, #32
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87a:	e00a      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a87c:	2340      	movs	r3, #64	; 0x40
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a882:	e006      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a884:	2380      	movs	r3, #128	; 0x80
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88a:	e002      	b.n	800a892 <UART_SetConfig+0x5a6>
 800a88c:	2380      	movs	r3, #128	; 0x80
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a3f      	ldr	r2, [pc, #252]	; (800a994 <UART_SetConfig+0x6a8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	f040 80f8 	bne.w	800aa8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a89e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	dc46      	bgt.n	800a934 <UART_SetConfig+0x648>
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	f2c0 8082 	blt.w	800a9b0 <UART_SetConfig+0x6c4>
 800a8ac:	3b02      	subs	r3, #2
 800a8ae:	2b1e      	cmp	r3, #30
 800a8b0:	d87e      	bhi.n	800a9b0 <UART_SetConfig+0x6c4>
 800a8b2:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <UART_SetConfig+0x5cc>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a93b 	.word	0x0800a93b
 800a8bc:	0800a9b1 	.word	0x0800a9b1
 800a8c0:	0800a943 	.word	0x0800a943
 800a8c4:	0800a9b1 	.word	0x0800a9b1
 800a8c8:	0800a9b1 	.word	0x0800a9b1
 800a8cc:	0800a9b1 	.word	0x0800a9b1
 800a8d0:	0800a953 	.word	0x0800a953
 800a8d4:	0800a9b1 	.word	0x0800a9b1
 800a8d8:	0800a9b1 	.word	0x0800a9b1
 800a8dc:	0800a9b1 	.word	0x0800a9b1
 800a8e0:	0800a9b1 	.word	0x0800a9b1
 800a8e4:	0800a9b1 	.word	0x0800a9b1
 800a8e8:	0800a9b1 	.word	0x0800a9b1
 800a8ec:	0800a9b1 	.word	0x0800a9b1
 800a8f0:	0800a963 	.word	0x0800a963
 800a8f4:	0800a9b1 	.word	0x0800a9b1
 800a8f8:	0800a9b1 	.word	0x0800a9b1
 800a8fc:	0800a9b1 	.word	0x0800a9b1
 800a900:	0800a9b1 	.word	0x0800a9b1
 800a904:	0800a9b1 	.word	0x0800a9b1
 800a908:	0800a9b1 	.word	0x0800a9b1
 800a90c:	0800a9b1 	.word	0x0800a9b1
 800a910:	0800a9b1 	.word	0x0800a9b1
 800a914:	0800a9b1 	.word	0x0800a9b1
 800a918:	0800a9b1 	.word	0x0800a9b1
 800a91c:	0800a9b1 	.word	0x0800a9b1
 800a920:	0800a9b1 	.word	0x0800a9b1
 800a924:	0800a9b1 	.word	0x0800a9b1
 800a928:	0800a9b1 	.word	0x0800a9b1
 800a92c:	0800a9b1 	.word	0x0800a9b1
 800a930:	0800a9a3 	.word	0x0800a9a3
 800a934:	2b40      	cmp	r3, #64	; 0x40
 800a936:	d037      	beq.n	800a9a8 <UART_SetConfig+0x6bc>
 800a938:	e03a      	b.n	800a9b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a93a:	f7fd fb61 	bl	8008000 <HAL_RCCEx_GetD3PCLK1Freq>
 800a93e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a940:	e03c      	b.n	800a9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a946:	4618      	mov	r0, r3
 800a948:	f7fd fb70 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a950:	e034      	b.n	800a9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a952:	f107 0318 	add.w	r3, r7, #24
 800a956:	4618      	mov	r0, r3
 800a958:	f7fd fcbc 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a960:	e02c      	b.n	800a9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <UART_SetConfig+0x69c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0320 	and.w	r3, r3, #32
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a96e:	4b06      	ldr	r3, [pc, #24]	; (800a988 <UART_SetConfig+0x69c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	08db      	lsrs	r3, r3, #3
 800a974:	f003 0303 	and.w	r3, r3, #3
 800a978:	4a07      	ldr	r2, [pc, #28]	; (800a998 <UART_SetConfig+0x6ac>)
 800a97a:	fa22 f303 	lsr.w	r3, r2, r3
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a980:	e01c      	b.n	800a9bc <UART_SetConfig+0x6d0>
 800a982:	bf00      	nop
 800a984:	40011400 	.word	0x40011400
 800a988:	58024400 	.word	0x58024400
 800a98c:	40007800 	.word	0x40007800
 800a990:	40007c00 	.word	0x40007c00
 800a994:	58000c00 	.word	0x58000c00
 800a998:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a99c:	4b9d      	ldr	r3, [pc, #628]	; (800ac14 <UART_SetConfig+0x928>)
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a0:	e00c      	b.n	800a9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9a2:	4b9d      	ldr	r3, [pc, #628]	; (800ac18 <UART_SetConfig+0x92c>)
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a6:	e009      	b.n	800a9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ae:	e005      	b.n	800a9bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a9ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 81de 	beq.w	800ad80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	4a94      	ldr	r2, [pc, #592]	; (800ac1c <UART_SetConfig+0x930>)
 800a9ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	005b      	lsls	r3, r3, #1
 800a9e0:	4413      	add	r3, r2
 800a9e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d305      	bcc.n	800a9f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d903      	bls.n	800a9fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9fa:	e1c1      	b.n	800ad80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fe:	2200      	movs	r2, #0
 800aa00:	60bb      	str	r3, [r7, #8]
 800aa02:	60fa      	str	r2, [r7, #12]
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	4a84      	ldr	r2, [pc, #528]	; (800ac1c <UART_SetConfig+0x930>)
 800aa0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	2200      	movs	r2, #0
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa1e:	f7f5 fc5b 	bl	80002d8 <__aeabi_uldivmod>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4610      	mov	r0, r2
 800aa28:	4619      	mov	r1, r3
 800aa2a:	f04f 0200 	mov.w	r2, #0
 800aa2e:	f04f 0300 	mov.w	r3, #0
 800aa32:	020b      	lsls	r3, r1, #8
 800aa34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa38:	0202      	lsls	r2, r0, #8
 800aa3a:	6979      	ldr	r1, [r7, #20]
 800aa3c:	6849      	ldr	r1, [r1, #4]
 800aa3e:	0849      	lsrs	r1, r1, #1
 800aa40:	2000      	movs	r0, #0
 800aa42:	460c      	mov	r4, r1
 800aa44:	4605      	mov	r5, r0
 800aa46:	eb12 0804 	adds.w	r8, r2, r4
 800aa4a:	eb43 0905 	adc.w	r9, r3, r5
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	469a      	mov	sl, r3
 800aa56:	4693      	mov	fp, r2
 800aa58:	4652      	mov	r2, sl
 800aa5a:	465b      	mov	r3, fp
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	4649      	mov	r1, r9
 800aa60:	f7f5 fc3a 	bl	80002d8 <__aeabi_uldivmod>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4613      	mov	r3, r2
 800aa6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa72:	d308      	bcc.n	800aa86 <UART_SetConfig+0x79a>
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa7a:	d204      	bcs.n	800aa86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa82:	60da      	str	r2, [r3, #12]
 800aa84:	e17c      	b.n	800ad80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa8c:	e178      	b.n	800ad80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa96:	f040 80c5 	bne.w	800ac24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa9e:	2b20      	cmp	r3, #32
 800aaa0:	dc48      	bgt.n	800ab34 <UART_SetConfig+0x848>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	db7b      	blt.n	800ab9e <UART_SetConfig+0x8b2>
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d879      	bhi.n	800ab9e <UART_SetConfig+0x8b2>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <UART_SetConfig+0x7c4>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800ab3b 	.word	0x0800ab3b
 800aab4:	0800ab43 	.word	0x0800ab43
 800aab8:	0800ab9f 	.word	0x0800ab9f
 800aabc:	0800ab9f 	.word	0x0800ab9f
 800aac0:	0800ab4b 	.word	0x0800ab4b
 800aac4:	0800ab9f 	.word	0x0800ab9f
 800aac8:	0800ab9f 	.word	0x0800ab9f
 800aacc:	0800ab9f 	.word	0x0800ab9f
 800aad0:	0800ab5b 	.word	0x0800ab5b
 800aad4:	0800ab9f 	.word	0x0800ab9f
 800aad8:	0800ab9f 	.word	0x0800ab9f
 800aadc:	0800ab9f 	.word	0x0800ab9f
 800aae0:	0800ab9f 	.word	0x0800ab9f
 800aae4:	0800ab9f 	.word	0x0800ab9f
 800aae8:	0800ab9f 	.word	0x0800ab9f
 800aaec:	0800ab9f 	.word	0x0800ab9f
 800aaf0:	0800ab6b 	.word	0x0800ab6b
 800aaf4:	0800ab9f 	.word	0x0800ab9f
 800aaf8:	0800ab9f 	.word	0x0800ab9f
 800aafc:	0800ab9f 	.word	0x0800ab9f
 800ab00:	0800ab9f 	.word	0x0800ab9f
 800ab04:	0800ab9f 	.word	0x0800ab9f
 800ab08:	0800ab9f 	.word	0x0800ab9f
 800ab0c:	0800ab9f 	.word	0x0800ab9f
 800ab10:	0800ab9f 	.word	0x0800ab9f
 800ab14:	0800ab9f 	.word	0x0800ab9f
 800ab18:	0800ab9f 	.word	0x0800ab9f
 800ab1c:	0800ab9f 	.word	0x0800ab9f
 800ab20:	0800ab9f 	.word	0x0800ab9f
 800ab24:	0800ab9f 	.word	0x0800ab9f
 800ab28:	0800ab9f 	.word	0x0800ab9f
 800ab2c:	0800ab9f 	.word	0x0800ab9f
 800ab30:	0800ab91 	.word	0x0800ab91
 800ab34:	2b40      	cmp	r3, #64	; 0x40
 800ab36:	d02e      	beq.n	800ab96 <UART_SetConfig+0x8aa>
 800ab38:	e031      	b.n	800ab9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab3a:	f7fb fa6b 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 800ab3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab40:	e033      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab42:	f7fb fa7d 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 800ab46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab48:	e02f      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd fa6c 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab58:	e027      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab5a:	f107 0318 	add.w	r3, r7, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd fbb8 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab68:	e01f      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab6a:	4b2d      	ldr	r3, [pc, #180]	; (800ac20 <UART_SetConfig+0x934>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d009      	beq.n	800ab8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab76:	4b2a      	ldr	r3, [pc, #168]	; (800ac20 <UART_SetConfig+0x934>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	4a24      	ldr	r2, [pc, #144]	; (800ac14 <UART_SetConfig+0x928>)
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab88:	e00f      	b.n	800abaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab8a:	4b22      	ldr	r3, [pc, #136]	; (800ac14 <UART_SetConfig+0x928>)
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab8e:	e00c      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab90:	4b21      	ldr	r3, [pc, #132]	; (800ac18 <UART_SetConfig+0x92c>)
 800ab92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab94:	e009      	b.n	800abaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9c:	e005      	b.n	800abaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 80e7 	beq.w	800ad80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	4a19      	ldr	r2, [pc, #100]	; (800ac1c <UART_SetConfig+0x930>)
 800abb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc4:	005a      	lsls	r2, r3, #1
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	441a      	add	r2, r3
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abda:	2b0f      	cmp	r3, #15
 800abdc:	d916      	bls.n	800ac0c <UART_SetConfig+0x920>
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe4:	d212      	bcs.n	800ac0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	b29b      	uxth	r3, r3
 800abea:	f023 030f 	bic.w	r3, r3, #15
 800abee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	085b      	lsrs	r3, r3, #1
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800abfe:	4313      	orrs	r3, r2
 800ac00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ac08:	60da      	str	r2, [r3, #12]
 800ac0a:	e0b9      	b.n	800ad80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac12:	e0b5      	b.n	800ad80 <UART_SetConfig+0xa94>
 800ac14:	03d09000 	.word	0x03d09000
 800ac18:	003d0900 	.word	0x003d0900
 800ac1c:	0800f974 	.word	0x0800f974
 800ac20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	dc49      	bgt.n	800acc0 <UART_SetConfig+0x9d4>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	db7c      	blt.n	800ad2a <UART_SetConfig+0xa3e>
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d87a      	bhi.n	800ad2a <UART_SetConfig+0xa3e>
 800ac34:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <UART_SetConfig+0x950>)
 800ac36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3a:	bf00      	nop
 800ac3c:	0800acc7 	.word	0x0800acc7
 800ac40:	0800accf 	.word	0x0800accf
 800ac44:	0800ad2b 	.word	0x0800ad2b
 800ac48:	0800ad2b 	.word	0x0800ad2b
 800ac4c:	0800acd7 	.word	0x0800acd7
 800ac50:	0800ad2b 	.word	0x0800ad2b
 800ac54:	0800ad2b 	.word	0x0800ad2b
 800ac58:	0800ad2b 	.word	0x0800ad2b
 800ac5c:	0800ace7 	.word	0x0800ace7
 800ac60:	0800ad2b 	.word	0x0800ad2b
 800ac64:	0800ad2b 	.word	0x0800ad2b
 800ac68:	0800ad2b 	.word	0x0800ad2b
 800ac6c:	0800ad2b 	.word	0x0800ad2b
 800ac70:	0800ad2b 	.word	0x0800ad2b
 800ac74:	0800ad2b 	.word	0x0800ad2b
 800ac78:	0800ad2b 	.word	0x0800ad2b
 800ac7c:	0800acf7 	.word	0x0800acf7
 800ac80:	0800ad2b 	.word	0x0800ad2b
 800ac84:	0800ad2b 	.word	0x0800ad2b
 800ac88:	0800ad2b 	.word	0x0800ad2b
 800ac8c:	0800ad2b 	.word	0x0800ad2b
 800ac90:	0800ad2b 	.word	0x0800ad2b
 800ac94:	0800ad2b 	.word	0x0800ad2b
 800ac98:	0800ad2b 	.word	0x0800ad2b
 800ac9c:	0800ad2b 	.word	0x0800ad2b
 800aca0:	0800ad2b 	.word	0x0800ad2b
 800aca4:	0800ad2b 	.word	0x0800ad2b
 800aca8:	0800ad2b 	.word	0x0800ad2b
 800acac:	0800ad2b 	.word	0x0800ad2b
 800acb0:	0800ad2b 	.word	0x0800ad2b
 800acb4:	0800ad2b 	.word	0x0800ad2b
 800acb8:	0800ad2b 	.word	0x0800ad2b
 800acbc:	0800ad1d 	.word	0x0800ad1d
 800acc0:	2b40      	cmp	r3, #64	; 0x40
 800acc2:	d02e      	beq.n	800ad22 <UART_SetConfig+0xa36>
 800acc4:	e031      	b.n	800ad2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc6:	f7fb f9a5 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 800acca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800accc:	e033      	b.n	800ad36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acce:	f7fb f9b7 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 800acd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800acd4:	e02f      	b.n	800ad36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fd f9a6 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace4:	e027      	b.n	800ad36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace6:	f107 0318 	add.w	r3, r7, #24
 800acea:	4618      	mov	r0, r3
 800acec:	f7fd faf2 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf4:	e01f      	b.n	800ad36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acf6:	4b2d      	ldr	r3, [pc, #180]	; (800adac <UART_SetConfig+0xac0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0320 	and.w	r3, r3, #32
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad02:	4b2a      	ldr	r3, [pc, #168]	; (800adac <UART_SetConfig+0xac0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	08db      	lsrs	r3, r3, #3
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	4a28      	ldr	r2, [pc, #160]	; (800adb0 <UART_SetConfig+0xac4>)
 800ad0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad14:	e00f      	b.n	800ad36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ad16:	4b26      	ldr	r3, [pc, #152]	; (800adb0 <UART_SetConfig+0xac4>)
 800ad18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad1a:	e00c      	b.n	800ad36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad1c:	4b25      	ldr	r3, [pc, #148]	; (800adb4 <UART_SetConfig+0xac8>)
 800ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad20:	e009      	b.n	800ad36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad28:	e005      	b.n	800ad36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad34:	bf00      	nop
    }

    if (pclk != 0U)
 800ad36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d021      	beq.n	800ad80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	4a1d      	ldr	r2, [pc, #116]	; (800adb8 <UART_SetConfig+0xacc>)
 800ad42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad46:	461a      	mov	r2, r3
 800ad48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	441a      	add	r2, r3
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	2b0f      	cmp	r3, #15
 800ad64:	d909      	bls.n	800ad7a <UART_SetConfig+0xa8e>
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad6c:	d205      	bcs.n	800ad7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60da      	str	r2, [r3, #12]
 800ad78:	e002      	b.n	800ad80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2200      	movs	r2, #0
 800ad94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3748      	adds	r7, #72	; 0x48
 800ada4:	46bd      	mov	sp, r7
 800ada6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adaa:	bf00      	nop
 800adac:	58024400 	.word	0x58024400
 800adb0:	03d09000 	.word	0x03d09000
 800adb4:	003d0900 	.word	0x003d0900
 800adb8:	0800f974 	.word	0x0800f974

0800adbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00a      	beq.n	800ade6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00a      	beq.n	800ae08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	430a      	orrs	r2, r1
 800ae06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00a      	beq.n	800ae2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00a      	beq.n	800ae6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01a      	beq.n	800aed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeba:	d10a      	bne.n	800aed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	430a      	orrs	r2, r1
 800aed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00a      	beq.n	800aef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	605a      	str	r2, [r3, #4]
  }
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b098      	sub	sp, #96	; 0x60
 800af04:	af02      	add	r7, sp, #8
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af10:	f7f6 fd6a 	bl	80019e8 <HAL_GetTick>
 800af14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0308 	and.w	r3, r3, #8
 800af20:	2b08      	cmp	r3, #8
 800af22:	d12f      	bne.n	800af84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af2c:	2200      	movs	r2, #0
 800af2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f88e 	bl	800b054 <UART_WaitOnFlagUntilTimeout>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d022      	beq.n	800af84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af46:	e853 3f00 	ldrex	r3, [r3]
 800af4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af52:	653b      	str	r3, [r7, #80]	; 0x50
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	461a      	mov	r2, r3
 800af5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af5c:	647b      	str	r3, [r7, #68]	; 0x44
 800af5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af64:	e841 2300 	strex	r3, r2, [r1]
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1e6      	bne.n	800af3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2220      	movs	r2, #32
 800af74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e063      	b.n	800b04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0304 	and.w	r3, r3, #4
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d149      	bne.n	800b026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af9a:	2200      	movs	r2, #0
 800af9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f857 	bl	800b054 <UART_WaitOnFlagUntilTimeout>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d03c      	beq.n	800b026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	623b      	str	r3, [r7, #32]
   return(result);
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afca:	633b      	str	r3, [r7, #48]	; 0x30
 800afcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e6      	bne.n	800afac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	e853 3f00 	ldrex	r3, [r3]
 800afec:	60fb      	str	r3, [r7, #12]
   return(result);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f023 0301 	bic.w	r3, r3, #1
 800aff4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3308      	adds	r3, #8
 800affc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800affe:	61fa      	str	r2, [r7, #28]
 800b000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b002:	69b9      	ldr	r1, [r7, #24]
 800b004:	69fa      	ldr	r2, [r7, #28]
 800b006:	e841 2300 	strex	r3, r2, [r1]
 800b00a:	617b      	str	r3, [r7, #20]
   return(result);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1e5      	bne.n	800afde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2220      	movs	r2, #32
 800b016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e012      	b.n	800b04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2220      	movs	r2, #32
 800b032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3758      	adds	r7, #88	; 0x58
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	4613      	mov	r3, r2
 800b062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b064:	e049      	b.n	800b0fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06c:	d045      	beq.n	800b0fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b06e:	f7f6 fcbb 	bl	80019e8 <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d302      	bcc.n	800b084 <UART_WaitOnFlagUntilTimeout+0x30>
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e048      	b.n	800b11a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0304 	and.w	r3, r3, #4
 800b092:	2b00      	cmp	r3, #0
 800b094:	d031      	beq.n	800b0fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	f003 0308 	and.w	r3, r3, #8
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d110      	bne.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 f839 	bl	800b124 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2208      	movs	r2, #8
 800b0b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e029      	b.n	800b11a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	69db      	ldr	r3, [r3, #28]
 800b0cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0d4:	d111      	bne.n	800b0fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f81f 	bl	800b124 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e00f      	b.n	800b11a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	69da      	ldr	r2, [r3, #28]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	4013      	ands	r3, r2
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	429a      	cmp	r2, r3
 800b108:	bf0c      	ite	eq
 800b10a:	2301      	moveq	r3, #1
 800b10c:	2300      	movne	r3, #0
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	461a      	mov	r2, r3
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	429a      	cmp	r2, r3
 800b116:	d0a6      	beq.n	800b066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b095      	sub	sp, #84	; 0x54
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b140:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14a:	643b      	str	r3, [r7, #64]	; 0x40
 800b14c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e6      	bne.n	800b12c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3308      	adds	r3, #8
 800b164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b16e:	69fa      	ldr	r2, [r7, #28]
 800b170:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <UART_EndRxTransfer+0xc8>)
 800b172:	4013      	ands	r3, r2
 800b174:	64bb      	str	r3, [r7, #72]	; 0x48
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3308      	adds	r3, #8
 800b17c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b17e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e5      	bne.n	800b15e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b196:	2b01      	cmp	r3, #1
 800b198:	d118      	bne.n	800b1cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f023 0310 	bic.w	r3, r3, #16
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	6979      	ldr	r1, [r7, #20]
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	e841 2300 	strex	r3, r2, [r1]
 800b1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e6      	bne.n	800b19a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b1e0:	bf00      	nop
 800b1e2:	3754      	adds	r7, #84	; 0x54
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	effffffe 	.word	0xeffffffe

0800b1f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d101      	bne.n	800b206 <HAL_UARTEx_DisableFifoMode+0x16>
 800b202:	2302      	movs	r3, #2
 800b204:	e027      	b.n	800b256 <HAL_UARTEx_DisableFifoMode+0x66>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2224      	movs	r2, #36	; 0x24
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0201 	bic.w	r2, r2, #1
 800b22c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b234:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b272:	2b01      	cmp	r3, #1
 800b274:	d101      	bne.n	800b27a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b276:	2302      	movs	r3, #2
 800b278:	e02d      	b.n	800b2d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2224      	movs	r2, #36	; 0x24
 800b286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f022 0201 	bic.w	r2, r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f850 	bl	800b35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2220      	movs	r2, #32
 800b2c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b084      	sub	sp, #16
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d101      	bne.n	800b2f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	e02d      	b.n	800b352 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2224      	movs	r2, #36	; 0x24
 800b302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0201 	bic.w	r2, r2, #1
 800b31c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f812 	bl	800b35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2220      	movs	r2, #32
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d108      	bne.n	800b37e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b37c:	e031      	b.n	800b3e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b37e:	2310      	movs	r3, #16
 800b380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b382:	2310      	movs	r3, #16
 800b384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	0e5b      	lsrs	r3, r3, #25
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	0f5b      	lsrs	r3, r3, #29
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	7b3a      	ldrb	r2, [r7, #12]
 800b3aa:	4911      	ldr	r1, [pc, #68]	; (800b3f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ac:	5c8a      	ldrb	r2, [r1, r2]
 800b3ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3b2:	7b3a      	ldrb	r2, [r7, #12]
 800b3b4:	490f      	ldr	r1, [pc, #60]	; (800b3f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	7b7a      	ldrb	r2, [r7, #13]
 800b3c8:	4909      	ldr	r1, [pc, #36]	; (800b3f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ca:	5c8a      	ldrb	r2, [r1, r2]
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3d0:	7b7a      	ldrb	r2, [r7, #13]
 800b3d2:	4908      	ldr	r1, [pc, #32]	; (800b3f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	0800f98c 	.word	0x0800f98c
 800b3f4:	0800f994 	.word	0x0800f994

0800b3f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	f107 001c 	add.w	r0, r7, #28
 800b406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b40e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b410:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b412:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b416:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b41a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b41e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4313      	orrs	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <SDMMC_Init+0x50>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	431a      	orrs	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	b004      	add	sp, #16
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	ffc02c00 	.word	0xffc02c00

0800b44c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f043 0203 	orr.w	r2, r3, #3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b4ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b4f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	4b06      	ldr	r3, [pc, #24]	; (800b518 <SDMMC_SendCommand+0x50>)
 800b500:	4013      	ands	r3, r2
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	fffee0c0 	.word	0xfffee0c0

0800b51c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	b2db      	uxtb	r3, r3
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b536:	b480      	push	{r7}
 800b538:	b085      	sub	sp, #20
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3314      	adds	r3, #20
 800b544:	461a      	mov	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	4413      	add	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b582:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b588:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b58e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0

}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5c2:	2310      	movs	r3, #16
 800b5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d6:	f107 0308 	add.w	r3, r7, #8
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ff73 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e6:	2110      	movs	r1, #16
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fa5f 	bl	800baac <SDMMC_GetCmdResp1>
 800b5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3720      	adds	r7, #32
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b088      	sub	sp, #32
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b608:	2311      	movs	r3, #17
 800b60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b60c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff ff50 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b628:	f241 3288 	movw	r2, #5000	; 0x1388
 800b62c:	2111      	movs	r1, #17
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa3c 	bl	800baac <SDMMC_GetCmdResp1>
 800b634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b636:	69fb      	ldr	r3, [r7, #28]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b64e:	2312      	movs	r3, #18
 800b650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b652:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b65c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b662:	f107 0308 	add.w	r3, r7, #8
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff ff2d 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b66e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b672:	2112      	movs	r1, #18
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fa19 	bl	800baac <SDMMC_GetCmdResp1>
 800b67a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67c:	69fb      	ldr	r3, [r7, #28]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3720      	adds	r7, #32
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b088      	sub	sp, #32
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b694:	2318      	movs	r3, #24
 800b696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a8:	f107 0308 	add.w	r3, r7, #8
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff ff0a 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b8:	2118      	movs	r1, #24
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f9f6 	bl	800baac <SDMMC_GetCmdResp1>
 800b6c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b6da:	2319      	movs	r3, #25
 800b6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ee:	f107 0308 	add.w	r3, r7, #8
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff fee7 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fe:	2119      	movs	r1, #25
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f9d3 	bl	800baac <SDMMC_GetCmdResp1>
 800b706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b708:	69fb      	ldr	r3, [r7, #28]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3720      	adds	r7, #32
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b720:	230c      	movs	r3, #12
 800b722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b724:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b72a:	2300      	movs	r3, #0
 800b72c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b72e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b732:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b74c:	f107 0308 	add.w	r3, r7, #8
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff feb8 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b758:	4a0b      	ldr	r2, [pc, #44]	; (800b788 <SDMMC_CmdStopTransfer+0x74>)
 800b75a:	210c      	movs	r1, #12
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f9a5 	bl	800baac <SDMMC_GetCmdResp1>
 800b762:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b776:	d101      	bne.n	800b77c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b778:	2300      	movs	r3, #0
 800b77a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b77c:	69fb      	ldr	r3, [r7, #28]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3720      	adds	r7, #32
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	05f5e100 	.word	0x05f5e100

0800b78c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b79a:	2307      	movs	r3, #7
 800b79c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b79e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ae:	f107 0308 	add.w	r3, r7, #8
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff fe87 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b7ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7be:	2107      	movs	r1, #7
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f973 	bl	800baac <SDMMC_GetCmdResp1>
 800b7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b088      	sub	sp, #32
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f0:	f107 0308 	add.w	r3, r7, #8
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fe66 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fb97 	bl	800bf30 <SDMMC_GetCmdError>
 800b802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b804:	69fb      	ldr	r3, [r7, #28]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3720      	adds	r7, #32
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b088      	sub	sp, #32
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b816:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b81c:	2308      	movs	r3, #8
 800b81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b820:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b82a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b82e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b830:	f107 0308 	add.w	r3, r7, #8
 800b834:	4619      	mov	r1, r3
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7ff fe46 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fb29 	bl	800be94 <SDMMC_GetCmdResp7>
 800b842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b844:	69fb      	ldr	r3, [r7, #28]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3720      	adds	r7, #32
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b088      	sub	sp, #32
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b85c:	2337      	movs	r3, #55	; 0x37
 800b85e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b860:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b866:	2300      	movs	r3, #0
 800b868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b86a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b86e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b870:	f107 0308 	add.w	r3, r7, #8
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff fe26 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b87c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b880:	2137      	movs	r1, #55	; 0x37
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f912 	bl	800baac <SDMMC_GetCmdResp1>
 800b888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b88a:	69fb      	ldr	r3, [r7, #28]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b088      	sub	sp, #32
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b8a2:	2329      	movs	r3, #41	; 0x29
 800b8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b6:	f107 0308 	add.w	r3, r7, #8
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff fe03 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa2e 	bl	800bd24 <SDMMC_GetCmdResp3>
 800b8c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3720      	adds	r7, #32
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8e2:	2306      	movs	r3, #6
 800b8e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8f6:	f107 0308 	add.w	r3, r7, #8
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fde3 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b902:	f241 3288 	movw	r2, #5000	; 0x1388
 800b906:	2106      	movs	r1, #6
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f8cf 	bl	800baac <SDMMC_GetCmdResp1>
 800b90e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b910:	69fb      	ldr	r3, [r7, #28]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b088      	sub	sp, #32
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b926:	2333      	movs	r3, #51	; 0x33
 800b928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b92a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b92e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b930:	2300      	movs	r3, #0
 800b932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b93a:	f107 0308 	add.w	r3, r7, #8
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff fdc1 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b946:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94a:	2133      	movs	r1, #51	; 0x33
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f8ad 	bl	800baac <SDMMC_GetCmdResp1>
 800b952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b954:	69fb      	ldr	r3, [r7, #28]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3720      	adds	r7, #32
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b088      	sub	sp, #32
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b96a:	2302      	movs	r3, #2
 800b96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b96e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b974:	2300      	movs	r3, #0
 800b976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b97c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b97e:	f107 0308 	add.w	r3, r7, #8
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff fd9f 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f980 	bl	800bc90 <SDMMC_GetCmdResp2>
 800b990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b992:	69fb      	ldr	r3, [r7, #28]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3720      	adds	r7, #32
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b9aa:	2309      	movs	r3, #9
 800b9ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b9ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b9b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9be:	f107 0308 	add.w	r3, r7, #8
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff fd7f 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f960 	bl	800bc90 <SDMMC_GetCmdResp2>
 800b9d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3720      	adds	r7, #32
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b088      	sub	sp, #32
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9fe:	f107 0308 	add.w	r3, r7, #8
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fd5f 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	2103      	movs	r1, #3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f9c8 	bl	800bda4 <SDMMC_GetCmdResp6>
 800ba14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba16:	69fb      	ldr	r3, [r7, #28]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3720      	adds	r7, #32
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba2e:	230d      	movs	r3, #13
 800ba30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba42:	f107 0308 	add.w	r3, r7, #8
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fd3d 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba52:	210d      	movs	r1, #13
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f829 	bl	800baac <SDMMC_GetCmdResp1>
 800ba5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3720      	adds	r7, #32
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b088      	sub	sp, #32
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ba72:	230d      	movs	r3, #13
 800ba74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba86:	f107 0308 	add.w	r3, r7, #8
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff fd1b 	bl	800b4c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ba92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba96:	210d      	movs	r1, #13
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f807 	bl	800baac <SDMMC_GetCmdResp1>
 800ba9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa0:	69fb      	ldr	r3, [r7, #28]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3720      	adds	r7, #32
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	460b      	mov	r3, r1
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800baba:	4b70      	ldr	r3, [pc, #448]	; (800bc7c <SDMMC_GetCmdResp1+0x1d0>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a70      	ldr	r2, [pc, #448]	; (800bc80 <SDMMC_GetCmdResp1+0x1d4>)
 800bac0:	fba2 2303 	umull	r2, r3, r2, r3
 800bac4:	0a5a      	lsrs	r2, r3, #9
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	fb02 f303 	mul.w	r3, r2, r3
 800bacc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	61fa      	str	r2, [r7, #28]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800badc:	e0c9      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bae4:	69ba      	ldr	r2, [r7, #24]
 800bae6:	4b67      	ldr	r3, [pc, #412]	; (800bc84 <SDMMC_GetCmdResp1+0x1d8>)
 800bae8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0ef      	beq.n	800bace <SDMMC_GetCmdResp1+0x22>
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1ea      	bne.n	800bace <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d004      	beq.n	800bb0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2204      	movs	r2, #4
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb0a:	2304      	movs	r3, #4
 800bb0c:	e0b1      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e0a6      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4a58      	ldr	r2, [pc, #352]	; (800bc88 <SDMMC_GetCmdResp1+0x1dc>)
 800bb28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fcf6 	bl	800b51c <SDMMC_GetCommandResponse>
 800bb30:	4603      	mov	r3, r0
 800bb32:	461a      	mov	r2, r3
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d001      	beq.n	800bb3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e099      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb3e:	2100      	movs	r1, #0
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff fcf8 	bl	800b536 <SDMMC_GetResponse>
 800bb46:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	4b50      	ldr	r3, [pc, #320]	; (800bc8c <SDMMC_GetCmdResp1+0x1e0>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e08d      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da02      	bge.n	800bb62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb60:	e087      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	e080      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb7a:	2380      	movs	r3, #128	; 0x80
 800bb7c:	e079      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8c:	e071      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb9c:	e069      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbac:	e061      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bbb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbbc:	e059      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbcc:	e051      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbdc:	e049      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbec:	e041      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbfc:	e039      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d002      	beq.n	800bc0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc0c:	e031      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc1c:	e029      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc2c:	e021      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d002      	beq.n	800bc3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc3c:	e019      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc4c:	e011      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc5c:	e009      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc6c:	e001      	b.n	800bc72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3720      	adds	r7, #32
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	24000000 	.word	0x24000000
 800bc80:	10624dd3 	.word	0x10624dd3
 800bc84:	00200045 	.word	0x00200045
 800bc88:	002000c5 	.word	0x002000c5
 800bc8c:	fdffe008 	.word	0xfdffe008

0800bc90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc98:	4b1f      	ldr	r3, [pc, #124]	; (800bd18 <SDMMC_GetCmdResp2+0x88>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a1f      	ldr	r2, [pc, #124]	; (800bd1c <SDMMC_GetCmdResp2+0x8c>)
 800bc9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bca2:	0a5b      	lsrs	r3, r3, #9
 800bca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca8:	fb02 f303 	mul.w	r3, r2, r3
 800bcac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	1e5a      	subs	r2, r3, #1
 800bcb2:	60fa      	str	r2, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcbc:	e026      	b.n	800bd0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d0ef      	beq.n	800bcae <SDMMC_GetCmdResp2+0x1e>
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1ea      	bne.n	800bcae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d004      	beq.n	800bcee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2204      	movs	r2, #4
 800bce8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcea:	2304      	movs	r3, #4
 800bcec:	e00e      	b.n	800bd0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e003      	b.n	800bd0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a06      	ldr	r2, [pc, #24]	; (800bd20 <SDMMC_GetCmdResp2+0x90>)
 800bd08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	24000000 	.word	0x24000000
 800bd1c:	10624dd3 	.word	0x10624dd3
 800bd20:	002000c5 	.word	0x002000c5

0800bd24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <SDMMC_GetCmdResp3+0x74>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a1a      	ldr	r2, [pc, #104]	; (800bd9c <SDMMC_GetCmdResp3+0x78>)
 800bd32:	fba2 2303 	umull	r2, r3, r2, r3
 800bd36:	0a5b      	lsrs	r3, r3, #9
 800bd38:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd3c:	fb02 f303 	mul.w	r3, r2, r3
 800bd40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	1e5a      	subs	r2, r3, #1
 800bd46:	60fa      	str	r2, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd50:	e01b      	b.n	800bd8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d0ef      	beq.n	800bd42 <SDMMC_GetCmdResp3+0x1e>
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1ea      	bne.n	800bd42 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd70:	f003 0304 	and.w	r3, r3, #4
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d004      	beq.n	800bd82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2204      	movs	r2, #4
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd7e:	2304      	movs	r3, #4
 800bd80:	e003      	b.n	800bd8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a06      	ldr	r2, [pc, #24]	; (800bda0 <SDMMC_GetCmdResp3+0x7c>)
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	24000000 	.word	0x24000000
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	002000c5 	.word	0x002000c5

0800bda4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	460b      	mov	r3, r1
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdb2:	4b35      	ldr	r3, [pc, #212]	; (800be88 <SDMMC_GetCmdResp6+0xe4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a35      	ldr	r2, [pc, #212]	; (800be8c <SDMMC_GetCmdResp6+0xe8>)
 800bdb8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdbc:	0a5b      	lsrs	r3, r3, #9
 800bdbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc2:	fb02 f303 	mul.w	r3, r2, r3
 800bdc6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	1e5a      	subs	r2, r3, #1
 800bdcc:	61fa      	str	r2, [r7, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdd6:	e052      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bddc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0ef      	beq.n	800bdc8 <SDMMC_GetCmdResp6+0x24>
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1ea      	bne.n	800bdc8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf6:	f003 0304 	and.w	r3, r3, #4
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d004      	beq.n	800be08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2204      	movs	r2, #4
 800be02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be04:	2304      	movs	r3, #4
 800be06:	e03a      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	2b00      	cmp	r3, #0
 800be12:	d004      	beq.n	800be1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e02f      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f7ff fb7c 	bl	800b51c <SDMMC_GetCommandResponse>
 800be24:	4603      	mov	r3, r0
 800be26:	461a      	mov	r2, r3
 800be28:	7afb      	ldrb	r3, [r7, #11]
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d001      	beq.n	800be32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be2e:	2301      	movs	r3, #1
 800be30:	e025      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	4a16      	ldr	r2, [pc, #88]	; (800be90 <SDMMC_GetCmdResp6+0xec>)
 800be36:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be38:	2100      	movs	r1, #0
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fb7b 	bl	800b536 <SDMMC_GetResponse>
 800be40:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d106      	bne.n	800be5a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	0c1b      	lsrs	r3, r3, #16
 800be50:	b29a      	uxth	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800be56:	2300      	movs	r3, #0
 800be58:	e011      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be68:	e009      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be78:	e001      	b.n	800be7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3720      	adds	r7, #32
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	24000000 	.word	0x24000000
 800be8c:	10624dd3 	.word	0x10624dd3
 800be90:	002000c5 	.word	0x002000c5

0800be94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be9c:	4b22      	ldr	r3, [pc, #136]	; (800bf28 <SDMMC_GetCmdResp7+0x94>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a22      	ldr	r2, [pc, #136]	; (800bf2c <SDMMC_GetCmdResp7+0x98>)
 800bea2:	fba2 2303 	umull	r2, r3, r2, r3
 800bea6:	0a5b      	lsrs	r3, r3, #9
 800bea8:	f241 3288 	movw	r2, #5000	; 0x1388
 800beac:	fb02 f303 	mul.w	r3, r2, r3
 800beb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	60fa      	str	r2, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d102      	bne.n	800bec2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bec0:	e02c      	b.n	800bf1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0ef      	beq.n	800beb2 <SDMMC_GetCmdResp7+0x1e>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1ea      	bne.n	800beb2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee0:	f003 0304 	and.w	r3, r3, #4
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2204      	movs	r2, #4
 800beec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beee:	2304      	movs	r3, #4
 800bef0:	e014      	b.n	800bf1c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e009      	b.n	800bf1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2240      	movs	r2, #64	; 0x40
 800bf18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf1a:	2300      	movs	r3, #0

}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	24000000 	.word	0x24000000
 800bf2c:	10624dd3 	.word	0x10624dd3

0800bf30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf38:	4b11      	ldr	r3, [pc, #68]	; (800bf80 <SDMMC_GetCmdError+0x50>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a11      	ldr	r2, [pc, #68]	; (800bf84 <SDMMC_GetCmdError+0x54>)
 800bf3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf42:	0a5b      	lsrs	r3, r3, #9
 800bf44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf48:	fb02 f303 	mul.w	r3, r2, r3
 800bf4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	1e5a      	subs	r2, r3, #1
 800bf52:	60fa      	str	r2, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf5c:	e009      	b.n	800bf72 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d0f1      	beq.n	800bf4e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a06      	ldr	r2, [pc, #24]	; (800bf88 <SDMMC_GetCmdError+0x58>)
 800bf6e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	24000000 	.word	0x24000000
 800bf84:	10624dd3 	.word	0x10624dd3
 800bf88:	002000c5 	.word	0x002000c5

0800bf8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf90:	4904      	ldr	r1, [pc, #16]	; (800bfa4 <MX_FATFS_Init+0x18>)
 800bf92:	4805      	ldr	r0, [pc, #20]	; (800bfa8 <MX_FATFS_Init+0x1c>)
 800bf94:	f003 fb46 	bl	800f624 <FATFS_LinkDriver>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4b03      	ldr	r3, [pc, #12]	; (800bfac <MX_FATFS_Init+0x20>)
 800bf9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bfa0:	bf00      	nop
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	240017a8 	.word	0x240017a8
 800bfa8:	0800f99c 	.word	0x0800f99c
 800bfac:	240017a4 	.word	0x240017a4

0800bfb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bfb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bfca:	f000 f879 	bl	800c0c0 <BSP_SD_IsDetected>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d001      	beq.n	800bfd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	e012      	b.n	800bffe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bfd8:	480b      	ldr	r0, [pc, #44]	; (800c008 <BSP_SD_Init+0x48>)
 800bfda:	f7fc fd85 	bl	8008ae8 <HAL_SD_Init>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d109      	bne.n	800bffc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bfe8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bfec:	4806      	ldr	r0, [pc, #24]	; (800c008 <BSP_SD_Init+0x48>)
 800bfee:	f7fd fc41 	bl	8009874 <HAL_SD_ConfigWideBusOperation>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bffc:	79fb      	ldrb	r3, [r7, #7]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	2400067c 	.word	0x2400067c

0800c00c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af02      	add	r7, sp, #8
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	68f9      	ldr	r1, [r7, #12]
 800c028:	4806      	ldr	r0, [pc, #24]	; (800c044 <BSP_SD_ReadBlocks+0x38>)
 800c02a:	f7fc fe7d 	bl	8008d28 <HAL_SD_ReadBlocks>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c038:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	2400067c 	.word	0x2400067c

0800c048 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	4806      	ldr	r0, [pc, #24]	; (800c080 <BSP_SD_WriteBlocks+0x38>)
 800c066:	f7fc ffe9 	bl	800903c <HAL_SD_WriteBlocks>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	2400067c 	.word	0x2400067c

0800c084 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c088:	4805      	ldr	r0, [pc, #20]	; (800c0a0 <BSP_SD_GetCardState+0x1c>)
 800c08a:	f7fd fd05 	bl	8009a98 <HAL_SD_GetCardState>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b04      	cmp	r3, #4
 800c092:	bf14      	ite	ne
 800c094:	2301      	movne	r3, #1
 800c096:	2300      	moveq	r3, #0
 800c098:	b2db      	uxtb	r3, r3
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	2400067c 	.word	0x2400067c

0800c0a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	4803      	ldr	r0, [pc, #12]	; (800c0bc <BSP_SD_GetCardInfo+0x18>)
 800c0b0:	f7fd fbb4 	bl	800981c <HAL_SD_GetCardInfo>
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	2400067c 	.word	0x2400067c

0800c0c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c0ca:	f000 f80b 	bl	800c0e4 <BSP_PlatformIsDetected>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	b2db      	uxtb	r3, r3
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c0ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0f2:	4806      	ldr	r0, [pc, #24]	; (800c10c <BSP_PlatformIsDetected+0x28>)
 800c0f4:	f7f8 fb6a 	bl	80047cc <HAL_GPIO_ReadPin>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c0fe:	2300      	movs	r3, #0
 800c100:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c102:	79fb      	ldrb	r3, [r7, #7]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	58022000 	.word	0x58022000

0800c110 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	4603      	mov	r3, r0
 800c118:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c11a:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <SD_CheckStatus+0x38>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c120:	f7ff ffb0 	bl	800c084 <BSP_SD_GetCardState>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d107      	bne.n	800c13a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c12a:	4b07      	ldr	r3, [pc, #28]	; (800c148 <SD_CheckStatus+0x38>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	f023 0301 	bic.w	r3, r3, #1
 800c134:	b2da      	uxtb	r2, r3
 800c136:	4b04      	ldr	r3, [pc, #16]	; (800c148 <SD_CheckStatus+0x38>)
 800c138:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c13a:	4b03      	ldr	r3, [pc, #12]	; (800c148 <SD_CheckStatus+0x38>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	b2db      	uxtb	r3, r3
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	24000045 	.word	0x24000045

0800c14c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <SD_initialize+0x38>)
 800c158:	2201      	movs	r2, #1
 800c15a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c15c:	f7ff ff30 	bl	800bfc0 <BSP_SD_Init>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d107      	bne.n	800c176 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c166:	79fb      	ldrb	r3, [r7, #7]
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff ffd1 	bl	800c110 <SD_CheckStatus>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	4b04      	ldr	r3, [pc, #16]	; (800c184 <SD_initialize+0x38>)
 800c174:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c176:	4b03      	ldr	r3, [pc, #12]	; (800c184 <SD_initialize+0x38>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	b2db      	uxtb	r3, r3
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	24000045 	.word	0x24000045

0800c188 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff ffbb 	bl	800c110 <SD_CheckStatus>
 800c19a:	4603      	mov	r3, r0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	68b8      	ldr	r0, [r7, #8]
 800c1c2:	f7ff ff23 	bl	800c00c <BSP_SD_ReadBlocks>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d107      	bne.n	800c1dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c1cc:	bf00      	nop
 800c1ce:	f7ff ff59 	bl	800c084 <BSP_SD_GetCardState>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1fa      	bne.n	800c1ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b086      	sub	sp, #24
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	603b      	str	r3, [r7, #0]
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	68b8      	ldr	r0, [r7, #8]
 800c204:	f7ff ff20 	bl	800c048 <BSP_SD_WriteBlocks>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c20e:	bf00      	nop
 800c210:	f7ff ff38 	bl	800c084 <BSP_SD_GetCardState>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1fa      	bne.n	800c210 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08c      	sub	sp, #48	; 0x30
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	603a      	str	r2, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
 800c234:	460b      	mov	r3, r1
 800c236:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c23e:	4b25      	ldr	r3, [pc, #148]	; (800c2d4 <SD_ioctl+0xac>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <SD_ioctl+0x28>
 800c24c:	2303      	movs	r3, #3
 800c24e:	e03c      	b.n	800c2ca <SD_ioctl+0xa2>

  switch (cmd)
 800c250:	79bb      	ldrb	r3, [r7, #6]
 800c252:	2b03      	cmp	r3, #3
 800c254:	d834      	bhi.n	800c2c0 <SD_ioctl+0x98>
 800c256:	a201      	add	r2, pc, #4	; (adr r2, 800c25c <SD_ioctl+0x34>)
 800c258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25c:	0800c26d 	.word	0x0800c26d
 800c260:	0800c275 	.word	0x0800c275
 800c264:	0800c28d 	.word	0x0800c28d
 800c268:	0800c2a7 	.word	0x0800c2a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c272:	e028      	b.n	800c2c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c274:	f107 0308 	add.w	r3, r7, #8
 800c278:	4618      	mov	r0, r3
 800c27a:	f7ff ff13 	bl	800c0a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c27e:	6a3a      	ldr	r2, [r7, #32]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c28a:	e01c      	b.n	800c2c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c28c:	f107 0308 	add.w	r3, r7, #8
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff ff07 	bl	800c0a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	b29a      	uxth	r2, r3
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2a4:	e00f      	b.n	800c2c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2a6:	f107 0308 	add.w	r3, r7, #8
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff fefa 	bl	800c0a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	0a5a      	lsrs	r2, r3, #9
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2be:	e002      	b.n	800c2c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3730      	adds	r7, #48	; 0x30
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	24000045 	.word	0x24000045

0800c2d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	6039      	str	r1, [r7, #0]
 800c2e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c2e8:	d802      	bhi.n	800c2f0 <ff_convert+0x18>
		c = chr;
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	81fb      	strh	r3, [r7, #14]
 800c2ee:	e025      	b.n	800c33c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00b      	beq.n	800c30e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c2f6:	88fb      	ldrh	r3, [r7, #6]
 800c2f8:	2bff      	cmp	r3, #255	; 0xff
 800c2fa:	d805      	bhi.n	800c308 <ff_convert+0x30>
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	3b80      	subs	r3, #128	; 0x80
 800c300:	4a12      	ldr	r2, [pc, #72]	; (800c34c <ff_convert+0x74>)
 800c302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c306:	e000      	b.n	800c30a <ff_convert+0x32>
 800c308:	2300      	movs	r3, #0
 800c30a:	81fb      	strh	r3, [r7, #14]
 800c30c:	e016      	b.n	800c33c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c30e:	2300      	movs	r3, #0
 800c310:	81fb      	strh	r3, [r7, #14]
 800c312:	e009      	b.n	800c328 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c314:	89fb      	ldrh	r3, [r7, #14]
 800c316:	4a0d      	ldr	r2, [pc, #52]	; (800c34c <ff_convert+0x74>)
 800c318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c31c:	88fa      	ldrh	r2, [r7, #6]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d006      	beq.n	800c330 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c322:	89fb      	ldrh	r3, [r7, #14]
 800c324:	3301      	adds	r3, #1
 800c326:	81fb      	strh	r3, [r7, #14]
 800c328:	89fb      	ldrh	r3, [r7, #14]
 800c32a:	2b7f      	cmp	r3, #127	; 0x7f
 800c32c:	d9f2      	bls.n	800c314 <ff_convert+0x3c>
 800c32e:	e000      	b.n	800c332 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c330:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c332:	89fb      	ldrh	r3, [r7, #14]
 800c334:	3380      	adds	r3, #128	; 0x80
 800c336:	b29b      	uxth	r3, r3
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c33c:	89fb      	ldrh	r3, [r7, #14]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	0800f9b0 	.word	0x0800f9b0

0800c350 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c350:	b480      	push	{r7}
 800c352:	b087      	sub	sp, #28
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c35a:	88fb      	ldrh	r3, [r7, #6]
 800c35c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c360:	d201      	bcs.n	800c366 <ff_wtoupper+0x16>
 800c362:	4b3e      	ldr	r3, [pc, #248]	; (800c45c <ff_wtoupper+0x10c>)
 800c364:	e000      	b.n	800c368 <ff_wtoupper+0x18>
 800c366:	4b3e      	ldr	r3, [pc, #248]	; (800c460 <ff_wtoupper+0x110>)
 800c368:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	1c9a      	adds	r2, r3, #2
 800c36e:	617a      	str	r2, [r7, #20]
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c374:	8a7b      	ldrh	r3, [r7, #18]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d068      	beq.n	800c44c <ff_wtoupper+0xfc>
 800c37a:	88fa      	ldrh	r2, [r7, #6]
 800c37c:	8a7b      	ldrh	r3, [r7, #18]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d364      	bcc.n	800c44c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	1c9a      	adds	r2, r3, #2
 800c386:	617a      	str	r2, [r7, #20]
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	823b      	strh	r3, [r7, #16]
 800c38c:	8a3b      	ldrh	r3, [r7, #16]
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	81fb      	strh	r3, [r7, #14]
 800c392:	8a3b      	ldrh	r3, [r7, #16]
 800c394:	b2db      	uxtb	r3, r3
 800c396:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c398:	88fa      	ldrh	r2, [r7, #6]
 800c39a:	8a79      	ldrh	r1, [r7, #18]
 800c39c:	8a3b      	ldrh	r3, [r7, #16]
 800c39e:	440b      	add	r3, r1
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	da49      	bge.n	800c438 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c3a4:	89fb      	ldrh	r3, [r7, #14]
 800c3a6:	2b08      	cmp	r3, #8
 800c3a8:	d84f      	bhi.n	800c44a <ff_wtoupper+0xfa>
 800c3aa:	a201      	add	r2, pc, #4	; (adr r2, 800c3b0 <ff_wtoupper+0x60>)
 800c3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b0:	0800c3d5 	.word	0x0800c3d5
 800c3b4:	0800c3e7 	.word	0x0800c3e7
 800c3b8:	0800c3fd 	.word	0x0800c3fd
 800c3bc:	0800c405 	.word	0x0800c405
 800c3c0:	0800c40d 	.word	0x0800c40d
 800c3c4:	0800c415 	.word	0x0800c415
 800c3c8:	0800c41d 	.word	0x0800c41d
 800c3cc:	0800c425 	.word	0x0800c425
 800c3d0:	0800c42d 	.word	0x0800c42d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3d4:	88fa      	ldrh	r2, [r7, #6]
 800c3d6:	8a7b      	ldrh	r3, [r7, #18]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	4413      	add	r3, r2
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	80fb      	strh	r3, [r7, #6]
 800c3e4:	e027      	b.n	800c436 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c3e6:	88fa      	ldrh	r2, [r7, #6]
 800c3e8:	8a7b      	ldrh	r3, [r7, #18]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	88fa      	ldrh	r2, [r7, #6]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	80fb      	strh	r3, [r7, #6]
 800c3fa:	e01c      	b.n	800c436 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c3fc:	88fb      	ldrh	r3, [r7, #6]
 800c3fe:	3b10      	subs	r3, #16
 800c400:	80fb      	strh	r3, [r7, #6]
 800c402:	e018      	b.n	800c436 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c404:	88fb      	ldrh	r3, [r7, #6]
 800c406:	3b20      	subs	r3, #32
 800c408:	80fb      	strh	r3, [r7, #6]
 800c40a:	e014      	b.n	800c436 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	3b30      	subs	r3, #48	; 0x30
 800c410:	80fb      	strh	r3, [r7, #6]
 800c412:	e010      	b.n	800c436 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	3b1a      	subs	r3, #26
 800c418:	80fb      	strh	r3, [r7, #6]
 800c41a:	e00c      	b.n	800c436 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	3308      	adds	r3, #8
 800c420:	80fb      	strh	r3, [r7, #6]
 800c422:	e008      	b.n	800c436 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	3b50      	subs	r3, #80	; 0x50
 800c428:	80fb      	strh	r3, [r7, #6]
 800c42a:	e004      	b.n	800c436 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c42c:	88fb      	ldrh	r3, [r7, #6]
 800c42e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c432:	80fb      	strh	r3, [r7, #6]
 800c434:	bf00      	nop
			}
			break;
 800c436:	e008      	b.n	800c44a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c438:	89fb      	ldrh	r3, [r7, #14]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d195      	bne.n	800c36a <ff_wtoupper+0x1a>
 800c43e:	8a3b      	ldrh	r3, [r7, #16]
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	4413      	add	r3, r2
 800c446:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c448:	e78f      	b.n	800c36a <ff_wtoupper+0x1a>
			break;
 800c44a:	bf00      	nop
	}

	return chr;
 800c44c:	88fb      	ldrh	r3, [r7, #6]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	0800fab0 	.word	0x0800fab0
 800c460:	0800fca4 	.word	0x0800fca4

0800c464 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c46e:	79fb      	ldrb	r3, [r7, #7]
 800c470:	4a08      	ldr	r2, [pc, #32]	; (800c494 <disk_status+0x30>)
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	79fa      	ldrb	r2, [r7, #7]
 800c47c:	4905      	ldr	r1, [pc, #20]	; (800c494 <disk_status+0x30>)
 800c47e:	440a      	add	r2, r1
 800c480:	7a12      	ldrb	r2, [r2, #8]
 800c482:	4610      	mov	r0, r2
 800c484:	4798      	blx	r3
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	240017d4 	.word	0x240017d4

0800c498 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	4a0d      	ldr	r2, [pc, #52]	; (800c4e0 <disk_initialize+0x48>)
 800c4aa:	5cd3      	ldrb	r3, [r2, r3]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d111      	bne.n	800c4d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	4a0b      	ldr	r2, [pc, #44]	; (800c4e0 <disk_initialize+0x48>)
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	4a09      	ldr	r2, [pc, #36]	; (800c4e0 <disk_initialize+0x48>)
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	79fa      	ldrb	r2, [r7, #7]
 800c4c6:	4906      	ldr	r1, [pc, #24]	; (800c4e0 <disk_initialize+0x48>)
 800c4c8:	440a      	add	r2, r1
 800c4ca:	7a12      	ldrb	r2, [r2, #8]
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	240017d4 	.word	0x240017d4

0800c4e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c4e4:	b590      	push	{r4, r7, lr}
 800c4e6:	b087      	sub	sp, #28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
 800c4f6:	4a0a      	ldr	r2, [pc, #40]	; (800c520 <disk_read+0x3c>)
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	689c      	ldr	r4, [r3, #8]
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	4a07      	ldr	r2, [pc, #28]	; (800c520 <disk_read+0x3c>)
 800c504:	4413      	add	r3, r2
 800c506:	7a18      	ldrb	r0, [r3, #8]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	68b9      	ldr	r1, [r7, #8]
 800c50e:	47a0      	blx	r4
 800c510:	4603      	mov	r3, r0
 800c512:	75fb      	strb	r3, [r7, #23]
  return res;
 800c514:	7dfb      	ldrb	r3, [r7, #23]
}
 800c516:	4618      	mov	r0, r3
 800c518:	371c      	adds	r7, #28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd90      	pop	{r4, r7, pc}
 800c51e:	bf00      	nop
 800c520:	240017d4 	.word	0x240017d4

0800c524 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c524:	b590      	push	{r4, r7, lr}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	607a      	str	r2, [r7, #4]
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c534:	7bfb      	ldrb	r3, [r7, #15]
 800c536:	4a0a      	ldr	r2, [pc, #40]	; (800c560 <disk_write+0x3c>)
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	68dc      	ldr	r4, [r3, #12]
 800c540:	7bfb      	ldrb	r3, [r7, #15]
 800c542:	4a07      	ldr	r2, [pc, #28]	; (800c560 <disk_write+0x3c>)
 800c544:	4413      	add	r3, r2
 800c546:	7a18      	ldrb	r0, [r3, #8]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	68b9      	ldr	r1, [r7, #8]
 800c54e:	47a0      	blx	r4
 800c550:	4603      	mov	r3, r0
 800c552:	75fb      	strb	r3, [r7, #23]
  return res;
 800c554:	7dfb      	ldrb	r3, [r7, #23]
}
 800c556:	4618      	mov	r0, r3
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd90      	pop	{r4, r7, pc}
 800c55e:	bf00      	nop
 800c560:	240017d4 	.word	0x240017d4

0800c564 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	603a      	str	r2, [r7, #0]
 800c56e:	71fb      	strb	r3, [r7, #7]
 800c570:	460b      	mov	r3, r1
 800c572:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	4a09      	ldr	r2, [pc, #36]	; (800c59c <disk_ioctl+0x38>)
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	79fa      	ldrb	r2, [r7, #7]
 800c582:	4906      	ldr	r1, [pc, #24]	; (800c59c <disk_ioctl+0x38>)
 800c584:	440a      	add	r2, r1
 800c586:	7a10      	ldrb	r0, [r2, #8]
 800c588:	79b9      	ldrb	r1, [r7, #6]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	4798      	blx	r3
 800c58e:	4603      	mov	r3, r0
 800c590:	73fb      	strb	r3, [r7, #15]
  return res;
 800c592:	7bfb      	ldrb	r3, [r7, #15]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	240017d4 	.word	0x240017d4

0800c5a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c5b0:	89fb      	ldrh	r3, [r7, #14]
 800c5b2:	021b      	lsls	r3, r3, #8
 800c5b4:	b21a      	sxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	b21b      	sxth	r3, r3
 800c5c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c5c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3303      	adds	r3, #3
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	021b      	lsls	r3, r3, #8
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	3202      	adds	r2, #2
 800c5e8:	7812      	ldrb	r2, [r2, #0]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	3201      	adds	r2, #1
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	021b      	lsls	r3, r3, #8
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	7812      	ldrb	r2, [r2, #0]
 800c604:	4313      	orrs	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]
	return rv;
 800c608:	68fb      	ldr	r3, [r7, #12]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c616:	b480      	push	{r7}
 800c618:	b083      	sub	sp, #12
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	460b      	mov	r3, r1
 800c620:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	887a      	ldrh	r2, [r7, #2]
 800c62a:	b2d2      	uxtb	r2, r2
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	887b      	ldrh	r3, [r7, #2]
 800c630:	0a1b      	lsrs	r3, r3, #8
 800c632:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	607a      	str	r2, [r7, #4]
 800c63a:	887a      	ldrh	r2, [r7, #2]
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	701a      	strb	r2, [r3, #0]
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	701a      	strb	r2, [r3, #0]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	607a      	str	r2, [r7, #4]
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	b2d2      	uxtb	r2, r2
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	0a1b      	lsrs	r3, r3, #8
 800c678:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	607a      	str	r2, [r7, #4]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	0a1b      	lsrs	r3, r3, #8
 800c68a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	607a      	str	r2, [r7, #4]
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	b2d2      	uxtb	r2, r2
 800c696:	701a      	strb	r2, [r3, #0]
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00d      	beq.n	800c6da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	1c53      	adds	r3, r2, #1
 800c6c2:	613b      	str	r3, [r7, #16]
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	1c59      	adds	r1, r3, #1
 800c6c8:	6179      	str	r1, [r7, #20]
 800c6ca:	7812      	ldrb	r2, [r2, #0]
 800c6cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1f1      	bne.n	800c6be <mem_cpy+0x1a>
	}
}
 800c6da:	bf00      	nop
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c6e6:	b480      	push	{r7}
 800c6e8:	b087      	sub	sp, #28
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	617a      	str	r2, [r7, #20]
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3b01      	subs	r3, #1
 800c706:	607b      	str	r3, [r7, #4]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1f3      	bne.n	800c6f6 <mem_set+0x10>
}
 800c70e:	bf00      	nop
 800c710:	bf00      	nop
 800c712:	371c      	adds	r7, #28
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c71c:	b480      	push	{r7}
 800c71e:	b089      	sub	sp, #36	; 0x24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	61fb      	str	r3, [r7, #28]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	61fa      	str	r2, [r7, #28]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	4619      	mov	r1, r3
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	61ba      	str	r2, [r7, #24]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	1acb      	subs	r3, r1, r3
 800c748:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	607b      	str	r3, [r7, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d002      	beq.n	800c75c <mem_cmp+0x40>
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0eb      	beq.n	800c734 <mem_cmp+0x18>

	return r;
 800c75c:	697b      	ldr	r3, [r7, #20]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3724      	adds	r7, #36	; 0x24
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c774:	e002      	b.n	800c77c <chk_chr+0x12>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3301      	adds	r3, #1
 800c77a:	607b      	str	r3, [r7, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d005      	beq.n	800c790 <chk_chr+0x26>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d1f2      	bne.n	800c776 <chk_chr+0xc>
	return *str;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	781b      	ldrb	r3, [r3, #0]
}
 800c794:	4618      	mov	r0, r3
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	e029      	b.n	800c808 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c7b4:	4a27      	ldr	r2, [pc, #156]	; (800c854 <chk_lock+0xb4>)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	011b      	lsls	r3, r3, #4
 800c7ba:	4413      	add	r3, r2
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d01d      	beq.n	800c7fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c7c2:	4a24      	ldr	r2, [pc, #144]	; (800c854 <chk_lock+0xb4>)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	4413      	add	r3, r2
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d116      	bne.n	800c802 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c7d4:	4a1f      	ldr	r2, [pc, #124]	; (800c854 <chk_lock+0xb4>)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	4413      	add	r3, r2
 800c7dc:	3304      	adds	r3, #4
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d10c      	bne.n	800c802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c7e8:	4a1a      	ldr	r2, [pc, #104]	; (800c854 <chk_lock+0xb4>)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	011b      	lsls	r3, r3, #4
 800c7ee:	4413      	add	r3, r2
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d102      	bne.n	800c802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c7fc:	e007      	b.n	800c80e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c7fe:	2301      	movs	r3, #1
 800c800:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3301      	adds	r3, #1
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d9d2      	bls.n	800c7b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d109      	bne.n	800c828 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <chk_lock+0x80>
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d101      	bne.n	800c824 <chk_lock+0x84>
 800c820:	2300      	movs	r3, #0
 800c822:	e010      	b.n	800c846 <chk_lock+0xa6>
 800c824:	2312      	movs	r3, #18
 800c826:	e00e      	b.n	800c846 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d108      	bne.n	800c840 <chk_lock+0xa0>
 800c82e:	4a09      	ldr	r2, [pc, #36]	; (800c854 <chk_lock+0xb4>)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	011b      	lsls	r3, r3, #4
 800c834:	4413      	add	r3, r2
 800c836:	330c      	adds	r3, #12
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c83e:	d101      	bne.n	800c844 <chk_lock+0xa4>
 800c840:	2310      	movs	r3, #16
 800c842:	e000      	b.n	800c846 <chk_lock+0xa6>
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	240017b4 	.word	0x240017b4

0800c858 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c85e:	2300      	movs	r3, #0
 800c860:	607b      	str	r3, [r7, #4]
 800c862:	e002      	b.n	800c86a <enq_lock+0x12>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	3301      	adds	r3, #1
 800c868:	607b      	str	r3, [r7, #4]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d806      	bhi.n	800c87e <enq_lock+0x26>
 800c870:	4a09      	ldr	r2, [pc, #36]	; (800c898 <enq_lock+0x40>)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	011b      	lsls	r3, r3, #4
 800c876:	4413      	add	r3, r2
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1f2      	bne.n	800c864 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b02      	cmp	r3, #2
 800c882:	bf14      	ite	ne
 800c884:	2301      	movne	r3, #1
 800c886:	2300      	moveq	r3, #0
 800c888:	b2db      	uxtb	r3, r3
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	240017b4 	.word	0x240017b4

0800c89c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e01f      	b.n	800c8ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c8ac:	4a41      	ldr	r2, [pc, #260]	; (800c9b4 <inc_lock+0x118>)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	4413      	add	r3, r2
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d113      	bne.n	800c8e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c8be:	4a3d      	ldr	r2, [pc, #244]	; (800c9b4 <inc_lock+0x118>)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	4413      	add	r3, r2
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d109      	bne.n	800c8e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c8d2:	4a38      	ldr	r2, [pc, #224]	; (800c9b4 <inc_lock+0x118>)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	011b      	lsls	r3, r3, #4
 800c8d8:	4413      	add	r3, r2
 800c8da:	3308      	adds	r3, #8
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d006      	beq.n	800c8f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d9dc      	bls.n	800c8ac <inc_lock+0x10>
 800c8f2:	e000      	b.n	800c8f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c8f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d132      	bne.n	800c962 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	e002      	b.n	800c908 <inc_lock+0x6c>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3301      	adds	r3, #1
 800c906:	60fb      	str	r3, [r7, #12]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d806      	bhi.n	800c91c <inc_lock+0x80>
 800c90e:	4a29      	ldr	r2, [pc, #164]	; (800c9b4 <inc_lock+0x118>)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	011b      	lsls	r3, r3, #4
 800c914:	4413      	add	r3, r2
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f2      	bne.n	800c902 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d101      	bne.n	800c926 <inc_lock+0x8a>
 800c922:	2300      	movs	r3, #0
 800c924:	e040      	b.n	800c9a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	4922      	ldr	r1, [pc, #136]	; (800c9b4 <inc_lock+0x118>)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	440b      	add	r3, r1
 800c932:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689a      	ldr	r2, [r3, #8]
 800c938:	491e      	ldr	r1, [pc, #120]	; (800c9b4 <inc_lock+0x118>)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	011b      	lsls	r3, r3, #4
 800c93e:	440b      	add	r3, r1
 800c940:	3304      	adds	r3, #4
 800c942:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	695a      	ldr	r2, [r3, #20]
 800c948:	491a      	ldr	r1, [pc, #104]	; (800c9b4 <inc_lock+0x118>)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	011b      	lsls	r3, r3, #4
 800c94e:	440b      	add	r3, r1
 800c950:	3308      	adds	r3, #8
 800c952:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c954:	4a17      	ldr	r2, [pc, #92]	; (800c9b4 <inc_lock+0x118>)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	011b      	lsls	r3, r3, #4
 800c95a:	4413      	add	r3, r2
 800c95c:	330c      	adds	r3, #12
 800c95e:	2200      	movs	r2, #0
 800c960:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d009      	beq.n	800c97c <inc_lock+0xe0>
 800c968:	4a12      	ldr	r2, [pc, #72]	; (800c9b4 <inc_lock+0x118>)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	011b      	lsls	r3, r3, #4
 800c96e:	4413      	add	r3, r2
 800c970:	330c      	adds	r3, #12
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <inc_lock+0xe0>
 800c978:	2300      	movs	r3, #0
 800c97a:	e015      	b.n	800c9a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d108      	bne.n	800c994 <inc_lock+0xf8>
 800c982:	4a0c      	ldr	r2, [pc, #48]	; (800c9b4 <inc_lock+0x118>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	011b      	lsls	r3, r3, #4
 800c988:	4413      	add	r3, r2
 800c98a:	330c      	adds	r3, #12
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	3301      	adds	r3, #1
 800c990:	b29a      	uxth	r2, r3
 800c992:	e001      	b.n	800c998 <inc_lock+0xfc>
 800c994:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c998:	4906      	ldr	r1, [pc, #24]	; (800c9b4 <inc_lock+0x118>)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	011b      	lsls	r3, r3, #4
 800c99e:	440b      	add	r3, r1
 800c9a0:	330c      	adds	r3, #12
 800c9a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	240017b4 	.word	0x240017b4

0800c9b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	607b      	str	r3, [r7, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d825      	bhi.n	800ca18 <dec_lock+0x60>
		n = Files[i].ctr;
 800c9cc:	4a17      	ldr	r2, [pc, #92]	; (800ca2c <dec_lock+0x74>)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	4413      	add	r3, r2
 800c9d4:	330c      	adds	r3, #12
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c9da:	89fb      	ldrh	r3, [r7, #14]
 800c9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e0:	d101      	bne.n	800c9e6 <dec_lock+0x2e>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c9e6:	89fb      	ldrh	r3, [r7, #14]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <dec_lock+0x3a>
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c9f2:	4a0e      	ldr	r2, [pc, #56]	; (800ca2c <dec_lock+0x74>)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	011b      	lsls	r3, r3, #4
 800c9f8:	4413      	add	r3, r2
 800c9fa:	330c      	adds	r3, #12
 800c9fc:	89fa      	ldrh	r2, [r7, #14]
 800c9fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca00:	89fb      	ldrh	r3, [r7, #14]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d105      	bne.n	800ca12 <dec_lock+0x5a>
 800ca06:	4a09      	ldr	r2, [pc, #36]	; (800ca2c <dec_lock+0x74>)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	011b      	lsls	r3, r3, #4
 800ca0c:	4413      	add	r3, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	737b      	strb	r3, [r7, #13]
 800ca16:	e001      	b.n	800ca1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca18:	2302      	movs	r3, #2
 800ca1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca1c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	240017b4 	.word	0x240017b4

0800ca30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e010      	b.n	800ca60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ca3e:	4a0d      	ldr	r2, [pc, #52]	; (800ca74 <clear_lock+0x44>)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	011b      	lsls	r3, r3, #4
 800ca44:	4413      	add	r3, r2
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d105      	bne.n	800ca5a <clear_lock+0x2a>
 800ca4e:	4a09      	ldr	r2, [pc, #36]	; (800ca74 <clear_lock+0x44>)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	011b      	lsls	r3, r3, #4
 800ca54:	4413      	add	r3, r2
 800ca56:	2200      	movs	r2, #0
 800ca58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d9eb      	bls.n	800ca3e <clear_lock+0xe>
	}
}
 800ca66:	bf00      	nop
 800ca68:	bf00      	nop
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	240017b4 	.word	0x240017b4

0800ca78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca80:	2300      	movs	r3, #0
 800ca82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	78db      	ldrb	r3, [r3, #3]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d034      	beq.n	800caf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	7858      	ldrb	r0, [r3, #1]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	f7ff fd40 	bl	800c524 <disk_write>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800caaa:	2301      	movs	r3, #1
 800caac:	73fb      	strb	r3, [r7, #15]
 800caae:	e022      	b.n	800caf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	1ad2      	subs	r2, r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	69db      	ldr	r3, [r3, #28]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d217      	bcs.n	800caf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	789b      	ldrb	r3, [r3, #2]
 800caca:	613b      	str	r3, [r7, #16]
 800cacc:	e010      	b.n	800caf0 <sync_window+0x78>
					wsect += fs->fsize;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4413      	add	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7858      	ldrb	r0, [r3, #1]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cae2:	2301      	movs	r3, #1
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	f7ff fd1d 	bl	800c524 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	3b01      	subs	r3, #1
 800caee:	613b      	str	r3, [r7, #16]
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d8eb      	bhi.n	800cace <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d01b      	beq.n	800cb50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f7ff ffad 	bl	800ca78 <sync_window>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d113      	bne.n	800cb50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7858      	ldrb	r0, [r3, #1]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb32:	2301      	movs	r3, #1
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	f7ff fcd5 	bl	800c4e4 <disk_read>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cb40:	f04f 33ff 	mov.w	r3, #4294967295
 800cb44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff ff87 	bl	800ca78 <sync_window>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d158      	bne.n	800cc26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d148      	bne.n	800cc0e <sync_fs+0xb2>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	791b      	ldrb	r3, [r3, #4]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d144      	bne.n	800cc0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3334      	adds	r3, #52	; 0x34
 800cb88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7ff fda9 	bl	800c6e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	3334      	adds	r3, #52	; 0x34
 800cb98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fd38 	bl	800c616 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	3334      	adds	r3, #52	; 0x34
 800cbaa:	4921      	ldr	r1, [pc, #132]	; (800cc30 <sync_fs+0xd4>)
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7ff fd4d 	bl	800c64c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3334      	adds	r3, #52	; 0x34
 800cbb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbba:	491e      	ldr	r1, [pc, #120]	; (800cc34 <sync_fs+0xd8>)
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7ff fd45 	bl	800c64c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3334      	adds	r3, #52	; 0x34
 800cbc6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	f7ff fd3b 	bl	800c64c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	3334      	adds	r3, #52	; 0x34
 800cbda:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f7ff fd31 	bl	800c64c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7858      	ldrb	r0, [r3, #1]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc02:	2301      	movs	r3, #1
 800cc04:	f7ff fc8e 	bl	800c524 <disk_write>
			fs->fsi_flag = 0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	785b      	ldrb	r3, [r3, #1]
 800cc12:	2200      	movs	r2, #0
 800cc14:	2100      	movs	r1, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fca4 	bl	800c564 <disk_ioctl>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <sync_fs+0xca>
 800cc22:	2301      	movs	r3, #1
 800cc24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	41615252 	.word	0x41615252
 800cc34:	61417272 	.word	0x61417272

0800cc38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	3b02      	subs	r3, #2
 800cc46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	699b      	ldr	r3, [r3, #24]
 800cc4c:	3b02      	subs	r3, #2
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d301      	bcc.n	800cc58 <clust2sect+0x20>
 800cc54:	2300      	movs	r3, #0
 800cc56:	e008      	b.n	800cc6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	895b      	ldrh	r3, [r3, #10]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	fb03 f202 	mul.w	r2, r3, r2
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc68:	4413      	add	r3, r2
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	370c      	adds	r7, #12
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b086      	sub	sp, #24
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d904      	bls.n	800cc96 <get_fat+0x20>
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d302      	bcc.n	800cc9c <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc96:	2301      	movs	r3, #1
 800cc98:	617b      	str	r3, [r7, #20]
 800cc9a:	e08f      	b.n	800cdbc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cca0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2b03      	cmp	r3, #3
 800cca8:	d062      	beq.n	800cd70 <get_fat+0xfa>
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	dc7c      	bgt.n	800cda8 <get_fat+0x132>
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d002      	beq.n	800ccb8 <get_fat+0x42>
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d042      	beq.n	800cd3c <get_fat+0xc6>
 800ccb6:	e077      	b.n	800cda8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	085b      	lsrs	r3, r3, #1
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	0a5b      	lsrs	r3, r3, #9
 800ccce:	4413      	add	r3, r2
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6938      	ldr	r0, [r7, #16]
 800ccd4:	f7ff ff14 	bl	800cb00 <move_window>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d167      	bne.n	800cdae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	1c5a      	adds	r2, r3, #1
 800cce2:	60fa      	str	r2, [r7, #12]
 800cce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	4413      	add	r3, r2
 800ccec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	0a5b      	lsrs	r3, r3, #9
 800ccfa:	4413      	add	r3, r2
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6938      	ldr	r0, [r7, #16]
 800cd00:	f7ff fefe 	bl	800cb00 <move_window>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d153      	bne.n	800cdb2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	4413      	add	r3, r2
 800cd14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd18:	021b      	lsls	r3, r3, #8
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <get_fat+0xbc>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	091b      	lsrs	r3, r3, #4
 800cd30:	e002      	b.n	800cd38 <get_fat+0xc2>
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd38:	617b      	str	r3, [r7, #20]
			break;
 800cd3a:	e03f      	b.n	800cdbc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	4413      	add	r3, r2
 800cd46:	4619      	mov	r1, r3
 800cd48:	6938      	ldr	r0, [r7, #16]
 800cd4a:	f7ff fed9 	bl	800cb00 <move_window>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d130      	bne.n	800cdb6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cd62:	4413      	add	r3, r2
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7ff fc1b 	bl	800c5a0 <ld_word>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	617b      	str	r3, [r7, #20]
			break;
 800cd6e:	e025      	b.n	800cdbc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	09db      	lsrs	r3, r3, #7
 800cd78:	4413      	add	r3, r2
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6938      	ldr	r0, [r7, #16]
 800cd7e:	f7ff febf 	bl	800cb00 <move_window>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d118      	bne.n	800cdba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd96:	4413      	add	r3, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7ff fc19 	bl	800c5d0 <ld_dword>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cda4:	617b      	str	r3, [r7, #20]
			break;
 800cda6:	e009      	b.n	800cdbc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cda8:	2301      	movs	r3, #1
 800cdaa:	617b      	str	r3, [r7, #20]
 800cdac:	e006      	b.n	800cdbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdae:	bf00      	nop
 800cdb0:	e004      	b.n	800cdbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdb2:	bf00      	nop
 800cdb4:	e002      	b.n	800cdbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdb6:	bf00      	nop
 800cdb8:	e000      	b.n	800cdbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdba:	bf00      	nop
		}
	}

	return val;
 800cdbc:	697b      	ldr	r3, [r7, #20]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cdc6:	b590      	push	{r4, r7, lr}
 800cdc8:	b089      	sub	sp, #36	; 0x24
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	60f8      	str	r0, [r7, #12]
 800cdce:	60b9      	str	r1, [r7, #8]
 800cdd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	f240 80d2 	bls.w	800cf82 <put_fat+0x1bc>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	f080 80cc 	bcs.w	800cf82 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	f000 8096 	beq.w	800cf20 <put_fat+0x15a>
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	f300 80cd 	bgt.w	800cf94 <put_fat+0x1ce>
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d002      	beq.n	800ce04 <put_fat+0x3e>
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d06e      	beq.n	800cee0 <put_fat+0x11a>
 800ce02:	e0c7      	b.n	800cf94 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	085b      	lsrs	r3, r3, #1
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	4413      	add	r3, r2
 800ce10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	0a5b      	lsrs	r3, r3, #9
 800ce1a:	4413      	add	r3, r2
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fe6e 	bl	800cb00 <move_window>
 800ce24:	4603      	mov	r3, r0
 800ce26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce28:	7ffb      	ldrb	r3, [r7, #31]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f040 80ab 	bne.w	800cf86 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	1c59      	adds	r1, r3, #1
 800ce3a:	61b9      	str	r1, [r7, #24]
 800ce3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce40:	4413      	add	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	f003 0301 	and.w	r3, r3, #1
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00d      	beq.n	800ce6a <put_fat+0xa4>
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	b25b      	sxtb	r3, r3
 800ce54:	f003 030f 	and.w	r3, r3, #15
 800ce58:	b25a      	sxtb	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	011b      	lsls	r3, r3, #4
 800ce60:	b25b      	sxtb	r3, r3
 800ce62:	4313      	orrs	r3, r2
 800ce64:	b25b      	sxtb	r3, r3
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	e001      	b.n	800ce6e <put_fat+0xa8>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2201      	movs	r2, #1
 800ce76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	0a5b      	lsrs	r3, r3, #9
 800ce80:	4413      	add	r3, r2
 800ce82:	4619      	mov	r1, r3
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fe3b 	bl	800cb00 <move_window>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce8e:	7ffb      	ldrb	r3, [r7, #31]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d17a      	bne.n	800cf8a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea0:	4413      	add	r3, r2
 800cea2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	f003 0301 	and.w	r3, r3, #1
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <put_fat+0xf0>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	091b      	lsrs	r3, r3, #4
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	e00e      	b.n	800ced4 <put_fat+0x10e>
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b25b      	sxtb	r3, r3
 800cebc:	f023 030f 	bic.w	r3, r3, #15
 800cec0:	b25a      	sxtb	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	0a1b      	lsrs	r3, r3, #8
 800cec6:	b25b      	sxtb	r3, r3
 800cec8:	f003 030f 	and.w	r3, r3, #15
 800cecc:	b25b      	sxtb	r3, r3
 800cece:	4313      	orrs	r3, r2
 800ced0:	b25b      	sxtb	r3, r3
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2201      	movs	r2, #1
 800cedc:	70da      	strb	r2, [r3, #3]
			break;
 800cede:	e059      	b.n	800cf94 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	0a1b      	lsrs	r3, r3, #8
 800cee8:	4413      	add	r3, r2
 800ceea:	4619      	mov	r1, r3
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f7ff fe07 	bl	800cb00 <move_window>
 800cef2:	4603      	mov	r3, r0
 800cef4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cef6:	7ffb      	ldrb	r3, [r7, #31]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d148      	bne.n	800cf8e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf0a:	4413      	add	r3, r2
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	b292      	uxth	r2, r2
 800cf10:	4611      	mov	r1, r2
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fb7f 	bl	800c616 <st_word>
			fs->wflag = 1;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	70da      	strb	r2, [r3, #3]
			break;
 800cf1e:	e039      	b.n	800cf94 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	09db      	lsrs	r3, r3, #7
 800cf28:	4413      	add	r3, r2
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f7ff fde7 	bl	800cb00 <move_window>
 800cf32:	4603      	mov	r3, r0
 800cf34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf36:	7ffb      	ldrb	r3, [r7, #31]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d12a      	bne.n	800cf92 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf50:	4413      	add	r3, r2
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fb3c 	bl	800c5d0 <ld_dword>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf5e:	4323      	orrs	r3, r4
 800cf60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf70:	4413      	add	r3, r2
 800cf72:	6879      	ldr	r1, [r7, #4]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7ff fb69 	bl	800c64c <st_dword>
			fs->wflag = 1;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	70da      	strb	r2, [r3, #3]
			break;
 800cf80:	e008      	b.n	800cf94 <put_fat+0x1ce>
		}
	}
 800cf82:	bf00      	nop
 800cf84:	e006      	b.n	800cf94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf86:	bf00      	nop
 800cf88:	e004      	b.n	800cf94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf8a:	bf00      	nop
 800cf8c:	e002      	b.n	800cf94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf8e:	bf00      	nop
 800cf90:	e000      	b.n	800cf94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf92:	bf00      	nop
	return res;
 800cf94:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3724      	adds	r7, #36	; 0x24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd90      	pop	{r4, r7, pc}

0800cf9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b088      	sub	sp, #32
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	60b9      	str	r1, [r7, #8]
 800cfa8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d904      	bls.n	800cfc4 <remove_chain+0x26>
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d301      	bcc.n	800cfc8 <remove_chain+0x2a>
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	e04b      	b.n	800d060 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00c      	beq.n	800cfe8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cfce:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	69b8      	ldr	r0, [r7, #24]
 800cfd6:	f7ff fef6 	bl	800cdc6 <put_fat>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cfde:	7ffb      	ldrb	r3, [r7, #31]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <remove_chain+0x4a>
 800cfe4:	7ffb      	ldrb	r3, [r7, #31]
 800cfe6:	e03b      	b.n	800d060 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cfe8:	68b9      	ldr	r1, [r7, #8]
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7ff fe43 	bl	800cc76 <get_fat>
 800cff0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d031      	beq.n	800d05c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d101      	bne.n	800d002 <remove_chain+0x64>
 800cffe:	2302      	movs	r3, #2
 800d000:	e02e      	b.n	800d060 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d008:	d101      	bne.n	800d00e <remove_chain+0x70>
 800d00a:	2301      	movs	r3, #1
 800d00c:	e028      	b.n	800d060 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d00e:	2200      	movs	r2, #0
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	69b8      	ldr	r0, [r7, #24]
 800d014:	f7ff fed7 	bl	800cdc6 <put_fat>
 800d018:	4603      	mov	r3, r0
 800d01a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d01c:	7ffb      	ldrb	r3, [r7, #31]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <remove_chain+0x88>
 800d022:	7ffb      	ldrb	r3, [r7, #31]
 800d024:	e01c      	b.n	800d060 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	695a      	ldr	r2, [r3, #20]
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	3b02      	subs	r3, #2
 800d030:	429a      	cmp	r2, r3
 800d032:	d20b      	bcs.n	800d04c <remove_chain+0xae>
			fs->free_clst++;
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	791b      	ldrb	r3, [r3, #4]
 800d042:	f043 0301 	orr.w	r3, r3, #1
 800d046:	b2da      	uxtb	r2, r3
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	429a      	cmp	r2, r3
 800d058:	d3c6      	bcc.n	800cfe8 <remove_chain+0x4a>
 800d05a:	e000      	b.n	800d05e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d05c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10d      	bne.n	800d09a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <create_chain+0x2c>
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	69ba      	ldr	r2, [r7, #24]
 800d090:	429a      	cmp	r2, r3
 800d092:	d31b      	bcc.n	800d0cc <create_chain+0x64>
 800d094:	2301      	movs	r3, #1
 800d096:	61bb      	str	r3, [r7, #24]
 800d098:	e018      	b.n	800d0cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7ff fdea 	bl	800cc76 <get_fat>
 800d0a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d801      	bhi.n	800d0ae <create_chain+0x46>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e070      	b.n	800d190 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d101      	bne.n	800d0ba <create_chain+0x52>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	e06a      	b.n	800d190 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d201      	bcs.n	800d0c8 <create_chain+0x60>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	e063      	b.n	800d190 <create_chain+0x128>
		scl = clst;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	69fa      	ldr	r2, [r7, #28]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d307      	bcc.n	800d0f0 <create_chain+0x88>
				ncl = 2;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d0e4:	69fa      	ldr	r2, [r7, #28]
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d901      	bls.n	800d0f0 <create_chain+0x88>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	e04f      	b.n	800d190 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d0f0:	69f9      	ldr	r1, [r7, #28]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fdbf 	bl	800cc76 <get_fat>
 800d0f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00e      	beq.n	800d11e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d003      	beq.n	800d10e <create_chain+0xa6>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10c:	d101      	bne.n	800d112 <create_chain+0xaa>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	e03e      	b.n	800d190 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d112:	69fa      	ldr	r2, [r7, #28]
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	429a      	cmp	r2, r3
 800d118:	d1da      	bne.n	800d0d0 <create_chain+0x68>
 800d11a:	2300      	movs	r3, #0
 800d11c:	e038      	b.n	800d190 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d11e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d120:	f04f 32ff 	mov.w	r2, #4294967295
 800d124:	69f9      	ldr	r1, [r7, #28]
 800d126:	6938      	ldr	r0, [r7, #16]
 800d128:	f7ff fe4d 	bl	800cdc6 <put_fat>
 800d12c:	4603      	mov	r3, r0
 800d12e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d130:	7dfb      	ldrb	r3, [r7, #23]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d109      	bne.n	800d14a <create_chain+0xe2>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d006      	beq.n	800d14a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d13c:	69fa      	ldr	r2, [r7, #28]
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6938      	ldr	r0, [r7, #16]
 800d142:	f7ff fe40 	bl	800cdc6 <put_fat>
 800d146:	4603      	mov	r3, r0
 800d148:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d116      	bne.n	800d17e <create_chain+0x116>
		fs->last_clst = ncl;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	695a      	ldr	r2, [r3, #20]
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	3b02      	subs	r3, #2
 800d160:	429a      	cmp	r2, r3
 800d162:	d804      	bhi.n	800d16e <create_chain+0x106>
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	695b      	ldr	r3, [r3, #20]
 800d168:	1e5a      	subs	r2, r3, #1
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	791b      	ldrb	r3, [r3, #4]
 800d172:	f043 0301 	orr.w	r3, r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	711a      	strb	r2, [r3, #4]
 800d17c:	e007      	b.n	800d18e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d102      	bne.n	800d18a <create_chain+0x122>
 800d184:	f04f 33ff 	mov.w	r3, #4294967295
 800d188:	e000      	b.n	800d18c <create_chain+0x124>
 800d18a:	2301      	movs	r3, #1
 800d18c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d18e:	69fb      	ldr	r3, [r7, #28]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d198:	b480      	push	{r7}
 800d19a:	b087      	sub	sp, #28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	0a5b      	lsrs	r3, r3, #9
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	8952      	ldrh	r2, [r2, #10]
 800d1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	1d1a      	adds	r2, r3, #4
 800d1c2:	613a      	str	r2, [r7, #16]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d101      	bne.n	800d1d2 <clmt_clust+0x3a>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e010      	b.n	800d1f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d307      	bcc.n	800d1ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1e8:	e7e9      	b.n	800d1be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d1ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	4413      	add	r3, r2
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d216:	d204      	bcs.n	800d222 <dir_sdi+0x22>
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	f003 031f 	and.w	r3, r3, #31
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d222:	2302      	movs	r3, #2
 800d224:	e063      	b.n	800d2ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d106      	bne.n	800d246 <dir_sdi+0x46>
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d902      	bls.n	800d246 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d244:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10c      	bne.n	800d266 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	095b      	lsrs	r3, r3, #5
 800d250:	693a      	ldr	r2, [r7, #16]
 800d252:	8912      	ldrh	r2, [r2, #8]
 800d254:	4293      	cmp	r3, r2
 800d256:	d301      	bcc.n	800d25c <dir_sdi+0x5c>
 800d258:	2302      	movs	r3, #2
 800d25a:	e048      	b.n	800d2ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	61da      	str	r2, [r3, #28]
 800d264:	e029      	b.n	800d2ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	895b      	ldrh	r3, [r3, #10]
 800d26a:	025b      	lsls	r3, r3, #9
 800d26c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d26e:	e019      	b.n	800d2a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6979      	ldr	r1, [r7, #20]
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff fcfe 	bl	800cc76 <get_fat>
 800d27a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d282:	d101      	bne.n	800d288 <dir_sdi+0x88>
 800d284:	2301      	movs	r3, #1
 800d286:	e032      	b.n	800d2ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d904      	bls.n	800d298 <dir_sdi+0x98>
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	429a      	cmp	r2, r3
 800d296:	d301      	bcc.n	800d29c <dir_sdi+0x9c>
 800d298:	2302      	movs	r3, #2
 800d29a:	e028      	b.n	800d2ee <dir_sdi+0xee>
			ofs -= csz;
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d2e1      	bcs.n	800d270 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d2ac:	6979      	ldr	r1, [r7, #20]
 800d2ae:	6938      	ldr	r0, [r7, #16]
 800d2b0:	f7ff fcc2 	bl	800cc38 <clust2sect>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	697a      	ldr	r2, [r7, #20]
 800d2be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	69db      	ldr	r3, [r3, #28]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <dir_sdi+0xcc>
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	e010      	b.n	800d2ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	69da      	ldr	r2, [r3, #28]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	0a5b      	lsrs	r3, r3, #9
 800d2d4:	441a      	add	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e6:	441a      	add	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b086      	sub	sp, #24
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	3320      	adds	r3, #32
 800d30c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <dir_next+0x28>
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d31c:	d301      	bcc.n	800d322 <dir_next+0x2c>
 800d31e:	2304      	movs	r3, #4
 800d320:	e0aa      	b.n	800d478 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 8098 	bne.w	800d45e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10b      	bne.n	800d358 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	095b      	lsrs	r3, r3, #5
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	8912      	ldrh	r2, [r2, #8]
 800d348:	4293      	cmp	r3, r2
 800d34a:	f0c0 8088 	bcc.w	800d45e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	61da      	str	r2, [r3, #28]
 800d354:	2304      	movs	r3, #4
 800d356:	e08f      	b.n	800d478 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	0a5b      	lsrs	r3, r3, #9
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	8952      	ldrh	r2, [r2, #10]
 800d360:	3a01      	subs	r2, #1
 800d362:	4013      	ands	r3, r2
 800d364:	2b00      	cmp	r3, #0
 800d366:	d17a      	bne.n	800d45e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	4619      	mov	r1, r3
 800d370:	4610      	mov	r0, r2
 800d372:	f7ff fc80 	bl	800cc76 <get_fat>
 800d376:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d801      	bhi.n	800d382 <dir_next+0x8c>
 800d37e:	2302      	movs	r3, #2
 800d380:	e07a      	b.n	800d478 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d388:	d101      	bne.n	800d38e <dir_next+0x98>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e074      	b.n	800d478 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	429a      	cmp	r2, r3
 800d396:	d358      	bcc.n	800d44a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d104      	bne.n	800d3a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	61da      	str	r2, [r3, #28]
 800d3a4:	2304      	movs	r3, #4
 800d3a6:	e067      	b.n	800d478 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	f7ff fe59 	bl	800d068 <create_chain>
 800d3b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <dir_next+0xcc>
 800d3be:	2307      	movs	r3, #7
 800d3c0:	e05a      	b.n	800d478 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d101      	bne.n	800d3cc <dir_next+0xd6>
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	e055      	b.n	800d478 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d101      	bne.n	800d3d8 <dir_next+0xe2>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e04f      	b.n	800d478 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f7ff fb4d 	bl	800ca78 <sync_window>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <dir_next+0xf2>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e047      	b.n	800d478 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	3334      	adds	r3, #52	; 0x34
 800d3ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff f977 	bl	800c6e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	613b      	str	r3, [r7, #16]
 800d3fc:	6979      	ldr	r1, [r7, #20]
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff fc1a 	bl	800cc38 <clust2sect>
 800d404:	4602      	mov	r2, r0
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	631a      	str	r2, [r3, #48]	; 0x30
 800d40a:	e012      	b.n	800d432 <dir_next+0x13c>
						fs->wflag = 1;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2201      	movs	r2, #1
 800d410:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f7ff fb30 	bl	800ca78 <sync_window>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <dir_next+0x12c>
 800d41e:	2301      	movs	r3, #1
 800d420:	e02a      	b.n	800d478 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	3301      	adds	r3, #1
 800d426:	613b      	str	r3, [r7, #16]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42c:	1c5a      	adds	r2, r3, #1
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	631a      	str	r2, [r3, #48]	; 0x30
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	895b      	ldrh	r3, [r3, #10]
 800d436:	461a      	mov	r2, r3
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d3e6      	bcc.n	800d40c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	1ad2      	subs	r2, r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d450:	6979      	ldr	r1, [r7, #20]
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f7ff fbf0 	bl	800cc38 <clust2sect>
 800d458:	4602      	mov	r2, r0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d470:	441a      	add	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3718      	adds	r7, #24
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d490:	2100      	movs	r1, #0
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff feb4 	bl	800d200 <dir_sdi>
 800d498:	4603      	mov	r3, r0
 800d49a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d12b      	bne.n	800d4fa <dir_alloc+0x7a>
		n = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7ff fb27 	bl	800cb00 <move_window>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d4b6:	7dfb      	ldrb	r3, [r7, #23]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d11d      	bne.n	800d4f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2be5      	cmp	r3, #229	; 0xe5
 800d4c4:	d004      	beq.n	800d4d0 <dir_alloc+0x50>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d107      	bne.n	800d4e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	613b      	str	r3, [r7, #16]
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d102      	bne.n	800d4e4 <dir_alloc+0x64>
 800d4de:	e00c      	b.n	800d4fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff ff05 	bl	800d2f6 <dir_next>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0d7      	beq.n	800d4a6 <dir_alloc+0x26>
 800d4f6:	e000      	b.n	800d4fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d4f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d101      	bne.n	800d504 <dir_alloc+0x84>
 800d500:	2307      	movs	r3, #7
 800d502:	75fb      	strb	r3, [r7, #23]
	return res;
 800d504:	7dfb      	ldrb	r3, [r7, #23]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	331a      	adds	r3, #26
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff f83f 	bl	800c5a0 <ld_word>
 800d522:	4603      	mov	r3, r0
 800d524:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	d109      	bne.n	800d542 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	3314      	adds	r3, #20
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff f834 	bl	800c5a0 <ld_word>
 800d538:	4603      	mov	r3, r0
 800d53a:	041b      	lsls	r3, r3, #16
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	4313      	orrs	r3, r2
 800d540:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d542:	68fb      	ldr	r3, [r7, #12]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	331a      	adds	r3, #26
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	b292      	uxth	r2, r2
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff f857 	bl	800c616 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b03      	cmp	r3, #3
 800d56e:	d109      	bne.n	800d584 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	f103 0214 	add.w	r2, r3, #20
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	0c1b      	lsrs	r3, r3, #16
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7ff f849 	bl	800c616 <st_word>
	}
}
 800d584:	bf00      	nop
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b087      	sub	sp, #28
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	331a      	adds	r3, #26
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7ff f800 	bl	800c5a0 <ld_word>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <cmp_lfn+0x1e>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e059      	b.n	800d65e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5b2:	1e5a      	subs	r2, r3, #1
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	81fb      	strh	r3, [r7, #14]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	613b      	str	r3, [r7, #16]
 800d5c8:	e033      	b.n	800d632 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d5ca:	4a27      	ldr	r2, [pc, #156]	; (800d668 <cmp_lfn+0xdc>)
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fe ffe1 	bl	800c5a0 <ld_word>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d5e2:	89fb      	ldrh	r3, [r7, #14]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01a      	beq.n	800d61e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2bfe      	cmp	r3, #254	; 0xfe
 800d5ec:	d812      	bhi.n	800d614 <cmp_lfn+0x88>
 800d5ee:	89bb      	ldrh	r3, [r7, #12]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fe fead 	bl	800c350 <ff_wtoupper>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	461c      	mov	r4, r3
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	617a      	str	r2, [r7, #20]
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	4413      	add	r3, r2
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fe fea1 	bl	800c350 <ff_wtoupper>
 800d60e:	4603      	mov	r3, r0
 800d610:	429c      	cmp	r4, r3
 800d612:	d001      	beq.n	800d618 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d614:	2300      	movs	r3, #0
 800d616:	e022      	b.n	800d65e <cmp_lfn+0xd2>
			}
			wc = uc;
 800d618:	89bb      	ldrh	r3, [r7, #12]
 800d61a:	81fb      	strh	r3, [r7, #14]
 800d61c:	e006      	b.n	800d62c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d61e:	89bb      	ldrh	r3, [r7, #12]
 800d620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d624:	4293      	cmp	r3, r2
 800d626:	d001      	beq.n	800d62c <cmp_lfn+0xa0>
 800d628:	2300      	movs	r3, #0
 800d62a:	e018      	b.n	800d65e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	3301      	adds	r3, #1
 800d630:	613b      	str	r3, [r7, #16]
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2b0c      	cmp	r3, #12
 800d636:	d9c8      	bls.n	800d5ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00b      	beq.n	800d65c <cmp_lfn+0xd0>
 800d644:	89fb      	ldrh	r3, [r7, #14]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d008      	beq.n	800d65c <cmp_lfn+0xd0>
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4413      	add	r3, r2
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <cmp_lfn+0xd0>
 800d658:	2300      	movs	r3, #0
 800d65a:	e000      	b.n	800d65e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d65c:	2301      	movs	r3, #1
}
 800d65e:	4618      	mov	r0, r3
 800d660:	371c      	adds	r7, #28
 800d662:	46bd      	mov	sp, r7
 800d664:	bd90      	pop	{r4, r7, pc}
 800d666:	bf00      	nop
 800d668:	0800fde0 	.word	0x0800fde0

0800d66c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4611      	mov	r1, r2
 800d678:	461a      	mov	r2, r3
 800d67a:	460b      	mov	r3, r1
 800d67c:	71fb      	strb	r3, [r7, #7]
 800d67e:	4613      	mov	r3, r2
 800d680:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	330d      	adds	r3, #13
 800d686:	79ba      	ldrb	r2, [r7, #6]
 800d688:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	330b      	adds	r3, #11
 800d68e:	220f      	movs	r2, #15
 800d690:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	330c      	adds	r3, #12
 800d696:	2200      	movs	r2, #0
 800d698:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	331a      	adds	r3, #26
 800d69e:	2100      	movs	r1, #0
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7fe ffb8 	bl	800c616 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	1e5a      	subs	r2, r3, #1
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4413      	add	r3, r2
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	82fb      	strh	r3, [r7, #22]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d6be:	8afb      	ldrh	r3, [r7, #22]
 800d6c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d007      	beq.n	800d6d8 <put_lfn+0x6c>
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	61fa      	str	r2, [r7, #28]
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d6d8:	4a17      	ldr	r2, [pc, #92]	; (800d738 <put_lfn+0xcc>)
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	4413      	add	r3, r2
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	8afa      	ldrh	r2, [r7, #22]
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe ff93 	bl	800c616 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d6f0:	8afb      	ldrh	r3, [r7, #22]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d102      	bne.n	800d6fc <put_lfn+0x90>
 800d6f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	3301      	adds	r3, #1
 800d700:	61bb      	str	r3, [r7, #24]
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2b0c      	cmp	r3, #12
 800d706:	d9da      	bls.n	800d6be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d708:	8afb      	ldrh	r3, [r7, #22]
 800d70a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d70e:	4293      	cmp	r3, r2
 800d710:	d006      	beq.n	800d720 <put_lfn+0xb4>
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	4413      	add	r3, r2
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d103      	bne.n	800d728 <put_lfn+0xbc>
 800d720:	79fb      	ldrb	r3, [r7, #7]
 800d722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d726:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	79fa      	ldrb	r2, [r7, #7]
 800d72c:	701a      	strb	r2, [r3, #0]
}
 800d72e:	bf00      	nop
 800d730:	3720      	adds	r7, #32
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	0800fde0 	.word	0x0800fde0

0800d73c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08c      	sub	sp, #48	; 0x30
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d74a:	220b      	movs	r2, #11
 800d74c:	68b9      	ldr	r1, [r7, #8]
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7fe ffa8 	bl	800c6a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	2b05      	cmp	r3, #5
 800d758:	d929      	bls.n	800d7ae <gen_numname+0x72>
		sr = seq;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d75e:	e020      	b.n	800d7a2 <gen_numname+0x66>
			wc = *lfn++;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	1c9a      	adds	r2, r3, #2
 800d764:	607a      	str	r2, [r7, #4]
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d76a:	2300      	movs	r3, #0
 800d76c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d76e:	e015      	b.n	800d79c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	005a      	lsls	r2, r3, #1
 800d774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d77e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d780:	085b      	lsrs	r3, r3, #1
 800d782:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d003      	beq.n	800d796 <gen_numname+0x5a>
 800d78e:	69fa      	ldr	r2, [r7, #28]
 800d790:	4b30      	ldr	r3, [pc, #192]	; (800d854 <gen_numname+0x118>)
 800d792:	4053      	eors	r3, r2
 800d794:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	3301      	adds	r3, #1
 800d79a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	2b0f      	cmp	r3, #15
 800d7a0:	d9e6      	bls.n	800d770 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1da      	bne.n	800d760 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d7ae:	2307      	movs	r3, #7
 800d7b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	f003 030f 	and.w	r3, r3, #15
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	3330      	adds	r3, #48	; 0x30
 800d7be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7c6:	2b39      	cmp	r3, #57	; 0x39
 800d7c8:	d904      	bls.n	800d7d4 <gen_numname+0x98>
 800d7ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ce:	3307      	adds	r3, #7
 800d7d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d6:	1e5a      	subs	r2, r3, #1
 800d7d8:	62ba      	str	r2, [r7, #40]	; 0x28
 800d7da:	3330      	adds	r3, #48	; 0x30
 800d7dc:	443b      	add	r3, r7
 800d7de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d7e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	091b      	lsrs	r3, r3, #4
 800d7ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1df      	bne.n	800d7b2 <gen_numname+0x76>
	ns[i] = '~';
 800d7f2:	f107 0214 	add.w	r2, r7, #20
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	4413      	add	r3, r2
 800d7fa:	227e      	movs	r2, #126	; 0x7e
 800d7fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d7fe:	2300      	movs	r3, #0
 800d800:	627b      	str	r3, [r7, #36]	; 0x24
 800d802:	e002      	b.n	800d80a <gen_numname+0xce>
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	3301      	adds	r3, #1
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
 800d80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	429a      	cmp	r2, r3
 800d810:	d205      	bcs.n	800d81e <gen_numname+0xe2>
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	4413      	add	r3, r2
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b20      	cmp	r3, #32
 800d81c:	d1f2      	bne.n	800d804 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	2b07      	cmp	r3, #7
 800d822:	d807      	bhi.n	800d834 <gen_numname+0xf8>
 800d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	62ba      	str	r2, [r7, #40]	; 0x28
 800d82a:	3330      	adds	r3, #48	; 0x30
 800d82c:	443b      	add	r3, r7
 800d82e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d832:	e000      	b.n	800d836 <gen_numname+0xfa>
 800d834:	2120      	movs	r1, #32
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	627a      	str	r2, [r7, #36]	; 0x24
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	4413      	add	r3, r2
 800d840:	460a      	mov	r2, r1
 800d842:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	2b07      	cmp	r3, #7
 800d848:	d9e9      	bls.n	800d81e <gen_numname+0xe2>
}
 800d84a:	bf00      	nop
 800d84c:	bf00      	nop
 800d84e:	3730      	adds	r7, #48	; 0x30
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	00011021 	.word	0x00011021

0800d858 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d860:	2300      	movs	r3, #0
 800d862:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d864:	230b      	movs	r3, #11
 800d866:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	0852      	lsrs	r2, r2, #1
 800d86e:	01db      	lsls	r3, r3, #7
 800d870:	4313      	orrs	r3, r2
 800d872:	b2da      	uxtb	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	1c59      	adds	r1, r3, #1
 800d878:	6079      	str	r1, [r7, #4]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	4413      	add	r3, r2
 800d87e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	3b01      	subs	r3, #1
 800d884:	60bb      	str	r3, [r7, #8]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1ed      	bne.n	800d868 <sum_sfn+0x10>
	return sum;
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b086      	sub	sp, #24
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f7ff fca8 	bl	800d200 <dir_sdi>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d8b4:	7dfb      	ldrb	r3, [r7, #23]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <dir_find+0x24>
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
 800d8bc:	e0a9      	b.n	800da12 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d8be:	23ff      	movs	r3, #255	; 0xff
 800d8c0:	753b      	strb	r3, [r7, #20]
 800d8c2:	7d3b      	ldrb	r3, [r7, #20]
 800d8c4:	757b      	strb	r3, [r7, #21]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	69db      	ldr	r3, [r3, #28]
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6938      	ldr	r0, [r7, #16]
 800d8d6:	f7ff f913 	bl	800cb00 <move_window>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f040 8090 	bne.w	800da06 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d8ee:	7dbb      	ldrb	r3, [r7, #22]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d102      	bne.n	800d8fa <dir_find+0x60>
 800d8f4:	2304      	movs	r3, #4
 800d8f6:	75fb      	strb	r3, [r7, #23]
 800d8f8:	e08a      	b.n	800da10 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	330b      	adds	r3, #11
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d906:	73fb      	strb	r3, [r7, #15]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	7bfa      	ldrb	r2, [r7, #15]
 800d90c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d90e:	7dbb      	ldrb	r3, [r7, #22]
 800d910:	2be5      	cmp	r3, #229	; 0xe5
 800d912:	d007      	beq.n	800d924 <dir_find+0x8a>
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	f003 0308 	and.w	r3, r3, #8
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <dir_find+0x98>
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
 800d920:	2b0f      	cmp	r3, #15
 800d922:	d006      	beq.n	800d932 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d924:	23ff      	movs	r3, #255	; 0xff
 800d926:	757b      	strb	r3, [r7, #21]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f04f 32ff 	mov.w	r2, #4294967295
 800d92e:	631a      	str	r2, [r3, #48]	; 0x30
 800d930:	e05e      	b.n	800d9f0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	2b0f      	cmp	r3, #15
 800d936:	d136      	bne.n	800d9a6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d942:	2b00      	cmp	r3, #0
 800d944:	d154      	bne.n	800d9f0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d946:	7dbb      	ldrb	r3, [r7, #22]
 800d948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00d      	beq.n	800d96c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	7b5b      	ldrb	r3, [r3, #13]
 800d956:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d958:	7dbb      	ldrb	r3, [r7, #22]
 800d95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d95e:	75bb      	strb	r3, [r7, #22]
 800d960:	7dbb      	ldrb	r3, [r7, #22]
 800d962:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	695a      	ldr	r2, [r3, #20]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d96c:	7dba      	ldrb	r2, [r7, #22]
 800d96e:	7d7b      	ldrb	r3, [r7, #21]
 800d970:	429a      	cmp	r2, r3
 800d972:	d115      	bne.n	800d9a0 <dir_find+0x106>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	330d      	adds	r3, #13
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	7d3a      	ldrb	r2, [r7, #20]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d10e      	bne.n	800d9a0 <dir_find+0x106>
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	68da      	ldr	r2, [r3, #12]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a1b      	ldr	r3, [r3, #32]
 800d98a:	4619      	mov	r1, r3
 800d98c:	4610      	mov	r0, r2
 800d98e:	f7ff fdfd 	bl	800d58c <cmp_lfn>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <dir_find+0x106>
 800d998:	7d7b      	ldrb	r3, [r7, #21]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	e000      	b.n	800d9a2 <dir_find+0x108>
 800d9a0:	23ff      	movs	r3, #255	; 0xff
 800d9a2:	757b      	strb	r3, [r7, #21]
 800d9a4:	e024      	b.n	800d9f0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d9a6:	7d7b      	ldrb	r3, [r7, #21]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d109      	bne.n	800d9c0 <dir_find+0x126>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a1b      	ldr	r3, [r3, #32]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff ff51 	bl	800d858 <sum_sfn>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	7d3b      	ldrb	r3, [r7, #20]
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d024      	beq.n	800da0a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10a      	bne.n	800d9e4 <dir_find+0x14a>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6a18      	ldr	r0, [r3, #32]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	3324      	adds	r3, #36	; 0x24
 800d9d6:	220b      	movs	r2, #11
 800d9d8:	4619      	mov	r1, r3
 800d9da:	f7fe fe9f 	bl	800c71c <mem_cmp>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d014      	beq.n	800da0e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9e4:	23ff      	movs	r3, #255	; 0xff
 800d9e6:	757b      	strb	r3, [r7, #21]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff fc7f 	bl	800d2f6 <dir_next>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f43f af65 	beq.w	800d8ce <dir_find+0x34>
 800da04:	e004      	b.n	800da10 <dir_find+0x176>
		if (res != FR_OK) break;
 800da06:	bf00      	nop
 800da08:	e002      	b.n	800da10 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da0a:	bf00      	nop
 800da0c:	e000      	b.n	800da10 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da0e:	bf00      	nop

	return res;
 800da10:	7dfb      	ldrb	r3, [r7, #23]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08c      	sub	sp, #48	; 0x30
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <dir_register+0x20>
 800da38:	2306      	movs	r3, #6
 800da3a:	e0e0      	b.n	800dbfe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800da3c:	2300      	movs	r3, #0
 800da3e:	627b      	str	r3, [r7, #36]	; 0x24
 800da40:	e002      	b.n	800da48 <dir_register+0x2c>
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	3301      	adds	r3, #1
 800da46:	627b      	str	r3, [r7, #36]	; 0x24
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	68da      	ldr	r2, [r3, #12]
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	4413      	add	r3, r2
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1f4      	bne.n	800da42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800da5e:	f107 030c 	add.w	r3, r7, #12
 800da62:	220c      	movs	r2, #12
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fe1d 	bl	800c6a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
 800da6c:	f003 0301 	and.w	r3, r3, #1
 800da70:	2b00      	cmp	r3, #0
 800da72:	d032      	beq.n	800dada <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2240      	movs	r2, #64	; 0x40
 800da78:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800da7c:	2301      	movs	r3, #1
 800da7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800da80:	e016      	b.n	800dab0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	68da      	ldr	r2, [r3, #12]
 800da8c:	f107 010c 	add.w	r1, r7, #12
 800da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da92:	f7ff fe53 	bl	800d73c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff feff 	bl	800d89a <dir_find>
 800da9c:	4603      	mov	r3, r0
 800da9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800daa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	3301      	adds	r3, #1
 800daae:	62bb      	str	r3, [r7, #40]	; 0x28
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	2b63      	cmp	r3, #99	; 0x63
 800dab4:	d9e5      	bls.n	800da82 <dir_register+0x66>
 800dab6:	e000      	b.n	800daba <dir_register+0x9e>
			if (res != FR_OK) break;
 800dab8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	2b64      	cmp	r3, #100	; 0x64
 800dabe:	d101      	bne.n	800dac4 <dir_register+0xa8>
 800dac0:	2307      	movs	r3, #7
 800dac2:	e09c      	b.n	800dbfe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dac8:	2b04      	cmp	r3, #4
 800daca:	d002      	beq.n	800dad2 <dir_register+0xb6>
 800dacc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dad0:	e095      	b.n	800dbfe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dad2:	7dfa      	ldrb	r2, [r7, #23]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dada:	7dfb      	ldrb	r3, [r7, #23]
 800dadc:	f003 0302 	and.w	r3, r3, #2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d007      	beq.n	800daf4 <dir_register+0xd8>
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	330c      	adds	r3, #12
 800dae8:	4a47      	ldr	r2, [pc, #284]	; (800dc08 <dir_register+0x1ec>)
 800daea:	fba2 2303 	umull	r2, r3, r2, r3
 800daee:	089b      	lsrs	r3, r3, #2
 800daf0:	3301      	adds	r3, #1
 800daf2:	e000      	b.n	800daf6 <dir_register+0xda>
 800daf4:	2301      	movs	r3, #1
 800daf6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800daf8:	6a39      	ldr	r1, [r7, #32]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff fcc0 	bl	800d480 <dir_alloc>
 800db00:	4603      	mov	r3, r0
 800db02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800db06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d148      	bne.n	800dba0 <dir_register+0x184>
 800db0e:	6a3b      	ldr	r3, [r7, #32]
 800db10:	3b01      	subs	r3, #1
 800db12:	623b      	str	r3, [r7, #32]
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d042      	beq.n	800dba0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	695a      	ldr	r2, [r3, #20]
 800db1e:	6a3b      	ldr	r3, [r7, #32]
 800db20:	015b      	lsls	r3, r3, #5
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff fb6a 	bl	800d200 <dir_sdi>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800db32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db36:	2b00      	cmp	r3, #0
 800db38:	d132      	bne.n	800dba0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	3324      	adds	r3, #36	; 0x24
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff fe8a 	bl	800d858 <sum_sfn>
 800db44:	4603      	mov	r3, r0
 800db46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	69db      	ldr	r3, [r3, #28]
 800db4c:	4619      	mov	r1, r3
 800db4e:	69f8      	ldr	r0, [r7, #28]
 800db50:	f7fe ffd6 	bl	800cb00 <move_window>
 800db54:	4603      	mov	r3, r0
 800db56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800db5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d11d      	bne.n	800db9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	68d8      	ldr	r0, [r3, #12]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a19      	ldr	r1, [r3, #32]
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	7efb      	ldrb	r3, [r7, #27]
 800db70:	f7ff fd7c 	bl	800d66c <put_lfn>
				fs->wflag = 1;
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	2201      	movs	r2, #1
 800db78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800db7a:	2100      	movs	r1, #0
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff fbba 	bl	800d2f6 <dir_next>
 800db82:	4603      	mov	r3, r0
 800db84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800db88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d107      	bne.n	800dba0 <dir_register+0x184>
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	3b01      	subs	r3, #1
 800db94:	623b      	str	r3, [r7, #32]
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1d5      	bne.n	800db48 <dir_register+0x12c>
 800db9c:	e000      	b.n	800dba0 <dir_register+0x184>
				if (res != FR_OK) break;
 800db9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d128      	bne.n	800dbfa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	69db      	ldr	r3, [r3, #28]
 800dbac:	4619      	mov	r1, r3
 800dbae:	69f8      	ldr	r0, [r7, #28]
 800dbb0:	f7fe ffa6 	bl	800cb00 <move_window>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dbba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d11b      	bne.n	800dbfa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	2220      	movs	r2, #32
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fe fd8b 	bl	800c6e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a18      	ldr	r0, [r3, #32]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	3324      	adds	r3, #36	; 0x24
 800dbd8:	220b      	movs	r2, #11
 800dbda:	4619      	mov	r1, r3
 800dbdc:	f7fe fd62 	bl	800c6a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	330c      	adds	r3, #12
 800dbec:	f002 0218 	and.w	r2, r2, #24
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dbfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3730      	adds	r7, #48	; 0x30
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	4ec4ec4f 	.word	0x4ec4ec4f

0800dc0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	; 0x28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	613b      	str	r3, [r7, #16]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	60fb      	str	r3, [r7, #12]
 800dc24:	2300      	movs	r3, #0
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	1c5a      	adds	r2, r3, #1
 800dc30:	61ba      	str	r2, [r7, #24]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	4413      	add	r3, r2
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dc3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc3c:	2b1f      	cmp	r3, #31
 800dc3e:	d940      	bls.n	800dcc2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dc40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc42:	2b2f      	cmp	r3, #47	; 0x2f
 800dc44:	d006      	beq.n	800dc54 <create_name+0x48>
 800dc46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc48:	2b5c      	cmp	r3, #92	; 0x5c
 800dc4a:	d110      	bne.n	800dc6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc4c:	e002      	b.n	800dc54 <create_name+0x48>
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	3301      	adds	r3, #1
 800dc52:	61bb      	str	r3, [r7, #24]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	4413      	add	r3, r2
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b2f      	cmp	r3, #47	; 0x2f
 800dc5e:	d0f6      	beq.n	800dc4e <create_name+0x42>
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	4413      	add	r3, r2
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b5c      	cmp	r3, #92	; 0x5c
 800dc6a:	d0f0      	beq.n	800dc4e <create_name+0x42>
			break;
 800dc6c:	e02a      	b.n	800dcc4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2bfe      	cmp	r3, #254	; 0xfe
 800dc72:	d901      	bls.n	800dc78 <create_name+0x6c>
 800dc74:	2306      	movs	r3, #6
 800dc76:	e17d      	b.n	800df74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dc78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dc7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc80:	2101      	movs	r1, #1
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe fb28 	bl	800c2d8 <ff_convert>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dc8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d101      	bne.n	800dc96 <create_name+0x8a>
 800dc92:	2306      	movs	r3, #6
 800dc94:	e16e      	b.n	800df74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dc96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc98:	2b7f      	cmp	r3, #127	; 0x7f
 800dc9a:	d809      	bhi.n	800dcb0 <create_name+0xa4>
 800dc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc9e:	4619      	mov	r1, r3
 800dca0:	488d      	ldr	r0, [pc, #564]	; (800ded8 <create_name+0x2cc>)
 800dca2:	f7fe fd62 	bl	800c76a <chk_chr>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <create_name+0xa4>
 800dcac:	2306      	movs	r3, #6
 800dcae:	e161      	b.n	800df74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	617a      	str	r2, [r7, #20]
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	4413      	add	r3, r2
 800dcbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcbe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dcc0:	e7b4      	b.n	800dc2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dcc2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	441a      	add	r2, r3
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dcce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd0:	2b1f      	cmp	r3, #31
 800dcd2:	d801      	bhi.n	800dcd8 <create_name+0xcc>
 800dcd4:	2304      	movs	r3, #4
 800dcd6:	e000      	b.n	800dcda <create_name+0xce>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dcde:	e011      	b.n	800dd04 <create_name+0xf8>
		w = lfn[di - 1];
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dce6:	4413      	add	r3, r2
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	4413      	add	r3, r2
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dcf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcf4:	2b20      	cmp	r3, #32
 800dcf6:	d002      	beq.n	800dcfe <create_name+0xf2>
 800dcf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcfa:	2b2e      	cmp	r3, #46	; 0x2e
 800dcfc:	d106      	bne.n	800dd0c <create_name+0x100>
		di--;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1ea      	bne.n	800dce0 <create_name+0xd4>
 800dd0a:	e000      	b.n	800dd0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dd0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	4413      	add	r3, r2
 800dd16:	2200      	movs	r2, #0
 800dd18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <create_name+0x118>
 800dd20:	2306      	movs	r3, #6
 800dd22:	e127      	b.n	800df74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3324      	adds	r3, #36	; 0x24
 800dd28:	220b      	movs	r2, #11
 800dd2a:	2120      	movs	r1, #32
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe fcda 	bl	800c6e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dd32:	2300      	movs	r3, #0
 800dd34:	61bb      	str	r3, [r7, #24]
 800dd36:	e002      	b.n	800dd3e <create_name+0x132>
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	61bb      	str	r3, [r7, #24]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	005b      	lsls	r3, r3, #1
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	4413      	add	r3, r2
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	2b20      	cmp	r3, #32
 800dd4a:	d0f5      	beq.n	800dd38 <create_name+0x12c>
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	005b      	lsls	r3, r3, #1
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	4413      	add	r3, r2
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	2b2e      	cmp	r3, #46	; 0x2e
 800dd58:	d0ee      	beq.n	800dd38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d009      	beq.n	800dd74 <create_name+0x168>
 800dd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd64:	f043 0303 	orr.w	r3, r3, #3
 800dd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dd6c:	e002      	b.n	800dd74 <create_name+0x168>
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	617b      	str	r3, [r7, #20]
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d009      	beq.n	800dd8e <create_name+0x182>
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd80:	4413      	add	r3, r2
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	4413      	add	r3, r2
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8c:	d1ef      	bne.n	800dd6e <create_name+0x162>

	i = b = 0; ni = 8;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd94:	2300      	movs	r3, #0
 800dd96:	623b      	str	r3, [r7, #32]
 800dd98:	2308      	movs	r3, #8
 800dd9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	61ba      	str	r2, [r7, #24]
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	4413      	add	r3, r2
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ddac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f000 8090 	beq.w	800ded4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ddb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddb6:	2b20      	cmp	r3, #32
 800ddb8:	d006      	beq.n	800ddc8 <create_name+0x1bc>
 800ddba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddbc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddbe:	d10a      	bne.n	800ddd6 <create_name+0x1ca>
 800ddc0:	69ba      	ldr	r2, [r7, #24]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d006      	beq.n	800ddd6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ddc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddcc:	f043 0303 	orr.w	r3, r3, #3
 800ddd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddd4:	e07d      	b.n	800ded2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ddd6:	6a3a      	ldr	r2, [r7, #32]
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d203      	bcs.n	800dde6 <create_name+0x1da>
 800ddde:	69ba      	ldr	r2, [r7, #24]
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d123      	bne.n	800de2e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	2b0b      	cmp	r3, #11
 800ddea:	d106      	bne.n	800ddfa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ddec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf0:	f043 0303 	orr.w	r3, r3, #3
 800ddf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddf8:	e075      	b.n	800dee6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ddfa:	69ba      	ldr	r2, [r7, #24]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d005      	beq.n	800de0e <create_name+0x202>
 800de02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de06:	f043 0303 	orr.w	r3, r3, #3
 800de0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800de0e:	69ba      	ldr	r2, [r7, #24]
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	429a      	cmp	r2, r3
 800de14:	d866      	bhi.n	800dee4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	61bb      	str	r3, [r7, #24]
 800de1a:	2308      	movs	r3, #8
 800de1c:	623b      	str	r3, [r7, #32]
 800de1e:	230b      	movs	r3, #11
 800de20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800de22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de2c:	e051      	b.n	800ded2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800de2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de30:	2b7f      	cmp	r3, #127	; 0x7f
 800de32:	d914      	bls.n	800de5e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800de34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de36:	2100      	movs	r1, #0
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe fa4d 	bl	800c2d8 <ff_convert>
 800de3e:	4603      	mov	r3, r0
 800de40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800de42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <create_name+0x246>
 800de48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de4a:	3b80      	subs	r3, #128	; 0x80
 800de4c:	4a23      	ldr	r2, [pc, #140]	; (800dedc <create_name+0x2d0>)
 800de4e:	5cd3      	ldrb	r3, [r2, r3]
 800de50:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800de52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de56:	f043 0302 	orr.w	r3, r3, #2
 800de5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800de5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d007      	beq.n	800de74 <create_name+0x268>
 800de64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de66:	4619      	mov	r1, r3
 800de68:	481d      	ldr	r0, [pc, #116]	; (800dee0 <create_name+0x2d4>)
 800de6a:	f7fe fc7e 	bl	800c76a <chk_chr>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d008      	beq.n	800de86 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800de74:	235f      	movs	r3, #95	; 0x5f
 800de76:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de7c:	f043 0303 	orr.w	r3, r3, #3
 800de80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de84:	e01b      	b.n	800debe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800de86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de88:	2b40      	cmp	r3, #64	; 0x40
 800de8a:	d909      	bls.n	800dea0 <create_name+0x294>
 800de8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de8e:	2b5a      	cmp	r3, #90	; 0x5a
 800de90:	d806      	bhi.n	800dea0 <create_name+0x294>
					b |= 2;
 800de92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de96:	f043 0302 	orr.w	r3, r3, #2
 800de9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de9e:	e00e      	b.n	800debe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea2:	2b60      	cmp	r3, #96	; 0x60
 800dea4:	d90b      	bls.n	800debe <create_name+0x2b2>
 800dea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea8:	2b7a      	cmp	r3, #122	; 0x7a
 800deaa:	d808      	bhi.n	800debe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800deac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deb0:	f043 0301 	orr.w	r3, r3, #1
 800deb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800deb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deba:	3b20      	subs	r3, #32
 800debc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	623a      	str	r2, [r7, #32]
 800dec4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dec6:	b2d1      	uxtb	r1, r2
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	4413      	add	r3, r2
 800decc:	460a      	mov	r2, r1
 800dece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ded2:	e763      	b.n	800dd9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ded4:	bf00      	nop
 800ded6:	e006      	b.n	800dee6 <create_name+0x2da>
 800ded8:	0800f914 	.word	0x0800f914
 800dedc:	0800fd60 	.word	0x0800fd60
 800dee0:	0800f920 	.word	0x0800f920
			if (si > di) break;			/* No extension */
 800dee4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800deec:	2be5      	cmp	r3, #229	; 0xe5
 800deee:	d103      	bne.n	800def8 <create_name+0x2ec>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2205      	movs	r2, #5
 800def4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	2b08      	cmp	r3, #8
 800defc:	d104      	bne.n	800df08 <create_name+0x2fc>
 800defe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800df08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df0c:	f003 030c 	and.w	r3, r3, #12
 800df10:	2b0c      	cmp	r3, #12
 800df12:	d005      	beq.n	800df20 <create_name+0x314>
 800df14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df18:	f003 0303 	and.w	r3, r3, #3
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d105      	bne.n	800df2c <create_name+0x320>
 800df20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df24:	f043 0302 	orr.w	r3, r3, #2
 800df28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800df2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df30:	f003 0302 	and.w	r3, r3, #2
 800df34:	2b00      	cmp	r3, #0
 800df36:	d117      	bne.n	800df68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800df38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df3c:	f003 0303 	and.w	r3, r3, #3
 800df40:	2b01      	cmp	r3, #1
 800df42:	d105      	bne.n	800df50 <create_name+0x344>
 800df44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df48:	f043 0310 	orr.w	r3, r3, #16
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800df50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df54:	f003 030c 	and.w	r3, r3, #12
 800df58:	2b04      	cmp	r3, #4
 800df5a:	d105      	bne.n	800df68 <create_name+0x35c>
 800df5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df60:	f043 0308 	orr.w	r3, r3, #8
 800df64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800df6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800df72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800df74:	4618      	mov	r0, r3
 800df76:	3728      	adds	r7, #40	; 0x28
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df90:	e002      	b.n	800df98 <follow_path+0x1c>
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	3301      	adds	r3, #1
 800df96:	603b      	str	r3, [r7, #0]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	2b2f      	cmp	r3, #47	; 0x2f
 800df9e:	d0f8      	beq.n	800df92 <follow_path+0x16>
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	2b5c      	cmp	r3, #92	; 0x5c
 800dfa6:	d0f4      	beq.n	800df92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	2b1f      	cmp	r3, #31
 800dfb4:	d80a      	bhi.n	800dfcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2280      	movs	r2, #128	; 0x80
 800dfba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff f91d 	bl	800d200 <dir_sdi>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	75fb      	strb	r3, [r7, #23]
 800dfca:	e043      	b.n	800e054 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfcc:	463b      	mov	r3, r7
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff fe1b 	bl	800dc0c <create_name>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfda:	7dfb      	ldrb	r3, [r7, #23]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d134      	bne.n	800e04a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff fc5a 	bl	800d89a <dir_find>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dff0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00a      	beq.n	800e00e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d127      	bne.n	800e04e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dffe:	7afb      	ldrb	r3, [r7, #11]
 800e000:	f003 0304 	and.w	r3, r3, #4
 800e004:	2b00      	cmp	r3, #0
 800e006:	d122      	bne.n	800e04e <follow_path+0xd2>
 800e008:	2305      	movs	r3, #5
 800e00a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e00c:	e01f      	b.n	800e04e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e00e:	7afb      	ldrb	r3, [r7, #11]
 800e010:	f003 0304 	and.w	r3, r3, #4
 800e014:	2b00      	cmp	r3, #0
 800e016:	d11c      	bne.n	800e052 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	799b      	ldrb	r3, [r3, #6]
 800e01c:	f003 0310 	and.w	r3, r3, #16
 800e020:	2b00      	cmp	r3, #0
 800e022:	d102      	bne.n	800e02a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e024:	2305      	movs	r3, #5
 800e026:	75fb      	strb	r3, [r7, #23]
 800e028:	e014      	b.n	800e054 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	695b      	ldr	r3, [r3, #20]
 800e034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e038:	4413      	add	r3, r2
 800e03a:	4619      	mov	r1, r3
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f7ff fa66 	bl	800d50e <ld_clust>
 800e042:	4602      	mov	r2, r0
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e048:	e7c0      	b.n	800dfcc <follow_path+0x50>
			if (res != FR_OK) break;
 800e04a:	bf00      	nop
 800e04c:	e002      	b.n	800e054 <follow_path+0xd8>
				break;
 800e04e:	bf00      	nop
 800e050:	e000      	b.n	800e054 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e052:	bf00      	nop
			}
		}
	}

	return res;
 800e054:	7dfb      	ldrb	r3, [r7, #23]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e05e:	b480      	push	{r7}
 800e060:	b087      	sub	sp, #28
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e066:	f04f 33ff 	mov.w	r3, #4294967295
 800e06a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d031      	beq.n	800e0d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	617b      	str	r3, [r7, #20]
 800e07a:	e002      	b.n	800e082 <get_ldnumber+0x24>
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	3301      	adds	r3, #1
 800e080:	617b      	str	r3, [r7, #20]
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2b1f      	cmp	r3, #31
 800e088:	d903      	bls.n	800e092 <get_ldnumber+0x34>
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b3a      	cmp	r3, #58	; 0x3a
 800e090:	d1f4      	bne.n	800e07c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b3a      	cmp	r3, #58	; 0x3a
 800e098:	d11c      	bne.n	800e0d4 <get_ldnumber+0x76>
			tp = *path;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	60fa      	str	r2, [r7, #12]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	3b30      	subs	r3, #48	; 0x30
 800e0aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	2b09      	cmp	r3, #9
 800e0b0:	d80e      	bhi.n	800e0d0 <get_ldnumber+0x72>
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d10a      	bne.n	800e0d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d107      	bne.n	800e0d0 <get_ldnumber+0x72>
					vol = (int)i;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	617b      	str	r3, [r7, #20]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	e002      	b.n	800e0da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e0d8:	693b      	ldr	r3, [r7, #16]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	371c      	adds	r7, #28
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
	...

0800e0e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	70da      	strb	r2, [r3, #3]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7fe fcfc 	bl	800cb00 <move_window>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <check_fs+0x2a>
 800e10e:	2304      	movs	r3, #4
 800e110:	e038      	b.n	800e184 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3334      	adds	r3, #52	; 0x34
 800e116:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fe fa40 	bl	800c5a0 <ld_word>
 800e120:	4603      	mov	r3, r0
 800e122:	461a      	mov	r2, r3
 800e124:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e128:	429a      	cmp	r2, r3
 800e12a:	d001      	beq.n	800e130 <check_fs+0x48>
 800e12c:	2303      	movs	r3, #3
 800e12e:	e029      	b.n	800e184 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e136:	2be9      	cmp	r3, #233	; 0xe9
 800e138:	d009      	beq.n	800e14e <check_fs+0x66>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e140:	2beb      	cmp	r3, #235	; 0xeb
 800e142:	d11e      	bne.n	800e182 <check_fs+0x9a>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e14a:	2b90      	cmp	r3, #144	; 0x90
 800e14c:	d119      	bne.n	800e182 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	3334      	adds	r3, #52	; 0x34
 800e152:	3336      	adds	r3, #54	; 0x36
 800e154:	4618      	mov	r0, r3
 800e156:	f7fe fa3b 	bl	800c5d0 <ld_dword>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e160:	4a0a      	ldr	r2, [pc, #40]	; (800e18c <check_fs+0xa4>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d101      	bne.n	800e16a <check_fs+0x82>
 800e166:	2300      	movs	r3, #0
 800e168:	e00c      	b.n	800e184 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3334      	adds	r3, #52	; 0x34
 800e16e:	3352      	adds	r3, #82	; 0x52
 800e170:	4618      	mov	r0, r3
 800e172:	f7fe fa2d 	bl	800c5d0 <ld_dword>
 800e176:	4603      	mov	r3, r0
 800e178:	4a05      	ldr	r2, [pc, #20]	; (800e190 <check_fs+0xa8>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d101      	bne.n	800e182 <check_fs+0x9a>
 800e17e:	2300      	movs	r3, #0
 800e180:	e000      	b.n	800e184 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e182:	2302      	movs	r3, #2
}
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	00544146 	.word	0x00544146
 800e190:	33544146 	.word	0x33544146

0800e194 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b096      	sub	sp, #88	; 0x58
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f7ff ff58 	bl	800e05e <get_ldnumber>
 800e1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	da01      	bge.n	800e1ba <find_volume+0x26>
 800e1b6:	230b      	movs	r3, #11
 800e1b8:	e22d      	b.n	800e616 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e1ba:	4aa1      	ldr	r2, [pc, #644]	; (800e440 <find_volume+0x2ac>)
 800e1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <find_volume+0x3a>
 800e1ca:	230c      	movs	r3, #12
 800e1cc:	e223      	b.n	800e616 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1d4:	79fb      	ldrb	r3, [r7, #7]
 800e1d6:	f023 0301 	bic.w	r3, r3, #1
 800e1da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d01a      	beq.n	800e21a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	785b      	ldrb	r3, [r3, #1]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe f93b 	bl	800c464 <disk_status>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1f8:	f003 0301 	and.w	r3, r3, #1
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d10c      	bne.n	800e21a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <find_volume+0x82>
 800e206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e20a:	f003 0304 	and.w	r3, r3, #4
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e212:	230a      	movs	r3, #10
 800e214:	e1ff      	b.n	800e616 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e216:	2300      	movs	r3, #0
 800e218:	e1fd      	b.n	800e616 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e222:	b2da      	uxtb	r2, r3
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22a:	785b      	ldrb	r3, [r3, #1]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe f933 	bl	800c498 <disk_initialize>
 800e232:	4603      	mov	r3, r0
 800e234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e244:	2303      	movs	r3, #3
 800e246:	e1e6      	b.n	800e616 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e248:	79fb      	ldrb	r3, [r7, #7]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d007      	beq.n	800e25e <find_volume+0xca>
 800e24e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e252:	f003 0304 	and.w	r3, r3, #4
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e25a:	230a      	movs	r3, #10
 800e25c:	e1db      	b.n	800e616 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e262:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e266:	f7ff ff3f 	bl	800e0e8 <check_fs>
 800e26a:	4603      	mov	r3, r0
 800e26c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e274:	2b02      	cmp	r3, #2
 800e276:	d149      	bne.n	800e30c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e278:	2300      	movs	r3, #0
 800e27a:	643b      	str	r3, [r7, #64]	; 0x40
 800e27c:	e01e      	b.n	800e2bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e286:	011b      	lsls	r3, r3, #4
 800e288:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e28c:	4413      	add	r3, r2
 800e28e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e292:	3304      	adds	r3, #4
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d006      	beq.n	800e2a8 <find_volume+0x114>
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	3308      	adds	r3, #8
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe f996 	bl	800c5d0 <ld_dword>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	e000      	b.n	800e2aa <find_volume+0x116>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	3358      	adds	r3, #88	; 0x58
 800e2b0:	443b      	add	r3, r7
 800e2b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	643b      	str	r3, [r7, #64]	; 0x40
 800e2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	d9dd      	bls.n	800e27e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <find_volume+0x13e>
 800e2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	3358      	adds	r3, #88	; 0x58
 800e2d8:	443b      	add	r3, r7
 800e2da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e2de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d005      	beq.n	800e2f2 <find_volume+0x15e>
 800e2e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2ea:	f7ff fefd 	bl	800e0e8 <check_fs>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	e000      	b.n	800e2f4 <find_volume+0x160>
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d905      	bls.n	800e30c <find_volume+0x178>
 800e300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e302:	3301      	adds	r3, #1
 800e304:	643b      	str	r3, [r7, #64]	; 0x40
 800e306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e308:	2b03      	cmp	r3, #3
 800e30a:	d9e2      	bls.n	800e2d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e30c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e310:	2b04      	cmp	r3, #4
 800e312:	d101      	bne.n	800e318 <find_volume+0x184>
 800e314:	2301      	movs	r3, #1
 800e316:	e17e      	b.n	800e616 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d901      	bls.n	800e324 <find_volume+0x190>
 800e320:	230d      	movs	r3, #13
 800e322:	e178      	b.n	800e616 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	3334      	adds	r3, #52	; 0x34
 800e328:	330b      	adds	r3, #11
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe f938 	bl	800c5a0 <ld_word>
 800e330:	4603      	mov	r3, r0
 800e332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e336:	d001      	beq.n	800e33c <find_volume+0x1a8>
 800e338:	230d      	movs	r3, #13
 800e33a:	e16c      	b.n	800e616 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33e:	3334      	adds	r3, #52	; 0x34
 800e340:	3316      	adds	r3, #22
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe f92c 	bl	800c5a0 <ld_word>
 800e348:	4603      	mov	r3, r0
 800e34a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <find_volume+0x1cc>
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	3334      	adds	r3, #52	; 0x34
 800e356:	3324      	adds	r3, #36	; 0x24
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fe f939 	bl	800c5d0 <ld_dword>
 800e35e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e364:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	789b      	ldrb	r3, [r3, #2]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d005      	beq.n	800e384 <find_volume+0x1f0>
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	789b      	ldrb	r3, [r3, #2]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d001      	beq.n	800e384 <find_volume+0x1f0>
 800e380:	230d      	movs	r3, #13
 800e382:	e148      	b.n	800e616 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e386:	789b      	ldrb	r3, [r3, #2]
 800e388:	461a      	mov	r2, r3
 800e38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e38c:	fb02 f303 	mul.w	r3, r2, r3
 800e390:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e398:	b29a      	uxth	r2, r3
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	895b      	ldrh	r3, [r3, #10]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d008      	beq.n	800e3b8 <find_volume+0x224>
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a8:	895b      	ldrh	r3, [r3, #10]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ae:	895b      	ldrh	r3, [r3, #10]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <find_volume+0x228>
 800e3b8:	230d      	movs	r3, #13
 800e3ba:	e12c      	b.n	800e616 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	3334      	adds	r3, #52	; 0x34
 800e3c0:	3311      	adds	r3, #17
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe f8ec 	bl	800c5a0 <ld_word>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	891b      	ldrh	r3, [r3, #8]
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <find_volume+0x24e>
 800e3de:	230d      	movs	r3, #13
 800e3e0:	e119      	b.n	800e616 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	3334      	adds	r3, #52	; 0x34
 800e3e6:	3313      	adds	r3, #19
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe f8d9 	bl	800c5a0 <ld_word>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e3f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <find_volume+0x272>
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	3334      	adds	r3, #52	; 0x34
 800e3fc:	3320      	adds	r3, #32
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe f8e6 	bl	800c5d0 <ld_dword>
 800e404:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	3334      	adds	r3, #52	; 0x34
 800e40a:	330e      	adds	r3, #14
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe f8c7 	bl	800c5a0 <ld_word>
 800e412:	4603      	mov	r3, r0
 800e414:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <find_volume+0x28c>
 800e41c:	230d      	movs	r3, #13
 800e41e:	e0fa      	b.n	800e616 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e420:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e424:	4413      	add	r3, r2
 800e426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e428:	8912      	ldrh	r2, [r2, #8]
 800e42a:	0912      	lsrs	r2, r2, #4
 800e42c:	b292      	uxth	r2, r2
 800e42e:	4413      	add	r3, r2
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	429a      	cmp	r2, r3
 800e438:	d204      	bcs.n	800e444 <find_volume+0x2b0>
 800e43a:	230d      	movs	r3, #13
 800e43c:	e0eb      	b.n	800e616 <find_volume+0x482>
 800e43e:	bf00      	nop
 800e440:	240017ac 	.word	0x240017ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e44c:	8952      	ldrh	r2, [r2, #10]
 800e44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e452:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <find_volume+0x2ca>
 800e45a:	230d      	movs	r3, #13
 800e45c:	e0db      	b.n	800e616 <find_volume+0x482>
		fmt = FS_FAT32;
 800e45e:	2303      	movs	r3, #3
 800e460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d802      	bhi.n	800e474 <find_volume+0x2e0>
 800e46e:	2302      	movs	r3, #2
 800e470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d802      	bhi.n	800e484 <find_volume+0x2f0>
 800e47e:	2301      	movs	r3, #1
 800e480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	1c9a      	adds	r2, r3, #2
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e490:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e492:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e496:	441a      	add	r2, r3
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e49c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	441a      	add	r2, r3
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e4a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4aa:	2b03      	cmp	r3, #3
 800e4ac:	d11e      	bne.n	800e4ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	3334      	adds	r3, #52	; 0x34
 800e4b2:	332a      	adds	r3, #42	; 0x2a
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe f873 	bl	800c5a0 <ld_word>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <find_volume+0x330>
 800e4c0:	230d      	movs	r3, #13
 800e4c2:	e0a8      	b.n	800e616 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c6:	891b      	ldrh	r3, [r3, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <find_volume+0x33c>
 800e4cc:	230d      	movs	r3, #13
 800e4ce:	e0a2      	b.n	800e616 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d2:	3334      	adds	r3, #52	; 0x34
 800e4d4:	332c      	adds	r3, #44	; 0x2c
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe f87a 	bl	800c5d0 <ld_dword>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	647b      	str	r3, [r7, #68]	; 0x44
 800e4ea:	e01f      	b.n	800e52c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	891b      	ldrh	r3, [r3, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <find_volume+0x364>
 800e4f4:	230d      	movs	r3, #13
 800e4f6:	e08e      	b.n	800e616 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4fe:	441a      	add	r2, r3
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d103      	bne.n	800e514 <find_volume+0x380>
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	e00a      	b.n	800e52a <find_volume+0x396>
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	699a      	ldr	r2, [r3, #24]
 800e518:	4613      	mov	r3, r2
 800e51a:	005b      	lsls	r3, r3, #1
 800e51c:	4413      	add	r3, r2
 800e51e:	085a      	lsrs	r2, r3, #1
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	699b      	ldr	r3, [r3, #24]
 800e524:	f003 0301 	and.w	r3, r3, #1
 800e528:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e52a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	69da      	ldr	r2, [r3, #28]
 800e530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e532:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e536:	0a5b      	lsrs	r3, r3, #9
 800e538:	429a      	cmp	r2, r3
 800e53a:	d201      	bcs.n	800e540 <find_volume+0x3ac>
 800e53c:	230d      	movs	r3, #13
 800e53e:	e06a      	b.n	800e616 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e542:	f04f 32ff 	mov.w	r2, #4294967295
 800e546:	615a      	str	r2, [r3, #20]
 800e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54a:	695a      	ldr	r2, [r3, #20]
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e552:	2280      	movs	r2, #128	; 0x80
 800e554:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e556:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e55a:	2b03      	cmp	r3, #3
 800e55c:	d149      	bne.n	800e5f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	3334      	adds	r3, #52	; 0x34
 800e562:	3330      	adds	r3, #48	; 0x30
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe f81b 	bl	800c5a0 <ld_word>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d140      	bne.n	800e5f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e572:	3301      	adds	r3, #1
 800e574:	4619      	mov	r1, r3
 800e576:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e578:	f7fe fac2 	bl	800cb00 <move_window>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d137      	bne.n	800e5f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	2200      	movs	r2, #0
 800e586:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	3334      	adds	r3, #52	; 0x34
 800e58c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e590:	4618      	mov	r0, r3
 800e592:	f7fe f805 	bl	800c5a0 <ld_word>
 800e596:	4603      	mov	r3, r0
 800e598:	461a      	mov	r2, r3
 800e59a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d127      	bne.n	800e5f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a4:	3334      	adds	r3, #52	; 0x34
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe f812 	bl	800c5d0 <ld_dword>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	4a1c      	ldr	r2, [pc, #112]	; (800e620 <find_volume+0x48c>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d11e      	bne.n	800e5f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	3334      	adds	r3, #52	; 0x34
 800e5b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe f807 	bl	800c5d0 <ld_dword>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	4a17      	ldr	r2, [pc, #92]	; (800e624 <find_volume+0x490>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d113      	bne.n	800e5f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5cc:	3334      	adds	r3, #52	; 0x34
 800e5ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fd fffc 	bl	800c5d0 <ld_dword>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	3334      	adds	r3, #52	; 0x34
 800e5e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fd fff2 	bl	800c5d0 <ld_dword>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e5f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e5fa:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <find_volume+0x494>)
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	3301      	adds	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	4b09      	ldr	r3, [pc, #36]	; (800e628 <find_volume+0x494>)
 800e604:	801a      	strh	r2, [r3, #0]
 800e606:	4b08      	ldr	r3, [pc, #32]	; (800e628 <find_volume+0x494>)
 800e608:	881a      	ldrh	r2, [r3, #0]
 800e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e60e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e610:	f7fe fa0e 	bl	800ca30 <clear_lock>
#endif
	return FR_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3758      	adds	r7, #88	; 0x58
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	41615252 	.word	0x41615252
 800e624:	61417272 	.word	0x61417272
 800e628:	240017b0 	.word	0x240017b0

0800e62c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e636:	2309      	movs	r3, #9
 800e638:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d01c      	beq.n	800e67a <validate+0x4e>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d018      	beq.n	800e67a <validate+0x4e>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d013      	beq.n	800e67a <validate+0x4e>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	889a      	ldrh	r2, [r3, #4]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	88db      	ldrh	r3, [r3, #6]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d10c      	bne.n	800e67a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	785b      	ldrb	r3, [r3, #1]
 800e666:	4618      	mov	r0, r3
 800e668:	f7fd fefc 	bl	800c464 <disk_status>
 800e66c:	4603      	mov	r3, r0
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	2b00      	cmp	r3, #0
 800e674:	d101      	bne.n	800e67a <validate+0x4e>
			res = FR_OK;
 800e676:	2300      	movs	r3, #0
 800e678:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d102      	bne.n	800e686 <validate+0x5a>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	e000      	b.n	800e688 <validate+0x5c>
 800e686:	2300      	movs	r3, #0
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	6013      	str	r3, [r2, #0]
	return res;
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
	...

0800e698 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e6aa:	f107 0310 	add.w	r3, r7, #16
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7ff fcd5 	bl	800e05e <get_ldnumber>
 800e6b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	da01      	bge.n	800e6c0 <f_mount+0x28>
 800e6bc:	230b      	movs	r3, #11
 800e6be:	e02b      	b.n	800e718 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e6c0:	4a17      	ldr	r2, [pc, #92]	; (800e720 <f_mount+0x88>)
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e6d0:	69b8      	ldr	r0, [r7, #24]
 800e6d2:	f7fe f9ad 	bl	800ca30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	490d      	ldr	r1, [pc, #52]	; (800e720 <f_mount+0x88>)
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <f_mount+0x66>
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d001      	beq.n	800e702 <f_mount+0x6a>
 800e6fe:	2300      	movs	r3, #0
 800e700:	e00a      	b.n	800e718 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e702:	f107 010c 	add.w	r1, r7, #12
 800e706:	f107 0308 	add.w	r3, r7, #8
 800e70a:	2200      	movs	r2, #0
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7ff fd41 	bl	800e194 <find_volume>
 800e712:	4603      	mov	r3, r0
 800e714:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e716:	7dfb      	ldrb	r3, [r7, #23]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3720      	adds	r7, #32
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	240017ac 	.word	0x240017ac

0800e724 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b09a      	sub	sp, #104	; 0x68
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <f_open+0x18>
 800e738:	2309      	movs	r3, #9
 800e73a:	e1bd      	b.n	800eab8 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e73c:	79fb      	ldrb	r3, [r7, #7]
 800e73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e742:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e744:	79fa      	ldrb	r2, [r7, #7]
 800e746:	f107 0110 	add.w	r1, r7, #16
 800e74a:	f107 0308 	add.w	r3, r7, #8
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff fd20 	bl	800e194 <find_volume>
 800e754:	4603      	mov	r3, r0
 800e756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e75a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f040 81a1 	bne.w	800eaa6 <f_open+0x382>
		dj.obj.fs = fs;
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800e768:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e76c:	f000 ff69 	bl	800f642 <ff_memalloc>
 800e770:	65b8      	str	r0, [r7, #88]	; 0x58
 800e772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <f_open+0x58>
 800e778:	2311      	movs	r3, #17
 800e77a:	e19d      	b.n	800eab8 <f_open+0x394>
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e780:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	f107 0314 	add.w	r3, r7, #20
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7ff fbf6 	bl	800df7c <follow_path>
 800e790:	4603      	mov	r3, r0
 800e792:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d11a      	bne.n	800e7d4 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e79e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7a2:	b25b      	sxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	da03      	bge.n	800e7b0 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800e7a8:	2306      	movs	r3, #6
 800e7aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7ae:	e011      	b.n	800e7d4 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	f023 0301 	bic.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	bf14      	ite	ne
 800e7ba:	2301      	movne	r3, #1
 800e7bc:	2300      	moveq	r3, #0
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	f107 0314 	add.w	r3, r7, #20
 800e7c6:	4611      	mov	r1, r2
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fd ffe9 	bl	800c7a0 <chk_lock>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e7d4:	79fb      	ldrb	r3, [r7, #7]
 800e7d6:	f003 031c 	and.w	r3, r3, #28
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d07f      	beq.n	800e8de <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800e7de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d017      	beq.n	800e816 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	d10e      	bne.n	800e80c <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e7ee:	f7fe f833 	bl	800c858 <enq_lock>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d006      	beq.n	800e806 <f_open+0xe2>
 800e7f8:	f107 0314 	add.w	r3, r7, #20
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff f90d 	bl	800da1c <dir_register>
 800e802:	4603      	mov	r3, r0
 800e804:	e000      	b.n	800e808 <f_open+0xe4>
 800e806:	2312      	movs	r3, #18
 800e808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	f043 0308 	orr.w	r3, r3, #8
 800e812:	71fb      	strb	r3, [r7, #7]
 800e814:	e010      	b.n	800e838 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e816:	7ebb      	ldrb	r3, [r7, #26]
 800e818:	f003 0311 	and.w	r3, r3, #17
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d003      	beq.n	800e828 <f_open+0x104>
					res = FR_DENIED;
 800e820:	2307      	movs	r3, #7
 800e822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e826:	e007      	b.n	800e838 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e828:	79fb      	ldrb	r3, [r7, #7]
 800e82a:	f003 0304 	and.w	r3, r3, #4
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d002      	beq.n	800e838 <f_open+0x114>
 800e832:	2308      	movs	r3, #8
 800e834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d168      	bne.n	800e912 <f_open+0x1ee>
 800e840:	79fb      	ldrb	r3, [r7, #7]
 800e842:	f003 0308 	and.w	r3, r3, #8
 800e846:	2b00      	cmp	r3, #0
 800e848:	d063      	beq.n	800e912 <f_open+0x1ee>
				dw = GET_FATTIME();
 800e84a:	f7fd fbb1 	bl	800bfb0 <get_fattime>
 800e84e:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e852:	330e      	adds	r3, #14
 800e854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e856:	4618      	mov	r0, r3
 800e858:	f7fd fef8 	bl	800c64c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85e:	3316      	adds	r3, #22
 800e860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e862:	4618      	mov	r0, r3
 800e864:	f7fd fef2 	bl	800c64c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86a:	330b      	adds	r3, #11
 800e86c:	2220      	movs	r2, #32
 800e86e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e874:	4611      	mov	r1, r2
 800e876:	4618      	mov	r0, r3
 800e878:	f7fe fe49 	bl	800d50e <ld_clust>
 800e87c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e882:	2200      	movs	r2, #0
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe fe61 	bl	800d54c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88c:	331c      	adds	r3, #28
 800e88e:	2100      	movs	r1, #0
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd fedb 	bl	800c64c <st_dword>
					fs->wflag = 1;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	2201      	movs	r2, #1
 800e89a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d037      	beq.n	800e912 <f_open+0x1ee>
						dw = fs->winsect;
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a6:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800e8a8:	f107 0314 	add.w	r3, r7, #20
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fe fb74 	bl	800cf9e <remove_chain>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e8bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d126      	bne.n	800e912 <f_open+0x1ee>
							res = move_window(fs, dw);
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe f919 	bl	800cb00 <move_window>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8d8:	3a01      	subs	r2, #1
 800e8da:	611a      	str	r2, [r3, #16]
 800e8dc:	e019      	b.n	800e912 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e8de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d115      	bne.n	800e912 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e8e6:	7ebb      	ldrb	r3, [r7, #26]
 800e8e8:	f003 0310 	and.w	r3, r3, #16
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d003      	beq.n	800e8f8 <f_open+0x1d4>
					res = FR_NO_FILE;
 800e8f0:	2304      	movs	r3, #4
 800e8f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e8f6:	e00c      	b.n	800e912 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	f003 0302 	and.w	r3, r3, #2
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d007      	beq.n	800e912 <f_open+0x1ee>
 800e902:	7ebb      	ldrb	r3, [r7, #26]
 800e904:	f003 0301 	and.w	r3, r3, #1
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <f_open+0x1ee>
						res = FR_DENIED;
 800e90c:	2307      	movs	r3, #7
 800e90e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e916:	2b00      	cmp	r3, #0
 800e918:	d128      	bne.n	800e96c <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e91a:	79fb      	ldrb	r3, [r7, #7]
 800e91c:	f003 0308 	and.w	r3, r3, #8
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <f_open+0x208>
				mode |= FA_MODIFIED;
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e92a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e93a:	79fb      	ldrb	r3, [r7, #7]
 800e93c:	f023 0301 	bic.w	r3, r3, #1
 800e940:	2b00      	cmp	r3, #0
 800e942:	bf14      	ite	ne
 800e944:	2301      	movne	r3, #1
 800e946:	2300      	moveq	r3, #0
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	461a      	mov	r2, r3
 800e94c:	f107 0314 	add.w	r3, r7, #20
 800e950:	4611      	mov	r1, r2
 800e952:	4618      	mov	r0, r3
 800e954:	f7fd ffa2 	bl	800c89c <inc_lock>
 800e958:	4602      	mov	r2, r0
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	691b      	ldr	r3, [r3, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d102      	bne.n	800e96c <f_open+0x248>
 800e966:	2302      	movs	r3, #2
 800e968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e96c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e970:	2b00      	cmp	r3, #0
 800e972:	f040 8095 	bne.w	800eaa0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e97a:	4611      	mov	r1, r2
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fe fdc6 	bl	800d50e <ld_clust>
 800e982:	4602      	mov	r2, r0
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e98a:	331c      	adds	r3, #28
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fd fe1f 	bl	800c5d0 <ld_dword>
 800e992:	4602      	mov	r2, r0
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	88da      	ldrh	r2, [r3, #6]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	79fa      	ldrb	r2, [r7, #7]
 800e9b0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3330      	adds	r3, #48	; 0x30
 800e9c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fd fe89 	bl	800c6e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e9d4:	79fb      	ldrb	r3, [r7, #7]
 800e9d6:	f003 0320 	and.w	r3, r3, #32
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d060      	beq.n	800eaa0 <f_open+0x37c>
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d05c      	beq.n	800eaa0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	68da      	ldr	r2, [r3, #12]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	895b      	ldrh	r3, [r3, #10]
 800e9f2:	025b      	lsls	r3, r3, #9
 800e9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea02:	e016      	b.n	800ea32 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe f934 	bl	800cc76 <get_fat>
 800ea0e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ea10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d802      	bhi.n	800ea1c <f_open+0x2f8>
 800ea16:	2302      	movs	r3, #2
 800ea18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea22:	d102      	bne.n	800ea2a <f_open+0x306>
 800ea24:	2301      	movs	r3, #1
 800ea26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d103      	bne.n	800ea42 <f_open+0x31e>
 800ea3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d8e0      	bhi.n	800ea04 <f_open+0x2e0>
				}
				fp->clust = clst;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea46:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d127      	bne.n	800eaa0 <f_open+0x37c>
 800ea50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d022      	beq.n	800eaa0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fe f8ea 	bl	800cc38 <clust2sect>
 800ea64:	64b8      	str	r0, [r7, #72]	; 0x48
 800ea66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d103      	bne.n	800ea74 <f_open+0x350>
						res = FR_INT_ERR;
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea72:	e015      	b.n	800eaa0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea76:	0a5a      	lsrs	r2, r3, #9
 800ea78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea7a:	441a      	add	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	7858      	ldrb	r0, [r3, #1]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6a1a      	ldr	r2, [r3, #32]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	f7fd fd28 	bl	800c4e4 <disk_read>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d002      	beq.n	800eaa0 <f_open+0x37c>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800eaa0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eaa2:	f000 fdda 	bl	800f65a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eaa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <f_open+0x390>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3768      	adds	r7, #104	; 0x68
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08e      	sub	sp, #56	; 0x38
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f107 0214 	add.w	r2, r7, #20
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7ff fda3 	bl	800e62c <validate>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eaec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d107      	bne.n	800eb04 <f_read+0x44>
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	7d5b      	ldrb	r3, [r3, #21]
 800eaf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eafc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <f_read+0x4a>
 800eb04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb08:	e115      	b.n	800ed36 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	7d1b      	ldrb	r3, [r3, #20]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d101      	bne.n	800eb1a <f_read+0x5a>
 800eb16:	2307      	movs	r3, #7
 800eb18:	e10d      	b.n	800ed36 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	f240 80fe 	bls.w	800ed2c <f_read+0x26c>
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb34:	e0fa      	b.n	800ed2c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	699b      	ldr	r3, [r3, #24]
 800eb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 80c6 	bne.w	800ecd0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	0a5b      	lsrs	r3, r3, #9
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	8952      	ldrh	r2, [r2, #10]
 800eb4e:	3a01      	subs	r2, #1
 800eb50:	4013      	ands	r3, r2
 800eb52:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d12f      	bne.n	800ebba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	633b      	str	r3, [r7, #48]	; 0x30
 800eb68:	e013      	b.n	800eb92 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7fe fb0d 	bl	800d198 <clmt_clust>
 800eb7e:	6338      	str	r0, [r7, #48]	; 0x30
 800eb80:	e007      	b.n	800eb92 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	69db      	ldr	r3, [r3, #28]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4610      	mov	r0, r2
 800eb8c:	f7fe f873 	bl	800cc76 <get_fat>
 800eb90:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d804      	bhi.n	800eba2 <f_read+0xe2>
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	755a      	strb	r2, [r3, #21]
 800eb9e:	2302      	movs	r3, #2
 800eba0:	e0c9      	b.n	800ed36 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d104      	bne.n	800ebb4 <f_read+0xf4>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	755a      	strb	r2, [r3, #21]
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e0c0      	b.n	800ed36 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebb8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ebba:	697a      	ldr	r2, [r7, #20]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	f7fe f838 	bl	800cc38 <clust2sect>
 800ebc8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <f_read+0x11a>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	755a      	strb	r2, [r3, #21]
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	e0ad      	b.n	800ed36 <f_read+0x276>
			sect += csect;
 800ebda:	69ba      	ldr	r2, [r7, #24]
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	4413      	add	r3, r2
 800ebe0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	0a5b      	lsrs	r3, r3, #9
 800ebe6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ebe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d039      	beq.n	800ec62 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	4413      	add	r3, r2
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	8952      	ldrh	r2, [r2, #10]
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d905      	bls.n	800ec08 <f_read+0x148>
					cc = fs->csize - csect;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	895b      	ldrh	r3, [r3, #10]
 800ec00:	461a      	mov	r2, r3
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	7858      	ldrb	r0, [r3, #1]
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	69ba      	ldr	r2, [r7, #24]
 800ec10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec12:	f7fd fc67 	bl	800c4e4 <disk_read>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d004      	beq.n	800ec26 <f_read+0x166>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	755a      	strb	r2, [r3, #21]
 800ec22:	2301      	movs	r3, #1
 800ec24:	e087      	b.n	800ed36 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	7d1b      	ldrb	r3, [r3, #20]
 800ec2a:	b25b      	sxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	da14      	bge.n	800ec5a <f_read+0x19a>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6a1a      	ldr	r2, [r3, #32]
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d90d      	bls.n	800ec5a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a1a      	ldr	r2, [r3, #32]
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	025b      	lsls	r3, r3, #9
 800ec48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec4a:	18d0      	adds	r0, r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	3330      	adds	r3, #48	; 0x30
 800ec50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec54:	4619      	mov	r1, r3
 800ec56:	f7fd fd25 	bl	800c6a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5c:	025b      	lsls	r3, r3, #9
 800ec5e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ec60:	e050      	b.n	800ed04 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	69ba      	ldr	r2, [r7, #24]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d02e      	beq.n	800ecca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	7d1b      	ldrb	r3, [r3, #20]
 800ec70:	b25b      	sxtb	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	da18      	bge.n	800eca8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	7858      	ldrb	r0, [r3, #1]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6a1a      	ldr	r2, [r3, #32]
 800ec84:	2301      	movs	r3, #1
 800ec86:	f7fd fc4d 	bl	800c524 <disk_write>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <f_read+0x1da>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2201      	movs	r2, #1
 800ec94:	755a      	strb	r2, [r3, #21]
 800ec96:	2301      	movs	r3, #1
 800ec98:	e04d      	b.n	800ed36 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	7d1b      	ldrb	r3, [r3, #20]
 800ec9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	7858      	ldrb	r0, [r3, #1]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	f7fd fc15 	bl	800c4e4 <disk_read>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <f_read+0x20a>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	755a      	strb	r2, [r3, #21]
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e035      	b.n	800ed36 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	69ba      	ldr	r2, [r7, #24]
 800ecce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecd8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ecdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ecde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d901      	bls.n	800ecea <f_read+0x22a>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecf8:	4413      	add	r3, r2
 800ecfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed00:	f7fd fcd0 	bl	800c6a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	4413      	add	r3, r2
 800ed0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	699a      	ldr	r2, [r3, #24]
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed12:	441a      	add	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	619a      	str	r2, [r3, #24]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1e:	441a      	add	r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f47f af01 	bne.w	800eb36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3738      	adds	r7, #56	; 0x38
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b08c      	sub	sp, #48	; 0x30
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	60f8      	str	r0, [r7, #12]
 800ed46:	60b9      	str	r1, [r7, #8]
 800ed48:	607a      	str	r2, [r7, #4]
 800ed4a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f107 0210 	add.w	r2, r7, #16
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7ff fc64 	bl	800e62c <validate>
 800ed64:	4603      	mov	r3, r0
 800ed66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d107      	bne.n	800ed82 <f_write+0x44>
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	7d5b      	ldrb	r3, [r3, #21]
 800ed76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ed7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <f_write+0x4a>
 800ed82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed86:	e14b      	b.n	800f020 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	7d1b      	ldrb	r3, [r3, #20]
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <f_write+0x5a>
 800ed94:	2307      	movs	r3, #7
 800ed96:	e143      	b.n	800f020 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	699a      	ldr	r2, [r3, #24]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	441a      	add	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	699b      	ldr	r3, [r3, #24]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	f080 812d 	bcs.w	800f004 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	43db      	mvns	r3, r3
 800edb0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800edb2:	e127      	b.n	800f004 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f040 80e3 	bne.w	800ef88 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	0a5b      	lsrs	r3, r3, #9
 800edc8:	693a      	ldr	r2, [r7, #16]
 800edca:	8952      	ldrh	r2, [r2, #10]
 800edcc:	3a01      	subs	r2, #1
 800edce:	4013      	ands	r3, r2
 800edd0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d143      	bne.n	800ee60 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	699b      	ldr	r3, [r3, #24]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10c      	bne.n	800edfa <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d11a      	bne.n	800ee22 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2100      	movs	r1, #0
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fe f939 	bl	800d068 <create_chain>
 800edf6:	62b8      	str	r0, [r7, #40]	; 0x28
 800edf8:	e013      	b.n	800ee22 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d007      	beq.n	800ee12 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	699b      	ldr	r3, [r3, #24]
 800ee06:	4619      	mov	r1, r3
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f7fe f9c5 	bl	800d198 <clmt_clust>
 800ee0e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee10:	e007      	b.n	800ee22 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	f7fe f924 	bl	800d068 <create_chain>
 800ee20:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	f000 80f2 	beq.w	800f00e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ee2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d104      	bne.n	800ee3a <f_write+0xfc>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2202      	movs	r2, #2
 800ee34:	755a      	strb	r2, [r3, #21]
 800ee36:	2302      	movs	r3, #2
 800ee38:	e0f2      	b.n	800f020 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee40:	d104      	bne.n	800ee4c <f_write+0x10e>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2201      	movs	r2, #1
 800ee46:	755a      	strb	r2, [r3, #21]
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e0e9      	b.n	800f020 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee50:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <f_write+0x122>
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee5e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	7d1b      	ldrb	r3, [r3, #20]
 800ee64:	b25b      	sxtb	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	da18      	bge.n	800ee9c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	7858      	ldrb	r0, [r3, #1]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6a1a      	ldr	r2, [r3, #32]
 800ee78:	2301      	movs	r3, #1
 800ee7a:	f7fd fb53 	bl	800c524 <disk_write>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d004      	beq.n	800ee8e <f_write+0x150>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2201      	movs	r2, #1
 800ee88:	755a      	strb	r2, [r3, #21]
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e0c8      	b.n	800f020 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	7d1b      	ldrb	r3, [r3, #20]
 800ee92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ee9c:	693a      	ldr	r2, [r7, #16]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	4619      	mov	r1, r3
 800eea4:	4610      	mov	r0, r2
 800eea6:	f7fd fec7 	bl	800cc38 <clust2sect>
 800eeaa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d104      	bne.n	800eebc <f_write+0x17e>
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2202      	movs	r2, #2
 800eeb6:	755a      	strb	r2, [r3, #21]
 800eeb8:	2302      	movs	r3, #2
 800eeba:	e0b1      	b.n	800f020 <f_write+0x2e2>
			sect += csect;
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	4413      	add	r3, r2
 800eec2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	0a5b      	lsrs	r3, r3, #9
 800eec8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d03c      	beq.n	800ef4a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eed0:	69ba      	ldr	r2, [r7, #24]
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	4413      	add	r3, r2
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	8952      	ldrh	r2, [r2, #10]
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d905      	bls.n	800eeea <f_write+0x1ac>
					cc = fs->csize - csect;
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	895b      	ldrh	r3, [r3, #10]
 800eee2:	461a      	mov	r2, r3
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	7858      	ldrb	r0, [r3, #1]
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	69f9      	ldr	r1, [r7, #28]
 800eef4:	f7fd fb16 	bl	800c524 <disk_write>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d004      	beq.n	800ef08 <f_write+0x1ca>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2201      	movs	r2, #1
 800ef02:	755a      	strb	r2, [r3, #21]
 800ef04:	2301      	movs	r3, #1
 800ef06:	e08b      	b.n	800f020 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6a1a      	ldr	r2, [r3, #32]
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	6a3a      	ldr	r2, [r7, #32]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d915      	bls.n	800ef42 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6a1a      	ldr	r2, [r3, #32]
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	025b      	lsls	r3, r3, #9
 800ef26:	69fa      	ldr	r2, [r7, #28]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef2e:	4619      	mov	r1, r3
 800ef30:	f7fd fbb8 	bl	800c6a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	7d1b      	ldrb	r3, [r3, #20]
 800ef38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ef42:	6a3b      	ldr	r3, [r7, #32]
 800ef44:	025b      	lsls	r3, r3, #9
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ef48:	e03f      	b.n	800efca <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6a1b      	ldr	r3, [r3, #32]
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d016      	beq.n	800ef82 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	699a      	ldr	r2, [r3, #24]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d210      	bcs.n	800ef82 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	7858      	ldrb	r0, [r3, #1]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	697a      	ldr	r2, [r7, #20]
 800ef6e:	f7fd fab9 	bl	800c4e4 <disk_read>
 800ef72:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	755a      	strb	r2, [r3, #21]
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e04e      	b.n	800f020 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	697a      	ldr	r2, [r7, #20]
 800ef86:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef90:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ef94:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ef96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d901      	bls.n	800efa2 <f_write+0x264>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	699b      	ldr	r3, [r3, #24]
 800efac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efb0:	4413      	add	r3, r2
 800efb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb4:	69f9      	ldr	r1, [r7, #28]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fd fb74 	bl	800c6a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efc4:	b2da      	uxtb	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800efca:	69fa      	ldr	r2, [r7, #28]
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	4413      	add	r3, r2
 800efd0:	61fb      	str	r3, [r7, #28]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	699a      	ldr	r2, [r3, #24]
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	441a      	add	r2, r3
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	619a      	str	r2, [r3, #24]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	68da      	ldr	r2, [r3, #12]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	bf38      	it	cc
 800efea:	461a      	movcc	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	60da      	str	r2, [r3, #12]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff6:	441a      	add	r2, r3
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f47f aed4 	bne.w	800edb4 <f_write+0x76>
 800f00c:	e000      	b.n	800f010 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f00e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	7d1b      	ldrb	r3, [r3, #20]
 800f014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f01e:	2300      	movs	r3, #0
}
 800f020:	4618      	mov	r0, r3
 800f022:	3730      	adds	r7, #48	; 0x30
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f107 0208 	add.w	r2, r7, #8
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff faf7 	bl	800e62c <validate>
 800f03e:	4603      	mov	r3, r0
 800f040:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f042:	7dfb      	ldrb	r3, [r7, #23]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d168      	bne.n	800f11a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f050:	2b00      	cmp	r3, #0
 800f052:	d062      	beq.n	800f11a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	7d1b      	ldrb	r3, [r3, #20]
 800f058:	b25b      	sxtb	r3, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	da15      	bge.n	800f08a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	7858      	ldrb	r0, [r3, #1]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6a1a      	ldr	r2, [r3, #32]
 800f06c:	2301      	movs	r3, #1
 800f06e:	f7fd fa59 	bl	800c524 <disk_write>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <f_sync+0x54>
 800f078:	2301      	movs	r3, #1
 800f07a:	e04f      	b.n	800f11c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	7d1b      	ldrb	r3, [r3, #20]
 800f080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f084:	b2da      	uxtb	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f08a:	f7fc ff91 	bl	800bfb0 <get_fattime>
 800f08e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f096:	4619      	mov	r1, r3
 800f098:	4610      	mov	r0, r2
 800f09a:	f7fd fd31 	bl	800cb00 <move_window>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d138      	bne.n	800f11a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	330b      	adds	r3, #11
 800f0b2:	781a      	ldrb	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	330b      	adds	r3, #11
 800f0b8:	f042 0220 	orr.w	r2, r2, #32
 800f0bc:	b2d2      	uxtb	r2, r2
 800f0be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6818      	ldr	r0, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	68f9      	ldr	r1, [r7, #12]
 800f0cc:	f7fe fa3e 	bl	800d54c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f103 021c 	add.w	r2, r3, #28
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	4610      	mov	r0, r2
 800f0de:	f7fd fab5 	bl	800c64c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3316      	adds	r3, #22
 800f0e6:	6939      	ldr	r1, [r7, #16]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fd faaf 	bl	800c64c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3312      	adds	r3, #18
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fd fa8e 	bl	800c616 <st_word>
					fs->wflag = 1;
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	4618      	mov	r0, r3
 800f104:	f7fd fd2a 	bl	800cb5c <sync_fs>
 800f108:	4603      	mov	r3, r0
 800f10a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	7d1b      	ldrb	r3, [r3, #20]
 800f110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f114:	b2da      	uxtb	r2, r3
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3718      	adds	r7, #24
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff ff7b 	bl	800f028 <f_sync>
 800f132:	4603      	mov	r3, r0
 800f134:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f136:	7bfb      	ldrb	r3, [r7, #15]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d118      	bne.n	800f16e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f107 0208 	add.w	r2, r7, #8
 800f142:	4611      	mov	r1, r2
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff fa71 	bl	800e62c <validate>
 800f14a:	4603      	mov	r3, r0
 800f14c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10c      	bne.n	800f16e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fd fc2d 	bl	800c9b8 <dec_lock>
 800f15e:	4603      	mov	r3, r0
 800f160:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f162:	7bfb      	ldrb	r3, [r7, #15]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d102      	bne.n	800f16e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b090      	sub	sp, #64	; 0x40
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f107 0208 	add.w	r2, r7, #8
 800f188:	4611      	mov	r1, r2
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fa4e 	bl	800e62c <validate>
 800f190:	4603      	mov	r3, r0
 800f192:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d103      	bne.n	800f1a6 <f_lseek+0x2e>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	7d5b      	ldrb	r3, [r3, #21]
 800f1a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f1a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d002      	beq.n	800f1b4 <f_lseek+0x3c>
 800f1ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1b2:	e1e6      	b.n	800f582 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f000 80d1 	beq.w	800f360 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c4:	d15a      	bne.n	800f27c <f_lseek+0x104>
			tbl = fp->cltbl;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ca:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	1d1a      	adds	r2, r3, #4
 800f1d0:	627a      	str	r2, [r7, #36]	; 0x24
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	617b      	str	r3, [r7, #20]
 800f1d6:	2302      	movs	r3, #2
 800f1d8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d03a      	beq.n	800f25c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e8:	613b      	str	r3, [r7, #16]
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	3302      	adds	r3, #2
 800f1f2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	60fb      	str	r3, [r7, #12]
 800f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f202:	4618      	mov	r0, r3
 800f204:	f7fd fd37 	bl	800cc76 <get_fat>
 800f208:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d804      	bhi.n	800f21a <f_lseek+0xa2>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2202      	movs	r2, #2
 800f214:	755a      	strb	r2, [r3, #21]
 800f216:	2302      	movs	r3, #2
 800f218:	e1b3      	b.n	800f582 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f220:	d104      	bne.n	800f22c <f_lseek+0xb4>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2201      	movs	r2, #1
 800f226:	755a      	strb	r2, [r3, #21]
 800f228:	2301      	movs	r3, #1
 800f22a:	e1aa      	b.n	800f582 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3301      	adds	r3, #1
 800f230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f232:	429a      	cmp	r2, r3
 800f234:	d0de      	beq.n	800f1f4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d809      	bhi.n	800f252 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	1d1a      	adds	r2, r3, #4
 800f242:	627a      	str	r2, [r7, #36]	; 0x24
 800f244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f246:	601a      	str	r2, [r3, #0]
 800f248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24a:	1d1a      	adds	r2, r3, #4
 800f24c:	627a      	str	r2, [r7, #36]	; 0x24
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f258:	429a      	cmp	r2, r3
 800f25a:	d3c4      	bcc.n	800f1e6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f262:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d803      	bhi.n	800f274 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	e184      	b.n	800f57e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f274:	2311      	movs	r3, #17
 800f276:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f27a:	e180      	b.n	800f57e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	429a      	cmp	r2, r3
 800f284:	d902      	bls.n	800f28c <f_lseek+0x114>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 8172 	beq.w	800f57e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4619      	mov	r1, r3
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7fd ff79 	bl	800d198 <clmt_clust>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	69db      	ldr	r3, [r3, #28]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	f7fd fcbf 	bl	800cc38 <clust2sect>
 800f2ba:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d104      	bne.n	800f2cc <f_lseek+0x154>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	755a      	strb	r2, [r3, #21]
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	e15a      	b.n	800f582 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	0a5b      	lsrs	r3, r3, #9
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	8952      	ldrh	r2, [r2, #10]
 800f2d6:	3a01      	subs	r2, #1
 800f2d8:	4013      	ands	r3, r2
 800f2da:	69ba      	ldr	r2, [r7, #24]
 800f2dc:	4413      	add	r3, r2
 800f2de:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	699b      	ldr	r3, [r3, #24]
 800f2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 8148 	beq.w	800f57e <f_lseek+0x406>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	f000 8142 	beq.w	800f57e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7d1b      	ldrb	r3, [r3, #20]
 800f2fe:	b25b      	sxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	da18      	bge.n	800f336 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	7858      	ldrb	r0, [r3, #1]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a1a      	ldr	r2, [r3, #32]
 800f312:	2301      	movs	r3, #1
 800f314:	f7fd f906 	bl	800c524 <disk_write>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d004      	beq.n	800f328 <f_lseek+0x1b0>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2201      	movs	r2, #1
 800f322:	755a      	strb	r2, [r3, #21]
 800f324:	2301      	movs	r3, #1
 800f326:	e12c      	b.n	800f582 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	7d1b      	ldrb	r3, [r3, #20]
 800f32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f330:	b2da      	uxtb	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	7858      	ldrb	r0, [r3, #1]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f340:	2301      	movs	r3, #1
 800f342:	69ba      	ldr	r2, [r7, #24]
 800f344:	f7fd f8ce 	bl	800c4e4 <disk_read>
 800f348:	4603      	mov	r3, r0
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d004      	beq.n	800f358 <f_lseek+0x1e0>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	755a      	strb	r2, [r3, #21]
 800f354:	2301      	movs	r3, #1
 800f356:	e114      	b.n	800f582 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	69ba      	ldr	r2, [r7, #24]
 800f35c:	621a      	str	r2, [r3, #32]
 800f35e:	e10e      	b.n	800f57e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	d908      	bls.n	800f37c <f_lseek+0x204>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	7d1b      	ldrb	r3, [r3, #20]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	637b      	str	r3, [r7, #52]	; 0x34
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f38a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 80a7 	beq.w	800f4e2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	895b      	ldrh	r3, [r3, #10]
 800f398:	025b      	lsls	r3, r3, #9
 800f39a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d01b      	beq.n	800f3da <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	1e5a      	subs	r2, r3, #1
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	1e59      	subs	r1, r3, #1
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d30f      	bcc.n	800f3da <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	1e5a      	subs	r2, r3, #1
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	425b      	negs	r3, r3
 800f3c2:	401a      	ands	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	699b      	ldr	r3, [r3, #24]
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	69db      	ldr	r3, [r3, #28]
 800f3d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3d8:	e022      	b.n	800f420 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d119      	bne.n	800f41a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fd fe3c 	bl	800d068 <create_chain>
 800f3f0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d104      	bne.n	800f402 <f_lseek+0x28a>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	755a      	strb	r2, [r3, #21]
 800f3fe:	2302      	movs	r3, #2
 800f400:	e0bf      	b.n	800f582 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f408:	d104      	bne.n	800f414 <f_lseek+0x29c>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	755a      	strb	r2, [r3, #21]
 800f410:	2301      	movs	r3, #1
 800f412:	e0b6      	b.n	800f582 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f418:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f41e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f422:	2b00      	cmp	r3, #0
 800f424:	d05d      	beq.n	800f4e2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f426:	e03a      	b.n	800f49e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f428:	683a      	ldr	r2, [r7, #0]
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	1ad3      	subs	r3, r2, r3
 800f42e:	603b      	str	r3, [r7, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	699a      	ldr	r2, [r3, #24]
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	441a      	add	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7d1b      	ldrb	r3, [r3, #20]
 800f440:	f003 0302 	and.w	r3, r3, #2
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00b      	beq.n	800f460 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fd fe0b 	bl	800d068 <create_chain>
 800f452:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	2b00      	cmp	r3, #0
 800f458:	d108      	bne.n	800f46c <f_lseek+0x2f4>
							ofs = 0; break;
 800f45a:	2300      	movs	r3, #0
 800f45c:	603b      	str	r3, [r7, #0]
 800f45e:	e022      	b.n	800f4a6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f464:	4618      	mov	r0, r3
 800f466:	f7fd fc06 	bl	800cc76 <get_fat>
 800f46a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f472:	d104      	bne.n	800f47e <f_lseek+0x306>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2201      	movs	r2, #1
 800f478:	755a      	strb	r2, [r3, #21]
 800f47a:	2301      	movs	r3, #1
 800f47c:	e081      	b.n	800f582 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	2b01      	cmp	r3, #1
 800f482:	d904      	bls.n	800f48e <f_lseek+0x316>
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	699b      	ldr	r3, [r3, #24]
 800f488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d304      	bcc.n	800f498 <f_lseek+0x320>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2202      	movs	r2, #2
 800f492:	755a      	strb	r2, [r3, #21]
 800f494:	2302      	movs	r3, #2
 800f496:	e074      	b.n	800f582 <f_lseek+0x40a>
					fp->clust = clst;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f49c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f49e:	683a      	ldr	r2, [r7, #0]
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d8c0      	bhi.n	800f428 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	699a      	ldr	r2, [r3, #24]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	441a      	add	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d012      	beq.n	800f4e2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fd fbb9 	bl	800cc38 <clust2sect>
 800f4c6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d104      	bne.n	800f4d8 <f_lseek+0x360>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	755a      	strb	r2, [r3, #21]
 800f4d4:	2302      	movs	r3, #2
 800f4d6:	e054      	b.n	800f582 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	0a5b      	lsrs	r3, r3, #9
 800f4dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4de:	4413      	add	r3, r2
 800f4e0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	699a      	ldr	r2, [r3, #24]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d90a      	bls.n	800f504 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	699a      	ldr	r2, [r3, #24]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	7d1b      	ldrb	r3, [r3, #20]
 800f4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	699b      	ldr	r3, [r3, #24]
 800f508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d036      	beq.n	800f57e <f_lseek+0x406>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f516:	429a      	cmp	r2, r3
 800f518:	d031      	beq.n	800f57e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	7d1b      	ldrb	r3, [r3, #20]
 800f51e:	b25b      	sxtb	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	da18      	bge.n	800f556 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	7858      	ldrb	r0, [r3, #1]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a1a      	ldr	r2, [r3, #32]
 800f532:	2301      	movs	r3, #1
 800f534:	f7fc fff6 	bl	800c524 <disk_write>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d004      	beq.n	800f548 <f_lseek+0x3d0>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2201      	movs	r2, #1
 800f542:	755a      	strb	r2, [r3, #21]
 800f544:	2301      	movs	r3, #1
 800f546:	e01c      	b.n	800f582 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	7d1b      	ldrb	r3, [r3, #20]
 800f54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f550:	b2da      	uxtb	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	7858      	ldrb	r0, [r3, #1]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f560:	2301      	movs	r3, #1
 800f562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f564:	f7fc ffbe 	bl	800c4e4 <disk_read>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d004      	beq.n	800f578 <f_lseek+0x400>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	755a      	strb	r2, [r3, #21]
 800f574:	2301      	movs	r3, #1
 800f576:	e004      	b.n	800f582 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f57c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f57e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f582:	4618      	mov	r0, r3
 800f584:	3740      	adds	r7, #64	; 0x40
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
	...

0800f58c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b087      	sub	sp, #28
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	4613      	mov	r3, r2
 800f598:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f59a:	2301      	movs	r3, #1
 800f59c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f5a2:	4b1f      	ldr	r3, [pc, #124]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5a4:	7a5b      	ldrb	r3, [r3, #9]
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d131      	bne.n	800f610 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f5ac:	4b1c      	ldr	r3, [pc, #112]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5ae:	7a5b      	ldrb	r3, [r3, #9]
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	4b1a      	ldr	r3, [pc, #104]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5b6:	2100      	movs	r1, #0
 800f5b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f5ba:	4b19      	ldr	r3, [pc, #100]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5bc:	7a5b      	ldrb	r3, [r3, #9]
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	4a17      	ldr	r2, [pc, #92]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f5ca:	4b15      	ldr	r3, [pc, #84]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5cc:	7a5b      	ldrb	r3, [r3, #9]
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	4b13      	ldr	r3, [pc, #76]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5d4:	4413      	add	r3, r2
 800f5d6:	79fa      	ldrb	r2, [r7, #7]
 800f5d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f5da:	4b11      	ldr	r3, [pc, #68]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5dc:	7a5b      	ldrb	r3, [r3, #9]
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	b2d1      	uxtb	r1, r2
 800f5e4:	4a0e      	ldr	r2, [pc, #56]	; (800f620 <FATFS_LinkDriverEx+0x94>)
 800f5e6:	7251      	strb	r1, [r2, #9]
 800f5e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f5ea:	7dbb      	ldrb	r3, [r7, #22]
 800f5ec:	3330      	adds	r3, #48	; 0x30
 800f5ee:	b2da      	uxtb	r2, r3
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	223a      	movs	r2, #58	; 0x3a
 800f5fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	3302      	adds	r3, #2
 800f600:	222f      	movs	r2, #47	; 0x2f
 800f602:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	3303      	adds	r3, #3
 800f608:	2200      	movs	r2, #0
 800f60a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f610:	7dfb      	ldrb	r3, [r7, #23]
}
 800f612:	4618      	mov	r0, r3
 800f614:	371c      	adds	r7, #28
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	240017d4 	.word	0x240017d4

0800f624 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f62e:	2200      	movs	r2, #0
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff ffaa 	bl	800f58c <FATFS_LinkDriverEx>
 800f638:	4603      	mov	r3, r0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 f83a 	bl	800f6c4 <malloc>
 800f650:	4603      	mov	r3, r0
}
 800f652:	4618      	mov	r0, r3
 800f654:	3708      	adds	r7, #8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b082      	sub	sp, #8
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 f836 	bl	800f6d4 <free>
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <__errno>:
 800f670:	4b01      	ldr	r3, [pc, #4]	; (800f678 <__errno+0x8>)
 800f672:	6818      	ldr	r0, [r3, #0]
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	24000048 	.word	0x24000048

0800f67c <__libc_init_array>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	4d0d      	ldr	r5, [pc, #52]	; (800f6b4 <__libc_init_array+0x38>)
 800f680:	4c0d      	ldr	r4, [pc, #52]	; (800f6b8 <__libc_init_array+0x3c>)
 800f682:	1b64      	subs	r4, r4, r5
 800f684:	10a4      	asrs	r4, r4, #2
 800f686:	2600      	movs	r6, #0
 800f688:	42a6      	cmp	r6, r4
 800f68a:	d109      	bne.n	800f6a0 <__libc_init_array+0x24>
 800f68c:	4d0b      	ldr	r5, [pc, #44]	; (800f6bc <__libc_init_array+0x40>)
 800f68e:	4c0c      	ldr	r4, [pc, #48]	; (800f6c0 <__libc_init_array+0x44>)
 800f690:	f000 f92e 	bl	800f8f0 <_init>
 800f694:	1b64      	subs	r4, r4, r5
 800f696:	10a4      	asrs	r4, r4, #2
 800f698:	2600      	movs	r6, #0
 800f69a:	42a6      	cmp	r6, r4
 800f69c:	d105      	bne.n	800f6aa <__libc_init_array+0x2e>
 800f69e:	bd70      	pop	{r4, r5, r6, pc}
 800f6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6a4:	4798      	blx	r3
 800f6a6:	3601      	adds	r6, #1
 800f6a8:	e7ee      	b.n	800f688 <__libc_init_array+0xc>
 800f6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ae:	4798      	blx	r3
 800f6b0:	3601      	adds	r6, #1
 800f6b2:	e7f2      	b.n	800f69a <__libc_init_array+0x1e>
 800f6b4:	0800fdf8 	.word	0x0800fdf8
 800f6b8:	0800fdf8 	.word	0x0800fdf8
 800f6bc:	0800fdf8 	.word	0x0800fdf8
 800f6c0:	0800fdfc 	.word	0x0800fdfc

0800f6c4 <malloc>:
 800f6c4:	4b02      	ldr	r3, [pc, #8]	; (800f6d0 <malloc+0xc>)
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f000 b87f 	b.w	800f7cc <_malloc_r>
 800f6ce:	bf00      	nop
 800f6d0:	24000048 	.word	0x24000048

0800f6d4 <free>:
 800f6d4:	4b02      	ldr	r3, [pc, #8]	; (800f6e0 <free+0xc>)
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	f000 b80b 	b.w	800f6f4 <_free_r>
 800f6de:	bf00      	nop
 800f6e0:	24000048 	.word	0x24000048

0800f6e4 <memset>:
 800f6e4:	4402      	add	r2, r0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d100      	bne.n	800f6ee <memset+0xa>
 800f6ec:	4770      	bx	lr
 800f6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f6f2:	e7f9      	b.n	800f6e8 <memset+0x4>

0800f6f4 <_free_r>:
 800f6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6f6:	2900      	cmp	r1, #0
 800f6f8:	d044      	beq.n	800f784 <_free_r+0x90>
 800f6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6fe:	9001      	str	r0, [sp, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	f1a1 0404 	sub.w	r4, r1, #4
 800f706:	bfb8      	it	lt
 800f708:	18e4      	addlt	r4, r4, r3
 800f70a:	f000 f8e3 	bl	800f8d4 <__malloc_lock>
 800f70e:	4a1e      	ldr	r2, [pc, #120]	; (800f788 <_free_r+0x94>)
 800f710:	9801      	ldr	r0, [sp, #4]
 800f712:	6813      	ldr	r3, [r2, #0]
 800f714:	b933      	cbnz	r3, 800f724 <_free_r+0x30>
 800f716:	6063      	str	r3, [r4, #4]
 800f718:	6014      	str	r4, [r2, #0]
 800f71a:	b003      	add	sp, #12
 800f71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f720:	f000 b8de 	b.w	800f8e0 <__malloc_unlock>
 800f724:	42a3      	cmp	r3, r4
 800f726:	d908      	bls.n	800f73a <_free_r+0x46>
 800f728:	6825      	ldr	r5, [r4, #0]
 800f72a:	1961      	adds	r1, r4, r5
 800f72c:	428b      	cmp	r3, r1
 800f72e:	bf01      	itttt	eq
 800f730:	6819      	ldreq	r1, [r3, #0]
 800f732:	685b      	ldreq	r3, [r3, #4]
 800f734:	1949      	addeq	r1, r1, r5
 800f736:	6021      	streq	r1, [r4, #0]
 800f738:	e7ed      	b.n	800f716 <_free_r+0x22>
 800f73a:	461a      	mov	r2, r3
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	b10b      	cbz	r3, 800f744 <_free_r+0x50>
 800f740:	42a3      	cmp	r3, r4
 800f742:	d9fa      	bls.n	800f73a <_free_r+0x46>
 800f744:	6811      	ldr	r1, [r2, #0]
 800f746:	1855      	adds	r5, r2, r1
 800f748:	42a5      	cmp	r5, r4
 800f74a:	d10b      	bne.n	800f764 <_free_r+0x70>
 800f74c:	6824      	ldr	r4, [r4, #0]
 800f74e:	4421      	add	r1, r4
 800f750:	1854      	adds	r4, r2, r1
 800f752:	42a3      	cmp	r3, r4
 800f754:	6011      	str	r1, [r2, #0]
 800f756:	d1e0      	bne.n	800f71a <_free_r+0x26>
 800f758:	681c      	ldr	r4, [r3, #0]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	6053      	str	r3, [r2, #4]
 800f75e:	4421      	add	r1, r4
 800f760:	6011      	str	r1, [r2, #0]
 800f762:	e7da      	b.n	800f71a <_free_r+0x26>
 800f764:	d902      	bls.n	800f76c <_free_r+0x78>
 800f766:	230c      	movs	r3, #12
 800f768:	6003      	str	r3, [r0, #0]
 800f76a:	e7d6      	b.n	800f71a <_free_r+0x26>
 800f76c:	6825      	ldr	r5, [r4, #0]
 800f76e:	1961      	adds	r1, r4, r5
 800f770:	428b      	cmp	r3, r1
 800f772:	bf04      	itt	eq
 800f774:	6819      	ldreq	r1, [r3, #0]
 800f776:	685b      	ldreq	r3, [r3, #4]
 800f778:	6063      	str	r3, [r4, #4]
 800f77a:	bf04      	itt	eq
 800f77c:	1949      	addeq	r1, r1, r5
 800f77e:	6021      	streq	r1, [r4, #0]
 800f780:	6054      	str	r4, [r2, #4]
 800f782:	e7ca      	b.n	800f71a <_free_r+0x26>
 800f784:	b003      	add	sp, #12
 800f786:	bd30      	pop	{r4, r5, pc}
 800f788:	240017e0 	.word	0x240017e0

0800f78c <sbrk_aligned>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	4e0e      	ldr	r6, [pc, #56]	; (800f7c8 <sbrk_aligned+0x3c>)
 800f790:	460c      	mov	r4, r1
 800f792:	6831      	ldr	r1, [r6, #0]
 800f794:	4605      	mov	r5, r0
 800f796:	b911      	cbnz	r1, 800f79e <sbrk_aligned+0x12>
 800f798:	f000 f88c 	bl	800f8b4 <_sbrk_r>
 800f79c:	6030      	str	r0, [r6, #0]
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f000 f887 	bl	800f8b4 <_sbrk_r>
 800f7a6:	1c43      	adds	r3, r0, #1
 800f7a8:	d00a      	beq.n	800f7c0 <sbrk_aligned+0x34>
 800f7aa:	1cc4      	adds	r4, r0, #3
 800f7ac:	f024 0403 	bic.w	r4, r4, #3
 800f7b0:	42a0      	cmp	r0, r4
 800f7b2:	d007      	beq.n	800f7c4 <sbrk_aligned+0x38>
 800f7b4:	1a21      	subs	r1, r4, r0
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f000 f87c 	bl	800f8b4 <_sbrk_r>
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d101      	bne.n	800f7c4 <sbrk_aligned+0x38>
 800f7c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	240017e4 	.word	0x240017e4

0800f7cc <_malloc_r>:
 800f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d0:	1ccd      	adds	r5, r1, #3
 800f7d2:	f025 0503 	bic.w	r5, r5, #3
 800f7d6:	3508      	adds	r5, #8
 800f7d8:	2d0c      	cmp	r5, #12
 800f7da:	bf38      	it	cc
 800f7dc:	250c      	movcc	r5, #12
 800f7de:	2d00      	cmp	r5, #0
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	db01      	blt.n	800f7e8 <_malloc_r+0x1c>
 800f7e4:	42a9      	cmp	r1, r5
 800f7e6:	d905      	bls.n	800f7f4 <_malloc_r+0x28>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	2600      	movs	r6, #0
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f4:	4e2e      	ldr	r6, [pc, #184]	; (800f8b0 <_malloc_r+0xe4>)
 800f7f6:	f000 f86d 	bl	800f8d4 <__malloc_lock>
 800f7fa:	6833      	ldr	r3, [r6, #0]
 800f7fc:	461c      	mov	r4, r3
 800f7fe:	bb34      	cbnz	r4, 800f84e <_malloc_r+0x82>
 800f800:	4629      	mov	r1, r5
 800f802:	4638      	mov	r0, r7
 800f804:	f7ff ffc2 	bl	800f78c <sbrk_aligned>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	4604      	mov	r4, r0
 800f80c:	d14d      	bne.n	800f8aa <_malloc_r+0xde>
 800f80e:	6834      	ldr	r4, [r6, #0]
 800f810:	4626      	mov	r6, r4
 800f812:	2e00      	cmp	r6, #0
 800f814:	d140      	bne.n	800f898 <_malloc_r+0xcc>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	4631      	mov	r1, r6
 800f81a:	4638      	mov	r0, r7
 800f81c:	eb04 0803 	add.w	r8, r4, r3
 800f820:	f000 f848 	bl	800f8b4 <_sbrk_r>
 800f824:	4580      	cmp	r8, r0
 800f826:	d13a      	bne.n	800f89e <_malloc_r+0xd2>
 800f828:	6821      	ldr	r1, [r4, #0]
 800f82a:	3503      	adds	r5, #3
 800f82c:	1a6d      	subs	r5, r5, r1
 800f82e:	f025 0503 	bic.w	r5, r5, #3
 800f832:	3508      	adds	r5, #8
 800f834:	2d0c      	cmp	r5, #12
 800f836:	bf38      	it	cc
 800f838:	250c      	movcc	r5, #12
 800f83a:	4629      	mov	r1, r5
 800f83c:	4638      	mov	r0, r7
 800f83e:	f7ff ffa5 	bl	800f78c <sbrk_aligned>
 800f842:	3001      	adds	r0, #1
 800f844:	d02b      	beq.n	800f89e <_malloc_r+0xd2>
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	442b      	add	r3, r5
 800f84a:	6023      	str	r3, [r4, #0]
 800f84c:	e00e      	b.n	800f86c <_malloc_r+0xa0>
 800f84e:	6822      	ldr	r2, [r4, #0]
 800f850:	1b52      	subs	r2, r2, r5
 800f852:	d41e      	bmi.n	800f892 <_malloc_r+0xc6>
 800f854:	2a0b      	cmp	r2, #11
 800f856:	d916      	bls.n	800f886 <_malloc_r+0xba>
 800f858:	1961      	adds	r1, r4, r5
 800f85a:	42a3      	cmp	r3, r4
 800f85c:	6025      	str	r5, [r4, #0]
 800f85e:	bf18      	it	ne
 800f860:	6059      	strne	r1, [r3, #4]
 800f862:	6863      	ldr	r3, [r4, #4]
 800f864:	bf08      	it	eq
 800f866:	6031      	streq	r1, [r6, #0]
 800f868:	5162      	str	r2, [r4, r5]
 800f86a:	604b      	str	r3, [r1, #4]
 800f86c:	4638      	mov	r0, r7
 800f86e:	f104 060b 	add.w	r6, r4, #11
 800f872:	f000 f835 	bl	800f8e0 <__malloc_unlock>
 800f876:	f026 0607 	bic.w	r6, r6, #7
 800f87a:	1d23      	adds	r3, r4, #4
 800f87c:	1af2      	subs	r2, r6, r3
 800f87e:	d0b6      	beq.n	800f7ee <_malloc_r+0x22>
 800f880:	1b9b      	subs	r3, r3, r6
 800f882:	50a3      	str	r3, [r4, r2]
 800f884:	e7b3      	b.n	800f7ee <_malloc_r+0x22>
 800f886:	6862      	ldr	r2, [r4, #4]
 800f888:	42a3      	cmp	r3, r4
 800f88a:	bf0c      	ite	eq
 800f88c:	6032      	streq	r2, [r6, #0]
 800f88e:	605a      	strne	r2, [r3, #4]
 800f890:	e7ec      	b.n	800f86c <_malloc_r+0xa0>
 800f892:	4623      	mov	r3, r4
 800f894:	6864      	ldr	r4, [r4, #4]
 800f896:	e7b2      	b.n	800f7fe <_malloc_r+0x32>
 800f898:	4634      	mov	r4, r6
 800f89a:	6876      	ldr	r6, [r6, #4]
 800f89c:	e7b9      	b.n	800f812 <_malloc_r+0x46>
 800f89e:	230c      	movs	r3, #12
 800f8a0:	603b      	str	r3, [r7, #0]
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	f000 f81c 	bl	800f8e0 <__malloc_unlock>
 800f8a8:	e7a1      	b.n	800f7ee <_malloc_r+0x22>
 800f8aa:	6025      	str	r5, [r4, #0]
 800f8ac:	e7de      	b.n	800f86c <_malloc_r+0xa0>
 800f8ae:	bf00      	nop
 800f8b0:	240017e0 	.word	0x240017e0

0800f8b4 <_sbrk_r>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4d06      	ldr	r5, [pc, #24]	; (800f8d0 <_sbrk_r+0x1c>)
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	4608      	mov	r0, r1
 800f8be:	602b      	str	r3, [r5, #0]
 800f8c0:	f7f1 ffac 	bl	800181c <_sbrk>
 800f8c4:	1c43      	adds	r3, r0, #1
 800f8c6:	d102      	bne.n	800f8ce <_sbrk_r+0x1a>
 800f8c8:	682b      	ldr	r3, [r5, #0]
 800f8ca:	b103      	cbz	r3, 800f8ce <_sbrk_r+0x1a>
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	bd38      	pop	{r3, r4, r5, pc}
 800f8d0:	240017e8 	.word	0x240017e8

0800f8d4 <__malloc_lock>:
 800f8d4:	4801      	ldr	r0, [pc, #4]	; (800f8dc <__malloc_lock+0x8>)
 800f8d6:	f000 b809 	b.w	800f8ec <__retarget_lock_acquire_recursive>
 800f8da:	bf00      	nop
 800f8dc:	240017ec 	.word	0x240017ec

0800f8e0 <__malloc_unlock>:
 800f8e0:	4801      	ldr	r0, [pc, #4]	; (800f8e8 <__malloc_unlock+0x8>)
 800f8e2:	f000 b804 	b.w	800f8ee <__retarget_lock_release_recursive>
 800f8e6:	bf00      	nop
 800f8e8:	240017ec 	.word	0x240017ec

0800f8ec <__retarget_lock_acquire_recursive>:
 800f8ec:	4770      	bx	lr

0800f8ee <__retarget_lock_release_recursive>:
 800f8ee:	4770      	bx	lr

0800f8f0 <_init>:
 800f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f2:	bf00      	nop
 800f8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8f6:	bc08      	pop	{r3}
 800f8f8:	469e      	mov	lr, r3
 800f8fa:	4770      	bx	lr

0800f8fc <_fini>:
 800f8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fe:	bf00      	nop
 800f900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f902:	bc08      	pop	{r3}
 800f904:	469e      	mov	lr, r3
 800f906:	4770      	bx	lr

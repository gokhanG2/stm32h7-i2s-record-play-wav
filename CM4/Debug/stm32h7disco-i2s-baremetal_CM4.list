
stm32h7disco-i2s-baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08104664  08104664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104674  08104674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08104678  08104678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  0810467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  10000010  0810468c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000170  0810468c  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000146fb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002530  00000000  00000000  0003473b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011b0  00000000  00000000  00036c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001098  00000000  00000000  00037e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004109a  00000000  00000000  00038eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000147b4  00000000  00000000  00079f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001ac081  00000000  00000000  0008e706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0023a787  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004b04  00000000  00000000  0023a7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810464c 	.word	0x0810464c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	0810464c 	.word	0x0810464c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b21      	ldr	r3, [pc, #132]	; (8100394 <main+0x8c>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a1f      	ldr	r2, [pc, #124]	; (8100394 <main+0x8c>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1d      	ldr	r3, [pc, #116]	; (8100394 <main+0x8c>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f001 f8ff 	bl	8101530 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f001 f989 	bl	8101648 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f001 f90a 	bl	8101554 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b15      	ldr	r3, [pc, #84]	; (8100398 <main+0x90>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b13      	ldr	r3, [pc, #76]	; (810039c <main+0x94>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a11      	ldr	r2, [pc, #68]	; (810039c <main+0x94>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0e      	ldr	r3, [pc, #56]	; (810039c <main+0x94>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0d      	ldr	r2, [pc, #52]	; (810039c <main+0x94>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fd82 	bl	8100e78 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f9a4 	bl	81006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8100378:	f000 f93a 	bl	81005f0 <MX_DMA_Init>
  MX_FMC_Init();
 810037c:	f000 f952 	bl	8100624 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8100380:	f000 f80e 	bl	81003a0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8100384:	f000 f834 	bl	81003f0 <MX_RTC_Init>
  MX_TIM8_Init();
 8100388:	f000 f85a 	bl	8100440 <MX_TIM8_Init>
  MX_TIM13_Init();
 810038c:	f000 f8e8 	bl	8100560 <MX_TIM13_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100390:	e7fe      	b.n	8100390 <main+0x88>
 8100392:	bf00      	nop
 8100394:	58024400 	.word	0x58024400
 8100398:	e000ed00 	.word	0xe000ed00
 810039c:	58026400 	.word	0x58026400

081003a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 81003a0:	b580      	push	{r7, lr}
 81003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 81003a4:	4b10      	ldr	r3, [pc, #64]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003a6:	4a11      	ldr	r2, [pc, #68]	; (81003ec <MX_QUADSPI_Init+0x4c>)
 81003a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 81003aa:	4b0f      	ldr	r3, [pc, #60]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003ac:	22ff      	movs	r2, #255	; 0xff
 81003ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 81003b0:	4b0d      	ldr	r3, [pc, #52]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003b2:	2201      	movs	r2, #1
 81003b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 81003b6:	4b0c      	ldr	r3, [pc, #48]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003b8:	2200      	movs	r2, #0
 81003ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 81003bc:	4b0a      	ldr	r3, [pc, #40]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003be:	2201      	movs	r2, #1
 81003c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 81003c2:	4b09      	ldr	r3, [pc, #36]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003c4:	2200      	movs	r2, #0
 81003c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 81003c8:	4b07      	ldr	r3, [pc, #28]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003ca:	2200      	movs	r2, #0
 81003cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 81003ce:	4b06      	ldr	r3, [pc, #24]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003d0:	2240      	movs	r2, #64	; 0x40
 81003d2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 81003d4:	4804      	ldr	r0, [pc, #16]	; (81003e8 <MX_QUADSPI_Init+0x48>)
 81003d6:	f001 f945 	bl	8101664 <HAL_QSPI_Init>
 81003da:	4603      	mov	r3, r0
 81003dc:	2b00      	cmp	r3, #0
 81003de:	d001      	beq.n	81003e4 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 81003e0:	f000 f9f2 	bl	81007c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 81003e4:	bf00      	nop
 81003e6:	bd80      	pop	{r7, pc}
 81003e8:	1000002c 	.word	0x1000002c
 81003ec:	52005000 	.word	0x52005000

081003f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 81003f4:	4b10      	ldr	r3, [pc, #64]	; (8100438 <MX_RTC_Init+0x48>)
 81003f6:	4a11      	ldr	r2, [pc, #68]	; (810043c <MX_RTC_Init+0x4c>)
 81003f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81003fa:	4b0f      	ldr	r3, [pc, #60]	; (8100438 <MX_RTC_Init+0x48>)
 81003fc:	2200      	movs	r2, #0
 81003fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100400:	4b0d      	ldr	r3, [pc, #52]	; (8100438 <MX_RTC_Init+0x48>)
 8100402:	227f      	movs	r2, #127	; 0x7f
 8100404:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100406:	4b0c      	ldr	r3, [pc, #48]	; (8100438 <MX_RTC_Init+0x48>)
 8100408:	22ff      	movs	r2, #255	; 0xff
 810040a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 810040c:	4b0a      	ldr	r3, [pc, #40]	; (8100438 <MX_RTC_Init+0x48>)
 810040e:	2200      	movs	r2, #0
 8100410:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100412:	4b09      	ldr	r3, [pc, #36]	; (8100438 <MX_RTC_Init+0x48>)
 8100414:	2200      	movs	r2, #0
 8100416:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100418:	4b07      	ldr	r3, [pc, #28]	; (8100438 <MX_RTC_Init+0x48>)
 810041a:	2200      	movs	r2, #0
 810041c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 810041e:	4b06      	ldr	r3, [pc, #24]	; (8100438 <MX_RTC_Init+0x48>)
 8100420:	2200      	movs	r2, #0
 8100422:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100424:	4804      	ldr	r0, [pc, #16]	; (8100438 <MX_RTC_Init+0x48>)
 8100426:	f002 feff 	bl	8103228 <HAL_RTC_Init>
 810042a:	4603      	mov	r3, r0
 810042c:	2b00      	cmp	r3, #0
 810042e:	d001      	beq.n	8100434 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8100430:	f000 f9ca 	bl	81007c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100434:	bf00      	nop
 8100436:	bd80      	pop	{r7, pc}
 8100438:	10000078 	.word	0x10000078
 810043c:	58004000 	.word	0x58004000

08100440 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100440:	b580      	push	{r7, lr}
 8100442:	b096      	sub	sp, #88	; 0x58
 8100444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810044a:	2200      	movs	r2, #0
 810044c:	601a      	str	r2, [r3, #0]
 810044e:	605a      	str	r2, [r3, #4]
 8100450:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100456:	2200      	movs	r2, #0
 8100458:	601a      	str	r2, [r3, #0]
 810045a:	605a      	str	r2, [r3, #4]
 810045c:	609a      	str	r2, [r3, #8]
 810045e:	60da      	str	r2, [r3, #12]
 8100460:	611a      	str	r2, [r3, #16]
 8100462:	615a      	str	r2, [r3, #20]
 8100464:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100466:	1d3b      	adds	r3, r7, #4
 8100468:	222c      	movs	r2, #44	; 0x2c
 810046a:	2100      	movs	r1, #0
 810046c:	4618      	mov	r0, r3
 810046e:	f004 f8e5 	bl	810463c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100472:	4b39      	ldr	r3, [pc, #228]	; (8100558 <MX_TIM8_Init+0x118>)
 8100474:	4a39      	ldr	r2, [pc, #228]	; (810055c <MX_TIM8_Init+0x11c>)
 8100476:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100478:	4b37      	ldr	r3, [pc, #220]	; (8100558 <MX_TIM8_Init+0x118>)
 810047a:	2200      	movs	r2, #0
 810047c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 810047e:	4b36      	ldr	r3, [pc, #216]	; (8100558 <MX_TIM8_Init+0x118>)
 8100480:	2200      	movs	r2, #0
 8100482:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100484:	4b34      	ldr	r3, [pc, #208]	; (8100558 <MX_TIM8_Init+0x118>)
 8100486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810048a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810048c:	4b32      	ldr	r3, [pc, #200]	; (8100558 <MX_TIM8_Init+0x118>)
 810048e:	2200      	movs	r2, #0
 8100490:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100492:	4b31      	ldr	r3, [pc, #196]	; (8100558 <MX_TIM8_Init+0x118>)
 8100494:	2200      	movs	r2, #0
 8100496:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100498:	4b2f      	ldr	r3, [pc, #188]	; (8100558 <MX_TIM8_Init+0x118>)
 810049a:	2200      	movs	r2, #0
 810049c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 810049e:	482e      	ldr	r0, [pc, #184]	; (8100558 <MX_TIM8_Init+0x118>)
 81004a0:	f003 f86d 	bl	810357e <HAL_TIM_OC_Init>
 81004a4:	4603      	mov	r3, r0
 81004a6:	2b00      	cmp	r3, #0
 81004a8:	d001      	beq.n	81004ae <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 81004aa:	f000 f98d 	bl	81007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81004ae:	2300      	movs	r3, #0
 81004b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81004b2:	2300      	movs	r3, #0
 81004b4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81004b6:	2300      	movs	r3, #0
 81004b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 81004ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81004be:	4619      	mov	r1, r3
 81004c0:	4825      	ldr	r0, [pc, #148]	; (8100558 <MX_TIM8_Init+0x118>)
 81004c2:	f003 fec5 	bl	8104250 <HAL_TIMEx_MasterConfigSynchronization>
 81004c6:	4603      	mov	r3, r0
 81004c8:	2b00      	cmp	r3, #0
 81004ca:	d001      	beq.n	81004d0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 81004cc:	f000 f97c 	bl	81007c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 81004d0:	2300      	movs	r3, #0
 81004d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 81004d4:	2300      	movs	r3, #0
 81004d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81004d8:	2300      	movs	r3, #0
 81004da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81004dc:	2300      	movs	r3, #0
 81004de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81004e0:	2300      	movs	r3, #0
 81004e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81004e4:	2300      	movs	r3, #0
 81004e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81004e8:	2300      	movs	r3, #0
 81004ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81004ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81004f0:	2204      	movs	r2, #4
 81004f2:	4619      	mov	r1, r3
 81004f4:	4818      	ldr	r0, [pc, #96]	; (8100558 <MX_TIM8_Init+0x118>)
 81004f6:	f003 f8fb 	bl	81036f0 <HAL_TIM_OC_ConfigChannel>
 81004fa:	4603      	mov	r3, r0
 81004fc:	2b00      	cmp	r3, #0
 81004fe:	d001      	beq.n	8100504 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100500:	f000 f962 	bl	81007c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100504:	2300      	movs	r3, #0
 8100506:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100508:	2300      	movs	r3, #0
 810050a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810050c:	2300      	movs	r3, #0
 810050e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100510:	2300      	movs	r3, #0
 8100512:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100514:	2300      	movs	r3, #0
 8100516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810051c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810051e:	2300      	movs	r3, #0
 8100520:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100522:	2300      	movs	r3, #0
 8100524:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810052a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810052c:	2300      	movs	r3, #0
 810052e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100530:	2300      	movs	r3, #0
 8100532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100534:	1d3b      	adds	r3, r7, #4
 8100536:	4619      	mov	r1, r3
 8100538:	4807      	ldr	r0, [pc, #28]	; (8100558 <MX_TIM8_Init+0x118>)
 810053a:	f003 ff17 	bl	810436c <HAL_TIMEx_ConfigBreakDeadTime>
 810053e:	4603      	mov	r3, r0
 8100540:	2b00      	cmp	r3, #0
 8100542:	d001      	beq.n	8100548 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100544:	f000 f940 	bl	81007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100548:	4803      	ldr	r0, [pc, #12]	; (8100558 <MX_TIM8_Init+0x118>)
 810054a:	f000 fb29 	bl	8100ba0 <HAL_TIM_MspPostInit>

}
 810054e:	bf00      	nop
 8100550:	3758      	adds	r7, #88	; 0x58
 8100552:	46bd      	mov	sp, r7
 8100554:	bd80      	pop	{r7, pc}
 8100556:	bf00      	nop
 8100558:	1000009c 	.word	0x1000009c
 810055c:	40010400 	.word	0x40010400

08100560 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100560:	b580      	push	{r7, lr}
 8100562:	b084      	sub	sp, #16
 8100564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8100566:	463b      	mov	r3, r7
 8100568:	2200      	movs	r2, #0
 810056a:	601a      	str	r2, [r3, #0]
 810056c:	605a      	str	r2, [r3, #4]
 810056e:	609a      	str	r2, [r3, #8]
 8100570:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100572:	4b1d      	ldr	r3, [pc, #116]	; (81005e8 <MX_TIM13_Init+0x88>)
 8100574:	4a1d      	ldr	r2, [pc, #116]	; (81005ec <MX_TIM13_Init+0x8c>)
 8100576:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100578:	4b1b      	ldr	r3, [pc, #108]	; (81005e8 <MX_TIM13_Init+0x88>)
 810057a:	2200      	movs	r2, #0
 810057c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 810057e:	4b1a      	ldr	r3, [pc, #104]	; (81005e8 <MX_TIM13_Init+0x88>)
 8100580:	2200      	movs	r2, #0
 8100582:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100584:	4b18      	ldr	r3, [pc, #96]	; (81005e8 <MX_TIM13_Init+0x88>)
 8100586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810058a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810058c:	4b16      	ldr	r3, [pc, #88]	; (81005e8 <MX_TIM13_Init+0x88>)
 810058e:	2200      	movs	r2, #0
 8100590:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100592:	4b15      	ldr	r3, [pc, #84]	; (81005e8 <MX_TIM13_Init+0x88>)
 8100594:	2200      	movs	r2, #0
 8100596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100598:	4813      	ldr	r0, [pc, #76]	; (81005e8 <MX_TIM13_Init+0x88>)
 810059a:	f002 ff99 	bl	81034d0 <HAL_TIM_Base_Init>
 810059e:	4603      	mov	r3, r0
 81005a0:	2b00      	cmp	r3, #0
 81005a2:	d001      	beq.n	81005a8 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 81005a4:	f000 f910 	bl	81007c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 81005a8:	480f      	ldr	r0, [pc, #60]	; (81005e8 <MX_TIM13_Init+0x88>)
 81005aa:	f003 f83f 	bl	810362c <HAL_TIM_IC_Init>
 81005ae:	4603      	mov	r3, r0
 81005b0:	2b00      	cmp	r3, #0
 81005b2:	d001      	beq.n	81005b8 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 81005b4:	f000 f908 	bl	81007c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 81005b8:	2300      	movs	r3, #0
 81005ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 81005bc:	2301      	movs	r3, #1
 81005be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 81005c0:	2300      	movs	r3, #0
 81005c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 81005c4:	2300      	movs	r3, #0
 81005c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81005c8:	463b      	mov	r3, r7
 81005ca:	2200      	movs	r2, #0
 81005cc:	4619      	mov	r1, r3
 81005ce:	4806      	ldr	r0, [pc, #24]	; (81005e8 <MX_TIM13_Init+0x88>)
 81005d0:	f003 f908 	bl	81037e4 <HAL_TIM_IC_ConfigChannel>
 81005d4:	4603      	mov	r3, r0
 81005d6:	2b00      	cmp	r3, #0
 81005d8:	d001      	beq.n	81005de <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 81005da:	f000 f8f5 	bl	81007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 81005de:	bf00      	nop
 81005e0:	3710      	adds	r7, #16
 81005e2:	46bd      	mov	sp, r7
 81005e4:	bd80      	pop	{r7, pc}
 81005e6:	bf00      	nop
 81005e8:	100000e8 	.word	0x100000e8
 81005ec:	40001c00 	.word	0x40001c00

081005f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81005f0:	b480      	push	{r7}
 81005f2:	b083      	sub	sp, #12
 81005f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81005f6:	4b0a      	ldr	r3, [pc, #40]	; (8100620 <MX_DMA_Init+0x30>)
 81005f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005fc:	4a08      	ldr	r2, [pc, #32]	; (8100620 <MX_DMA_Init+0x30>)
 81005fe:	f043 0301 	orr.w	r3, r3, #1
 8100602:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100606:	4b06      	ldr	r3, [pc, #24]	; (8100620 <MX_DMA_Init+0x30>)
 8100608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810060c:	f003 0301 	and.w	r3, r3, #1
 8100610:	607b      	str	r3, [r7, #4]
 8100612:	687b      	ldr	r3, [r7, #4]

}
 8100614:	bf00      	nop
 8100616:	370c      	adds	r7, #12
 8100618:	46bd      	mov	sp, r7
 810061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810061e:	4770      	bx	lr
 8100620:	58024400 	.word	0x58024400

08100624 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100624:	b580      	push	{r7, lr}
 8100626:	b088      	sub	sp, #32
 8100628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 810062a:	1d3b      	adds	r3, r7, #4
 810062c:	2200      	movs	r2, #0
 810062e:	601a      	str	r2, [r3, #0]
 8100630:	605a      	str	r2, [r3, #4]
 8100632:	609a      	str	r2, [r3, #8]
 8100634:	60da      	str	r2, [r3, #12]
 8100636:	611a      	str	r2, [r3, #16]
 8100638:	615a      	str	r2, [r3, #20]
 810063a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 810063c:	4b1e      	ldr	r3, [pc, #120]	; (81006b8 <MX_FMC_Init+0x94>)
 810063e:	4a1f      	ldr	r2, [pc, #124]	; (81006bc <MX_FMC_Init+0x98>)
 8100640:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100642:	4b1d      	ldr	r3, [pc, #116]	; (81006b8 <MX_FMC_Init+0x94>)
 8100644:	2201      	movs	r2, #1
 8100646:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100648:	4b1b      	ldr	r3, [pc, #108]	; (81006b8 <MX_FMC_Init+0x94>)
 810064a:	2200      	movs	r2, #0
 810064c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 810064e:	4b1a      	ldr	r3, [pc, #104]	; (81006b8 <MX_FMC_Init+0x94>)
 8100650:	2208      	movs	r2, #8
 8100652:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8100654:	4b18      	ldr	r3, [pc, #96]	; (81006b8 <MX_FMC_Init+0x94>)
 8100656:	2220      	movs	r2, #32
 8100658:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 810065a:	4b17      	ldr	r3, [pc, #92]	; (81006b8 <MX_FMC_Init+0x94>)
 810065c:	2200      	movs	r2, #0
 810065e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100660:	4b15      	ldr	r3, [pc, #84]	; (81006b8 <MX_FMC_Init+0x94>)
 8100662:	2280      	movs	r2, #128	; 0x80
 8100664:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100666:	4b14      	ldr	r3, [pc, #80]	; (81006b8 <MX_FMC_Init+0x94>)
 8100668:	2200      	movs	r2, #0
 810066a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 810066c:	4b12      	ldr	r3, [pc, #72]	; (81006b8 <MX_FMC_Init+0x94>)
 810066e:	2200      	movs	r2, #0
 8100670:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100672:	4b11      	ldr	r3, [pc, #68]	; (81006b8 <MX_FMC_Init+0x94>)
 8100674:	2200      	movs	r2, #0
 8100676:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100678:	4b0f      	ldr	r3, [pc, #60]	; (81006b8 <MX_FMC_Init+0x94>)
 810067a:	2200      	movs	r2, #0
 810067c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 810067e:	2310      	movs	r3, #16
 8100680:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100682:	2310      	movs	r3, #16
 8100684:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100686:	2310      	movs	r3, #16
 8100688:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 810068a:	2310      	movs	r3, #16
 810068c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 810068e:	2310      	movs	r3, #16
 8100690:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100692:	2310      	movs	r3, #16
 8100694:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100696:	2310      	movs	r3, #16
 8100698:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 810069a:	1d3b      	adds	r3, r7, #4
 810069c:	4619      	mov	r1, r3
 810069e:	4806      	ldr	r0, [pc, #24]	; (81006b8 <MX_FMC_Init+0x94>)
 81006a0:	f002 feda 	bl	8103458 <HAL_SDRAM_Init>
 81006a4:	4603      	mov	r3, r0
 81006a6:	2b00      	cmp	r3, #0
 81006a8:	d001      	beq.n	81006ae <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 81006aa:	f000 f88d 	bl	81007c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81006ae:	bf00      	nop
 81006b0:	3720      	adds	r7, #32
 81006b2:	46bd      	mov	sp, r7
 81006b4:	bd80      	pop	{r7, pc}
 81006b6:	bf00      	nop
 81006b8:	10000134 	.word	0x10000134
 81006bc:	52004140 	.word	0x52004140

081006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81006c0:	b480      	push	{r7}
 81006c2:	b089      	sub	sp, #36	; 0x24
 81006c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81006c6:	4b3f      	ldr	r3, [pc, #252]	; (81007c4 <MX_GPIO_Init+0x104>)
 81006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006cc:	4a3d      	ldr	r2, [pc, #244]	; (81007c4 <MX_GPIO_Init+0x104>)
 81006ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006d6:	4b3b      	ldr	r3, [pc, #236]	; (81007c4 <MX_GPIO_Init+0x104>)
 81006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81006e0:	61fb      	str	r3, [r7, #28]
 81006e2:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81006e4:	4b37      	ldr	r3, [pc, #220]	; (81007c4 <MX_GPIO_Init+0x104>)
 81006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006ea:	4a36      	ldr	r2, [pc, #216]	; (81007c4 <MX_GPIO_Init+0x104>)
 81006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006f4:	4b33      	ldr	r3, [pc, #204]	; (81007c4 <MX_GPIO_Init+0x104>)
 81006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81006fe:	61bb      	str	r3, [r7, #24]
 8100700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100702:	4b30      	ldr	r3, [pc, #192]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100708:	4a2e      	ldr	r2, [pc, #184]	; (81007c4 <MX_GPIO_Init+0x104>)
 810070a:	f043 0310 	orr.w	r3, r3, #16
 810070e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100712:	4b2c      	ldr	r3, [pc, #176]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100718:	f003 0310 	and.w	r3, r3, #16
 810071c:	617b      	str	r3, [r7, #20]
 810071e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100720:	4b28      	ldr	r3, [pc, #160]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100726:	4a27      	ldr	r2, [pc, #156]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810072c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100730:	4b24      	ldr	r3, [pc, #144]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810073a:	613b      	str	r3, [r7, #16]
 810073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810073e:	4b21      	ldr	r3, [pc, #132]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100744:	4a1f      	ldr	r2, [pc, #124]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100746:	f043 0308 	orr.w	r3, r3, #8
 810074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810074e:	4b1d      	ldr	r3, [pc, #116]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100754:	f003 0308 	and.w	r3, r3, #8
 8100758:	60fb      	str	r3, [r7, #12]
 810075a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810075c:	4b19      	ldr	r3, [pc, #100]	; (81007c4 <MX_GPIO_Init+0x104>)
 810075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100762:	4a18      	ldr	r2, [pc, #96]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100764:	f043 0320 	orr.w	r3, r3, #32
 8100768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810076c:	4b15      	ldr	r3, [pc, #84]	; (81007c4 <MX_GPIO_Init+0x104>)
 810076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100772:	f003 0320 	and.w	r3, r3, #32
 8100776:	60bb      	str	r3, [r7, #8]
 8100778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 810077a:	4b12      	ldr	r3, [pc, #72]	; (81007c4 <MX_GPIO_Init+0x104>)
 810077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100780:	4a10      	ldr	r2, [pc, #64]	; (81007c4 <MX_GPIO_Init+0x104>)
 8100782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810078a:	4b0e      	ldr	r3, [pc, #56]	; (81007c4 <MX_GPIO_Init+0x104>)
 810078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100794:	607b      	str	r3, [r7, #4]
 8100796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100798:	4b0a      	ldr	r3, [pc, #40]	; (81007c4 <MX_GPIO_Init+0x104>)
 810079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810079e:	4a09      	ldr	r2, [pc, #36]	; (81007c4 <MX_GPIO_Init+0x104>)
 81007a0:	f043 0302 	orr.w	r3, r3, #2
 81007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007a8:	4b06      	ldr	r3, [pc, #24]	; (81007c4 <MX_GPIO_Init+0x104>)
 81007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007ae:	f003 0302 	and.w	r3, r3, #2
 81007b2:	603b      	str	r3, [r7, #0]
 81007b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81007b6:	bf00      	nop
 81007b8:	3724      	adds	r7, #36	; 0x24
 81007ba:	46bd      	mov	sp, r7
 81007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c0:	4770      	bx	lr
 81007c2:	bf00      	nop
 81007c4:	58024400 	.word	0x58024400

081007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007c8:	b480      	push	{r7}
 81007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007cc:	b672      	cpsid	i
}
 81007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007d0:	e7fe      	b.n	81007d0 <Error_Handler+0x8>
	...

081007d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007d4:	b480      	push	{r7}
 81007d6:	b083      	sub	sp, #12
 81007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007da:	4b0a      	ldr	r3, [pc, #40]	; (8100804 <HAL_MspInit+0x30>)
 81007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007e0:	4a08      	ldr	r2, [pc, #32]	; (8100804 <HAL_MspInit+0x30>)
 81007e2:	f043 0302 	orr.w	r3, r3, #2
 81007e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81007ea:	4b06      	ldr	r3, [pc, #24]	; (8100804 <HAL_MspInit+0x30>)
 81007ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007f0:	f003 0302 	and.w	r3, r3, #2
 81007f4:	607b      	str	r3, [r7, #4]
 81007f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007f8:	bf00      	nop
 81007fa:	370c      	adds	r7, #12
 81007fc:	46bd      	mov	sp, r7
 81007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100802:	4770      	bx	lr
 8100804:	58024400 	.word	0x58024400

08100808 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8100808:	b580      	push	{r7, lr}
 810080a:	b0c0      	sub	sp, #256	; 0x100
 810080c:	af00      	add	r7, sp, #0
 810080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100810:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8100814:	2200      	movs	r2, #0
 8100816:	601a      	str	r2, [r3, #0]
 8100818:	605a      	str	r2, [r3, #4]
 810081a:	609a      	str	r2, [r3, #8]
 810081c:	60da      	str	r2, [r3, #12]
 810081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100820:	f107 0320 	add.w	r3, r7, #32
 8100824:	22c8      	movs	r2, #200	; 0xc8
 8100826:	2100      	movs	r1, #0
 8100828:	4618      	mov	r0, r3
 810082a:	f003 ff07 	bl	810463c <memset>
  if(hqspi->Instance==QUADSPI)
 810082e:	687b      	ldr	r3, [r7, #4]
 8100830:	681b      	ldr	r3, [r3, #0]
 8100832:	4a85      	ldr	r2, [pc, #532]	; (8100a48 <HAL_QSPI_MspInit+0x240>)
 8100834:	4293      	cmp	r3, r2
 8100836:	f040 8102 	bne.w	8100a3e <HAL_QSPI_MspInit+0x236>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 810083a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 810083e:	f04f 0300 	mov.w	r3, #0
 8100842:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8100846:	2300      	movs	r3, #0
 8100848:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810084a:	f107 0320 	add.w	r3, r7, #32
 810084e:	4618      	mov	r0, r3
 8100850:	f001 f93c 	bl	8101acc <HAL_RCCEx_PeriphCLKConfig>
 8100854:	4603      	mov	r3, r0
 8100856:	2b00      	cmp	r3, #0
 8100858:	d001      	beq.n	810085e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810085a:	f7ff ffb5 	bl	81007c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 810085e:	4b7b      	ldr	r3, [pc, #492]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 8100860:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100864:	4a79      	ldr	r2, [pc, #484]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 8100866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810086a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 810086e:	4b77      	ldr	r3, [pc, #476]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 8100870:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100878:	61fb      	str	r3, [r7, #28]
 810087a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810087c:	4b73      	ldr	r3, [pc, #460]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 810087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100882:	4a72      	ldr	r2, [pc, #456]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 8100884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810088c:	4b6f      	ldr	r3, [pc, #444]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 810088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100896:	61bb      	str	r3, [r7, #24]
 8100898:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810089a:	4b6c      	ldr	r3, [pc, #432]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 810089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008a0:	4a6a      	ldr	r2, [pc, #424]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008a2:	f043 0320 	orr.w	r3, r3, #32
 81008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008aa:	4b68      	ldr	r3, [pc, #416]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008b0:	f003 0320 	and.w	r3, r3, #32
 81008b4:	617b      	str	r3, [r7, #20]
 81008b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81008b8:	4b64      	ldr	r3, [pc, #400]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008be:	4a63      	ldr	r2, [pc, #396]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008c8:	4b60      	ldr	r3, [pc, #384]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81008d2:	613b      	str	r3, [r7, #16]
 81008d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81008d6:	4b5d      	ldr	r3, [pc, #372]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008dc:	4a5b      	ldr	r2, [pc, #364]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008de:	f043 0302 	orr.w	r3, r3, #2
 81008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008e6:	4b59      	ldr	r3, [pc, #356]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ec:	f003 0302 	and.w	r3, r3, #2
 81008f0:	60fb      	str	r3, [r7, #12]
 81008f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81008f4:	4b55      	ldr	r3, [pc, #340]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008fa:	4a54      	ldr	r2, [pc, #336]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 81008fc:	f043 0308 	orr.w	r3, r3, #8
 8100900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100904:	4b51      	ldr	r3, [pc, #324]	; (8100a4c <HAL_QSPI_MspInit+0x244>)
 8100906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810090a:	f003 0308 	and.w	r3, r3, #8
 810090e:	60bb      	str	r3, [r7, #8]
 8100910:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8100912:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8100916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810091a:	2302      	movs	r3, #2
 810091c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100920:	2300      	movs	r3, #0
 8100922:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100926:	2300      	movs	r3, #0
 8100928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810092c:	2309      	movs	r3, #9
 810092e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100932:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8100936:	4619      	mov	r1, r3
 8100938:	4845      	ldr	r0, [pc, #276]	; (8100a50 <HAL_QSPI_MspInit+0x248>)
 810093a:	f000 fc49 	bl	81011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 810093e:	2340      	movs	r3, #64	; 0x40
 8100940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100944:	2302      	movs	r3, #2
 8100946:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810094a:	2300      	movs	r3, #0
 810094c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100950:	2300      	movs	r3, #0
 8100952:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8100956:	230a      	movs	r3, #10
 8100958:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 810095c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8100960:	4619      	mov	r1, r3
 8100962:	483b      	ldr	r0, [pc, #236]	; (8100a50 <HAL_QSPI_MspInit+0x248>)
 8100964:	f000 fc34 	bl	81011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8100968:	23c0      	movs	r3, #192	; 0xc0
 810096a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810096e:	2302      	movs	r3, #2
 8100970:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100974:	2300      	movs	r3, #0
 8100976:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810097a:	2300      	movs	r3, #0
 810097c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100980:	2309      	movs	r3, #9
 8100982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100986:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 810098a:	4619      	mov	r1, r3
 810098c:	4831      	ldr	r0, [pc, #196]	; (8100a54 <HAL_QSPI_MspInit+0x24c>)
 810098e:	f000 fc1f 	bl	81011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8100992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810099a:	2302      	movs	r3, #2
 810099c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009a0:	2300      	movs	r3, #0
 81009a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009a6:	2300      	movs	r3, #0
 81009a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81009ac:	230a      	movs	r3, #10
 81009ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 81009b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 81009b6:	4619      	mov	r1, r3
 81009b8:	4826      	ldr	r0, [pc, #152]	; (8100a54 <HAL_QSPI_MspInit+0x24c>)
 81009ba:	f000 fc09 	bl	81011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 81009be:	230c      	movs	r3, #12
 81009c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81009c4:	2302      	movs	r3, #2
 81009c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009ca:	2300      	movs	r3, #0
 81009cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009d0:	2300      	movs	r3, #0
 81009d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81009d6:	2309      	movs	r3, #9
 81009d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81009dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 81009e0:	4619      	mov	r1, r3
 81009e2:	481d      	ldr	r0, [pc, #116]	; (8100a58 <HAL_QSPI_MspInit+0x250>)
 81009e4:	f000 fbf4 	bl	81011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 81009e8:	2304      	movs	r3, #4
 81009ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81009ee:	2302      	movs	r3, #2
 81009f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009f4:	2300      	movs	r3, #0
 81009f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009fa:	2300      	movs	r3, #0
 81009fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100a00:	2309      	movs	r3, #9
 8100a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8100a06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8100a0a:	4619      	mov	r1, r3
 8100a0c:	4813      	ldr	r0, [pc, #76]	; (8100a5c <HAL_QSPI_MspInit+0x254>)
 8100a0e:	f000 fbdf 	bl	81011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8100a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100a16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a1a:	2302      	movs	r3, #2
 8100a1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a20:	2300      	movs	r3, #0
 8100a22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a26:	2300      	movs	r3, #0
 8100a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100a2c:	2309      	movs	r3, #9
 8100a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8100a32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8100a36:	4619      	mov	r1, r3
 8100a38:	4809      	ldr	r0, [pc, #36]	; (8100a60 <HAL_QSPI_MspInit+0x258>)
 8100a3a:	f000 fbc9 	bl	81011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8100a3e:	bf00      	nop
 8100a40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8100a44:	46bd      	mov	sp, r7
 8100a46:	bd80      	pop	{r7, pc}
 8100a48:	52005000 	.word	0x52005000
 8100a4c:	58024400 	.word	0x58024400
 8100a50:	58021800 	.word	0x58021800
 8100a54:	58021400 	.word	0x58021400
 8100a58:	58021c00 	.word	0x58021c00
 8100a5c:	58020400 	.word	0x58020400
 8100a60:	58020c00 	.word	0x58020c00

08100a64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100a64:	b580      	push	{r7, lr}
 8100a66:	b0b4      	sub	sp, #208	; 0xd0
 8100a68:	af00      	add	r7, sp, #0
 8100a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100a6c:	f107 0308 	add.w	r3, r7, #8
 8100a70:	22c8      	movs	r2, #200	; 0xc8
 8100a72:	2100      	movs	r1, #0
 8100a74:	4618      	mov	r0, r3
 8100a76:	f003 fde1 	bl	810463c <memset>
  if(hrtc->Instance==RTC)
 8100a7a:	687b      	ldr	r3, [r7, #4]
 8100a7c:	681b      	ldr	r3, [r3, #0]
 8100a7e:	4a10      	ldr	r2, [pc, #64]	; (8100ac0 <HAL_RTC_MspInit+0x5c>)
 8100a80:	4293      	cmp	r3, r2
 8100a82:	d119      	bne.n	8100ab8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100a84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100a88:	f04f 0300 	mov.w	r3, #0
 8100a8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100a98:	f107 0308 	add.w	r3, r7, #8
 8100a9c:	4618      	mov	r0, r3
 8100a9e:	f001 f815 	bl	8101acc <HAL_RCCEx_PeriphCLKConfig>
 8100aa2:	4603      	mov	r3, r0
 8100aa4:	2b00      	cmp	r3, #0
 8100aa6:	d001      	beq.n	8100aac <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8100aa8:	f7ff fe8e 	bl	81007c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100aac:	4b05      	ldr	r3, [pc, #20]	; (8100ac4 <HAL_RTC_MspInit+0x60>)
 8100aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100ab0:	4a04      	ldr	r2, [pc, #16]	; (8100ac4 <HAL_RTC_MspInit+0x60>)
 8100ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100ab6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8100ab8:	bf00      	nop
 8100aba:	37d0      	adds	r7, #208	; 0xd0
 8100abc:	46bd      	mov	sp, r7
 8100abe:	bd80      	pop	{r7, pc}
 8100ac0:	58004000 	.word	0x58004000
 8100ac4:	58024400 	.word	0x58024400

08100ac8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8100ac8:	b480      	push	{r7}
 8100aca:	b085      	sub	sp, #20
 8100acc:	af00      	add	r7, sp, #0
 8100ace:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8100ad0:	687b      	ldr	r3, [r7, #4]
 8100ad2:	681b      	ldr	r3, [r3, #0]
 8100ad4:	4a0b      	ldr	r2, [pc, #44]	; (8100b04 <HAL_TIM_OC_MspInit+0x3c>)
 8100ad6:	4293      	cmp	r3, r2
 8100ad8:	d10e      	bne.n	8100af8 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8100ada:	4b0b      	ldr	r3, [pc, #44]	; (8100b08 <HAL_TIM_OC_MspInit+0x40>)
 8100adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100ae0:	4a09      	ldr	r2, [pc, #36]	; (8100b08 <HAL_TIM_OC_MspInit+0x40>)
 8100ae2:	f043 0302 	orr.w	r3, r3, #2
 8100ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100aea:	4b07      	ldr	r3, [pc, #28]	; (8100b08 <HAL_TIM_OC_MspInit+0x40>)
 8100aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100af0:	f003 0302 	and.w	r3, r3, #2
 8100af4:	60fb      	str	r3, [r7, #12]
 8100af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8100af8:	bf00      	nop
 8100afa:	3714      	adds	r7, #20
 8100afc:	46bd      	mov	sp, r7
 8100afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b02:	4770      	bx	lr
 8100b04:	40010400 	.word	0x40010400
 8100b08:	58024400 	.word	0x58024400

08100b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100b0c:	b580      	push	{r7, lr}
 8100b0e:	b08a      	sub	sp, #40	; 0x28
 8100b10:	af00      	add	r7, sp, #0
 8100b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b14:	f107 0314 	add.w	r3, r7, #20
 8100b18:	2200      	movs	r2, #0
 8100b1a:	601a      	str	r2, [r3, #0]
 8100b1c:	605a      	str	r2, [r3, #4]
 8100b1e:	609a      	str	r2, [r3, #8]
 8100b20:	60da      	str	r2, [r3, #12]
 8100b22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8100b24:	687b      	ldr	r3, [r7, #4]
 8100b26:	681b      	ldr	r3, [r3, #0]
 8100b28:	4a1a      	ldr	r2, [pc, #104]	; (8100b94 <HAL_TIM_Base_MspInit+0x88>)
 8100b2a:	4293      	cmp	r3, r2
 8100b2c:	d12e      	bne.n	8100b8c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8100b2e:	4b1a      	ldr	r3, [pc, #104]	; (8100b98 <HAL_TIM_Base_MspInit+0x8c>)
 8100b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b34:	4a18      	ldr	r2, [pc, #96]	; (8100b98 <HAL_TIM_Base_MspInit+0x8c>)
 8100b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100b3e:	4b16      	ldr	r3, [pc, #88]	; (8100b98 <HAL_TIM_Base_MspInit+0x8c>)
 8100b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100b48:	613b      	str	r3, [r7, #16]
 8100b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b4c:	4b12      	ldr	r3, [pc, #72]	; (8100b98 <HAL_TIM_Base_MspInit+0x8c>)
 8100b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b52:	4a11      	ldr	r2, [pc, #68]	; (8100b98 <HAL_TIM_Base_MspInit+0x8c>)
 8100b54:	f043 0320 	orr.w	r3, r3, #32
 8100b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b5c:	4b0e      	ldr	r3, [pc, #56]	; (8100b98 <HAL_TIM_Base_MspInit+0x8c>)
 8100b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b62:	f003 0320 	and.w	r3, r3, #32
 8100b66:	60fb      	str	r3, [r7, #12]
 8100b68:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8100b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b70:	2302      	movs	r3, #2
 8100b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b74:	2300      	movs	r3, #0
 8100b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b78:	2300      	movs	r3, #0
 8100b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8100b7c:	2309      	movs	r3, #9
 8100b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8100b80:	f107 0314 	add.w	r3, r7, #20
 8100b84:	4619      	mov	r1, r3
 8100b86:	4805      	ldr	r0, [pc, #20]	; (8100b9c <HAL_TIM_Base_MspInit+0x90>)
 8100b88:	f000 fb22 	bl	81011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8100b8c:	bf00      	nop
 8100b8e:	3728      	adds	r7, #40	; 0x28
 8100b90:	46bd      	mov	sp, r7
 8100b92:	bd80      	pop	{r7, pc}
 8100b94:	40001c00 	.word	0x40001c00
 8100b98:	58024400 	.word	0x58024400
 8100b9c:	58021400 	.word	0x58021400

08100ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100ba0:	b580      	push	{r7, lr}
 8100ba2:	b088      	sub	sp, #32
 8100ba4:	af00      	add	r7, sp, #0
 8100ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ba8:	f107 030c 	add.w	r3, r7, #12
 8100bac:	2200      	movs	r2, #0
 8100bae:	601a      	str	r2, [r3, #0]
 8100bb0:	605a      	str	r2, [r3, #4]
 8100bb2:	609a      	str	r2, [r3, #8]
 8100bb4:	60da      	str	r2, [r3, #12]
 8100bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8100bb8:	687b      	ldr	r3, [r7, #4]
 8100bba:	681b      	ldr	r3, [r3, #0]
 8100bbc:	4a12      	ldr	r2, [pc, #72]	; (8100c08 <HAL_TIM_MspPostInit+0x68>)
 8100bbe:	4293      	cmp	r3, r2
 8100bc0:	d11e      	bne.n	8100c00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100bc2:	4b12      	ldr	r3, [pc, #72]	; (8100c0c <HAL_TIM_MspPostInit+0x6c>)
 8100bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bc8:	4a10      	ldr	r2, [pc, #64]	; (8100c0c <HAL_TIM_MspPostInit+0x6c>)
 8100bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bd2:	4b0e      	ldr	r3, [pc, #56]	; (8100c0c <HAL_TIM_MspPostInit+0x6c>)
 8100bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100bdc:	60bb      	str	r3, [r7, #8]
 8100bde:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8100be0:	23c0      	movs	r3, #192	; 0xc0
 8100be2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100be4:	2302      	movs	r3, #2
 8100be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100be8:	2300      	movs	r3, #0
 8100bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bec:	2300      	movs	r3, #0
 8100bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8100bf0:	2303      	movs	r3, #3
 8100bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8100bf4:	f107 030c 	add.w	r3, r7, #12
 8100bf8:	4619      	mov	r1, r3
 8100bfa:	4805      	ldr	r0, [pc, #20]	; (8100c10 <HAL_TIM_MspPostInit+0x70>)
 8100bfc:	f000 fae8 	bl	81011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8100c00:	bf00      	nop
 8100c02:	3720      	adds	r7, #32
 8100c04:	46bd      	mov	sp, r7
 8100c06:	bd80      	pop	{r7, pc}
 8100c08:	40010400 	.word	0x40010400
 8100c0c:	58024400 	.word	0x58024400
 8100c10:	58022400 	.word	0x58022400

08100c14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100c14:	b580      	push	{r7, lr}
 8100c16:	b0ba      	sub	sp, #232	; 0xe8
 8100c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8100c1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c1e:	2200      	movs	r2, #0
 8100c20:	601a      	str	r2, [r3, #0]
 8100c22:	605a      	str	r2, [r3, #4]
 8100c24:	609a      	str	r2, [r3, #8]
 8100c26:	60da      	str	r2, [r3, #12]
 8100c28:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8100c2a:	4b5c      	ldr	r3, [pc, #368]	; (8100d9c <HAL_FMC_MspInit+0x188>)
 8100c2c:	681b      	ldr	r3, [r3, #0]
 8100c2e:	2b00      	cmp	r3, #0
 8100c30:	f040 80b0 	bne.w	8100d94 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8100c34:	4b59      	ldr	r3, [pc, #356]	; (8100d9c <HAL_FMC_MspInit+0x188>)
 8100c36:	2201      	movs	r2, #1
 8100c38:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100c3a:	f107 0308 	add.w	r3, r7, #8
 8100c3e:	22c8      	movs	r2, #200	; 0xc8
 8100c40:	2100      	movs	r1, #0
 8100c42:	4618      	mov	r0, r3
 8100c44:	f003 fcfa 	bl	810463c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8100c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8100c4c:	f04f 0300 	mov.w	r3, #0
 8100c50:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8100c54:	2300      	movs	r3, #0
 8100c56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c58:	f107 0308 	add.w	r3, r7, #8
 8100c5c:	4618      	mov	r0, r3
 8100c5e:	f000 ff35 	bl	8101acc <HAL_RCCEx_PeriphCLKConfig>
 8100c62:	4603      	mov	r3, r0
 8100c64:	2b00      	cmp	r3, #0
 8100c66:	d001      	beq.n	8100c6c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8100c68:	f7ff fdae 	bl	81007c8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8100c6c:	4b4c      	ldr	r3, [pc, #304]	; (8100da0 <HAL_FMC_MspInit+0x18c>)
 8100c6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100c72:	4a4b      	ldr	r2, [pc, #300]	; (8100da0 <HAL_FMC_MspInit+0x18c>)
 8100c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100c78:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100c7c:	4b48      	ldr	r3, [pc, #288]	; (8100da0 <HAL_FMC_MspInit+0x18c>)
 8100c7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100c86:	607b      	str	r3, [r7, #4]
 8100c88:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 8100c8a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8100c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c92:	2302      	movs	r3, #2
 8100c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c98:	2300      	movs	r3, #0
 8100c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c9e:	2303      	movs	r3, #3
 8100ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100ca4:	230c      	movs	r3, #12
 8100ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100caa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100cae:	4619      	mov	r1, r3
 8100cb0:	483c      	ldr	r0, [pc, #240]	; (8100da4 <HAL_FMC_MspInit+0x190>)
 8100cb2:	f000 fa8d 	bl	81011d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 8100cb6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8100cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100cbe:	2302      	movs	r3, #2
 8100cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cc4:	2300      	movs	r3, #0
 8100cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100cca:	2303      	movs	r3, #3
 8100ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100cd0:	230c      	movs	r3, #12
 8100cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100cd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100cda:	4619      	mov	r1, r3
 8100cdc:	4832      	ldr	r0, [pc, #200]	; (8100da8 <HAL_FMC_MspInit+0x194>)
 8100cde:	f000 fa77 	bl	81011d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 8100ce2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8100ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100cea:	2302      	movs	r3, #2
 8100cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cf0:	2300      	movs	r3, #0
 8100cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100cf6:	2303      	movs	r3, #3
 8100cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100cfc:	230c      	movs	r3, #12
 8100cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100d02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100d06:	4619      	mov	r1, r3
 8100d08:	4828      	ldr	r0, [pc, #160]	; (8100dac <HAL_FMC_MspInit+0x198>)
 8100d0a:	f000 fa61 	bl	81011d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 8100d0e:	f248 1317 	movw	r3, #33047	; 0x8117
 8100d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d16:	2302      	movs	r3, #2
 8100d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d1c:	2300      	movs	r3, #0
 8100d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d22:	2303      	movs	r3, #3
 8100d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100d28:	230c      	movs	r3, #12
 8100d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100d2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100d32:	4619      	mov	r1, r3
 8100d34:	481e      	ldr	r0, [pc, #120]	; (8100db0 <HAL_FMC_MspInit+0x19c>)
 8100d36:	f000 fa4b 	bl	81011d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 8100d3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8100d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d42:	2302      	movs	r3, #2
 8100d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d48:	2300      	movs	r3, #0
 8100d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d4e:	2303      	movs	r3, #3
 8100d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100d54:	230c      	movs	r3, #12
 8100d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100d5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100d5e:	4619      	mov	r1, r3
 8100d60:	4814      	ldr	r0, [pc, #80]	; (8100db4 <HAL_FMC_MspInit+0x1a0>)
 8100d62:	f000 fa35 	bl	81011d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 8100d66:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8100d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d6e:	2302      	movs	r3, #2
 8100d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d74:	2300      	movs	r3, #0
 8100d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d7a:	2303      	movs	r3, #3
 8100d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100d80:	230c      	movs	r3, #12
 8100d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100d86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100d8a:	4619      	mov	r1, r3
 8100d8c:	480a      	ldr	r0, [pc, #40]	; (8100db8 <HAL_FMC_MspInit+0x1a4>)
 8100d8e:	f000 fa1f 	bl	81011d0 <HAL_GPIO_Init>
 8100d92:	e000      	b.n	8100d96 <HAL_FMC_MspInit+0x182>
    return;
 8100d94:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8100d96:	37e8      	adds	r7, #232	; 0xe8
 8100d98:	46bd      	mov	sp, r7
 8100d9a:	bd80      	pop	{r7, pc}
 8100d9c:	10000168 	.word	0x10000168
 8100da0:	58024400 	.word	0x58024400
 8100da4:	58022000 	.word	0x58022000
 8100da8:	58021000 	.word	0x58021000
 8100dac:	58021c00 	.word	0x58021c00
 8100db0:	58021800 	.word	0x58021800
 8100db4:	58020c00 	.word	0x58020c00
 8100db8:	58021400 	.word	0x58021400

08100dbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8100dbc:	b580      	push	{r7, lr}
 8100dbe:	b082      	sub	sp, #8
 8100dc0:	af00      	add	r7, sp, #0
 8100dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8100dc4:	f7ff ff26 	bl	8100c14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8100dc8:	bf00      	nop
 8100dca:	3708      	adds	r7, #8
 8100dcc:	46bd      	mov	sp, r7
 8100dce:	bd80      	pop	{r7, pc}

08100dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100dd0:	b480      	push	{r7}
 8100dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100dd4:	e7fe      	b.n	8100dd4 <NMI_Handler+0x4>

08100dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100dd6:	b480      	push	{r7}
 8100dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100dda:	e7fe      	b.n	8100dda <HardFault_Handler+0x4>

08100ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100ddc:	b480      	push	{r7}
 8100dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100de0:	e7fe      	b.n	8100de0 <MemManage_Handler+0x4>

08100de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100de2:	b480      	push	{r7}
 8100de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100de6:	e7fe      	b.n	8100de6 <BusFault_Handler+0x4>

08100de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100de8:	b480      	push	{r7}
 8100dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100dec:	e7fe      	b.n	8100dec <UsageFault_Handler+0x4>

08100dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100dee:	b480      	push	{r7}
 8100df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100df2:	bf00      	nop
 8100df4:	46bd      	mov	sp, r7
 8100df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfa:	4770      	bx	lr

08100dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100dfc:	b480      	push	{r7}
 8100dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100e00:	bf00      	nop
 8100e02:	46bd      	mov	sp, r7
 8100e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e08:	4770      	bx	lr

08100e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100e0a:	b480      	push	{r7}
 8100e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100e0e:	bf00      	nop
 8100e10:	46bd      	mov	sp, r7
 8100e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e16:	4770      	bx	lr

08100e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100e18:	b580      	push	{r7, lr}
 8100e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100e1c:	f000 f8c0 	bl	8100fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100e20:	bf00      	nop
 8100e22:	bd80      	pop	{r7, pc}

08100e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100e28:	f7ff fa56 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100e2c:	480c      	ldr	r0, [pc, #48]	; (8100e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100e2e:	490d      	ldr	r1, [pc, #52]	; (8100e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100e30:	4a0d      	ldr	r2, [pc, #52]	; (8100e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100e34:	e002      	b.n	8100e3c <LoopCopyDataInit>

08100e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100e3a:	3304      	adds	r3, #4

08100e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100e40:	d3f9      	bcc.n	8100e36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100e42:	4a0a      	ldr	r2, [pc, #40]	; (8100e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100e44:	4c0a      	ldr	r4, [pc, #40]	; (8100e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100e48:	e001      	b.n	8100e4e <LoopFillZerobss>

08100e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100e4c:	3204      	adds	r2, #4

08100e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100e50:	d3fb      	bcc.n	8100e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100e52:	f003 fbcf 	bl	81045f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100e56:	f7ff fa57 	bl	8100308 <main>
  bx  lr
 8100e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100e5c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100e60:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100e64:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100e68:	0810467c 	.word	0x0810467c
  ldr r2, =_sbss
 8100e6c:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100e70:	10000170 	.word	0x10000170

08100e74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100e74:	e7fe      	b.n	8100e74 <ADC3_IRQHandler>
	...

08100e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100e78:	b580      	push	{r7, lr}
 8100e7a:	b082      	sub	sp, #8
 8100e7c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100e7e:	4b28      	ldr	r3, [pc, #160]	; (8100f20 <HAL_Init+0xa8>)
 8100e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e84:	4a26      	ldr	r2, [pc, #152]	; (8100f20 <HAL_Init+0xa8>)
 8100e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100e8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e8e:	4b24      	ldr	r3, [pc, #144]	; (8100f20 <HAL_Init+0xa8>)
 8100e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100e98:	603b      	str	r3, [r7, #0]
 8100e9a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100e9c:	4b21      	ldr	r3, [pc, #132]	; (8100f24 <HAL_Init+0xac>)
 8100e9e:	681b      	ldr	r3, [r3, #0]
 8100ea0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100ea4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100ea8:	4a1e      	ldr	r2, [pc, #120]	; (8100f24 <HAL_Init+0xac>)
 8100eaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100eae:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100eb0:	4b1c      	ldr	r3, [pc, #112]	; (8100f24 <HAL_Init+0xac>)
 8100eb2:	681b      	ldr	r3, [r3, #0]
 8100eb4:	4a1b      	ldr	r2, [pc, #108]	; (8100f24 <HAL_Init+0xac>)
 8100eb6:	f043 0301 	orr.w	r3, r3, #1
 8100eba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100ebc:	2003      	movs	r0, #3
 8100ebe:	f000 f941 	bl	8101144 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100ec2:	f000 fc89 	bl	81017d8 <HAL_RCC_GetSysClockFreq>
 8100ec6:	4602      	mov	r2, r0
 8100ec8:	4b15      	ldr	r3, [pc, #84]	; (8100f20 <HAL_Init+0xa8>)
 8100eca:	699b      	ldr	r3, [r3, #24]
 8100ecc:	0a1b      	lsrs	r3, r3, #8
 8100ece:	f003 030f 	and.w	r3, r3, #15
 8100ed2:	4915      	ldr	r1, [pc, #84]	; (8100f28 <HAL_Init+0xb0>)
 8100ed4:	5ccb      	ldrb	r3, [r1, r3]
 8100ed6:	f003 031f 	and.w	r3, r3, #31
 8100eda:	fa22 f303 	lsr.w	r3, r2, r3
 8100ede:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100ee0:	4b0f      	ldr	r3, [pc, #60]	; (8100f20 <HAL_Init+0xa8>)
 8100ee2:	699b      	ldr	r3, [r3, #24]
 8100ee4:	f003 030f 	and.w	r3, r3, #15
 8100ee8:	4a0f      	ldr	r2, [pc, #60]	; (8100f28 <HAL_Init+0xb0>)
 8100eea:	5cd3      	ldrb	r3, [r2, r3]
 8100eec:	f003 031f 	and.w	r3, r3, #31
 8100ef0:	687a      	ldr	r2, [r7, #4]
 8100ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8100ef6:	4a0d      	ldr	r2, [pc, #52]	; (8100f2c <HAL_Init+0xb4>)
 8100ef8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100efa:	4b0c      	ldr	r3, [pc, #48]	; (8100f2c <HAL_Init+0xb4>)
 8100efc:	681b      	ldr	r3, [r3, #0]
 8100efe:	4a0c      	ldr	r2, [pc, #48]	; (8100f30 <HAL_Init+0xb8>)
 8100f00:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100f02:	2000      	movs	r0, #0
 8100f04:	f000 f816 	bl	8100f34 <HAL_InitTick>
 8100f08:	4603      	mov	r3, r0
 8100f0a:	2b00      	cmp	r3, #0
 8100f0c:	d001      	beq.n	8100f12 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100f0e:	2301      	movs	r3, #1
 8100f10:	e002      	b.n	8100f18 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100f12:	f7ff fc5f 	bl	81007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100f16:	2300      	movs	r3, #0
}
 8100f18:	4618      	mov	r0, r3
 8100f1a:	3708      	adds	r7, #8
 8100f1c:	46bd      	mov	sp, r7
 8100f1e:	bd80      	pop	{r7, pc}
 8100f20:	58024400 	.word	0x58024400
 8100f24:	40024400 	.word	0x40024400
 8100f28:	08104664 	.word	0x08104664
 8100f2c:	10000004 	.word	0x10000004
 8100f30:	10000000 	.word	0x10000000

08100f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100f34:	b580      	push	{r7, lr}
 8100f36:	b082      	sub	sp, #8
 8100f38:	af00      	add	r7, sp, #0
 8100f3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100f3c:	4b15      	ldr	r3, [pc, #84]	; (8100f94 <HAL_InitTick+0x60>)
 8100f3e:	781b      	ldrb	r3, [r3, #0]
 8100f40:	2b00      	cmp	r3, #0
 8100f42:	d101      	bne.n	8100f48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100f44:	2301      	movs	r3, #1
 8100f46:	e021      	b.n	8100f8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100f48:	4b13      	ldr	r3, [pc, #76]	; (8100f98 <HAL_InitTick+0x64>)
 8100f4a:	681a      	ldr	r2, [r3, #0]
 8100f4c:	4b11      	ldr	r3, [pc, #68]	; (8100f94 <HAL_InitTick+0x60>)
 8100f4e:	781b      	ldrb	r3, [r3, #0]
 8100f50:	4619      	mov	r1, r3
 8100f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8100f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8100f5e:	4618      	mov	r0, r3
 8100f60:	f000 f915 	bl	810118e <HAL_SYSTICK_Config>
 8100f64:	4603      	mov	r3, r0
 8100f66:	2b00      	cmp	r3, #0
 8100f68:	d001      	beq.n	8100f6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100f6a:	2301      	movs	r3, #1
 8100f6c:	e00e      	b.n	8100f8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	2b0f      	cmp	r3, #15
 8100f72:	d80a      	bhi.n	8100f8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100f74:	2200      	movs	r2, #0
 8100f76:	6879      	ldr	r1, [r7, #4]
 8100f78:	f04f 30ff 	mov.w	r0, #4294967295
 8100f7c:	f000 f8ed 	bl	810115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100f80:	4a06      	ldr	r2, [pc, #24]	; (8100f9c <HAL_InitTick+0x68>)
 8100f82:	687b      	ldr	r3, [r7, #4]
 8100f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100f86:	2300      	movs	r3, #0
 8100f88:	e000      	b.n	8100f8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100f8a:	2301      	movs	r3, #1
}
 8100f8c:	4618      	mov	r0, r3
 8100f8e:	3708      	adds	r7, #8
 8100f90:	46bd      	mov	sp, r7
 8100f92:	bd80      	pop	{r7, pc}
 8100f94:	1000000c 	.word	0x1000000c
 8100f98:	10000000 	.word	0x10000000
 8100f9c:	10000008 	.word	0x10000008

08100fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100fa0:	b480      	push	{r7}
 8100fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100fa4:	4b06      	ldr	r3, [pc, #24]	; (8100fc0 <HAL_IncTick+0x20>)
 8100fa6:	781b      	ldrb	r3, [r3, #0]
 8100fa8:	461a      	mov	r2, r3
 8100faa:	4b06      	ldr	r3, [pc, #24]	; (8100fc4 <HAL_IncTick+0x24>)
 8100fac:	681b      	ldr	r3, [r3, #0]
 8100fae:	4413      	add	r3, r2
 8100fb0:	4a04      	ldr	r2, [pc, #16]	; (8100fc4 <HAL_IncTick+0x24>)
 8100fb2:	6013      	str	r3, [r2, #0]
}
 8100fb4:	bf00      	nop
 8100fb6:	46bd      	mov	sp, r7
 8100fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fbc:	4770      	bx	lr
 8100fbe:	bf00      	nop
 8100fc0:	1000000c 	.word	0x1000000c
 8100fc4:	1000016c 	.word	0x1000016c

08100fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100fc8:	b480      	push	{r7}
 8100fca:	af00      	add	r7, sp, #0
  return uwTick;
 8100fcc:	4b03      	ldr	r3, [pc, #12]	; (8100fdc <HAL_GetTick+0x14>)
 8100fce:	681b      	ldr	r3, [r3, #0]
}
 8100fd0:	4618      	mov	r0, r3
 8100fd2:	46bd      	mov	sp, r7
 8100fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd8:	4770      	bx	lr
 8100fda:	bf00      	nop
 8100fdc:	1000016c 	.word	0x1000016c

08100fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100fe0:	b480      	push	{r7}
 8100fe2:	b085      	sub	sp, #20
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	f003 0307 	and.w	r3, r3, #7
 8100fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100ff0:	4b0c      	ldr	r3, [pc, #48]	; (8101024 <__NVIC_SetPriorityGrouping+0x44>)
 8100ff2:	68db      	ldr	r3, [r3, #12]
 8100ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100ff6:	68ba      	ldr	r2, [r7, #8]
 8100ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100ffc:	4013      	ands	r3, r2
 8100ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101000:	68fb      	ldr	r3, [r7, #12]
 8101002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101004:	68bb      	ldr	r3, [r7, #8]
 8101006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101012:	4a04      	ldr	r2, [pc, #16]	; (8101024 <__NVIC_SetPriorityGrouping+0x44>)
 8101014:	68bb      	ldr	r3, [r7, #8]
 8101016:	60d3      	str	r3, [r2, #12]
}
 8101018:	bf00      	nop
 810101a:	3714      	adds	r7, #20
 810101c:	46bd      	mov	sp, r7
 810101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101022:	4770      	bx	lr
 8101024:	e000ed00 	.word	0xe000ed00

08101028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101028:	b480      	push	{r7}
 810102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810102c:	4b04      	ldr	r3, [pc, #16]	; (8101040 <__NVIC_GetPriorityGrouping+0x18>)
 810102e:	68db      	ldr	r3, [r3, #12]
 8101030:	0a1b      	lsrs	r3, r3, #8
 8101032:	f003 0307 	and.w	r3, r3, #7
}
 8101036:	4618      	mov	r0, r3
 8101038:	46bd      	mov	sp, r7
 810103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103e:	4770      	bx	lr
 8101040:	e000ed00 	.word	0xe000ed00

08101044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101044:	b480      	push	{r7}
 8101046:	b083      	sub	sp, #12
 8101048:	af00      	add	r7, sp, #0
 810104a:	4603      	mov	r3, r0
 810104c:	6039      	str	r1, [r7, #0]
 810104e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101054:	2b00      	cmp	r3, #0
 8101056:	db0a      	blt.n	810106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101058:	683b      	ldr	r3, [r7, #0]
 810105a:	b2da      	uxtb	r2, r3
 810105c:	490c      	ldr	r1, [pc, #48]	; (8101090 <__NVIC_SetPriority+0x4c>)
 810105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101062:	0112      	lsls	r2, r2, #4
 8101064:	b2d2      	uxtb	r2, r2
 8101066:	440b      	add	r3, r1
 8101068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810106c:	e00a      	b.n	8101084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810106e:	683b      	ldr	r3, [r7, #0]
 8101070:	b2da      	uxtb	r2, r3
 8101072:	4908      	ldr	r1, [pc, #32]	; (8101094 <__NVIC_SetPriority+0x50>)
 8101074:	88fb      	ldrh	r3, [r7, #6]
 8101076:	f003 030f 	and.w	r3, r3, #15
 810107a:	3b04      	subs	r3, #4
 810107c:	0112      	lsls	r2, r2, #4
 810107e:	b2d2      	uxtb	r2, r2
 8101080:	440b      	add	r3, r1
 8101082:	761a      	strb	r2, [r3, #24]
}
 8101084:	bf00      	nop
 8101086:	370c      	adds	r7, #12
 8101088:	46bd      	mov	sp, r7
 810108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810108e:	4770      	bx	lr
 8101090:	e000e100 	.word	0xe000e100
 8101094:	e000ed00 	.word	0xe000ed00

08101098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101098:	b480      	push	{r7}
 810109a:	b089      	sub	sp, #36	; 0x24
 810109c:	af00      	add	r7, sp, #0
 810109e:	60f8      	str	r0, [r7, #12]
 81010a0:	60b9      	str	r1, [r7, #8]
 81010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81010a4:	68fb      	ldr	r3, [r7, #12]
 81010a6:	f003 0307 	and.w	r3, r3, #7
 81010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81010ac:	69fb      	ldr	r3, [r7, #28]
 81010ae:	f1c3 0307 	rsb	r3, r3, #7
 81010b2:	2b04      	cmp	r3, #4
 81010b4:	bf28      	it	cs
 81010b6:	2304      	movcs	r3, #4
 81010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81010ba:	69fb      	ldr	r3, [r7, #28]
 81010bc:	3304      	adds	r3, #4
 81010be:	2b06      	cmp	r3, #6
 81010c0:	d902      	bls.n	81010c8 <NVIC_EncodePriority+0x30>
 81010c2:	69fb      	ldr	r3, [r7, #28]
 81010c4:	3b03      	subs	r3, #3
 81010c6:	e000      	b.n	81010ca <NVIC_EncodePriority+0x32>
 81010c8:	2300      	movs	r3, #0
 81010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010cc:	f04f 32ff 	mov.w	r2, #4294967295
 81010d0:	69bb      	ldr	r3, [r7, #24]
 81010d2:	fa02 f303 	lsl.w	r3, r2, r3
 81010d6:	43da      	mvns	r2, r3
 81010d8:	68bb      	ldr	r3, [r7, #8]
 81010da:	401a      	ands	r2, r3
 81010dc:	697b      	ldr	r3, [r7, #20]
 81010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81010e0:	f04f 31ff 	mov.w	r1, #4294967295
 81010e4:	697b      	ldr	r3, [r7, #20]
 81010e6:	fa01 f303 	lsl.w	r3, r1, r3
 81010ea:	43d9      	mvns	r1, r3
 81010ec:	687b      	ldr	r3, [r7, #4]
 81010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010f0:	4313      	orrs	r3, r2
         );
}
 81010f2:	4618      	mov	r0, r3
 81010f4:	3724      	adds	r7, #36	; 0x24
 81010f6:	46bd      	mov	sp, r7
 81010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010fc:	4770      	bx	lr
	...

08101100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101100:	b580      	push	{r7, lr}
 8101102:	b082      	sub	sp, #8
 8101104:	af00      	add	r7, sp, #0
 8101106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	3b01      	subs	r3, #1
 810110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101110:	d301      	bcc.n	8101116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101112:	2301      	movs	r3, #1
 8101114:	e00f      	b.n	8101136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101116:	4a0a      	ldr	r2, [pc, #40]	; (8101140 <SysTick_Config+0x40>)
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	3b01      	subs	r3, #1
 810111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810111e:	210f      	movs	r1, #15
 8101120:	f04f 30ff 	mov.w	r0, #4294967295
 8101124:	f7ff ff8e 	bl	8101044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101128:	4b05      	ldr	r3, [pc, #20]	; (8101140 <SysTick_Config+0x40>)
 810112a:	2200      	movs	r2, #0
 810112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810112e:	4b04      	ldr	r3, [pc, #16]	; (8101140 <SysTick_Config+0x40>)
 8101130:	2207      	movs	r2, #7
 8101132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101134:	2300      	movs	r3, #0
}
 8101136:	4618      	mov	r0, r3
 8101138:	3708      	adds	r7, #8
 810113a:	46bd      	mov	sp, r7
 810113c:	bd80      	pop	{r7, pc}
 810113e:	bf00      	nop
 8101140:	e000e010 	.word	0xe000e010

08101144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101144:	b580      	push	{r7, lr}
 8101146:	b082      	sub	sp, #8
 8101148:	af00      	add	r7, sp, #0
 810114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810114c:	6878      	ldr	r0, [r7, #4]
 810114e:	f7ff ff47 	bl	8100fe0 <__NVIC_SetPriorityGrouping>
}
 8101152:	bf00      	nop
 8101154:	3708      	adds	r7, #8
 8101156:	46bd      	mov	sp, r7
 8101158:	bd80      	pop	{r7, pc}

0810115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810115a:	b580      	push	{r7, lr}
 810115c:	b086      	sub	sp, #24
 810115e:	af00      	add	r7, sp, #0
 8101160:	4603      	mov	r3, r0
 8101162:	60b9      	str	r1, [r7, #8]
 8101164:	607a      	str	r2, [r7, #4]
 8101166:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101168:	f7ff ff5e 	bl	8101028 <__NVIC_GetPriorityGrouping>
 810116c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810116e:	687a      	ldr	r2, [r7, #4]
 8101170:	68b9      	ldr	r1, [r7, #8]
 8101172:	6978      	ldr	r0, [r7, #20]
 8101174:	f7ff ff90 	bl	8101098 <NVIC_EncodePriority>
 8101178:	4602      	mov	r2, r0
 810117a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810117e:	4611      	mov	r1, r2
 8101180:	4618      	mov	r0, r3
 8101182:	f7ff ff5f 	bl	8101044 <__NVIC_SetPriority>
}
 8101186:	bf00      	nop
 8101188:	3718      	adds	r7, #24
 810118a:	46bd      	mov	sp, r7
 810118c:	bd80      	pop	{r7, pc}

0810118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810118e:	b580      	push	{r7, lr}
 8101190:	b082      	sub	sp, #8
 8101192:	af00      	add	r7, sp, #0
 8101194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101196:	6878      	ldr	r0, [r7, #4]
 8101198:	f7ff ffb2 	bl	8101100 <SysTick_Config>
 810119c:	4603      	mov	r3, r0
}
 810119e:	4618      	mov	r0, r3
 81011a0:	3708      	adds	r7, #8
 81011a2:	46bd      	mov	sp, r7
 81011a4:	bd80      	pop	{r7, pc}
	...

081011a8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81011a8:	b480      	push	{r7}
 81011aa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81011ac:	4b07      	ldr	r3, [pc, #28]	; (81011cc <HAL_GetCurrentCPUID+0x24>)
 81011ae:	681b      	ldr	r3, [r3, #0]
 81011b0:	091b      	lsrs	r3, r3, #4
 81011b2:	f003 030f 	and.w	r3, r3, #15
 81011b6:	2b07      	cmp	r3, #7
 81011b8:	d101      	bne.n	81011be <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81011ba:	2303      	movs	r3, #3
 81011bc:	e000      	b.n	81011c0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81011be:	2301      	movs	r3, #1
  }
}
 81011c0:	4618      	mov	r0, r3
 81011c2:	46bd      	mov	sp, r7
 81011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c8:	4770      	bx	lr
 81011ca:	bf00      	nop
 81011cc:	e000ed00 	.word	0xe000ed00

081011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81011d0:	b480      	push	{r7}
 81011d2:	b089      	sub	sp, #36	; 0x24
 81011d4:	af00      	add	r7, sp, #0
 81011d6:	6078      	str	r0, [r7, #4]
 81011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81011da:	2300      	movs	r3, #0
 81011dc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81011de:	4b89      	ldr	r3, [pc, #548]	; (8101404 <HAL_GPIO_Init+0x234>)
 81011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81011e2:	e194      	b.n	810150e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81011e4:	683b      	ldr	r3, [r7, #0]
 81011e6:	681a      	ldr	r2, [r3, #0]
 81011e8:	2101      	movs	r1, #1
 81011ea:	69fb      	ldr	r3, [r7, #28]
 81011ec:	fa01 f303 	lsl.w	r3, r1, r3
 81011f0:	4013      	ands	r3, r2
 81011f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81011f4:	693b      	ldr	r3, [r7, #16]
 81011f6:	2b00      	cmp	r3, #0
 81011f8:	f000 8186 	beq.w	8101508 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81011fc:	683b      	ldr	r3, [r7, #0]
 81011fe:	685b      	ldr	r3, [r3, #4]
 8101200:	f003 0303 	and.w	r3, r3, #3
 8101204:	2b01      	cmp	r3, #1
 8101206:	d005      	beq.n	8101214 <HAL_GPIO_Init+0x44>
 8101208:	683b      	ldr	r3, [r7, #0]
 810120a:	685b      	ldr	r3, [r3, #4]
 810120c:	f003 0303 	and.w	r3, r3, #3
 8101210:	2b02      	cmp	r3, #2
 8101212:	d130      	bne.n	8101276 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	689b      	ldr	r3, [r3, #8]
 8101218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810121a:	69fb      	ldr	r3, [r7, #28]
 810121c:	005b      	lsls	r3, r3, #1
 810121e:	2203      	movs	r2, #3
 8101220:	fa02 f303 	lsl.w	r3, r2, r3
 8101224:	43db      	mvns	r3, r3
 8101226:	69ba      	ldr	r2, [r7, #24]
 8101228:	4013      	ands	r3, r2
 810122a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810122c:	683b      	ldr	r3, [r7, #0]
 810122e:	68da      	ldr	r2, [r3, #12]
 8101230:	69fb      	ldr	r3, [r7, #28]
 8101232:	005b      	lsls	r3, r3, #1
 8101234:	fa02 f303 	lsl.w	r3, r2, r3
 8101238:	69ba      	ldr	r2, [r7, #24]
 810123a:	4313      	orrs	r3, r2
 810123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	69ba      	ldr	r2, [r7, #24]
 8101242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101244:	687b      	ldr	r3, [r7, #4]
 8101246:	685b      	ldr	r3, [r3, #4]
 8101248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810124a:	2201      	movs	r2, #1
 810124c:	69fb      	ldr	r3, [r7, #28]
 810124e:	fa02 f303 	lsl.w	r3, r2, r3
 8101252:	43db      	mvns	r3, r3
 8101254:	69ba      	ldr	r2, [r7, #24]
 8101256:	4013      	ands	r3, r2
 8101258:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810125a:	683b      	ldr	r3, [r7, #0]
 810125c:	685b      	ldr	r3, [r3, #4]
 810125e:	091b      	lsrs	r3, r3, #4
 8101260:	f003 0201 	and.w	r2, r3, #1
 8101264:	69fb      	ldr	r3, [r7, #28]
 8101266:	fa02 f303 	lsl.w	r3, r2, r3
 810126a:	69ba      	ldr	r2, [r7, #24]
 810126c:	4313      	orrs	r3, r2
 810126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	69ba      	ldr	r2, [r7, #24]
 8101274:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101276:	683b      	ldr	r3, [r7, #0]
 8101278:	685b      	ldr	r3, [r3, #4]
 810127a:	f003 0303 	and.w	r3, r3, #3
 810127e:	2b03      	cmp	r3, #3
 8101280:	d017      	beq.n	81012b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101282:	687b      	ldr	r3, [r7, #4]
 8101284:	68db      	ldr	r3, [r3, #12]
 8101286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101288:	69fb      	ldr	r3, [r7, #28]
 810128a:	005b      	lsls	r3, r3, #1
 810128c:	2203      	movs	r2, #3
 810128e:	fa02 f303 	lsl.w	r3, r2, r3
 8101292:	43db      	mvns	r3, r3
 8101294:	69ba      	ldr	r2, [r7, #24]
 8101296:	4013      	ands	r3, r2
 8101298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810129a:	683b      	ldr	r3, [r7, #0]
 810129c:	689a      	ldr	r2, [r3, #8]
 810129e:	69fb      	ldr	r3, [r7, #28]
 81012a0:	005b      	lsls	r3, r3, #1
 81012a2:	fa02 f303 	lsl.w	r3, r2, r3
 81012a6:	69ba      	ldr	r2, [r7, #24]
 81012a8:	4313      	orrs	r3, r2
 81012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	69ba      	ldr	r2, [r7, #24]
 81012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81012b2:	683b      	ldr	r3, [r7, #0]
 81012b4:	685b      	ldr	r3, [r3, #4]
 81012b6:	f003 0303 	and.w	r3, r3, #3
 81012ba:	2b02      	cmp	r3, #2
 81012bc:	d123      	bne.n	8101306 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81012be:	69fb      	ldr	r3, [r7, #28]
 81012c0:	08da      	lsrs	r2, r3, #3
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	3208      	adds	r2, #8
 81012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81012cc:	69fb      	ldr	r3, [r7, #28]
 81012ce:	f003 0307 	and.w	r3, r3, #7
 81012d2:	009b      	lsls	r3, r3, #2
 81012d4:	220f      	movs	r2, #15
 81012d6:	fa02 f303 	lsl.w	r3, r2, r3
 81012da:	43db      	mvns	r3, r3
 81012dc:	69ba      	ldr	r2, [r7, #24]
 81012de:	4013      	ands	r3, r2
 81012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81012e2:	683b      	ldr	r3, [r7, #0]
 81012e4:	691a      	ldr	r2, [r3, #16]
 81012e6:	69fb      	ldr	r3, [r7, #28]
 81012e8:	f003 0307 	and.w	r3, r3, #7
 81012ec:	009b      	lsls	r3, r3, #2
 81012ee:	fa02 f303 	lsl.w	r3, r2, r3
 81012f2:	69ba      	ldr	r2, [r7, #24]
 81012f4:	4313      	orrs	r3, r2
 81012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81012f8:	69fb      	ldr	r3, [r7, #28]
 81012fa:	08da      	lsrs	r2, r3, #3
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	3208      	adds	r2, #8
 8101300:	69b9      	ldr	r1, [r7, #24]
 8101302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101306:	687b      	ldr	r3, [r7, #4]
 8101308:	681b      	ldr	r3, [r3, #0]
 810130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810130c:	69fb      	ldr	r3, [r7, #28]
 810130e:	005b      	lsls	r3, r3, #1
 8101310:	2203      	movs	r2, #3
 8101312:	fa02 f303 	lsl.w	r3, r2, r3
 8101316:	43db      	mvns	r3, r3
 8101318:	69ba      	ldr	r2, [r7, #24]
 810131a:	4013      	ands	r3, r2
 810131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810131e:	683b      	ldr	r3, [r7, #0]
 8101320:	685b      	ldr	r3, [r3, #4]
 8101322:	f003 0203 	and.w	r2, r3, #3
 8101326:	69fb      	ldr	r3, [r7, #28]
 8101328:	005b      	lsls	r3, r3, #1
 810132a:	fa02 f303 	lsl.w	r3, r2, r3
 810132e:	69ba      	ldr	r2, [r7, #24]
 8101330:	4313      	orrs	r3, r2
 8101332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	69ba      	ldr	r2, [r7, #24]
 8101338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810133a:	683b      	ldr	r3, [r7, #0]
 810133c:	685b      	ldr	r3, [r3, #4]
 810133e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101342:	2b00      	cmp	r3, #0
 8101344:	f000 80e0 	beq.w	8101508 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101348:	4b2f      	ldr	r3, [pc, #188]	; (8101408 <HAL_GPIO_Init+0x238>)
 810134a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810134e:	4a2e      	ldr	r2, [pc, #184]	; (8101408 <HAL_GPIO_Init+0x238>)
 8101350:	f043 0302 	orr.w	r3, r3, #2
 8101354:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101358:	4b2b      	ldr	r3, [pc, #172]	; (8101408 <HAL_GPIO_Init+0x238>)
 810135a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810135e:	f003 0302 	and.w	r3, r3, #2
 8101362:	60fb      	str	r3, [r7, #12]
 8101364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101366:	4a29      	ldr	r2, [pc, #164]	; (810140c <HAL_GPIO_Init+0x23c>)
 8101368:	69fb      	ldr	r3, [r7, #28]
 810136a:	089b      	lsrs	r3, r3, #2
 810136c:	3302      	adds	r3, #2
 810136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101374:	69fb      	ldr	r3, [r7, #28]
 8101376:	f003 0303 	and.w	r3, r3, #3
 810137a:	009b      	lsls	r3, r3, #2
 810137c:	220f      	movs	r2, #15
 810137e:	fa02 f303 	lsl.w	r3, r2, r3
 8101382:	43db      	mvns	r3, r3
 8101384:	69ba      	ldr	r2, [r7, #24]
 8101386:	4013      	ands	r3, r2
 8101388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	4a20      	ldr	r2, [pc, #128]	; (8101410 <HAL_GPIO_Init+0x240>)
 810138e:	4293      	cmp	r3, r2
 8101390:	d052      	beq.n	8101438 <HAL_GPIO_Init+0x268>
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	4a1f      	ldr	r2, [pc, #124]	; (8101414 <HAL_GPIO_Init+0x244>)
 8101396:	4293      	cmp	r3, r2
 8101398:	d031      	beq.n	81013fe <HAL_GPIO_Init+0x22e>
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	4a1e      	ldr	r2, [pc, #120]	; (8101418 <HAL_GPIO_Init+0x248>)
 810139e:	4293      	cmp	r3, r2
 81013a0:	d02b      	beq.n	81013fa <HAL_GPIO_Init+0x22a>
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	4a1d      	ldr	r2, [pc, #116]	; (810141c <HAL_GPIO_Init+0x24c>)
 81013a6:	4293      	cmp	r3, r2
 81013a8:	d025      	beq.n	81013f6 <HAL_GPIO_Init+0x226>
 81013aa:	687b      	ldr	r3, [r7, #4]
 81013ac:	4a1c      	ldr	r2, [pc, #112]	; (8101420 <HAL_GPIO_Init+0x250>)
 81013ae:	4293      	cmp	r3, r2
 81013b0:	d01f      	beq.n	81013f2 <HAL_GPIO_Init+0x222>
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	4a1b      	ldr	r2, [pc, #108]	; (8101424 <HAL_GPIO_Init+0x254>)
 81013b6:	4293      	cmp	r3, r2
 81013b8:	d019      	beq.n	81013ee <HAL_GPIO_Init+0x21e>
 81013ba:	687b      	ldr	r3, [r7, #4]
 81013bc:	4a1a      	ldr	r2, [pc, #104]	; (8101428 <HAL_GPIO_Init+0x258>)
 81013be:	4293      	cmp	r3, r2
 81013c0:	d013      	beq.n	81013ea <HAL_GPIO_Init+0x21a>
 81013c2:	687b      	ldr	r3, [r7, #4]
 81013c4:	4a19      	ldr	r2, [pc, #100]	; (810142c <HAL_GPIO_Init+0x25c>)
 81013c6:	4293      	cmp	r3, r2
 81013c8:	d00d      	beq.n	81013e6 <HAL_GPIO_Init+0x216>
 81013ca:	687b      	ldr	r3, [r7, #4]
 81013cc:	4a18      	ldr	r2, [pc, #96]	; (8101430 <HAL_GPIO_Init+0x260>)
 81013ce:	4293      	cmp	r3, r2
 81013d0:	d007      	beq.n	81013e2 <HAL_GPIO_Init+0x212>
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	4a17      	ldr	r2, [pc, #92]	; (8101434 <HAL_GPIO_Init+0x264>)
 81013d6:	4293      	cmp	r3, r2
 81013d8:	d101      	bne.n	81013de <HAL_GPIO_Init+0x20e>
 81013da:	2309      	movs	r3, #9
 81013dc:	e02d      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013de:	230a      	movs	r3, #10
 81013e0:	e02b      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013e2:	2308      	movs	r3, #8
 81013e4:	e029      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013e6:	2307      	movs	r3, #7
 81013e8:	e027      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013ea:	2306      	movs	r3, #6
 81013ec:	e025      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013ee:	2305      	movs	r3, #5
 81013f0:	e023      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013f2:	2304      	movs	r3, #4
 81013f4:	e021      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013f6:	2303      	movs	r3, #3
 81013f8:	e01f      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013fa:	2302      	movs	r3, #2
 81013fc:	e01d      	b.n	810143a <HAL_GPIO_Init+0x26a>
 81013fe:	2301      	movs	r3, #1
 8101400:	e01b      	b.n	810143a <HAL_GPIO_Init+0x26a>
 8101402:	bf00      	nop
 8101404:	580000c0 	.word	0x580000c0
 8101408:	58024400 	.word	0x58024400
 810140c:	58000400 	.word	0x58000400
 8101410:	58020000 	.word	0x58020000
 8101414:	58020400 	.word	0x58020400
 8101418:	58020800 	.word	0x58020800
 810141c:	58020c00 	.word	0x58020c00
 8101420:	58021000 	.word	0x58021000
 8101424:	58021400 	.word	0x58021400
 8101428:	58021800 	.word	0x58021800
 810142c:	58021c00 	.word	0x58021c00
 8101430:	58022000 	.word	0x58022000
 8101434:	58022400 	.word	0x58022400
 8101438:	2300      	movs	r3, #0
 810143a:	69fa      	ldr	r2, [r7, #28]
 810143c:	f002 0203 	and.w	r2, r2, #3
 8101440:	0092      	lsls	r2, r2, #2
 8101442:	4093      	lsls	r3, r2
 8101444:	69ba      	ldr	r2, [r7, #24]
 8101446:	4313      	orrs	r3, r2
 8101448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810144a:	4938      	ldr	r1, [pc, #224]	; (810152c <HAL_GPIO_Init+0x35c>)
 810144c:	69fb      	ldr	r3, [r7, #28]
 810144e:	089b      	lsrs	r3, r3, #2
 8101450:	3302      	adds	r3, #2
 8101452:	69ba      	ldr	r2, [r7, #24]
 8101454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810145c:	681b      	ldr	r3, [r3, #0]
 810145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101460:	693b      	ldr	r3, [r7, #16]
 8101462:	43db      	mvns	r3, r3
 8101464:	69ba      	ldr	r2, [r7, #24]
 8101466:	4013      	ands	r3, r2
 8101468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810146a:	683b      	ldr	r3, [r7, #0]
 810146c:	685b      	ldr	r3, [r3, #4]
 810146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101472:	2b00      	cmp	r3, #0
 8101474:	d003      	beq.n	810147e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101476:	69ba      	ldr	r2, [r7, #24]
 8101478:	693b      	ldr	r3, [r7, #16]
 810147a:	4313      	orrs	r3, r2
 810147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810147e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101482:	69bb      	ldr	r3, [r7, #24]
 8101484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810148a:	685b      	ldr	r3, [r3, #4]
 810148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810148e:	693b      	ldr	r3, [r7, #16]
 8101490:	43db      	mvns	r3, r3
 8101492:	69ba      	ldr	r2, [r7, #24]
 8101494:	4013      	ands	r3, r2
 8101496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101498:	683b      	ldr	r3, [r7, #0]
 810149a:	685b      	ldr	r3, [r3, #4]
 810149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81014a0:	2b00      	cmp	r3, #0
 81014a2:	d003      	beq.n	81014ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81014a4:	69ba      	ldr	r2, [r7, #24]
 81014a6:	693b      	ldr	r3, [r7, #16]
 81014a8:	4313      	orrs	r3, r2
 81014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81014ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81014b0:	69bb      	ldr	r3, [r7, #24]
 81014b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81014b4:	697b      	ldr	r3, [r7, #20]
 81014b6:	685b      	ldr	r3, [r3, #4]
 81014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014ba:	693b      	ldr	r3, [r7, #16]
 81014bc:	43db      	mvns	r3, r3
 81014be:	69ba      	ldr	r2, [r7, #24]
 81014c0:	4013      	ands	r3, r2
 81014c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81014c4:	683b      	ldr	r3, [r7, #0]
 81014c6:	685b      	ldr	r3, [r3, #4]
 81014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81014cc:	2b00      	cmp	r3, #0
 81014ce:	d003      	beq.n	81014d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81014d0:	69ba      	ldr	r2, [r7, #24]
 81014d2:	693b      	ldr	r3, [r7, #16]
 81014d4:	4313      	orrs	r3, r2
 81014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81014d8:	697b      	ldr	r3, [r7, #20]
 81014da:	69ba      	ldr	r2, [r7, #24]
 81014dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81014de:	697b      	ldr	r3, [r7, #20]
 81014e0:	681b      	ldr	r3, [r3, #0]
 81014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014e4:	693b      	ldr	r3, [r7, #16]
 81014e6:	43db      	mvns	r3, r3
 81014e8:	69ba      	ldr	r2, [r7, #24]
 81014ea:	4013      	ands	r3, r2
 81014ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81014ee:	683b      	ldr	r3, [r7, #0]
 81014f0:	685b      	ldr	r3, [r3, #4]
 81014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	d003      	beq.n	8101502 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81014fa:	69ba      	ldr	r2, [r7, #24]
 81014fc:	693b      	ldr	r3, [r7, #16]
 81014fe:	4313      	orrs	r3, r2
 8101500:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101502:	697b      	ldr	r3, [r7, #20]
 8101504:	69ba      	ldr	r2, [r7, #24]
 8101506:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101508:	69fb      	ldr	r3, [r7, #28]
 810150a:	3301      	adds	r3, #1
 810150c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810150e:	683b      	ldr	r3, [r7, #0]
 8101510:	681a      	ldr	r2, [r3, #0]
 8101512:	69fb      	ldr	r3, [r7, #28]
 8101514:	fa22 f303 	lsr.w	r3, r2, r3
 8101518:	2b00      	cmp	r3, #0
 810151a:	f47f ae63 	bne.w	81011e4 <HAL_GPIO_Init+0x14>
  }
}
 810151e:	bf00      	nop
 8101520:	bf00      	nop
 8101522:	3724      	adds	r7, #36	; 0x24
 8101524:	46bd      	mov	sp, r7
 8101526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810152a:	4770      	bx	lr
 810152c:	58000400 	.word	0x58000400

08101530 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101530:	b480      	push	{r7}
 8101532:	b083      	sub	sp, #12
 8101534:	af00      	add	r7, sp, #0
 8101536:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101538:	4b05      	ldr	r3, [pc, #20]	; (8101550 <HAL_HSEM_ActivateNotification+0x20>)
 810153a:	681a      	ldr	r2, [r3, #0]
 810153c:	4904      	ldr	r1, [pc, #16]	; (8101550 <HAL_HSEM_ActivateNotification+0x20>)
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	4313      	orrs	r3, r2
 8101542:	600b      	str	r3, [r1, #0]
#endif
}
 8101544:	bf00      	nop
 8101546:	370c      	adds	r7, #12
 8101548:	46bd      	mov	sp, r7
 810154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810154e:	4770      	bx	lr
 8101550:	58026510 	.word	0x58026510

08101554 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101554:	b580      	push	{r7, lr}
 8101556:	b084      	sub	sp, #16
 8101558:	af00      	add	r7, sp, #0
 810155a:	60f8      	str	r0, [r7, #12]
 810155c:	460b      	mov	r3, r1
 810155e:	607a      	str	r2, [r7, #4]
 8101560:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101562:	4b37      	ldr	r3, [pc, #220]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101564:	681b      	ldr	r3, [r3, #0]
 8101566:	f023 0201 	bic.w	r2, r3, #1
 810156a:	4935      	ldr	r1, [pc, #212]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 810156c:	68fb      	ldr	r3, [r7, #12]
 810156e:	4313      	orrs	r3, r2
 8101570:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	2b00      	cmp	r3, #0
 8101576:	d123      	bne.n	81015c0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101578:	f7ff fe16 	bl	81011a8 <HAL_GetCurrentCPUID>
 810157c:	4603      	mov	r3, r0
 810157e:	2b03      	cmp	r3, #3
 8101580:	d158      	bne.n	8101634 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101582:	4b2f      	ldr	r3, [pc, #188]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101584:	691b      	ldr	r3, [r3, #16]
 8101586:	4a2e      	ldr	r2, [pc, #184]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101588:	f023 0301 	bic.w	r3, r3, #1
 810158c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810158e:	4b2d      	ldr	r3, [pc, #180]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101590:	691b      	ldr	r3, [r3, #16]
 8101592:	4a2c      	ldr	r2, [pc, #176]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101594:	f043 0304 	orr.w	r3, r3, #4
 8101598:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810159a:	f3bf 8f4f 	dsb	sy
}
 810159e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81015a0:	f3bf 8f6f 	isb	sy
}
 81015a4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81015a6:	7afb      	ldrb	r3, [r7, #11]
 81015a8:	2b01      	cmp	r3, #1
 81015aa:	d101      	bne.n	81015b0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81015ac:	bf30      	wfi
 81015ae:	e000      	b.n	81015b2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81015b0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81015b2:	4b24      	ldr	r3, [pc, #144]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81015b4:	691b      	ldr	r3, [r3, #16]
 81015b6:	4a23      	ldr	r2, [pc, #140]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81015b8:	f023 0304 	bic.w	r3, r3, #4
 81015bc:	6113      	str	r3, [r2, #16]
 81015be:	e03c      	b.n	810163a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81015c0:	687b      	ldr	r3, [r7, #4]
 81015c2:	2b01      	cmp	r3, #1
 81015c4:	d123      	bne.n	810160e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81015c6:	f7ff fdef 	bl	81011a8 <HAL_GetCurrentCPUID>
 81015ca:	4603      	mov	r3, r0
 81015cc:	2b01      	cmp	r3, #1
 81015ce:	d133      	bne.n	8101638 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81015d0:	4b1b      	ldr	r3, [pc, #108]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 81015d2:	695b      	ldr	r3, [r3, #20]
 81015d4:	4a1a      	ldr	r2, [pc, #104]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 81015d6:	f023 0302 	bic.w	r3, r3, #2
 81015da:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81015dc:	4b19      	ldr	r3, [pc, #100]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81015de:	691b      	ldr	r3, [r3, #16]
 81015e0:	4a18      	ldr	r2, [pc, #96]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81015e2:	f043 0304 	orr.w	r3, r3, #4
 81015e6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81015e8:	f3bf 8f4f 	dsb	sy
}
 81015ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81015ee:	f3bf 8f6f 	isb	sy
}
 81015f2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81015f4:	7afb      	ldrb	r3, [r7, #11]
 81015f6:	2b01      	cmp	r3, #1
 81015f8:	d101      	bne.n	81015fe <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81015fa:	bf30      	wfi
 81015fc:	e000      	b.n	8101600 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81015fe:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101600:	4b10      	ldr	r3, [pc, #64]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101602:	691b      	ldr	r3, [r3, #16]
 8101604:	4a0f      	ldr	r2, [pc, #60]	; (8101644 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101606:	f023 0304 	bic.w	r3, r3, #4
 810160a:	6113      	str	r3, [r2, #16]
 810160c:	e015      	b.n	810163a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810160e:	f7ff fdcb 	bl	81011a8 <HAL_GetCurrentCPUID>
 8101612:	4603      	mov	r3, r0
 8101614:	2b03      	cmp	r3, #3
 8101616:	d106      	bne.n	8101626 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101618:	4b09      	ldr	r3, [pc, #36]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 810161a:	691b      	ldr	r3, [r3, #16]
 810161c:	4a08      	ldr	r2, [pc, #32]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 810161e:	f023 0304 	bic.w	r3, r3, #4
 8101622:	6113      	str	r3, [r2, #16]
 8101624:	e009      	b.n	810163a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101626:	4b06      	ldr	r3, [pc, #24]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101628:	695b      	ldr	r3, [r3, #20]
 810162a:	4a05      	ldr	r2, [pc, #20]	; (8101640 <HAL_PWREx_EnterSTOPMode+0xec>)
 810162c:	f023 0304 	bic.w	r3, r3, #4
 8101630:	6153      	str	r3, [r2, #20]
 8101632:	e002      	b.n	810163a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101634:	bf00      	nop
 8101636:	e000      	b.n	810163a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101638:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810163a:	3710      	adds	r7, #16
 810163c:	46bd      	mov	sp, r7
 810163e:	bd80      	pop	{r7, pc}
 8101640:	58024800 	.word	0x58024800
 8101644:	e000ed00 	.word	0xe000ed00

08101648 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101648:	b580      	push	{r7, lr}
 810164a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810164c:	f7ff fdac 	bl	81011a8 <HAL_GetCurrentCPUID>
 8101650:	4603      	mov	r3, r0
 8101652:	2b03      	cmp	r3, #3
 8101654:	d101      	bne.n	810165a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101656:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101658:	e001      	b.n	810165e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810165a:	bf40      	sev
    __WFE ();
 810165c:	bf20      	wfe
}
 810165e:	bf00      	nop
 8101660:	bd80      	pop	{r7, pc}
	...

08101664 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8101664:	b580      	push	{r7, lr}
 8101666:	b086      	sub	sp, #24
 8101668:	af02      	add	r7, sp, #8
 810166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 810166c:	f7ff fcac 	bl	8100fc8 <HAL_GetTick>
 8101670:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	2b00      	cmp	r3, #0
 8101676:	d101      	bne.n	810167c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8101678:	2301      	movs	r3, #1
 810167a:	e061      	b.n	8101740 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101682:	b2db      	uxtb	r3, r3
 8101684:	2b00      	cmp	r3, #0
 8101686:	d107      	bne.n	8101698 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8101688:	6878      	ldr	r0, [r7, #4]
 810168a:	f7ff f8bd 	bl	8100808 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 810168e:	f241 3188 	movw	r1, #5000	; 0x1388
 8101692:	6878      	ldr	r0, [r7, #4]
 8101694:	f000 f85a 	bl	810174c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	681b      	ldr	r3, [r3, #0]
 810169c:	681b      	ldr	r3, [r3, #0]
 810169e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	689b      	ldr	r3, [r3, #8]
 81016a6:	3b01      	subs	r3, #1
 81016a8:	021a      	lsls	r2, r3, #8
 81016aa:	687b      	ldr	r3, [r7, #4]
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	430a      	orrs	r2, r1
 81016b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81016b6:	9300      	str	r3, [sp, #0]
 81016b8:	68fb      	ldr	r3, [r7, #12]
 81016ba:	2200      	movs	r2, #0
 81016bc:	2120      	movs	r1, #32
 81016be:	6878      	ldr	r0, [r7, #4]
 81016c0:	f000 f852 	bl	8101768 <QSPI_WaitFlagStateUntilTimeout>
 81016c4:	4603      	mov	r3, r0
 81016c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 81016c8:	7afb      	ldrb	r3, [r7, #11]
 81016ca:	2b00      	cmp	r3, #0
 81016cc:	d137      	bne.n	810173e <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	681b      	ldr	r3, [r3, #0]
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81016d8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 81016dc:	687a      	ldr	r2, [r7, #4]
 81016de:	6852      	ldr	r2, [r2, #4]
 81016e0:	0611      	lsls	r1, r2, #24
 81016e2:	687a      	ldr	r2, [r7, #4]
 81016e4:	68d2      	ldr	r2, [r2, #12]
 81016e6:	4311      	orrs	r1, r2
 81016e8:	687a      	ldr	r2, [r7, #4]
 81016ea:	69d2      	ldr	r2, [r2, #28]
 81016ec:	4311      	orrs	r1, r2
 81016ee:	687a      	ldr	r2, [r7, #4]
 81016f0:	6a12      	ldr	r2, [r2, #32]
 81016f2:	4311      	orrs	r1, r2
 81016f4:	687a      	ldr	r2, [r7, #4]
 81016f6:	6812      	ldr	r2, [r2, #0]
 81016f8:	430b      	orrs	r3, r1
 81016fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	681b      	ldr	r3, [r3, #0]
 8101700:	685a      	ldr	r2, [r3, #4]
 8101702:	4b11      	ldr	r3, [pc, #68]	; (8101748 <HAL_QSPI_Init+0xe4>)
 8101704:	4013      	ands	r3, r2
 8101706:	687a      	ldr	r2, [r7, #4]
 8101708:	6912      	ldr	r2, [r2, #16]
 810170a:	0411      	lsls	r1, r2, #16
 810170c:	687a      	ldr	r2, [r7, #4]
 810170e:	6952      	ldr	r2, [r2, #20]
 8101710:	4311      	orrs	r1, r2
 8101712:	687a      	ldr	r2, [r7, #4]
 8101714:	6992      	ldr	r2, [r2, #24]
 8101716:	4311      	orrs	r1, r2
 8101718:	687a      	ldr	r2, [r7, #4]
 810171a:	6812      	ldr	r2, [r2, #0]
 810171c:	430b      	orrs	r3, r1
 810171e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	681a      	ldr	r2, [r3, #0]
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	681b      	ldr	r3, [r3, #0]
 810172a:	f042 0201 	orr.w	r2, r2, #1
 810172e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	2200      	movs	r2, #0
 8101734:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8101736:	687b      	ldr	r3, [r7, #4]
 8101738:	2201      	movs	r2, #1
 810173a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 810173e:	7afb      	ldrb	r3, [r7, #11]
}
 8101740:	4618      	mov	r0, r3
 8101742:	3710      	adds	r7, #16
 8101744:	46bd      	mov	sp, r7
 8101746:	bd80      	pop	{r7, pc}
 8101748:	ffe0f8fe 	.word	0xffe0f8fe

0810174c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 810174c:	b480      	push	{r7}
 810174e:	b083      	sub	sp, #12
 8101750:	af00      	add	r7, sp, #0
 8101752:	6078      	str	r0, [r7, #4]
 8101754:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8101756:	687b      	ldr	r3, [r7, #4]
 8101758:	683a      	ldr	r2, [r7, #0]
 810175a:	649a      	str	r2, [r3, #72]	; 0x48
}
 810175c:	bf00      	nop
 810175e:	370c      	adds	r7, #12
 8101760:	46bd      	mov	sp, r7
 8101762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101766:	4770      	bx	lr

08101768 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8101768:	b580      	push	{r7, lr}
 810176a:	b084      	sub	sp, #16
 810176c:	af00      	add	r7, sp, #0
 810176e:	60f8      	str	r0, [r7, #12]
 8101770:	60b9      	str	r1, [r7, #8]
 8101772:	603b      	str	r3, [r7, #0]
 8101774:	4613      	mov	r3, r2
 8101776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8101778:	e01a      	b.n	81017b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810177a:	69bb      	ldr	r3, [r7, #24]
 810177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101780:	d016      	beq.n	81017b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101782:	f7ff fc21 	bl	8100fc8 <HAL_GetTick>
 8101786:	4602      	mov	r2, r0
 8101788:	683b      	ldr	r3, [r7, #0]
 810178a:	1ad3      	subs	r3, r2, r3
 810178c:	69ba      	ldr	r2, [r7, #24]
 810178e:	429a      	cmp	r2, r3
 8101790:	d302      	bcc.n	8101798 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8101792:	69bb      	ldr	r3, [r7, #24]
 8101794:	2b00      	cmp	r3, #0
 8101796:	d10b      	bne.n	81017b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8101798:	68fb      	ldr	r3, [r7, #12]
 810179a:	2204      	movs	r2, #4
 810179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81017a0:	68fb      	ldr	r3, [r7, #12]
 81017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81017a4:	f043 0201 	orr.w	r2, r3, #1
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 81017ac:	2301      	movs	r3, #1
 81017ae:	e00e      	b.n	81017ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81017b0:	68fb      	ldr	r3, [r7, #12]
 81017b2:	681b      	ldr	r3, [r3, #0]
 81017b4:	689a      	ldr	r2, [r3, #8]
 81017b6:	68bb      	ldr	r3, [r7, #8]
 81017b8:	4013      	ands	r3, r2
 81017ba:	2b00      	cmp	r3, #0
 81017bc:	bf14      	ite	ne
 81017be:	2301      	movne	r3, #1
 81017c0:	2300      	moveq	r3, #0
 81017c2:	b2db      	uxtb	r3, r3
 81017c4:	461a      	mov	r2, r3
 81017c6:	79fb      	ldrb	r3, [r7, #7]
 81017c8:	429a      	cmp	r2, r3
 81017ca:	d1d6      	bne.n	810177a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81017cc:	2300      	movs	r3, #0
}
 81017ce:	4618      	mov	r0, r3
 81017d0:	3710      	adds	r7, #16
 81017d2:	46bd      	mov	sp, r7
 81017d4:	bd80      	pop	{r7, pc}
	...

081017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81017d8:	b480      	push	{r7}
 81017da:	b089      	sub	sp, #36	; 0x24
 81017dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81017de:	4bb3      	ldr	r3, [pc, #716]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e0:	691b      	ldr	r3, [r3, #16]
 81017e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81017e6:	2b18      	cmp	r3, #24
 81017e8:	f200 8155 	bhi.w	8101a96 <HAL_RCC_GetSysClockFreq+0x2be>
 81017ec:	a201      	add	r2, pc, #4	; (adr r2, 81017f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017f2:	bf00      	nop
 81017f4:	08101859 	.word	0x08101859
 81017f8:	08101a97 	.word	0x08101a97
 81017fc:	08101a97 	.word	0x08101a97
 8101800:	08101a97 	.word	0x08101a97
 8101804:	08101a97 	.word	0x08101a97
 8101808:	08101a97 	.word	0x08101a97
 810180c:	08101a97 	.word	0x08101a97
 8101810:	08101a97 	.word	0x08101a97
 8101814:	0810187f 	.word	0x0810187f
 8101818:	08101a97 	.word	0x08101a97
 810181c:	08101a97 	.word	0x08101a97
 8101820:	08101a97 	.word	0x08101a97
 8101824:	08101a97 	.word	0x08101a97
 8101828:	08101a97 	.word	0x08101a97
 810182c:	08101a97 	.word	0x08101a97
 8101830:	08101a97 	.word	0x08101a97
 8101834:	08101885 	.word	0x08101885
 8101838:	08101a97 	.word	0x08101a97
 810183c:	08101a97 	.word	0x08101a97
 8101840:	08101a97 	.word	0x08101a97
 8101844:	08101a97 	.word	0x08101a97
 8101848:	08101a97 	.word	0x08101a97
 810184c:	08101a97 	.word	0x08101a97
 8101850:	08101a97 	.word	0x08101a97
 8101854:	0810188b 	.word	0x0810188b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101858:	4b94      	ldr	r3, [pc, #592]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 810185a:	681b      	ldr	r3, [r3, #0]
 810185c:	f003 0320 	and.w	r3, r3, #32
 8101860:	2b00      	cmp	r3, #0
 8101862:	d009      	beq.n	8101878 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101864:	4b91      	ldr	r3, [pc, #580]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101866:	681b      	ldr	r3, [r3, #0]
 8101868:	08db      	lsrs	r3, r3, #3
 810186a:	f003 0303 	and.w	r3, r3, #3
 810186e:	4a90      	ldr	r2, [pc, #576]	; (8101ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101870:	fa22 f303 	lsr.w	r3, r2, r3
 8101874:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101876:	e111      	b.n	8101a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101878:	4b8d      	ldr	r3, [pc, #564]	; (8101ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810187a:	61bb      	str	r3, [r7, #24]
      break;
 810187c:	e10e      	b.n	8101a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810187e:	4b8d      	ldr	r3, [pc, #564]	; (8101ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101880:	61bb      	str	r3, [r7, #24]
      break;
 8101882:	e10b      	b.n	8101a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101884:	4b8c      	ldr	r3, [pc, #560]	; (8101ab8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101886:	61bb      	str	r3, [r7, #24]
      break;
 8101888:	e108      	b.n	8101a9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810188a:	4b88      	ldr	r3, [pc, #544]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 810188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810188e:	f003 0303 	and.w	r3, r3, #3
 8101892:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101894:	4b85      	ldr	r3, [pc, #532]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101898:	091b      	lsrs	r3, r3, #4
 810189a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810189e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81018a0:	4b82      	ldr	r3, [pc, #520]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81018a4:	f003 0301 	and.w	r3, r3, #1
 81018a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81018aa:	4b80      	ldr	r3, [pc, #512]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81018ae:	08db      	lsrs	r3, r3, #3
 81018b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81018b4:	68fa      	ldr	r2, [r7, #12]
 81018b6:	fb02 f303 	mul.w	r3, r2, r3
 81018ba:	ee07 3a90 	vmov	s15, r3
 81018be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81018c6:	693b      	ldr	r3, [r7, #16]
 81018c8:	2b00      	cmp	r3, #0
 81018ca:	f000 80e1 	beq.w	8101a90 <HAL_RCC_GetSysClockFreq+0x2b8>
 81018ce:	697b      	ldr	r3, [r7, #20]
 81018d0:	2b02      	cmp	r3, #2
 81018d2:	f000 8083 	beq.w	81019dc <HAL_RCC_GetSysClockFreq+0x204>
 81018d6:	697b      	ldr	r3, [r7, #20]
 81018d8:	2b02      	cmp	r3, #2
 81018da:	f200 80a1 	bhi.w	8101a20 <HAL_RCC_GetSysClockFreq+0x248>
 81018de:	697b      	ldr	r3, [r7, #20]
 81018e0:	2b00      	cmp	r3, #0
 81018e2:	d003      	beq.n	81018ec <HAL_RCC_GetSysClockFreq+0x114>
 81018e4:	697b      	ldr	r3, [r7, #20]
 81018e6:	2b01      	cmp	r3, #1
 81018e8:	d056      	beq.n	8101998 <HAL_RCC_GetSysClockFreq+0x1c0>
 81018ea:	e099      	b.n	8101a20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81018ec:	4b6f      	ldr	r3, [pc, #444]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	f003 0320 	and.w	r3, r3, #32
 81018f4:	2b00      	cmp	r3, #0
 81018f6:	d02d      	beq.n	8101954 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81018f8:	4b6c      	ldr	r3, [pc, #432]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	08db      	lsrs	r3, r3, #3
 81018fe:	f003 0303 	and.w	r3, r3, #3
 8101902:	4a6b      	ldr	r2, [pc, #428]	; (8101ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101904:	fa22 f303 	lsr.w	r3, r2, r3
 8101908:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	ee07 3a90 	vmov	s15, r3
 8101910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101914:	693b      	ldr	r3, [r7, #16]
 8101916:	ee07 3a90 	vmov	s15, r3
 810191a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810191e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101922:	4b62      	ldr	r3, [pc, #392]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810192a:	ee07 3a90 	vmov	s15, r3
 810192e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101932:	ed97 6a02 	vldr	s12, [r7, #8]
 8101936:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101abc <HAL_RCC_GetSysClockFreq+0x2e4>
 810193a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810193e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810194e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101952:	e087      	b.n	8101a64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101954:	693b      	ldr	r3, [r7, #16]
 8101956:	ee07 3a90 	vmov	s15, r3
 810195a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810195e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101ac0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101966:	4b51      	ldr	r3, [pc, #324]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810196e:	ee07 3a90 	vmov	s15, r3
 8101972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101976:	ed97 6a02 	vldr	s12, [r7, #8]
 810197a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101abc <HAL_RCC_GetSysClockFreq+0x2e4>
 810197e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810198a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101996:	e065      	b.n	8101a64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101998:	693b      	ldr	r3, [r7, #16]
 810199a:	ee07 3a90 	vmov	s15, r3
 810199e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81019a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019aa:	4b40      	ldr	r3, [pc, #256]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019b2:	ee07 3a90 	vmov	s15, r3
 81019b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81019be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101abc <HAL_RCC_GetSysClockFreq+0x2e4>
 81019c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81019da:	e043      	b.n	8101a64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81019dc:	693b      	ldr	r3, [r7, #16]
 81019de:	ee07 3a90 	vmov	s15, r3
 81019e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101ac8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81019ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019ee:	4b2f      	ldr	r3, [pc, #188]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019f6:	ee07 3a90 	vmov	s15, r3
 81019fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101a1e:	e021      	b.n	8101a64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101a20:	693b      	ldr	r3, [r7, #16]
 8101a22:	ee07 3a90 	vmov	s15, r3
 8101a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a32:	4b1e      	ldr	r3, [pc, #120]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a3a:	ee07 3a90 	vmov	s15, r3
 8101a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101a62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101a64:	4b11      	ldr	r3, [pc, #68]	; (8101aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a68:	0a5b      	lsrs	r3, r3, #9
 8101a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101a6e:	3301      	adds	r3, #1
 8101a70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101a72:	683b      	ldr	r3, [r7, #0]
 8101a74:	ee07 3a90 	vmov	s15, r3
 8101a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8101a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101a88:	ee17 3a90 	vmov	r3, s15
 8101a8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101a8e:	e005      	b.n	8101a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101a90:	2300      	movs	r3, #0
 8101a92:	61bb      	str	r3, [r7, #24]
      break;
 8101a94:	e002      	b.n	8101a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101a96:	4b07      	ldr	r3, [pc, #28]	; (8101ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101a98:	61bb      	str	r3, [r7, #24]
      break;
 8101a9a:	bf00      	nop
  }

  return sysclockfreq;
 8101a9c:	69bb      	ldr	r3, [r7, #24]
}
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	3724      	adds	r7, #36	; 0x24
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa8:	4770      	bx	lr
 8101aaa:	bf00      	nop
 8101aac:	58024400 	.word	0x58024400
 8101ab0:	03d09000 	.word	0x03d09000
 8101ab4:	003d0900 	.word	0x003d0900
 8101ab8:	017d7840 	.word	0x017d7840
 8101abc:	46000000 	.word	0x46000000
 8101ac0:	4c742400 	.word	0x4c742400
 8101ac4:	4a742400 	.word	0x4a742400
 8101ac8:	4bbebc20 	.word	0x4bbebc20

08101acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101ad0:	b0cc      	sub	sp, #304	; 0x130
 8101ad2:	af00      	add	r7, sp, #0
 8101ad4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101ad8:	2300      	movs	r3, #0
 8101ada:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101ade:	2300      	movs	r3, #0
 8101ae0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101aec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8101af0:	2500      	movs	r5, #0
 8101af2:	ea54 0305 	orrs.w	r3, r4, r5
 8101af6:	d049      	beq.n	8101b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101af8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101afe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101b02:	d02f      	beq.n	8101b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101b08:	d828      	bhi.n	8101b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101b0e:	d01a      	beq.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101b14:	d822      	bhi.n	8101b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d003      	beq.n	8101b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8101b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101b1e:	d007      	beq.n	8101b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101b20:	e01c      	b.n	8101b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b22:	4bb8      	ldr	r3, [pc, #736]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b26:	4ab7      	ldr	r2, [pc, #732]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101b2e:	e01a      	b.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b34:	3308      	adds	r3, #8
 8101b36:	2102      	movs	r1, #2
 8101b38:	4618      	mov	r0, r3
 8101b3a:	f001 fa11 	bl	8102f60 <RCCEx_PLL2_Config>
 8101b3e:	4603      	mov	r3, r0
 8101b40:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101b44:	e00f      	b.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8101b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b4a:	3328      	adds	r3, #40	; 0x28
 8101b4c:	2102      	movs	r1, #2
 8101b4e:	4618      	mov	r0, r3
 8101b50:	f001 fab8 	bl	81030c4 <RCCEx_PLL3_Config>
 8101b54:	4603      	mov	r3, r0
 8101b56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101b5a:	e004      	b.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b5c:	2301      	movs	r3, #1
 8101b5e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101b62:	e000      	b.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101b6a:	2b00      	cmp	r3, #0
 8101b6c:	d10a      	bne.n	8101b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101b6e:	4ba5      	ldr	r3, [pc, #660]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8101b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101b7c:	4aa1      	ldr	r2, [pc, #644]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b7e:	430b      	orrs	r3, r1
 8101b80:	6513      	str	r3, [r2, #80]	; 0x50
 8101b82:	e003      	b.n	8101b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101b88:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b94:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8101b98:	f04f 0900 	mov.w	r9, #0
 8101b9c:	ea58 0309 	orrs.w	r3, r8, r9
 8101ba0:	d047      	beq.n	8101c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101ba8:	2b04      	cmp	r3, #4
 8101baa:	d82a      	bhi.n	8101c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101bac:	a201      	add	r2, pc, #4	; (adr r2, 8101bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101bb2:	bf00      	nop
 8101bb4:	08101bc9 	.word	0x08101bc9
 8101bb8:	08101bd7 	.word	0x08101bd7
 8101bbc:	08101bed 	.word	0x08101bed
 8101bc0:	08101c0b 	.word	0x08101c0b
 8101bc4:	08101c0b 	.word	0x08101c0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101bc8:	4b8e      	ldr	r3, [pc, #568]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101bcc:	4a8d      	ldr	r2, [pc, #564]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101bd4:	e01a      	b.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101bda:	3308      	adds	r3, #8
 8101bdc:	2100      	movs	r1, #0
 8101bde:	4618      	mov	r0, r3
 8101be0:	f001 f9be 	bl	8102f60 <RCCEx_PLL2_Config>
 8101be4:	4603      	mov	r3, r0
 8101be6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101bea:	e00f      	b.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101bf0:	3328      	adds	r3, #40	; 0x28
 8101bf2:	2100      	movs	r1, #0
 8101bf4:	4618      	mov	r0, r3
 8101bf6:	f001 fa65 	bl	81030c4 <RCCEx_PLL3_Config>
 8101bfa:	4603      	mov	r3, r0
 8101bfc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c00:	e004      	b.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c02:	2301      	movs	r3, #1
 8101c04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101c08:	e000      	b.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101c10:	2b00      	cmp	r3, #0
 8101c12:	d10a      	bne.n	8101c2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101c14:	4b7b      	ldr	r3, [pc, #492]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101c18:	f023 0107 	bic.w	r1, r3, #7
 8101c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101c22:	4a78      	ldr	r2, [pc, #480]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c24:	430b      	orrs	r3, r1
 8101c26:	6513      	str	r3, [r2, #80]	; 0x50
 8101c28:	e003      	b.n	8101c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101c2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c3a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8101c3e:	f04f 0b00 	mov.w	fp, #0
 8101c42:	ea5a 030b 	orrs.w	r3, sl, fp
 8101c46:	d04c      	beq.n	8101ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101c52:	d030      	beq.n	8101cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101c58:	d829      	bhi.n	8101cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8101c5c:	d02d      	beq.n	8101cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8101c60:	d825      	bhi.n	8101cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101c62:	2b80      	cmp	r3, #128	; 0x80
 8101c64:	d018      	beq.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8101c66:	2b80      	cmp	r3, #128	; 0x80
 8101c68:	d821      	bhi.n	8101cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	d002      	beq.n	8101c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101c6e:	2b40      	cmp	r3, #64	; 0x40
 8101c70:	d007      	beq.n	8101c82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101c72:	e01c      	b.n	8101cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c74:	4b63      	ldr	r3, [pc, #396]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c78:	4a62      	ldr	r2, [pc, #392]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101c80:	e01c      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c86:	3308      	adds	r3, #8
 8101c88:	2100      	movs	r1, #0
 8101c8a:	4618      	mov	r0, r3
 8101c8c:	f001 f968 	bl	8102f60 <RCCEx_PLL2_Config>
 8101c90:	4603      	mov	r3, r0
 8101c92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101c96:	e011      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c9c:	3328      	adds	r3, #40	; 0x28
 8101c9e:	2100      	movs	r1, #0
 8101ca0:	4618      	mov	r0, r3
 8101ca2:	f001 fa0f 	bl	81030c4 <RCCEx_PLL3_Config>
 8101ca6:	4603      	mov	r3, r0
 8101ca8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101cac:	e006      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101cae:	2301      	movs	r3, #1
 8101cb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101cb4:	e002      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101cb6:	bf00      	nop
 8101cb8:	e000      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101cbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	d10a      	bne.n	8101cda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101cc4:	4b4f      	ldr	r3, [pc, #316]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101cc8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8101ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101cd2:	4a4c      	ldr	r2, [pc, #304]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cd4:	430b      	orrs	r3, r1
 8101cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8101cd8:	e003      	b.n	8101ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101cde:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101cea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8101cee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8101cf2:	2300      	movs	r3, #0
 8101cf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8101cf8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8101cfc:	460b      	mov	r3, r1
 8101cfe:	4313      	orrs	r3, r2
 8101d00:	d053      	beq.n	8101daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101d0e:	d035      	beq.n	8101d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101d14:	d82e      	bhi.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101d1a:	d031      	beq.n	8101d80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101d20:	d828      	bhi.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101d26:	d01a      	beq.n	8101d5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101d2c:	d822      	bhi.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d2e:	2b00      	cmp	r3, #0
 8101d30:	d003      	beq.n	8101d3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101d36:	d007      	beq.n	8101d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101d38:	e01c      	b.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d3a:	4b32      	ldr	r3, [pc, #200]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d3e:	4a31      	ldr	r2, [pc, #196]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101d46:	e01c      	b.n	8101d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d4c:	3308      	adds	r3, #8
 8101d4e:	2100      	movs	r1, #0
 8101d50:	4618      	mov	r0, r3
 8101d52:	f001 f905 	bl	8102f60 <RCCEx_PLL2_Config>
 8101d56:	4603      	mov	r3, r0
 8101d58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101d5c:	e011      	b.n	8101d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d62:	3328      	adds	r3, #40	; 0x28
 8101d64:	2100      	movs	r1, #0
 8101d66:	4618      	mov	r0, r3
 8101d68:	f001 f9ac 	bl	81030c4 <RCCEx_PLL3_Config>
 8101d6c:	4603      	mov	r3, r0
 8101d6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101d72:	e006      	b.n	8101d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101d74:	2301      	movs	r3, #1
 8101d76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101d7a:	e002      	b.n	8101d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101d7c:	bf00      	nop
 8101d7e:	e000      	b.n	8101d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101d86:	2b00      	cmp	r3, #0
 8101d88:	d10b      	bne.n	8101da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101d8a:	4b1e      	ldr	r3, [pc, #120]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d8e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8101d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101d9a:	4a1a      	ldr	r2, [pc, #104]	; (8101e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d9c:	430b      	orrs	r3, r1
 8101d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8101da0:	e003      	b.n	8101daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101da2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101da6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101db2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8101db6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8101dba:	2300      	movs	r3, #0
 8101dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8101dc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8101dc4:	460b      	mov	r3, r1
 8101dc6:	4313      	orrs	r3, r2
 8101dc8:	d056      	beq.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101dd6:	d038      	beq.n	8101e4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101ddc:	d831      	bhi.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101de2:	d034      	beq.n	8101e4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8101de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101de8:	d82b      	bhi.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101dee:	d01d      	beq.n	8101e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101df4:	d825      	bhi.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101df6:	2b00      	cmp	r3, #0
 8101df8:	d006      	beq.n	8101e08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8101dfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101dfe:	d00a      	beq.n	8101e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101e00:	e01f      	b.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e02:	bf00      	nop
 8101e04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e08:	4ba2      	ldr	r3, [pc, #648]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e0c:	4aa1      	ldr	r2, [pc, #644]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e14:	e01c      	b.n	8101e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e1a:	3308      	adds	r3, #8
 8101e1c:	2100      	movs	r1, #0
 8101e1e:	4618      	mov	r0, r3
 8101e20:	f001 f89e 	bl	8102f60 <RCCEx_PLL2_Config>
 8101e24:	4603      	mov	r3, r0
 8101e26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101e2a:	e011      	b.n	8101e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e30:	3328      	adds	r3, #40	; 0x28
 8101e32:	2100      	movs	r1, #0
 8101e34:	4618      	mov	r0, r3
 8101e36:	f001 f945 	bl	81030c4 <RCCEx_PLL3_Config>
 8101e3a:	4603      	mov	r3, r0
 8101e3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e40:	e006      	b.n	8101e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101e42:	2301      	movs	r3, #1
 8101e44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101e48:	e002      	b.n	8101e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101e4a:	bf00      	nop
 8101e4c:	e000      	b.n	8101e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101e54:	2b00      	cmp	r3, #0
 8101e56:	d10b      	bne.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101e58:	4b8e      	ldr	r3, [pc, #568]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101e5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8101e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101e68:	4a8a      	ldr	r2, [pc, #552]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e6a:	430b      	orrs	r3, r1
 8101e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8101e6e:	e003      	b.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101e74:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e80:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8101e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8101e88:	2300      	movs	r3, #0
 8101e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8101e8e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8101e92:	460b      	mov	r3, r1
 8101e94:	4313      	orrs	r3, r2
 8101e96:	d03a      	beq.n	8101f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101e9e:	2b30      	cmp	r3, #48	; 0x30
 8101ea0:	d01f      	beq.n	8101ee2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101ea2:	2b30      	cmp	r3, #48	; 0x30
 8101ea4:	d819      	bhi.n	8101eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101ea6:	2b20      	cmp	r3, #32
 8101ea8:	d00c      	beq.n	8101ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101eaa:	2b20      	cmp	r3, #32
 8101eac:	d815      	bhi.n	8101eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101eae:	2b00      	cmp	r3, #0
 8101eb0:	d019      	beq.n	8101ee6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101eb2:	2b10      	cmp	r3, #16
 8101eb4:	d111      	bne.n	8101eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101eb6:	4b77      	ldr	r3, [pc, #476]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101eba:	4a76      	ldr	r2, [pc, #472]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101ec2:	e011      	b.n	8101ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ec8:	3308      	adds	r3, #8
 8101eca:	2102      	movs	r1, #2
 8101ecc:	4618      	mov	r0, r3
 8101ece:	f001 f847 	bl	8102f60 <RCCEx_PLL2_Config>
 8101ed2:	4603      	mov	r3, r0
 8101ed4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101ed8:	e006      	b.n	8101ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101eda:	2301      	movs	r3, #1
 8101edc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101ee0:	e002      	b.n	8101ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101ee2:	bf00      	nop
 8101ee4:	e000      	b.n	8101ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ee8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101eec:	2b00      	cmp	r3, #0
 8101eee:	d10a      	bne.n	8101f06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101ef0:	4b68      	ldr	r3, [pc, #416]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101ef4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8101ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101efe:	4a65      	ldr	r2, [pc, #404]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f00:	430b      	orrs	r3, r1
 8101f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8101f04:	e003      	b.n	8101f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101f0a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8101f1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8101f1e:	2300      	movs	r3, #0
 8101f20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8101f24:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8101f28:	460b      	mov	r3, r1
 8101f2a:	4313      	orrs	r3, r2
 8101f2c:	d051      	beq.n	8101fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101f38:	d035      	beq.n	8101fa6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101f3e:	d82e      	bhi.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101f44:	d031      	beq.n	8101faa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101f4a:	d828      	bhi.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101f50:	d01a      	beq.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101f56:	d822      	bhi.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101f58:	2b00      	cmp	r3, #0
 8101f5a:	d003      	beq.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101f60:	d007      	beq.n	8101f72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101f62:	e01c      	b.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f64:	4b4b      	ldr	r3, [pc, #300]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f68:	4a4a      	ldr	r2, [pc, #296]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101f70:	e01c      	b.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f76:	3308      	adds	r3, #8
 8101f78:	2100      	movs	r1, #0
 8101f7a:	4618      	mov	r0, r3
 8101f7c:	f000 fff0 	bl	8102f60 <RCCEx_PLL2_Config>
 8101f80:	4603      	mov	r3, r0
 8101f82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101f86:	e011      	b.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f8c:	3328      	adds	r3, #40	; 0x28
 8101f8e:	2100      	movs	r1, #0
 8101f90:	4618      	mov	r0, r3
 8101f92:	f001 f897 	bl	81030c4 <RCCEx_PLL3_Config>
 8101f96:	4603      	mov	r3, r0
 8101f98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101f9c:	e006      	b.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101f9e:	2301      	movs	r3, #1
 8101fa0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101fa4:	e002      	b.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101fa6:	bf00      	nop
 8101fa8:	e000      	b.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101fac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101fb0:	2b00      	cmp	r3, #0
 8101fb2:	d10a      	bne.n	8101fca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101fb4:	4b37      	ldr	r3, [pc, #220]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101fb8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8101fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101fc2:	4a34      	ldr	r2, [pc, #208]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fc4:	430b      	orrs	r3, r1
 8101fc6:	6513      	str	r3, [r2, #80]	; 0x50
 8101fc8:	e003      	b.n	8101fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101fce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fda:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8101fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8101fe2:	2300      	movs	r3, #0
 8101fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8101fe8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8101fec:	460b      	mov	r3, r1
 8101fee:	4313      	orrs	r3, r2
 8101ff0:	d056      	beq.n	81020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101ffc:	d033      	beq.n	8102066 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102002:	d82c      	bhi.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102008:	d02f      	beq.n	810206a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810200a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810200e:	d826      	bhi.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102014:	d02b      	beq.n	810206e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810201a:	d820      	bhi.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810201c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102020:	d012      	beq.n	8102048 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102026:	d81a      	bhi.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102028:	2b00      	cmp	r3, #0
 810202a:	d022      	beq.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102030:	d115      	bne.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102032:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102036:	3308      	adds	r3, #8
 8102038:	2101      	movs	r1, #1
 810203a:	4618      	mov	r0, r3
 810203c:	f000 ff90 	bl	8102f60 <RCCEx_PLL2_Config>
 8102040:	4603      	mov	r3, r0
 8102042:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102046:	e015      	b.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102048:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810204c:	3328      	adds	r3, #40	; 0x28
 810204e:	2101      	movs	r1, #1
 8102050:	4618      	mov	r0, r3
 8102052:	f001 f837 	bl	81030c4 <RCCEx_PLL3_Config>
 8102056:	4603      	mov	r3, r0
 8102058:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810205c:	e00a      	b.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810205e:	2301      	movs	r3, #1
 8102060:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102064:	e006      	b.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102066:	bf00      	nop
 8102068:	e004      	b.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810206a:	bf00      	nop
 810206c:	e002      	b.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810206e:	bf00      	nop
 8102070:	e000      	b.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102074:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102078:	2b00      	cmp	r3, #0
 810207a:	d10d      	bne.n	8102098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810207c:	4b05      	ldr	r3, [pc, #20]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810207e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102080:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8102084:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810208a:	4a02      	ldr	r2, [pc, #8]	; (8102094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810208c:	430b      	orrs	r3, r1
 810208e:	6513      	str	r3, [r2, #80]	; 0x50
 8102090:	e006      	b.n	81020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8102092:	bf00      	nop
 8102094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102098:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810209c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81020a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81020ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81020b0:	2300      	movs	r3, #0
 81020b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81020b6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81020ba:	460b      	mov	r3, r1
 81020bc:	4313      	orrs	r3, r2
 81020be:	d055      	beq.n	810216c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81020c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81020c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81020c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81020cc:	d033      	beq.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81020ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81020d2:	d82c      	bhi.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81020d8:	d02f      	beq.n	810213a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81020de:	d826      	bhi.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81020e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81020e4:	d02b      	beq.n	810213e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81020e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81020ea:	d820      	bhi.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81020ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81020f0:	d012      	beq.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81020f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81020f6:	d81a      	bhi.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	d022      	beq.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81020fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102100:	d115      	bne.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102106:	3308      	adds	r3, #8
 8102108:	2101      	movs	r1, #1
 810210a:	4618      	mov	r0, r3
 810210c:	f000 ff28 	bl	8102f60 <RCCEx_PLL2_Config>
 8102110:	4603      	mov	r3, r0
 8102112:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102116:	e015      	b.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102118:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810211c:	3328      	adds	r3, #40	; 0x28
 810211e:	2101      	movs	r1, #1
 8102120:	4618      	mov	r0, r3
 8102122:	f000 ffcf 	bl	81030c4 <RCCEx_PLL3_Config>
 8102126:	4603      	mov	r3, r0
 8102128:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810212c:	e00a      	b.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810212e:	2301      	movs	r3, #1
 8102130:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102134:	e006      	b.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102136:	bf00      	nop
 8102138:	e004      	b.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810213a:	bf00      	nop
 810213c:	e002      	b.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810213e:	bf00      	nop
 8102140:	e000      	b.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102144:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102148:	2b00      	cmp	r3, #0
 810214a:	d10b      	bne.n	8102164 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810214c:	4bb7      	ldr	r3, [pc, #732]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102150:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8102154:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102158:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810215c:	4ab3      	ldr	r2, [pc, #716]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810215e:	430b      	orrs	r3, r1
 8102160:	6593      	str	r3, [r2, #88]	; 0x58
 8102162:	e003      	b.n	810216c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102164:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102168:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810216c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102174:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8102178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 810217c:	2300      	movs	r3, #0
 810217e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8102182:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8102186:	460b      	mov	r3, r1
 8102188:	4313      	orrs	r3, r2
 810218a:	d02a      	beq.n	81021e2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810218c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102192:	2b00      	cmp	r3, #0
 8102194:	d011      	beq.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8102196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810219a:	d10a      	bne.n	81021b2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810219c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81021a0:	3308      	adds	r3, #8
 81021a2:	2101      	movs	r1, #1
 81021a4:	4618      	mov	r0, r3
 81021a6:	f000 fedb 	bl	8102f60 <RCCEx_PLL2_Config>
 81021aa:	4603      	mov	r3, r0
 81021ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81021b0:	e004      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021b2:	2301      	movs	r3, #1
 81021b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81021b8:	e000      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81021ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81021c0:	2b00      	cmp	r3, #0
 81021c2:	d10a      	bne.n	81021da <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81021c4:	4b99      	ldr	r3, [pc, #612]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81021c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 81021cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81021d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81021d2:	4a96      	ldr	r2, [pc, #600]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81021d4:	430b      	orrs	r3, r1
 81021d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81021d8:	e003      	b.n	81021e2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81021de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81021e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021ea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 81021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 81021f2:	2300      	movs	r3, #0
 81021f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 81021f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 81021fc:	460b      	mov	r3, r1
 81021fe:	4313      	orrs	r3, r2
 8102200:	d037      	beq.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810220c:	d00e      	beq.n	810222c <HAL_RCCEx_PeriphCLKConfig+0x760>
 810220e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102212:	d816      	bhi.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8102214:	2b00      	cmp	r3, #0
 8102216:	d018      	beq.n	810224a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8102218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810221c:	d111      	bne.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810221e:	4b83      	ldr	r3, [pc, #524]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102222:	4a82      	ldr	r2, [pc, #520]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810222a:	e00f      	b.n	810224c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810222c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102230:	3308      	adds	r3, #8
 8102232:	2101      	movs	r1, #1
 8102234:	4618      	mov	r0, r3
 8102236:	f000 fe93 	bl	8102f60 <RCCEx_PLL2_Config>
 810223a:	4603      	mov	r3, r0
 810223c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102240:	e004      	b.n	810224c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102242:	2301      	movs	r3, #1
 8102244:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102248:	e000      	b.n	810224c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810224a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810224c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102250:	2b00      	cmp	r3, #0
 8102252:	d10a      	bne.n	810226a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102254:	4b75      	ldr	r3, [pc, #468]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102258:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810225c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102262:	4a72      	ldr	r2, [pc, #456]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102264:	430b      	orrs	r3, r1
 8102266:	6513      	str	r3, [r2, #80]	; 0x50
 8102268:	e003      	b.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810226a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810226e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102272:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102276:	e9d3 2300 	ldrd	r2, r3, [r3]
 810227a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 810227e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8102282:	2300      	movs	r3, #0
 8102284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8102288:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 810228c:	460b      	mov	r3, r1
 810228e:	4313      	orrs	r3, r2
 8102290:	d03a      	beq.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102298:	2b03      	cmp	r3, #3
 810229a:	d81d      	bhi.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810229c:	a201      	add	r2, pc, #4	; (adr r2, 81022a4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81022a2:	bf00      	nop
 81022a4:	081022e1 	.word	0x081022e1
 81022a8:	081022b5 	.word	0x081022b5
 81022ac:	081022c3 	.word	0x081022c3
 81022b0:	081022e1 	.word	0x081022e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022b4:	4b5d      	ldr	r3, [pc, #372]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022b8:	4a5c      	ldr	r2, [pc, #368]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81022ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81022c0:	e00f      	b.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81022c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81022c6:	3308      	adds	r3, #8
 81022c8:	2102      	movs	r1, #2
 81022ca:	4618      	mov	r0, r3
 81022cc:	f000 fe48 	bl	8102f60 <RCCEx_PLL2_Config>
 81022d0:	4603      	mov	r3, r0
 81022d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81022d6:	e004      	b.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81022d8:	2301      	movs	r3, #1
 81022da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81022de:	e000      	b.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81022e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81022e6:	2b00      	cmp	r3, #0
 81022e8:	d10a      	bne.n	8102300 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81022ea:	4b50      	ldr	r3, [pc, #320]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81022ee:	f023 0103 	bic.w	r1, r3, #3
 81022f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81022f8:	4a4c      	ldr	r2, [pc, #304]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81022fa:	430b      	orrs	r3, r1
 81022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 81022fe:	e003      	b.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102300:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102304:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102310:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8102314:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8102318:	2300      	movs	r3, #0
 810231a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810231e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8102322:	460b      	mov	r3, r1
 8102324:	4313      	orrs	r3, r2
 8102326:	f000 80a0 	beq.w	810246a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810232a:	4b41      	ldr	r3, [pc, #260]	; (8102430 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	4a40      	ldr	r2, [pc, #256]	; (8102430 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8102330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102334:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102336:	f7fe fe47 	bl	8100fc8 <HAL_GetTick>
 810233a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810233e:	e00b      	b.n	8102358 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102340:	f7fe fe42 	bl	8100fc8 <HAL_GetTick>
 8102344:	4602      	mov	r2, r0
 8102346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 810234a:	1ad3      	subs	r3, r2, r3
 810234c:	2b64      	cmp	r3, #100	; 0x64
 810234e:	d903      	bls.n	8102358 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8102350:	2303      	movs	r3, #3
 8102352:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102356:	e005      	b.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102358:	4b35      	ldr	r3, [pc, #212]	; (8102430 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102360:	2b00      	cmp	r3, #0
 8102362:	d0ed      	beq.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8102364:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102368:	2b00      	cmp	r3, #0
 810236a:	d17a      	bne.n	8102462 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810236c:	4b2f      	ldr	r3, [pc, #188]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810236e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102370:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102374:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102378:	4053      	eors	r3, r2
 810237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810237e:	2b00      	cmp	r3, #0
 8102380:	d015      	beq.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102382:	4b2a      	ldr	r3, [pc, #168]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810238a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810238e:	4b27      	ldr	r3, [pc, #156]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102392:	4a26      	ldr	r2, [pc, #152]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102398:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810239a:	4b24      	ldr	r3, [pc, #144]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810239e:	4a23      	ldr	r2, [pc, #140]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81023a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81023a6:	4a21      	ldr	r2, [pc, #132]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81023a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 81023ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81023ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81023b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81023b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81023ba:	d118      	bne.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81023bc:	f7fe fe04 	bl	8100fc8 <HAL_GetTick>
 81023c0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81023c4:	e00d      	b.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81023c6:	f7fe fdff 	bl	8100fc8 <HAL_GetTick>
 81023ca:	4602      	mov	r2, r0
 81023cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 81023d0:	1ad2      	subs	r2, r2, r3
 81023d2:	f241 3388 	movw	r3, #5000	; 0x1388
 81023d6:	429a      	cmp	r2, r3
 81023d8:	d903      	bls.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81023da:	2303      	movs	r3, #3
 81023dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 81023e0:	e005      	b.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81023e2:	4b12      	ldr	r3, [pc, #72]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81023e6:	f003 0302 	and.w	r3, r3, #2
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	d0eb      	beq.n	81023c6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81023ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	d130      	bne.n	8102458 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81023f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81023fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102406:	d115      	bne.n	8102434 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8102408:	4b08      	ldr	r3, [pc, #32]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810240a:	691b      	ldr	r3, [r3, #16]
 810240c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8102410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102414:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102418:	091b      	lsrs	r3, r3, #4
 810241a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810241e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102422:	4a02      	ldr	r2, [pc, #8]	; (810242c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102424:	430b      	orrs	r3, r1
 8102426:	6113      	str	r3, [r2, #16]
 8102428:	e00a      	b.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810242a:	bf00      	nop
 810242c:	58024400 	.word	0x58024400
 8102430:	58024800 	.word	0x58024800
 8102434:	4bd4      	ldr	r3, [pc, #848]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102436:	691b      	ldr	r3, [r3, #16]
 8102438:	4ad3      	ldr	r2, [pc, #844]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810243a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810243e:	6113      	str	r3, [r2, #16]
 8102440:	4bd1      	ldr	r3, [pc, #836]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102442:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8102444:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102450:	4acd      	ldr	r2, [pc, #820]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102452:	430b      	orrs	r3, r1
 8102454:	6713      	str	r3, [r2, #112]	; 0x70
 8102456:	e008      	b.n	810246a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102458:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810245c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8102460:	e003      	b.n	810246a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102462:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102466:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810246a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102472:	f002 0301 	and.w	r3, r2, #1
 8102476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810247a:	2300      	movs	r3, #0
 810247c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8102480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8102484:	460b      	mov	r3, r1
 8102486:	4313      	orrs	r3, r2
 8102488:	f000 808b 	beq.w	81025a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810248c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102494:	2b28      	cmp	r3, #40	; 0x28
 8102496:	d86b      	bhi.n	8102570 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8102498:	a201      	add	r2, pc, #4	; (adr r2, 81024a0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810249e:	bf00      	nop
 81024a0:	08102579 	.word	0x08102579
 81024a4:	08102571 	.word	0x08102571
 81024a8:	08102571 	.word	0x08102571
 81024ac:	08102571 	.word	0x08102571
 81024b0:	08102571 	.word	0x08102571
 81024b4:	08102571 	.word	0x08102571
 81024b8:	08102571 	.word	0x08102571
 81024bc:	08102571 	.word	0x08102571
 81024c0:	08102545 	.word	0x08102545
 81024c4:	08102571 	.word	0x08102571
 81024c8:	08102571 	.word	0x08102571
 81024cc:	08102571 	.word	0x08102571
 81024d0:	08102571 	.word	0x08102571
 81024d4:	08102571 	.word	0x08102571
 81024d8:	08102571 	.word	0x08102571
 81024dc:	08102571 	.word	0x08102571
 81024e0:	0810255b 	.word	0x0810255b
 81024e4:	08102571 	.word	0x08102571
 81024e8:	08102571 	.word	0x08102571
 81024ec:	08102571 	.word	0x08102571
 81024f0:	08102571 	.word	0x08102571
 81024f4:	08102571 	.word	0x08102571
 81024f8:	08102571 	.word	0x08102571
 81024fc:	08102571 	.word	0x08102571
 8102500:	08102579 	.word	0x08102579
 8102504:	08102571 	.word	0x08102571
 8102508:	08102571 	.word	0x08102571
 810250c:	08102571 	.word	0x08102571
 8102510:	08102571 	.word	0x08102571
 8102514:	08102571 	.word	0x08102571
 8102518:	08102571 	.word	0x08102571
 810251c:	08102571 	.word	0x08102571
 8102520:	08102579 	.word	0x08102579
 8102524:	08102571 	.word	0x08102571
 8102528:	08102571 	.word	0x08102571
 810252c:	08102571 	.word	0x08102571
 8102530:	08102571 	.word	0x08102571
 8102534:	08102571 	.word	0x08102571
 8102538:	08102571 	.word	0x08102571
 810253c:	08102571 	.word	0x08102571
 8102540:	08102579 	.word	0x08102579
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102548:	3308      	adds	r3, #8
 810254a:	2101      	movs	r1, #1
 810254c:	4618      	mov	r0, r3
 810254e:	f000 fd07 	bl	8102f60 <RCCEx_PLL2_Config>
 8102552:	4603      	mov	r3, r0
 8102554:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102558:	e00f      	b.n	810257a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810255a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810255e:	3328      	adds	r3, #40	; 0x28
 8102560:	2101      	movs	r1, #1
 8102562:	4618      	mov	r0, r3
 8102564:	f000 fdae 	bl	81030c4 <RCCEx_PLL3_Config>
 8102568:	4603      	mov	r3, r0
 810256a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810256e:	e004      	b.n	810257a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102570:	2301      	movs	r3, #1
 8102572:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102576:	e000      	b.n	810257a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8102578:	bf00      	nop
    }

    if (ret == HAL_OK)
 810257a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810257e:	2b00      	cmp	r3, #0
 8102580:	d10b      	bne.n	810259a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102582:	4b81      	ldr	r3, [pc, #516]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102586:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810258a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810258e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102592:	4a7d      	ldr	r2, [pc, #500]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102594:	430b      	orrs	r3, r1
 8102596:	6553      	str	r3, [r2, #84]	; 0x54
 8102598:	e003      	b.n	81025a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810259a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810259e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81025a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025aa:	f002 0302 	and.w	r3, r2, #2
 81025ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81025b2:	2300      	movs	r3, #0
 81025b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81025b8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81025bc:	460b      	mov	r3, r1
 81025be:	4313      	orrs	r3, r2
 81025c0:	d042      	beq.n	8102648 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81025c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81025c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81025c8:	2b05      	cmp	r3, #5
 81025ca:	d825      	bhi.n	8102618 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81025cc:	a201      	add	r2, pc, #4	; (adr r2, 81025d4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81025d2:	bf00      	nop
 81025d4:	08102621 	.word	0x08102621
 81025d8:	081025ed 	.word	0x081025ed
 81025dc:	08102603 	.word	0x08102603
 81025e0:	08102621 	.word	0x08102621
 81025e4:	08102621 	.word	0x08102621
 81025e8:	08102621 	.word	0x08102621
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81025ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81025f0:	3308      	adds	r3, #8
 81025f2:	2101      	movs	r1, #1
 81025f4:	4618      	mov	r0, r3
 81025f6:	f000 fcb3 	bl	8102f60 <RCCEx_PLL2_Config>
 81025fa:	4603      	mov	r3, r0
 81025fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102600:	e00f      	b.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102606:	3328      	adds	r3, #40	; 0x28
 8102608:	2101      	movs	r1, #1
 810260a:	4618      	mov	r0, r3
 810260c:	f000 fd5a 	bl	81030c4 <RCCEx_PLL3_Config>
 8102610:	4603      	mov	r3, r0
 8102612:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102616:	e004      	b.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102618:	2301      	movs	r3, #1
 810261a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810261e:	e000      	b.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8102620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102622:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102626:	2b00      	cmp	r3, #0
 8102628:	d10a      	bne.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810262a:	4b57      	ldr	r3, [pc, #348]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810262e:	f023 0107 	bic.w	r1, r3, #7
 8102632:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102638:	4a53      	ldr	r2, [pc, #332]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810263a:	430b      	orrs	r3, r1
 810263c:	6553      	str	r3, [r2, #84]	; 0x54
 810263e:	e003      	b.n	8102648 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102640:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102644:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102650:	f002 0304 	and.w	r3, r2, #4
 8102654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8102658:	2300      	movs	r3, #0
 810265a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810265e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8102662:	460b      	mov	r3, r1
 8102664:	4313      	orrs	r3, r2
 8102666:	d044      	beq.n	81026f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810266c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102670:	2b05      	cmp	r3, #5
 8102672:	d825      	bhi.n	81026c0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8102674:	a201      	add	r2, pc, #4	; (adr r2, 810267c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8102676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810267a:	bf00      	nop
 810267c:	081026c9 	.word	0x081026c9
 8102680:	08102695 	.word	0x08102695
 8102684:	081026ab 	.word	0x081026ab
 8102688:	081026c9 	.word	0x081026c9
 810268c:	081026c9 	.word	0x081026c9
 8102690:	081026c9 	.word	0x081026c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102698:	3308      	adds	r3, #8
 810269a:	2101      	movs	r1, #1
 810269c:	4618      	mov	r0, r3
 810269e:	f000 fc5f 	bl	8102f60 <RCCEx_PLL2_Config>
 81026a2:	4603      	mov	r3, r0
 81026a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81026a8:	e00f      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81026aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81026ae:	3328      	adds	r3, #40	; 0x28
 81026b0:	2101      	movs	r1, #1
 81026b2:	4618      	mov	r0, r3
 81026b4:	f000 fd06 	bl	81030c4 <RCCEx_PLL3_Config>
 81026b8:	4603      	mov	r3, r0
 81026ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81026be:	e004      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026c0:	2301      	movs	r3, #1
 81026c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81026c6:	e000      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81026c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d10b      	bne.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81026d2:	4b2d      	ldr	r3, [pc, #180]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81026d6:	f023 0107 	bic.w	r1, r3, #7
 81026da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81026de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81026e2:	4a29      	ldr	r2, [pc, #164]	; (8102788 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81026e4:	430b      	orrs	r3, r1
 81026e6:	6593      	str	r3, [r2, #88]	; 0x58
 81026e8:	e003      	b.n	81026f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81026ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81026f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026fa:	f002 0320 	and.w	r3, r2, #32
 81026fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8102702:	2300      	movs	r3, #0
 8102704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8102708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 810270c:	460b      	mov	r3, r1
 810270e:	4313      	orrs	r3, r2
 8102710:	d057      	beq.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810271e:	d035      	beq.n	810278c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8102720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102724:	d82c      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810272a:	d031      	beq.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102730:	d826      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102732:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102736:	d02d      	beq.n	8102794 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8102738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810273c:	d820      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810273e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102742:	d012      	beq.n	810276a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8102744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102748:	d81a      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810274a:	2b00      	cmp	r3, #0
 810274c:	d024      	beq.n	8102798 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810274e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102752:	d115      	bne.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102758:	3308      	adds	r3, #8
 810275a:	2100      	movs	r1, #0
 810275c:	4618      	mov	r0, r3
 810275e:	f000 fbff 	bl	8102f60 <RCCEx_PLL2_Config>
 8102762:	4603      	mov	r3, r0
 8102764:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102768:	e017      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810276a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810276e:	3328      	adds	r3, #40	; 0x28
 8102770:	2102      	movs	r1, #2
 8102772:	4618      	mov	r0, r3
 8102774:	f000 fca6 	bl	81030c4 <RCCEx_PLL3_Config>
 8102778:	4603      	mov	r3, r0
 810277a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810277e:	e00c      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102780:	2301      	movs	r3, #1
 8102782:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102786:	e008      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8102788:	58024400 	.word	0x58024400
        break;
 810278c:	bf00      	nop
 810278e:	e004      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102790:	bf00      	nop
 8102792:	e002      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102794:	bf00      	nop
 8102796:	e000      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102798:	bf00      	nop
    }

    if (ret == HAL_OK)
 810279a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d10b      	bne.n	81027ba <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81027a2:	4bc2      	ldr	r3, [pc, #776]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81027aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81027b2:	4abe      	ldr	r2, [pc, #760]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81027b4:	430b      	orrs	r3, r1
 81027b6:	6553      	str	r3, [r2, #84]	; 0x54
 81027b8:	e003      	b.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81027be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81027c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 81027ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81027d2:	2300      	movs	r3, #0
 81027d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81027d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81027dc:	460b      	mov	r3, r1
 81027de:	4313      	orrs	r3, r2
 81027e0:	d055      	beq.n	810288e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81027e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81027ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81027ee:	d033      	beq.n	8102858 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 81027f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81027f4:	d82c      	bhi.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81027fa:	d02f      	beq.n	810285c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 81027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102800:	d826      	bhi.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102806:	d02b      	beq.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8102808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810280c:	d820      	bhi.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810280e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102812:	d012      	beq.n	810283a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8102814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102818:	d81a      	bhi.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810281a:	2b00      	cmp	r3, #0
 810281c:	d022      	beq.n	8102864 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102822:	d115      	bne.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102828:	3308      	adds	r3, #8
 810282a:	2100      	movs	r1, #0
 810282c:	4618      	mov	r0, r3
 810282e:	f000 fb97 	bl	8102f60 <RCCEx_PLL2_Config>
 8102832:	4603      	mov	r3, r0
 8102834:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102838:	e015      	b.n	8102866 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810283a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810283e:	3328      	adds	r3, #40	; 0x28
 8102840:	2102      	movs	r1, #2
 8102842:	4618      	mov	r0, r3
 8102844:	f000 fc3e 	bl	81030c4 <RCCEx_PLL3_Config>
 8102848:	4603      	mov	r3, r0
 810284a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810284e:	e00a      	b.n	8102866 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102850:	2301      	movs	r3, #1
 8102852:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102856:	e006      	b.n	8102866 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102858:	bf00      	nop
 810285a:	e004      	b.n	8102866 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810285c:	bf00      	nop
 810285e:	e002      	b.n	8102866 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102860:	bf00      	nop
 8102862:	e000      	b.n	8102866 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102866:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810286a:	2b00      	cmp	r3, #0
 810286c:	d10b      	bne.n	8102886 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810286e:	4b8f      	ldr	r3, [pc, #572]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102872:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8102876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810287a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810287e:	4a8b      	ldr	r2, [pc, #556]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102880:	430b      	orrs	r3, r1
 8102882:	6593      	str	r3, [r2, #88]	; 0x58
 8102884:	e003      	b.n	810288e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102886:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810288a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810288e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102896:	f002 0380 	and.w	r3, r2, #128	; 0x80
 810289a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 810289e:	2300      	movs	r3, #0
 81028a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81028a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81028a8:	460b      	mov	r3, r1
 81028aa:	4313      	orrs	r3, r2
 81028ac:	d055      	beq.n	810295a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81028ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81028b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81028b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81028ba:	d033      	beq.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81028bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81028c0:	d82c      	bhi.n	810291c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81028c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81028c6:	d02f      	beq.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81028c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81028cc:	d826      	bhi.n	810291c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81028ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81028d2:	d02b      	beq.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81028d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81028d8:	d820      	bhi.n	810291c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81028da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81028de:	d012      	beq.n	8102906 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81028e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81028e4:	d81a      	bhi.n	810291c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	d022      	beq.n	8102930 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81028ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81028ee:	d115      	bne.n	810291c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81028f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81028f4:	3308      	adds	r3, #8
 81028f6:	2100      	movs	r1, #0
 81028f8:	4618      	mov	r0, r3
 81028fa:	f000 fb31 	bl	8102f60 <RCCEx_PLL2_Config>
 81028fe:	4603      	mov	r3, r0
 8102900:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102904:	e015      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810290a:	3328      	adds	r3, #40	; 0x28
 810290c:	2102      	movs	r1, #2
 810290e:	4618      	mov	r0, r3
 8102910:	f000 fbd8 	bl	81030c4 <RCCEx_PLL3_Config>
 8102914:	4603      	mov	r3, r0
 8102916:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810291a:	e00a      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810291c:	2301      	movs	r3, #1
 810291e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102922:	e006      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102924:	bf00      	nop
 8102926:	e004      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102928:	bf00      	nop
 810292a:	e002      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810292c:	bf00      	nop
 810292e:	e000      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102932:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102936:	2b00      	cmp	r3, #0
 8102938:	d10b      	bne.n	8102952 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810293a:	4b5c      	ldr	r3, [pc, #368]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810293e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8102942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810294a:	4a58      	ldr	r2, [pc, #352]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810294c:	430b      	orrs	r3, r1
 810294e:	6593      	str	r3, [r2, #88]	; 0x58
 8102950:	e003      	b.n	810295a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102952:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102956:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810295a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810295e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102962:	f002 0308 	and.w	r3, r2, #8
 8102966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810296a:	2300      	movs	r3, #0
 810296c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8102970:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8102974:	460b      	mov	r3, r1
 8102976:	4313      	orrs	r3, r2
 8102978:	d01e      	beq.n	81029b8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810297a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102986:	d10c      	bne.n	81029a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810298c:	3328      	adds	r3, #40	; 0x28
 810298e:	2102      	movs	r1, #2
 8102990:	4618      	mov	r0, r3
 8102992:	f000 fb97 	bl	81030c4 <RCCEx_PLL3_Config>
 8102996:	4603      	mov	r3, r0
 8102998:	2b00      	cmp	r3, #0
 810299a:	d002      	beq.n	81029a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810299c:	2301      	movs	r3, #1
 810299e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81029a2:	4b42      	ldr	r3, [pc, #264]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81029aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81029b2:	4a3e      	ldr	r2, [pc, #248]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81029b4:	430b      	orrs	r3, r1
 81029b6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81029b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029c0:	f002 0310 	and.w	r3, r2, #16
 81029c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81029c8:	2300      	movs	r3, #0
 81029ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81029ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81029d2:	460b      	mov	r3, r1
 81029d4:	4313      	orrs	r3, r2
 81029d6:	d01e      	beq.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81029d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81029e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81029e4:	d10c      	bne.n	8102a00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81029e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029ea:	3328      	adds	r3, #40	; 0x28
 81029ec:	2102      	movs	r1, #2
 81029ee:	4618      	mov	r0, r3
 81029f0:	f000 fb68 	bl	81030c4 <RCCEx_PLL3_Config>
 81029f4:	4603      	mov	r3, r0
 81029f6:	2b00      	cmp	r3, #0
 81029f8:	d002      	beq.n	8102a00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 81029fa:	2301      	movs	r3, #1
 81029fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102a00:	4b2a      	ldr	r3, [pc, #168]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8102a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102a10:	4a26      	ldr	r2, [pc, #152]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102a12:	430b      	orrs	r3, r1
 8102a14:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a1e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8102a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8102a26:	2300      	movs	r3, #0
 8102a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8102a2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8102a30:	460b      	mov	r3, r1
 8102a32:	4313      	orrs	r3, r2
 8102a34:	d040      	beq.n	8102ab8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102a42:	d022      	beq.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8102a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102a48:	d81b      	bhi.n	8102a82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d003      	beq.n	8102a56 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8102a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102a52:	d00b      	beq.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8102a54:	e015      	b.n	8102a82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a5a:	3308      	adds	r3, #8
 8102a5c:	2100      	movs	r1, #0
 8102a5e:	4618      	mov	r0, r3
 8102a60:	f000 fa7e 	bl	8102f60 <RCCEx_PLL2_Config>
 8102a64:	4603      	mov	r3, r0
 8102a66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a6a:	e00f      	b.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a70:	3328      	adds	r3, #40	; 0x28
 8102a72:	2102      	movs	r1, #2
 8102a74:	4618      	mov	r0, r3
 8102a76:	f000 fb25 	bl	81030c4 <RCCEx_PLL3_Config>
 8102a7a:	4603      	mov	r3, r0
 8102a7c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a80:	e004      	b.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a82:	2301      	movs	r3, #1
 8102a84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102a88:	e000      	b.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8102a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102a90:	2b00      	cmp	r3, #0
 8102a92:	d10d      	bne.n	8102ab0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102a94:	4b05      	ldr	r3, [pc, #20]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a98:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8102a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102aa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102aa4:	4a01      	ldr	r2, [pc, #4]	; (8102aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102aa6:	430b      	orrs	r3, r1
 8102aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8102aaa:	e005      	b.n	8102ab8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8102aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102ab4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ac0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8102ac4:	67bb      	str	r3, [r7, #120]	; 0x78
 8102ac6:	2300      	movs	r3, #0
 8102ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8102aca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8102ace:	460b      	mov	r3, r1
 8102ad0:	4313      	orrs	r3, r2
 8102ad2:	d03b      	beq.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ae0:	d01f      	beq.n	8102b22 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8102ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ae6:	d818      	bhi.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8102ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102aec:	d003      	beq.n	8102af6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8102aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102af2:	d007      	beq.n	8102b04 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8102af4:	e011      	b.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102af6:	4b64      	ldr	r3, [pc, #400]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102afa:	4a63      	ldr	r2, [pc, #396]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102b02:	e00f      	b.n	8102b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102b08:	3328      	adds	r3, #40	; 0x28
 8102b0a:	2101      	movs	r1, #1
 8102b0c:	4618      	mov	r0, r3
 8102b0e:	f000 fad9 	bl	81030c4 <RCCEx_PLL3_Config>
 8102b12:	4603      	mov	r3, r0
 8102b14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8102b18:	e004      	b.n	8102b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b1a:	2301      	movs	r3, #1
 8102b1c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102b20:	e000      	b.n	8102b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8102b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102b28:	2b00      	cmp	r3, #0
 8102b2a:	d10b      	bne.n	8102b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102b2c:	4b56      	ldr	r3, [pc, #344]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b30:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8102b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102b3c:	4a52      	ldr	r2, [pc, #328]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102b3e:	430b      	orrs	r3, r1
 8102b40:	6553      	str	r3, [r2, #84]	; 0x54
 8102b42:	e003      	b.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102b48:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102b4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b54:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8102b58:	673b      	str	r3, [r7, #112]	; 0x70
 8102b5a:	2300      	movs	r3, #0
 8102b5c:	677b      	str	r3, [r7, #116]	; 0x74
 8102b5e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8102b62:	460b      	mov	r3, r1
 8102b64:	4313      	orrs	r3, r2
 8102b66:	d031      	beq.n	8102bcc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b6e:	2b00      	cmp	r3, #0
 8102b70:	d003      	beq.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8102b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102b76:	d007      	beq.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8102b78:	e011      	b.n	8102b9e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b7a:	4b43      	ldr	r3, [pc, #268]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b7e:	4a42      	ldr	r2, [pc, #264]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b86:	e00e      	b.n	8102ba6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102b8c:	3308      	adds	r3, #8
 8102b8e:	2102      	movs	r1, #2
 8102b90:	4618      	mov	r0, r3
 8102b92:	f000 f9e5 	bl	8102f60 <RCCEx_PLL2_Config>
 8102b96:	4603      	mov	r3, r0
 8102b98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b9c:	e003      	b.n	8102ba6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8102b9e:	2301      	movs	r3, #1
 8102ba0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ba6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	d10a      	bne.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102bae:	4b36      	ldr	r3, [pc, #216]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102bb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8102bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bbc:	4a32      	ldr	r2, [pc, #200]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102bbe:	430b      	orrs	r3, r1
 8102bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8102bc2:	e003      	b.n	8102bcc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102bc8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bd4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8102bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8102bda:	2300      	movs	r3, #0
 8102bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8102bde:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8102be2:	460b      	mov	r3, r1
 8102be4:	4313      	orrs	r3, r2
 8102be6:	d00c      	beq.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102bec:	3328      	adds	r3, #40	; 0x28
 8102bee:	2102      	movs	r1, #2
 8102bf0:	4618      	mov	r0, r3
 8102bf2:	f000 fa67 	bl	81030c4 <RCCEx_PLL3_Config>
 8102bf6:	4603      	mov	r3, r0
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d002      	beq.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8102bfc:	2301      	movs	r3, #1
 8102bfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8102c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8102c10:	2300      	movs	r3, #0
 8102c12:	667b      	str	r3, [r7, #100]	; 0x64
 8102c14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8102c18:	460b      	mov	r3, r1
 8102c1a:	4313      	orrs	r3, r2
 8102c1c:	d03a      	beq.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102c2a:	d018      	beq.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8102c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102c30:	d811      	bhi.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102c36:	d014      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8102c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102c3c:	d80b      	bhi.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102c3e:	2b00      	cmp	r3, #0
 8102c40:	d011      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8102c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102c46:	d106      	bne.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c48:	4b0f      	ldr	r3, [pc, #60]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c4c:	4a0e      	ldr	r2, [pc, #56]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102c54:	e008      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c56:	2301      	movs	r3, #1
 8102c58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102c5c:	e004      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102c5e:	bf00      	nop
 8102c60:	e002      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102c62:	bf00      	nop
 8102c64:	e000      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c68:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102c6c:	2b00      	cmp	r3, #0
 8102c6e:	d10d      	bne.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102c70:	4b05      	ldr	r3, [pc, #20]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8102c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102c80:	4a01      	ldr	r2, [pc, #4]	; (8102c88 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102c82:	430b      	orrs	r3, r1
 8102c84:	6553      	str	r3, [r2, #84]	; 0x54
 8102c86:	e005      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8102c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102c90:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8102ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8102ca2:	2300      	movs	r3, #0
 8102ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8102ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8102caa:	460b      	mov	r3, r1
 8102cac:	4313      	orrs	r3, r2
 8102cae:	d009      	beq.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102cb0:	4baa      	ldr	r3, [pc, #680]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102cb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8102cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102cbe:	4aa7      	ldr	r2, [pc, #668]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102cc0:	430b      	orrs	r3, r1
 8102cc2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ccc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8102cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8102cd2:	2300      	movs	r3, #0
 8102cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8102cd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8102cda:	460b      	mov	r3, r1
 8102cdc:	4313      	orrs	r3, r2
 8102cde:	d00a      	beq.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102ce0:	4b9e      	ldr	r3, [pc, #632]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102ce2:	691b      	ldr	r3, [r3, #16]
 8102ce4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8102ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102cec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8102cf0:	4a9a      	ldr	r2, [pc, #616]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102cf2:	430b      	orrs	r3, r1
 8102cf4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8102d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8102d04:	2300      	movs	r3, #0
 8102d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102d08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8102d0c:	460b      	mov	r3, r1
 8102d0e:	4313      	orrs	r3, r2
 8102d10:	d009      	beq.n	8102d26 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102d12:	4b92      	ldr	r3, [pc, #584]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8102d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102d20:	4a8e      	ldr	r2, [pc, #568]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d22:	430b      	orrs	r3, r1
 8102d24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8102d32:	643b      	str	r3, [r7, #64]	; 0x40
 8102d34:	2300      	movs	r3, #0
 8102d36:	647b      	str	r3, [r7, #68]	; 0x44
 8102d38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8102d3c:	460b      	mov	r3, r1
 8102d3e:	4313      	orrs	r3, r2
 8102d40:	d00e      	beq.n	8102d60 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102d42:	4b86      	ldr	r3, [pc, #536]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d44:	691b      	ldr	r3, [r3, #16]
 8102d46:	4a85      	ldr	r2, [pc, #532]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102d4c:	6113      	str	r3, [r2, #16]
 8102d4e:	4b83      	ldr	r3, [pc, #524]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d50:	6919      	ldr	r1, [r3, #16]
 8102d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102d56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102d5a:	4a80      	ldr	r2, [pc, #512]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d5c:	430b      	orrs	r3, r1
 8102d5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8102d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8102d6e:	2300      	movs	r3, #0
 8102d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102d72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8102d76:	460b      	mov	r3, r1
 8102d78:	4313      	orrs	r3, r2
 8102d7a:	d009      	beq.n	8102d90 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102d7c:	4b77      	ldr	r3, [pc, #476]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102d80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8102d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d8a:	4a74      	ldr	r2, [pc, #464]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102d8c:	430b      	orrs	r3, r1
 8102d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8102d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8102d9e:	2300      	movs	r3, #0
 8102da0:	637b      	str	r3, [r7, #52]	; 0x34
 8102da2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8102da6:	460b      	mov	r3, r1
 8102da8:	4313      	orrs	r3, r2
 8102daa:	d00a      	beq.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102dac:	4b6b      	ldr	r3, [pc, #428]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102db0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8102db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102dbc:	4a67      	ldr	r2, [pc, #412]	; (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102dbe:	430b      	orrs	r3, r1
 8102dc0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8102dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dca:	2100      	movs	r1, #0
 8102dcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8102dce:	f003 0301 	and.w	r3, r3, #1
 8102dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102dd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8102dd8:	460b      	mov	r3, r1
 8102dda:	4313      	orrs	r3, r2
 8102ddc:	d011      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102de2:	3308      	adds	r3, #8
 8102de4:	2100      	movs	r1, #0
 8102de6:	4618      	mov	r0, r3
 8102de8:	f000 f8ba 	bl	8102f60 <RCCEx_PLL2_Config>
 8102dec:	4603      	mov	r3, r0
 8102dee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102df2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102df6:	2b00      	cmp	r3, #0
 8102df8:	d003      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102dfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e0a:	2100      	movs	r1, #0
 8102e0c:	6239      	str	r1, [r7, #32]
 8102e0e:	f003 0302 	and.w	r3, r3, #2
 8102e12:	627b      	str	r3, [r7, #36]	; 0x24
 8102e14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102e18:	460b      	mov	r3, r1
 8102e1a:	4313      	orrs	r3, r2
 8102e1c:	d011      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e22:	3308      	adds	r3, #8
 8102e24:	2101      	movs	r1, #1
 8102e26:	4618      	mov	r0, r3
 8102e28:	f000 f89a 	bl	8102f60 <RCCEx_PLL2_Config>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102e32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102e36:	2b00      	cmp	r3, #0
 8102e38:	d003      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102e3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e4a:	2100      	movs	r1, #0
 8102e4c:	61b9      	str	r1, [r7, #24]
 8102e4e:	f003 0304 	and.w	r3, r3, #4
 8102e52:	61fb      	str	r3, [r7, #28]
 8102e54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102e58:	460b      	mov	r3, r1
 8102e5a:	4313      	orrs	r3, r2
 8102e5c:	d011      	beq.n	8102e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e62:	3308      	adds	r3, #8
 8102e64:	2102      	movs	r1, #2
 8102e66:	4618      	mov	r0, r3
 8102e68:	f000 f87a 	bl	8102f60 <RCCEx_PLL2_Config>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102e72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102e76:	2b00      	cmp	r3, #0
 8102e78:	d003      	beq.n	8102e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102e7e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e8a:	2100      	movs	r1, #0
 8102e8c:	6139      	str	r1, [r7, #16]
 8102e8e:	f003 0308 	and.w	r3, r3, #8
 8102e92:	617b      	str	r3, [r7, #20]
 8102e94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102e98:	460b      	mov	r3, r1
 8102e9a:	4313      	orrs	r3, r2
 8102e9c:	d011      	beq.n	8102ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102ea2:	3328      	adds	r3, #40	; 0x28
 8102ea4:	2100      	movs	r1, #0
 8102ea6:	4618      	mov	r0, r3
 8102ea8:	f000 f90c 	bl	81030c4 <RCCEx_PLL3_Config>
 8102eac:	4603      	mov	r3, r0
 8102eae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8102eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d003      	beq.n	8102ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102ebe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102eca:	2100      	movs	r1, #0
 8102ecc:	60b9      	str	r1, [r7, #8]
 8102ece:	f003 0310 	and.w	r3, r3, #16
 8102ed2:	60fb      	str	r3, [r7, #12]
 8102ed4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102ed8:	460b      	mov	r3, r1
 8102eda:	4313      	orrs	r3, r2
 8102edc:	d011      	beq.n	8102f02 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102ee2:	3328      	adds	r3, #40	; 0x28
 8102ee4:	2101      	movs	r1, #1
 8102ee6:	4618      	mov	r0, r3
 8102ee8:	f000 f8ec 	bl	81030c4 <RCCEx_PLL3_Config>
 8102eec:	4603      	mov	r3, r0
 8102eee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d003      	beq.n	8102f02 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102efa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102efe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f0a:	2100      	movs	r1, #0
 8102f0c:	6039      	str	r1, [r7, #0]
 8102f0e:	f003 0320 	and.w	r3, r3, #32
 8102f12:	607b      	str	r3, [r7, #4]
 8102f14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102f18:	460b      	mov	r3, r1
 8102f1a:	4313      	orrs	r3, r2
 8102f1c:	d011      	beq.n	8102f42 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f22:	3328      	adds	r3, #40	; 0x28
 8102f24:	2102      	movs	r1, #2
 8102f26:	4618      	mov	r0, r3
 8102f28:	f000 f8cc 	bl	81030c4 <RCCEx_PLL3_Config>
 8102f2c:	4603      	mov	r3, r0
 8102f2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102f32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102f36:	2b00      	cmp	r3, #0
 8102f38:	d003      	beq.n	8102f42 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102f3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8102f42:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8102f46:	2b00      	cmp	r3, #0
 8102f48:	d101      	bne.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8102f4a:	2300      	movs	r3, #0
 8102f4c:	e000      	b.n	8102f50 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8102f4e:	2301      	movs	r3, #1
}
 8102f50:	4618      	mov	r0, r3
 8102f52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8102f56:	46bd      	mov	sp, r7
 8102f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102f5c:	58024400 	.word	0x58024400

08102f60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102f60:	b580      	push	{r7, lr}
 8102f62:	b084      	sub	sp, #16
 8102f64:	af00      	add	r7, sp, #0
 8102f66:	6078      	str	r0, [r7, #4]
 8102f68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102f6a:	2300      	movs	r3, #0
 8102f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102f6e:	4b54      	ldr	r3, [pc, #336]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f72:	f003 0303 	and.w	r3, r3, #3
 8102f76:	2b03      	cmp	r3, #3
 8102f78:	d101      	bne.n	8102f7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102f7a:	2301      	movs	r3, #1
 8102f7c:	e09b      	b.n	81030b6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102f7e:	4b50      	ldr	r3, [pc, #320]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a4f      	ldr	r2, [pc, #316]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f8a:	f7fe f81d 	bl	8100fc8 <HAL_GetTick>
 8102f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f90:	e008      	b.n	8102fa4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102f92:	f7fe f819 	bl	8100fc8 <HAL_GetTick>
 8102f96:	4602      	mov	r2, r0
 8102f98:	68bb      	ldr	r3, [r7, #8]
 8102f9a:	1ad3      	subs	r3, r2, r3
 8102f9c:	2b02      	cmp	r3, #2
 8102f9e:	d901      	bls.n	8102fa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102fa0:	2303      	movs	r3, #3
 8102fa2:	e088      	b.n	81030b6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102fa4:	4b46      	ldr	r3, [pc, #280]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102fac:	2b00      	cmp	r3, #0
 8102fae:	d1f0      	bne.n	8102f92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102fb0:	4b43      	ldr	r3, [pc, #268]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	031b      	lsls	r3, r3, #12
 8102fbe:	4940      	ldr	r1, [pc, #256]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102fc0:	4313      	orrs	r3, r2
 8102fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	685b      	ldr	r3, [r3, #4]
 8102fc8:	3b01      	subs	r3, #1
 8102fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	689b      	ldr	r3, [r3, #8]
 8102fd2:	3b01      	subs	r3, #1
 8102fd4:	025b      	lsls	r3, r3, #9
 8102fd6:	b29b      	uxth	r3, r3
 8102fd8:	431a      	orrs	r2, r3
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	68db      	ldr	r3, [r3, #12]
 8102fde:	3b01      	subs	r3, #1
 8102fe0:	041b      	lsls	r3, r3, #16
 8102fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102fe6:	431a      	orrs	r2, r3
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	691b      	ldr	r3, [r3, #16]
 8102fec:	3b01      	subs	r3, #1
 8102fee:	061b      	lsls	r3, r3, #24
 8102ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102ff4:	4932      	ldr	r1, [pc, #200]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102ff6:	4313      	orrs	r3, r2
 8102ff8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102ffa:	4b31      	ldr	r3, [pc, #196]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8102ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	695b      	ldr	r3, [r3, #20]
 8103006:	492e      	ldr	r1, [pc, #184]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103008:	4313      	orrs	r3, r2
 810300a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810300c:	4b2c      	ldr	r3, [pc, #176]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103010:	f023 0220 	bic.w	r2, r3, #32
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	699b      	ldr	r3, [r3, #24]
 8103018:	4929      	ldr	r1, [pc, #164]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810301a:	4313      	orrs	r3, r2
 810301c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810301e:	4b28      	ldr	r3, [pc, #160]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103022:	4a27      	ldr	r2, [pc, #156]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103024:	f023 0310 	bic.w	r3, r3, #16
 8103028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810302a:	4b25      	ldr	r3, [pc, #148]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103032:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103036:	687a      	ldr	r2, [r7, #4]
 8103038:	69d2      	ldr	r2, [r2, #28]
 810303a:	00d2      	lsls	r2, r2, #3
 810303c:	4920      	ldr	r1, [pc, #128]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810303e:	4313      	orrs	r3, r2
 8103040:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103042:	4b1f      	ldr	r3, [pc, #124]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103046:	4a1e      	ldr	r2, [pc, #120]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103048:	f043 0310 	orr.w	r3, r3, #16
 810304c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810304e:	683b      	ldr	r3, [r7, #0]
 8103050:	2b00      	cmp	r3, #0
 8103052:	d106      	bne.n	8103062 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103054:	4b1a      	ldr	r3, [pc, #104]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103058:	4a19      	ldr	r2, [pc, #100]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810305a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810305e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103060:	e00f      	b.n	8103082 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103062:	683b      	ldr	r3, [r7, #0]
 8103064:	2b01      	cmp	r3, #1
 8103066:	d106      	bne.n	8103076 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103068:	4b15      	ldr	r3, [pc, #84]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810306c:	4a14      	ldr	r2, [pc, #80]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810306e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103074:	e005      	b.n	8103082 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103076:	4b12      	ldr	r3, [pc, #72]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810307a:	4a11      	ldr	r2, [pc, #68]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 810307c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103082:	4b0f      	ldr	r3, [pc, #60]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4a0e      	ldr	r2, [pc, #56]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 8103088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810308c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810308e:	f7fd ff9b 	bl	8100fc8 <HAL_GetTick>
 8103092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103094:	e008      	b.n	81030a8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103096:	f7fd ff97 	bl	8100fc8 <HAL_GetTick>
 810309a:	4602      	mov	r2, r0
 810309c:	68bb      	ldr	r3, [r7, #8]
 810309e:	1ad3      	subs	r3, r2, r3
 81030a0:	2b02      	cmp	r3, #2
 81030a2:	d901      	bls.n	81030a8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81030a4:	2303      	movs	r3, #3
 81030a6:	e006      	b.n	81030b6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81030a8:	4b05      	ldr	r3, [pc, #20]	; (81030c0 <RCCEx_PLL2_Config+0x160>)
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	d0f0      	beq.n	8103096 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 81030b6:	4618      	mov	r0, r3
 81030b8:	3710      	adds	r7, #16
 81030ba:	46bd      	mov	sp, r7
 81030bc:	bd80      	pop	{r7, pc}
 81030be:	bf00      	nop
 81030c0:	58024400 	.word	0x58024400

081030c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81030c4:	b580      	push	{r7, lr}
 81030c6:	b084      	sub	sp, #16
 81030c8:	af00      	add	r7, sp, #0
 81030ca:	6078      	str	r0, [r7, #4]
 81030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81030ce:	2300      	movs	r3, #0
 81030d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81030d2:	4b54      	ldr	r3, [pc, #336]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030d6:	f003 0303 	and.w	r3, r3, #3
 81030da:	2b03      	cmp	r3, #3
 81030dc:	d101      	bne.n	81030e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81030de:	2301      	movs	r3, #1
 81030e0:	e09b      	b.n	810321a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81030e2:	4b50      	ldr	r3, [pc, #320]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	4a4f      	ldr	r2, [pc, #316]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81030e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81030ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81030ee:	f7fd ff6b 	bl	8100fc8 <HAL_GetTick>
 81030f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81030f4:	e008      	b.n	8103108 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81030f6:	f7fd ff67 	bl	8100fc8 <HAL_GetTick>
 81030fa:	4602      	mov	r2, r0
 81030fc:	68bb      	ldr	r3, [r7, #8]
 81030fe:	1ad3      	subs	r3, r2, r3
 8103100:	2b02      	cmp	r3, #2
 8103102:	d901      	bls.n	8103108 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103104:	2303      	movs	r3, #3
 8103106:	e088      	b.n	810321a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103108:	4b46      	ldr	r3, [pc, #280]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103110:	2b00      	cmp	r3, #0
 8103112:	d1f0      	bne.n	81030f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103114:	4b43      	ldr	r3, [pc, #268]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103118:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	051b      	lsls	r3, r3, #20
 8103122:	4940      	ldr	r1, [pc, #256]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103124:	4313      	orrs	r3, r2
 8103126:	628b      	str	r3, [r1, #40]	; 0x28
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	685b      	ldr	r3, [r3, #4]
 810312c:	3b01      	subs	r3, #1
 810312e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	689b      	ldr	r3, [r3, #8]
 8103136:	3b01      	subs	r3, #1
 8103138:	025b      	lsls	r3, r3, #9
 810313a:	b29b      	uxth	r3, r3
 810313c:	431a      	orrs	r2, r3
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	68db      	ldr	r3, [r3, #12]
 8103142:	3b01      	subs	r3, #1
 8103144:	041b      	lsls	r3, r3, #16
 8103146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810314a:	431a      	orrs	r2, r3
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	691b      	ldr	r3, [r3, #16]
 8103150:	3b01      	subs	r3, #1
 8103152:	061b      	lsls	r3, r3, #24
 8103154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103158:	4932      	ldr	r1, [pc, #200]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 810315a:	4313      	orrs	r3, r2
 810315c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810315e:	4b31      	ldr	r3, [pc, #196]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	695b      	ldr	r3, [r3, #20]
 810316a:	492e      	ldr	r1, [pc, #184]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 810316c:	4313      	orrs	r3, r2
 810316e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103170:	4b2c      	ldr	r3, [pc, #176]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	699b      	ldr	r3, [r3, #24]
 810317c:	4929      	ldr	r1, [pc, #164]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 810317e:	4313      	orrs	r3, r2
 8103180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103182:	4b28      	ldr	r3, [pc, #160]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103186:	4a27      	ldr	r2, [pc, #156]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810318c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810318e:	4b25      	ldr	r3, [pc, #148]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 8103190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103196:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810319a:	687a      	ldr	r2, [r7, #4]
 810319c:	69d2      	ldr	r2, [r2, #28]
 810319e:	00d2      	lsls	r2, r2, #3
 81031a0:	4920      	ldr	r1, [pc, #128]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031a2:	4313      	orrs	r3, r2
 81031a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81031a6:	4b1f      	ldr	r3, [pc, #124]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031aa:	4a1e      	ldr	r2, [pc, #120]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81031b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81031b2:	683b      	ldr	r3, [r7, #0]
 81031b4:	2b00      	cmp	r3, #0
 81031b6:	d106      	bne.n	81031c6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81031b8:	4b1a      	ldr	r3, [pc, #104]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031bc:	4a19      	ldr	r2, [pc, #100]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81031c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81031c4:	e00f      	b.n	81031e6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81031c6:	683b      	ldr	r3, [r7, #0]
 81031c8:	2b01      	cmp	r3, #1
 81031ca:	d106      	bne.n	81031da <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81031cc:	4b15      	ldr	r3, [pc, #84]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031d0:	4a14      	ldr	r2, [pc, #80]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81031d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81031d8:	e005      	b.n	81031e6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81031da:	4b12      	ldr	r3, [pc, #72]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031de:	4a11      	ldr	r2, [pc, #68]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81031e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81031e6:	4b0f      	ldr	r3, [pc, #60]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	4a0e      	ldr	r2, [pc, #56]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 81031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81031f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81031f2:	f7fd fee9 	bl	8100fc8 <HAL_GetTick>
 81031f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81031f8:	e008      	b.n	810320c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81031fa:	f7fd fee5 	bl	8100fc8 <HAL_GetTick>
 81031fe:	4602      	mov	r2, r0
 8103200:	68bb      	ldr	r3, [r7, #8]
 8103202:	1ad3      	subs	r3, r2, r3
 8103204:	2b02      	cmp	r3, #2
 8103206:	d901      	bls.n	810320c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103208:	2303      	movs	r3, #3
 810320a:	e006      	b.n	810321a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810320c:	4b05      	ldr	r3, [pc, #20]	; (8103224 <RCCEx_PLL3_Config+0x160>)
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103214:	2b00      	cmp	r3, #0
 8103216:	d0f0      	beq.n	81031fa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103218:	7bfb      	ldrb	r3, [r7, #15]
}
 810321a:	4618      	mov	r0, r3
 810321c:	3710      	adds	r7, #16
 810321e:	46bd      	mov	sp, r7
 8103220:	bd80      	pop	{r7, pc}
 8103222:	bf00      	nop
 8103224:	58024400 	.word	0x58024400

08103228 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8103228:	b580      	push	{r7, lr}
 810322a:	b084      	sub	sp, #16
 810322c:	af00      	add	r7, sp, #0
 810322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8103230:	2301      	movs	r3, #1
 8103232:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	2b00      	cmp	r3, #0
 8103238:	d073      	beq.n	8103322 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8103240:	b2db      	uxtb	r3, r3
 8103242:	2b00      	cmp	r3, #0
 8103244:	d106      	bne.n	8103254 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	2200      	movs	r2, #0
 810324a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810324e:	6878      	ldr	r0, [r7, #4]
 8103250:	f7fd fc08 	bl	8100a64 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	2202      	movs	r2, #2
 8103258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	68db      	ldr	r3, [r3, #12]
 8103262:	f003 0310 	and.w	r3, r3, #16
 8103266:	2b10      	cmp	r3, #16
 8103268:	d052      	beq.n	8103310 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	22ca      	movs	r2, #202	; 0xca
 8103270:	625a      	str	r2, [r3, #36]	; 0x24
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	2253      	movs	r2, #83	; 0x53
 8103278:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 810327a:	6878      	ldr	r0, [r7, #4]
 810327c:	f000 f87a 	bl	8103374 <RTC_EnterInitMode>
 8103280:	4603      	mov	r3, r0
 8103282:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8103284:	7bfb      	ldrb	r3, [r7, #15]
 8103286:	2b00      	cmp	r3, #0
 8103288:	d126      	bne.n	81032d8 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	689b      	ldr	r3, [r3, #8]
 8103290:	687a      	ldr	r2, [r7, #4]
 8103292:	6812      	ldr	r2, [r2, #0]
 8103294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8103298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810329c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	6899      	ldr	r1, [r3, #8]
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	685a      	ldr	r2, [r3, #4]
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	691b      	ldr	r3, [r3, #16]
 81032ac:	431a      	orrs	r2, r3
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	699b      	ldr	r3, [r3, #24]
 81032b2:	431a      	orrs	r2, r3
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	430a      	orrs	r2, r1
 81032ba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	689b      	ldr	r3, [r3, #8]
 81032c0:	0419      	lsls	r1, r3, #16
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	68da      	ldr	r2, [r3, #12]
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	430a      	orrs	r2, r1
 81032cc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 81032ce:	6878      	ldr	r0, [r7, #4]
 81032d0:	f000 f884 	bl	81033dc <RTC_ExitInitMode>
 81032d4:	4603      	mov	r3, r0
 81032d6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81032d8:	7bfb      	ldrb	r3, [r7, #15]
 81032da:	2b00      	cmp	r3, #0
 81032dc:	d113      	bne.n	8103306 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	681b      	ldr	r3, [r3, #0]
 81032e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	f022 0203 	bic.w	r2, r2, #3
 81032ec:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	69da      	ldr	r2, [r3, #28]
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	695b      	ldr	r3, [r3, #20]
 81032fc:	431a      	orrs	r2, r3
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	430a      	orrs	r2, r1
 8103304:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	681b      	ldr	r3, [r3, #0]
 810330a:	22ff      	movs	r2, #255	; 0xff
 810330c:	625a      	str	r2, [r3, #36]	; 0x24
 810330e:	e001      	b.n	8103314 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8103310:	2300      	movs	r3, #0
 8103312:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8103314:	7bfb      	ldrb	r3, [r7, #15]
 8103316:	2b00      	cmp	r3, #0
 8103318:	d103      	bne.n	8103322 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	2201      	movs	r2, #1
 810331e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8103322:	7bfb      	ldrb	r3, [r7, #15]
}
 8103324:	4618      	mov	r0, r3
 8103326:	3710      	adds	r7, #16
 8103328:	46bd      	mov	sp, r7
 810332a:	bd80      	pop	{r7, pc}

0810332c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 810332c:	b580      	push	{r7, lr}
 810332e:	b084      	sub	sp, #16
 8103330:	af00      	add	r7, sp, #0
 8103332:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	4a0d      	ldr	r2, [pc, #52]	; (8103370 <HAL_RTC_WaitForSynchro+0x44>)
 810333a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 810333c:	f7fd fe44 	bl	8100fc8 <HAL_GetTick>
 8103340:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8103342:	e009      	b.n	8103358 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8103344:	f7fd fe40 	bl	8100fc8 <HAL_GetTick>
 8103348:	4602      	mov	r2, r0
 810334a:	68fb      	ldr	r3, [r7, #12]
 810334c:	1ad3      	subs	r3, r2, r3
 810334e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8103352:	d901      	bls.n	8103358 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8103354:	2303      	movs	r3, #3
 8103356:	e007      	b.n	8103368 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	68db      	ldr	r3, [r3, #12]
 810335e:	f003 0320 	and.w	r3, r3, #32
 8103362:	2b00      	cmp	r3, #0
 8103364:	d0ee      	beq.n	8103344 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8103366:	2300      	movs	r3, #0
}
 8103368:	4618      	mov	r0, r3
 810336a:	3710      	adds	r7, #16
 810336c:	46bd      	mov	sp, r7
 810336e:	bd80      	pop	{r7, pc}
 8103370:	0003ff5f 	.word	0x0003ff5f

08103374 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8103374:	b580      	push	{r7, lr}
 8103376:	b084      	sub	sp, #16
 8103378:	af00      	add	r7, sp, #0
 810337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810337c:	2300      	movs	r3, #0
 810337e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	68db      	ldr	r3, [r3, #12]
 8103386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810338a:	2b00      	cmp	r3, #0
 810338c:	d120      	bne.n	81033d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	f04f 32ff 	mov.w	r2, #4294967295
 8103396:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8103398:	f7fd fe16 	bl	8100fc8 <HAL_GetTick>
 810339c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810339e:	e00d      	b.n	81033bc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 81033a0:	f7fd fe12 	bl	8100fc8 <HAL_GetTick>
 81033a4:	4602      	mov	r2, r0
 81033a6:	68bb      	ldr	r3, [r7, #8]
 81033a8:	1ad3      	subs	r3, r2, r3
 81033aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81033ae:	d905      	bls.n	81033bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81033b0:	2303      	movs	r3, #3
 81033b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	2203      	movs	r2, #3
 81033b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	68db      	ldr	r3, [r3, #12]
 81033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81033c6:	2b00      	cmp	r3, #0
 81033c8:	d102      	bne.n	81033d0 <RTC_EnterInitMode+0x5c>
 81033ca:	7bfb      	ldrb	r3, [r7, #15]
 81033cc:	2b03      	cmp	r3, #3
 81033ce:	d1e7      	bne.n	81033a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 81033d2:	4618      	mov	r0, r3
 81033d4:	3710      	adds	r7, #16
 81033d6:	46bd      	mov	sp, r7
 81033d8:	bd80      	pop	{r7, pc}
	...

081033dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81033dc:	b580      	push	{r7, lr}
 81033de:	b084      	sub	sp, #16
 81033e0:	af00      	add	r7, sp, #0
 81033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81033e4:	2300      	movs	r3, #0
 81033e6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 81033e8:	4b1a      	ldr	r3, [pc, #104]	; (8103454 <RTC_ExitInitMode+0x78>)
 81033ea:	68db      	ldr	r3, [r3, #12]
 81033ec:	4a19      	ldr	r2, [pc, #100]	; (8103454 <RTC_ExitInitMode+0x78>)
 81033ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81033f2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81033f4:	4b17      	ldr	r3, [pc, #92]	; (8103454 <RTC_ExitInitMode+0x78>)
 81033f6:	689b      	ldr	r3, [r3, #8]
 81033f8:	f003 0320 	and.w	r3, r3, #32
 81033fc:	2b00      	cmp	r3, #0
 81033fe:	d10c      	bne.n	810341a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8103400:	6878      	ldr	r0, [r7, #4]
 8103402:	f7ff ff93 	bl	810332c <HAL_RTC_WaitForSynchro>
 8103406:	4603      	mov	r3, r0
 8103408:	2b00      	cmp	r3, #0
 810340a:	d01e      	beq.n	810344a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	2203      	movs	r2, #3
 8103410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8103414:	2303      	movs	r3, #3
 8103416:	73fb      	strb	r3, [r7, #15]
 8103418:	e017      	b.n	810344a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810341a:	4b0e      	ldr	r3, [pc, #56]	; (8103454 <RTC_ExitInitMode+0x78>)
 810341c:	689b      	ldr	r3, [r3, #8]
 810341e:	4a0d      	ldr	r2, [pc, #52]	; (8103454 <RTC_ExitInitMode+0x78>)
 8103420:	f023 0320 	bic.w	r3, r3, #32
 8103424:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8103426:	6878      	ldr	r0, [r7, #4]
 8103428:	f7ff ff80 	bl	810332c <HAL_RTC_WaitForSynchro>
 810342c:	4603      	mov	r3, r0
 810342e:	2b00      	cmp	r3, #0
 8103430:	d005      	beq.n	810343e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	2203      	movs	r2, #3
 8103436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810343a:	2303      	movs	r3, #3
 810343c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810343e:	4b05      	ldr	r3, [pc, #20]	; (8103454 <RTC_ExitInitMode+0x78>)
 8103440:	689b      	ldr	r3, [r3, #8]
 8103442:	4a04      	ldr	r2, [pc, #16]	; (8103454 <RTC_ExitInitMode+0x78>)
 8103444:	f043 0320 	orr.w	r3, r3, #32
 8103448:	6093      	str	r3, [r2, #8]
  }

  return status;
 810344a:	7bfb      	ldrb	r3, [r7, #15]
}
 810344c:	4618      	mov	r0, r3
 810344e:	3710      	adds	r7, #16
 8103450:	46bd      	mov	sp, r7
 8103452:	bd80      	pop	{r7, pc}
 8103454:	58004000 	.word	0x58004000

08103458 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8103458:	b580      	push	{r7, lr}
 810345a:	b082      	sub	sp, #8
 810345c:	af00      	add	r7, sp, #0
 810345e:	6078      	str	r0, [r7, #4]
 8103460:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	2b00      	cmp	r3, #0
 8103466:	d101      	bne.n	810346c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8103468:	2301      	movs	r3, #1
 810346a:	e02b      	b.n	81034c4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8103472:	b2db      	uxtb	r3, r3
 8103474:	2b00      	cmp	r3, #0
 8103476:	d106      	bne.n	8103486 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	2200      	movs	r2, #0
 810347c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8103480:	6878      	ldr	r0, [r7, #4]
 8103482:	f7fd fc9b 	bl	8100dbc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	2202      	movs	r2, #2
 810348a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681a      	ldr	r2, [r3, #0]
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	3304      	adds	r3, #4
 8103496:	4619      	mov	r1, r3
 8103498:	4610      	mov	r0, r2
 810349a:	f000 ffe5 	bl	8104468 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	6818      	ldr	r0, [r3, #0]
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	685b      	ldr	r3, [r3, #4]
 81034a6:	461a      	mov	r2, r3
 81034a8:	6839      	ldr	r1, [r7, #0]
 81034aa:	f001 f83a 	bl	8104522 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 81034ae:	4b07      	ldr	r3, [pc, #28]	; (81034cc <HAL_SDRAM_Init+0x74>)
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a06      	ldr	r2, [pc, #24]	; (81034cc <HAL_SDRAM_Init+0x74>)
 81034b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81034b8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	2201      	movs	r2, #1
 81034be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 81034c2:	2300      	movs	r3, #0
}
 81034c4:	4618      	mov	r0, r3
 81034c6:	3708      	adds	r7, #8
 81034c8:	46bd      	mov	sp, r7
 81034ca:	bd80      	pop	{r7, pc}
 81034cc:	52004000 	.word	0x52004000

081034d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81034d0:	b580      	push	{r7, lr}
 81034d2:	b082      	sub	sp, #8
 81034d4:	af00      	add	r7, sp, #0
 81034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d101      	bne.n	81034e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81034de:	2301      	movs	r3, #1
 81034e0:	e049      	b.n	8103576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81034e8:	b2db      	uxtb	r3, r3
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d106      	bne.n	81034fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	2200      	movs	r2, #0
 81034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81034f6:	6878      	ldr	r0, [r7, #4]
 81034f8:	f7fd fb08 	bl	8100b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	2202      	movs	r2, #2
 8103500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681a      	ldr	r2, [r3, #0]
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	3304      	adds	r3, #4
 810350c:	4619      	mov	r1, r3
 810350e:	4610      	mov	r0, r2
 8103510:	f000 fa04 	bl	810391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	2201      	movs	r2, #1
 8103518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	2201      	movs	r2, #1
 8103520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	2201      	movs	r2, #1
 8103528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	2201      	movs	r2, #1
 8103530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	2201      	movs	r2, #1
 8103538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	2201      	movs	r2, #1
 8103540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	2201      	movs	r2, #1
 8103548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	2201      	movs	r2, #1
 8103550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	2201      	movs	r2, #1
 8103558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	2201      	movs	r2, #1
 8103560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	2201      	movs	r2, #1
 8103568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	2201      	movs	r2, #1
 8103570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103574:	2300      	movs	r3, #0
}
 8103576:	4618      	mov	r0, r3
 8103578:	3708      	adds	r7, #8
 810357a:	46bd      	mov	sp, r7
 810357c:	bd80      	pop	{r7, pc}

0810357e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 810357e:	b580      	push	{r7, lr}
 8103580:	b082      	sub	sp, #8
 8103582:	af00      	add	r7, sp, #0
 8103584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	2b00      	cmp	r3, #0
 810358a:	d101      	bne.n	8103590 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 810358c:	2301      	movs	r3, #1
 810358e:	e049      	b.n	8103624 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103596:	b2db      	uxtb	r3, r3
 8103598:	2b00      	cmp	r3, #0
 810359a:	d106      	bne.n	81035aa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	2200      	movs	r2, #0
 81035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 81035a4:	6878      	ldr	r0, [r7, #4]
 81035a6:	f7fd fa8f 	bl	8100ac8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	2202      	movs	r2, #2
 81035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	681a      	ldr	r2, [r3, #0]
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	3304      	adds	r3, #4
 81035ba:	4619      	mov	r1, r3
 81035bc:	4610      	mov	r0, r2
 81035be:	f000 f9ad 	bl	810391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	2201      	movs	r2, #1
 81035c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	2201      	movs	r2, #1
 81035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	2201      	movs	r2, #1
 81035d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	2201      	movs	r2, #1
 81035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	2201      	movs	r2, #1
 81035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	2201      	movs	r2, #1
 81035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	2201      	movs	r2, #1
 81035f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	2201      	movs	r2, #1
 81035fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	2201      	movs	r2, #1
 8103606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	2201      	movs	r2, #1
 810360e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	2201      	movs	r2, #1
 8103616:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	2201      	movs	r2, #1
 810361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103622:	2300      	movs	r3, #0
}
 8103624:	4618      	mov	r0, r3
 8103626:	3708      	adds	r7, #8
 8103628:	46bd      	mov	sp, r7
 810362a:	bd80      	pop	{r7, pc}

0810362c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810362c:	b580      	push	{r7, lr}
 810362e:	b082      	sub	sp, #8
 8103630:	af00      	add	r7, sp, #0
 8103632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	2b00      	cmp	r3, #0
 8103638:	d101      	bne.n	810363e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810363a:	2301      	movs	r3, #1
 810363c:	e049      	b.n	81036d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103644:	b2db      	uxtb	r3, r3
 8103646:	2b00      	cmp	r3, #0
 8103648:	d106      	bne.n	8103658 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	2200      	movs	r2, #0
 810364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8103652:	6878      	ldr	r0, [r7, #4]
 8103654:	f000 f841 	bl	81036da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	2202      	movs	r2, #2
 810365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	681a      	ldr	r2, [r3, #0]
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	3304      	adds	r3, #4
 8103668:	4619      	mov	r1, r3
 810366a:	4610      	mov	r0, r2
 810366c:	f000 f956 	bl	810391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	2201      	movs	r2, #1
 8103674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	2201      	movs	r2, #1
 810367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	2201      	movs	r2, #1
 8103684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	2201      	movs	r2, #1
 810368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	2201      	movs	r2, #1
 8103694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	2201      	movs	r2, #1
 810369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	2201      	movs	r2, #1
 81036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	2201      	movs	r2, #1
 81036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	2201      	movs	r2, #1
 81036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	2201      	movs	r2, #1
 81036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	2201      	movs	r2, #1
 81036c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	2201      	movs	r2, #1
 81036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81036d0:	2300      	movs	r3, #0
}
 81036d2:	4618      	mov	r0, r3
 81036d4:	3708      	adds	r7, #8
 81036d6:	46bd      	mov	sp, r7
 81036d8:	bd80      	pop	{r7, pc}

081036da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 81036da:	b480      	push	{r7}
 81036dc:	b083      	sub	sp, #12
 81036de:	af00      	add	r7, sp, #0
 81036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 81036e2:	bf00      	nop
 81036e4:	370c      	adds	r7, #12
 81036e6:	46bd      	mov	sp, r7
 81036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ec:	4770      	bx	lr
	...

081036f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 81036f0:	b580      	push	{r7, lr}
 81036f2:	b086      	sub	sp, #24
 81036f4:	af00      	add	r7, sp, #0
 81036f6:	60f8      	str	r0, [r7, #12]
 81036f8:	60b9      	str	r1, [r7, #8]
 81036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81036fc:	2300      	movs	r3, #0
 81036fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8103700:	68fb      	ldr	r3, [r7, #12]
 8103702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103706:	2b01      	cmp	r3, #1
 8103708:	d101      	bne.n	810370e <HAL_TIM_OC_ConfigChannel+0x1e>
 810370a:	2302      	movs	r3, #2
 810370c:	e066      	b.n	81037dc <HAL_TIM_OC_ConfigChannel+0xec>
 810370e:	68fb      	ldr	r3, [r7, #12]
 8103710:	2201      	movs	r2, #1
 8103712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	2b14      	cmp	r3, #20
 810371a:	d857      	bhi.n	81037cc <HAL_TIM_OC_ConfigChannel+0xdc>
 810371c:	a201      	add	r2, pc, #4	; (adr r2, 8103724 <HAL_TIM_OC_ConfigChannel+0x34>)
 810371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103722:	bf00      	nop
 8103724:	08103779 	.word	0x08103779
 8103728:	081037cd 	.word	0x081037cd
 810372c:	081037cd 	.word	0x081037cd
 8103730:	081037cd 	.word	0x081037cd
 8103734:	08103787 	.word	0x08103787
 8103738:	081037cd 	.word	0x081037cd
 810373c:	081037cd 	.word	0x081037cd
 8103740:	081037cd 	.word	0x081037cd
 8103744:	08103795 	.word	0x08103795
 8103748:	081037cd 	.word	0x081037cd
 810374c:	081037cd 	.word	0x081037cd
 8103750:	081037cd 	.word	0x081037cd
 8103754:	081037a3 	.word	0x081037a3
 8103758:	081037cd 	.word	0x081037cd
 810375c:	081037cd 	.word	0x081037cd
 8103760:	081037cd 	.word	0x081037cd
 8103764:	081037b1 	.word	0x081037b1
 8103768:	081037cd 	.word	0x081037cd
 810376c:	081037cd 	.word	0x081037cd
 8103770:	081037cd 	.word	0x081037cd
 8103774:	081037bf 	.word	0x081037bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8103778:	68fb      	ldr	r3, [r7, #12]
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	68b9      	ldr	r1, [r7, #8]
 810377e:	4618      	mov	r0, r3
 8103780:	f000 f966 	bl	8103a50 <TIM_OC1_SetConfig>
      break;
 8103784:	e025      	b.n	81037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8103786:	68fb      	ldr	r3, [r7, #12]
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	68b9      	ldr	r1, [r7, #8]
 810378c:	4618      	mov	r0, r3
 810378e:	f000 f9ef 	bl	8103b70 <TIM_OC2_SetConfig>
      break;
 8103792:	e01e      	b.n	81037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8103794:	68fb      	ldr	r3, [r7, #12]
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	68b9      	ldr	r1, [r7, #8]
 810379a:	4618      	mov	r0, r3
 810379c:	f000 fa72 	bl	8103c84 <TIM_OC3_SetConfig>
      break;
 81037a0:	e017      	b.n	81037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81037a2:	68fb      	ldr	r3, [r7, #12]
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	68b9      	ldr	r1, [r7, #8]
 81037a8:	4618      	mov	r0, r3
 81037aa:	f000 faf3 	bl	8103d94 <TIM_OC4_SetConfig>
      break;
 81037ae:	e010      	b.n	81037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81037b0:	68fb      	ldr	r3, [r7, #12]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	68b9      	ldr	r1, [r7, #8]
 81037b6:	4618      	mov	r0, r3
 81037b8:	f000 fb56 	bl	8103e68 <TIM_OC5_SetConfig>
      break;
 81037bc:	e009      	b.n	81037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81037be:	68fb      	ldr	r3, [r7, #12]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	68b9      	ldr	r1, [r7, #8]
 81037c4:	4618      	mov	r0, r3
 81037c6:	f000 fbb3 	bl	8103f30 <TIM_OC6_SetConfig>
      break;
 81037ca:	e002      	b.n	81037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 81037cc:	2301      	movs	r3, #1
 81037ce:	75fb      	strb	r3, [r7, #23]
      break;
 81037d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81037d2:	68fb      	ldr	r3, [r7, #12]
 81037d4:	2200      	movs	r2, #0
 81037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81037da:	7dfb      	ldrb	r3, [r7, #23]
}
 81037dc:	4618      	mov	r0, r3
 81037de:	3718      	adds	r7, #24
 81037e0:	46bd      	mov	sp, r7
 81037e2:	bd80      	pop	{r7, pc}

081037e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 81037e4:	b580      	push	{r7, lr}
 81037e6:	b086      	sub	sp, #24
 81037e8:	af00      	add	r7, sp, #0
 81037ea:	60f8      	str	r0, [r7, #12]
 81037ec:	60b9      	str	r1, [r7, #8]
 81037ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81037f0:	2300      	movs	r3, #0
 81037f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 81037f4:	68fb      	ldr	r3, [r7, #12]
 81037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81037fa:	2b01      	cmp	r3, #1
 81037fc:	d101      	bne.n	8103802 <HAL_TIM_IC_ConfigChannel+0x1e>
 81037fe:	2302      	movs	r3, #2
 8103800:	e088      	b.n	8103914 <HAL_TIM_IC_ConfigChannel+0x130>
 8103802:	68fb      	ldr	r3, [r7, #12]
 8103804:	2201      	movs	r2, #1
 8103806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	2b00      	cmp	r3, #0
 810380e:	d11b      	bne.n	8103848 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8103810:	68fb      	ldr	r3, [r7, #12]
 8103812:	6818      	ldr	r0, [r3, #0]
 8103814:	68bb      	ldr	r3, [r7, #8]
 8103816:	6819      	ldr	r1, [r3, #0]
 8103818:	68bb      	ldr	r3, [r7, #8]
 810381a:	685a      	ldr	r2, [r3, #4]
 810381c:	68bb      	ldr	r3, [r7, #8]
 810381e:	68db      	ldr	r3, [r3, #12]
 8103820:	f000 fbec 	bl	8103ffc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8103824:	68fb      	ldr	r3, [r7, #12]
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	699a      	ldr	r2, [r3, #24]
 810382a:	68fb      	ldr	r3, [r7, #12]
 810382c:	681b      	ldr	r3, [r3, #0]
 810382e:	f022 020c 	bic.w	r2, r2, #12
 8103832:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8103834:	68fb      	ldr	r3, [r7, #12]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	6999      	ldr	r1, [r3, #24]
 810383a:	68bb      	ldr	r3, [r7, #8]
 810383c:	689a      	ldr	r2, [r3, #8]
 810383e:	68fb      	ldr	r3, [r7, #12]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	430a      	orrs	r2, r1
 8103844:	619a      	str	r2, [r3, #24]
 8103846:	e060      	b.n	810390a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	2b04      	cmp	r3, #4
 810384c:	d11c      	bne.n	8103888 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 810384e:	68fb      	ldr	r3, [r7, #12]
 8103850:	6818      	ldr	r0, [r3, #0]
 8103852:	68bb      	ldr	r3, [r7, #8]
 8103854:	6819      	ldr	r1, [r3, #0]
 8103856:	68bb      	ldr	r3, [r7, #8]
 8103858:	685a      	ldr	r2, [r3, #4]
 810385a:	68bb      	ldr	r3, [r7, #8]
 810385c:	68db      	ldr	r3, [r3, #12]
 810385e:	f000 fc41 	bl	81040e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8103862:	68fb      	ldr	r3, [r7, #12]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	699a      	ldr	r2, [r3, #24]
 8103868:	68fb      	ldr	r3, [r7, #12]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8103870:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8103872:	68fb      	ldr	r3, [r7, #12]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	6999      	ldr	r1, [r3, #24]
 8103878:	68bb      	ldr	r3, [r7, #8]
 810387a:	689b      	ldr	r3, [r3, #8]
 810387c:	021a      	lsls	r2, r3, #8
 810387e:	68fb      	ldr	r3, [r7, #12]
 8103880:	681b      	ldr	r3, [r3, #0]
 8103882:	430a      	orrs	r2, r1
 8103884:	619a      	str	r2, [r3, #24]
 8103886:	e040      	b.n	810390a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	2b08      	cmp	r3, #8
 810388c:	d11b      	bne.n	81038c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 810388e:	68fb      	ldr	r3, [r7, #12]
 8103890:	6818      	ldr	r0, [r3, #0]
 8103892:	68bb      	ldr	r3, [r7, #8]
 8103894:	6819      	ldr	r1, [r3, #0]
 8103896:	68bb      	ldr	r3, [r7, #8]
 8103898:	685a      	ldr	r2, [r3, #4]
 810389a:	68bb      	ldr	r3, [r7, #8]
 810389c:	68db      	ldr	r3, [r3, #12]
 810389e:	f000 fc5e 	bl	810415e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 81038a2:	68fb      	ldr	r3, [r7, #12]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	69da      	ldr	r2, [r3, #28]
 81038a8:	68fb      	ldr	r3, [r7, #12]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	f022 020c 	bic.w	r2, r2, #12
 81038b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 81038b2:	68fb      	ldr	r3, [r7, #12]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	69d9      	ldr	r1, [r3, #28]
 81038b8:	68bb      	ldr	r3, [r7, #8]
 81038ba:	689a      	ldr	r2, [r3, #8]
 81038bc:	68fb      	ldr	r3, [r7, #12]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	430a      	orrs	r2, r1
 81038c2:	61da      	str	r2, [r3, #28]
 81038c4:	e021      	b.n	810390a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	2b0c      	cmp	r3, #12
 81038ca:	d11c      	bne.n	8103906 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 81038cc:	68fb      	ldr	r3, [r7, #12]
 81038ce:	6818      	ldr	r0, [r3, #0]
 81038d0:	68bb      	ldr	r3, [r7, #8]
 81038d2:	6819      	ldr	r1, [r3, #0]
 81038d4:	68bb      	ldr	r3, [r7, #8]
 81038d6:	685a      	ldr	r2, [r3, #4]
 81038d8:	68bb      	ldr	r3, [r7, #8]
 81038da:	68db      	ldr	r3, [r3, #12]
 81038dc:	f000 fc7b 	bl	81041d6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 81038e0:	68fb      	ldr	r3, [r7, #12]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	69da      	ldr	r2, [r3, #28]
 81038e6:	68fb      	ldr	r3, [r7, #12]
 81038e8:	681b      	ldr	r3, [r3, #0]
 81038ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 81038ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 81038f0:	68fb      	ldr	r3, [r7, #12]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	69d9      	ldr	r1, [r3, #28]
 81038f6:	68bb      	ldr	r3, [r7, #8]
 81038f8:	689b      	ldr	r3, [r3, #8]
 81038fa:	021a      	lsls	r2, r3, #8
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	430a      	orrs	r2, r1
 8103902:	61da      	str	r2, [r3, #28]
 8103904:	e001      	b.n	810390a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8103906:	2301      	movs	r3, #1
 8103908:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810390a:	68fb      	ldr	r3, [r7, #12]
 810390c:	2200      	movs	r2, #0
 810390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8103912:	7dfb      	ldrb	r3, [r7, #23]
}
 8103914:	4618      	mov	r0, r3
 8103916:	3718      	adds	r7, #24
 8103918:	46bd      	mov	sp, r7
 810391a:	bd80      	pop	{r7, pc}

0810391c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810391c:	b480      	push	{r7}
 810391e:	b085      	sub	sp, #20
 8103920:	af00      	add	r7, sp, #0
 8103922:	6078      	str	r0, [r7, #4]
 8103924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	4a40      	ldr	r2, [pc, #256]	; (8103a30 <TIM_Base_SetConfig+0x114>)
 8103930:	4293      	cmp	r3, r2
 8103932:	d013      	beq.n	810395c <TIM_Base_SetConfig+0x40>
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810393a:	d00f      	beq.n	810395c <TIM_Base_SetConfig+0x40>
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	4a3d      	ldr	r2, [pc, #244]	; (8103a34 <TIM_Base_SetConfig+0x118>)
 8103940:	4293      	cmp	r3, r2
 8103942:	d00b      	beq.n	810395c <TIM_Base_SetConfig+0x40>
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	4a3c      	ldr	r2, [pc, #240]	; (8103a38 <TIM_Base_SetConfig+0x11c>)
 8103948:	4293      	cmp	r3, r2
 810394a:	d007      	beq.n	810395c <TIM_Base_SetConfig+0x40>
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	4a3b      	ldr	r2, [pc, #236]	; (8103a3c <TIM_Base_SetConfig+0x120>)
 8103950:	4293      	cmp	r3, r2
 8103952:	d003      	beq.n	810395c <TIM_Base_SetConfig+0x40>
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	4a3a      	ldr	r2, [pc, #232]	; (8103a40 <TIM_Base_SetConfig+0x124>)
 8103958:	4293      	cmp	r3, r2
 810395a:	d108      	bne.n	810396e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810395c:	68fb      	ldr	r3, [r7, #12]
 810395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103964:	683b      	ldr	r3, [r7, #0]
 8103966:	685b      	ldr	r3, [r3, #4]
 8103968:	68fa      	ldr	r2, [r7, #12]
 810396a:	4313      	orrs	r3, r2
 810396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	4a2f      	ldr	r2, [pc, #188]	; (8103a30 <TIM_Base_SetConfig+0x114>)
 8103972:	4293      	cmp	r3, r2
 8103974:	d01f      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810397c:	d01b      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	4a2c      	ldr	r2, [pc, #176]	; (8103a34 <TIM_Base_SetConfig+0x118>)
 8103982:	4293      	cmp	r3, r2
 8103984:	d017      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	4a2b      	ldr	r2, [pc, #172]	; (8103a38 <TIM_Base_SetConfig+0x11c>)
 810398a:	4293      	cmp	r3, r2
 810398c:	d013      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	4a2a      	ldr	r2, [pc, #168]	; (8103a3c <TIM_Base_SetConfig+0x120>)
 8103992:	4293      	cmp	r3, r2
 8103994:	d00f      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	4a29      	ldr	r2, [pc, #164]	; (8103a40 <TIM_Base_SetConfig+0x124>)
 810399a:	4293      	cmp	r3, r2
 810399c:	d00b      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	4a28      	ldr	r2, [pc, #160]	; (8103a44 <TIM_Base_SetConfig+0x128>)
 81039a2:	4293      	cmp	r3, r2
 81039a4:	d007      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	4a27      	ldr	r2, [pc, #156]	; (8103a48 <TIM_Base_SetConfig+0x12c>)
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d003      	beq.n	81039b6 <TIM_Base_SetConfig+0x9a>
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	4a26      	ldr	r2, [pc, #152]	; (8103a4c <TIM_Base_SetConfig+0x130>)
 81039b2:	4293      	cmp	r3, r2
 81039b4:	d108      	bne.n	81039c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81039b6:	68fb      	ldr	r3, [r7, #12]
 81039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81039bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81039be:	683b      	ldr	r3, [r7, #0]
 81039c0:	68db      	ldr	r3, [r3, #12]
 81039c2:	68fa      	ldr	r2, [r7, #12]
 81039c4:	4313      	orrs	r3, r2
 81039c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81039c8:	68fb      	ldr	r3, [r7, #12]
 81039ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81039ce:	683b      	ldr	r3, [r7, #0]
 81039d0:	695b      	ldr	r3, [r3, #20]
 81039d2:	4313      	orrs	r3, r2
 81039d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	68fa      	ldr	r2, [r7, #12]
 81039da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81039dc:	683b      	ldr	r3, [r7, #0]
 81039de:	689a      	ldr	r2, [r3, #8]
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81039e4:	683b      	ldr	r3, [r7, #0]
 81039e6:	681a      	ldr	r2, [r3, #0]
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	4a10      	ldr	r2, [pc, #64]	; (8103a30 <TIM_Base_SetConfig+0x114>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d00f      	beq.n	8103a14 <TIM_Base_SetConfig+0xf8>
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	4a12      	ldr	r2, [pc, #72]	; (8103a40 <TIM_Base_SetConfig+0x124>)
 81039f8:	4293      	cmp	r3, r2
 81039fa:	d00b      	beq.n	8103a14 <TIM_Base_SetConfig+0xf8>
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	4a11      	ldr	r2, [pc, #68]	; (8103a44 <TIM_Base_SetConfig+0x128>)
 8103a00:	4293      	cmp	r3, r2
 8103a02:	d007      	beq.n	8103a14 <TIM_Base_SetConfig+0xf8>
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	4a10      	ldr	r2, [pc, #64]	; (8103a48 <TIM_Base_SetConfig+0x12c>)
 8103a08:	4293      	cmp	r3, r2
 8103a0a:	d003      	beq.n	8103a14 <TIM_Base_SetConfig+0xf8>
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	4a0f      	ldr	r2, [pc, #60]	; (8103a4c <TIM_Base_SetConfig+0x130>)
 8103a10:	4293      	cmp	r3, r2
 8103a12:	d103      	bne.n	8103a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103a14:	683b      	ldr	r3, [r7, #0]
 8103a16:	691a      	ldr	r2, [r3, #16]
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	2201      	movs	r2, #1
 8103a20:	615a      	str	r2, [r3, #20]
}
 8103a22:	bf00      	nop
 8103a24:	3714      	adds	r7, #20
 8103a26:	46bd      	mov	sp, r7
 8103a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a2c:	4770      	bx	lr
 8103a2e:	bf00      	nop
 8103a30:	40010000 	.word	0x40010000
 8103a34:	40000400 	.word	0x40000400
 8103a38:	40000800 	.word	0x40000800
 8103a3c:	40000c00 	.word	0x40000c00
 8103a40:	40010400 	.word	0x40010400
 8103a44:	40014000 	.word	0x40014000
 8103a48:	40014400 	.word	0x40014400
 8103a4c:	40014800 	.word	0x40014800

08103a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8103a50:	b480      	push	{r7}
 8103a52:	b087      	sub	sp, #28
 8103a54:	af00      	add	r7, sp, #0
 8103a56:	6078      	str	r0, [r7, #4]
 8103a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	6a1b      	ldr	r3, [r3, #32]
 8103a5e:	f023 0201 	bic.w	r2, r3, #1
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6a1b      	ldr	r3, [r3, #32]
 8103a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	685b      	ldr	r3, [r3, #4]
 8103a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	699b      	ldr	r3, [r3, #24]
 8103a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8103a78:	68fb      	ldr	r3, [r7, #12]
 8103a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8103a84:	68fb      	ldr	r3, [r7, #12]
 8103a86:	f023 0303 	bic.w	r3, r3, #3
 8103a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103a8c:	683b      	ldr	r3, [r7, #0]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	68fa      	ldr	r2, [r7, #12]
 8103a92:	4313      	orrs	r3, r2
 8103a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8103a96:	697b      	ldr	r3, [r7, #20]
 8103a98:	f023 0302 	bic.w	r3, r3, #2
 8103a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8103a9e:	683b      	ldr	r3, [r7, #0]
 8103aa0:	689b      	ldr	r3, [r3, #8]
 8103aa2:	697a      	ldr	r2, [r7, #20]
 8103aa4:	4313      	orrs	r3, r2
 8103aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	4a2c      	ldr	r2, [pc, #176]	; (8103b5c <TIM_OC1_SetConfig+0x10c>)
 8103aac:	4293      	cmp	r3, r2
 8103aae:	d00f      	beq.n	8103ad0 <TIM_OC1_SetConfig+0x80>
 8103ab0:	687b      	ldr	r3, [r7, #4]
 8103ab2:	4a2b      	ldr	r2, [pc, #172]	; (8103b60 <TIM_OC1_SetConfig+0x110>)
 8103ab4:	4293      	cmp	r3, r2
 8103ab6:	d00b      	beq.n	8103ad0 <TIM_OC1_SetConfig+0x80>
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	4a2a      	ldr	r2, [pc, #168]	; (8103b64 <TIM_OC1_SetConfig+0x114>)
 8103abc:	4293      	cmp	r3, r2
 8103abe:	d007      	beq.n	8103ad0 <TIM_OC1_SetConfig+0x80>
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	4a29      	ldr	r2, [pc, #164]	; (8103b68 <TIM_OC1_SetConfig+0x118>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d003      	beq.n	8103ad0 <TIM_OC1_SetConfig+0x80>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	4a28      	ldr	r2, [pc, #160]	; (8103b6c <TIM_OC1_SetConfig+0x11c>)
 8103acc:	4293      	cmp	r3, r2
 8103ace:	d10c      	bne.n	8103aea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8103ad0:	697b      	ldr	r3, [r7, #20]
 8103ad2:	f023 0308 	bic.w	r3, r3, #8
 8103ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8103ad8:	683b      	ldr	r3, [r7, #0]
 8103ada:	68db      	ldr	r3, [r3, #12]
 8103adc:	697a      	ldr	r2, [r7, #20]
 8103ade:	4313      	orrs	r3, r2
 8103ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8103ae2:	697b      	ldr	r3, [r7, #20]
 8103ae4:	f023 0304 	bic.w	r3, r3, #4
 8103ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	4a1b      	ldr	r2, [pc, #108]	; (8103b5c <TIM_OC1_SetConfig+0x10c>)
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d00f      	beq.n	8103b12 <TIM_OC1_SetConfig+0xc2>
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	4a1a      	ldr	r2, [pc, #104]	; (8103b60 <TIM_OC1_SetConfig+0x110>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d00b      	beq.n	8103b12 <TIM_OC1_SetConfig+0xc2>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	4a19      	ldr	r2, [pc, #100]	; (8103b64 <TIM_OC1_SetConfig+0x114>)
 8103afe:	4293      	cmp	r3, r2
 8103b00:	d007      	beq.n	8103b12 <TIM_OC1_SetConfig+0xc2>
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	4a18      	ldr	r2, [pc, #96]	; (8103b68 <TIM_OC1_SetConfig+0x118>)
 8103b06:	4293      	cmp	r3, r2
 8103b08:	d003      	beq.n	8103b12 <TIM_OC1_SetConfig+0xc2>
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	4a17      	ldr	r2, [pc, #92]	; (8103b6c <TIM_OC1_SetConfig+0x11c>)
 8103b0e:	4293      	cmp	r3, r2
 8103b10:	d111      	bne.n	8103b36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8103b12:	693b      	ldr	r3, [r7, #16]
 8103b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8103b1a:	693b      	ldr	r3, [r7, #16]
 8103b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8103b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8103b22:	683b      	ldr	r3, [r7, #0]
 8103b24:	695b      	ldr	r3, [r3, #20]
 8103b26:	693a      	ldr	r2, [r7, #16]
 8103b28:	4313      	orrs	r3, r2
 8103b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8103b2c:	683b      	ldr	r3, [r7, #0]
 8103b2e:	699b      	ldr	r3, [r3, #24]
 8103b30:	693a      	ldr	r2, [r7, #16]
 8103b32:	4313      	orrs	r3, r2
 8103b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	693a      	ldr	r2, [r7, #16]
 8103b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	68fa      	ldr	r2, [r7, #12]
 8103b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8103b42:	683b      	ldr	r3, [r7, #0]
 8103b44:	685a      	ldr	r2, [r3, #4]
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	697a      	ldr	r2, [r7, #20]
 8103b4e:	621a      	str	r2, [r3, #32]
}
 8103b50:	bf00      	nop
 8103b52:	371c      	adds	r7, #28
 8103b54:	46bd      	mov	sp, r7
 8103b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b5a:	4770      	bx	lr
 8103b5c:	40010000 	.word	0x40010000
 8103b60:	40010400 	.word	0x40010400
 8103b64:	40014000 	.word	0x40014000
 8103b68:	40014400 	.word	0x40014400
 8103b6c:	40014800 	.word	0x40014800

08103b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8103b70:	b480      	push	{r7}
 8103b72:	b087      	sub	sp, #28
 8103b74:	af00      	add	r7, sp, #0
 8103b76:	6078      	str	r0, [r7, #4]
 8103b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	6a1b      	ldr	r3, [r3, #32]
 8103b7e:	f023 0210 	bic.w	r2, r3, #16
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	6a1b      	ldr	r3, [r3, #32]
 8103b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	685b      	ldr	r3, [r3, #4]
 8103b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	699b      	ldr	r3, [r3, #24]
 8103b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8103ba4:	68fb      	ldr	r3, [r7, #12]
 8103ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103bac:	683b      	ldr	r3, [r7, #0]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	021b      	lsls	r3, r3, #8
 8103bb2:	68fa      	ldr	r2, [r7, #12]
 8103bb4:	4313      	orrs	r3, r2
 8103bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8103bb8:	697b      	ldr	r3, [r7, #20]
 8103bba:	f023 0320 	bic.w	r3, r3, #32
 8103bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8103bc0:	683b      	ldr	r3, [r7, #0]
 8103bc2:	689b      	ldr	r3, [r3, #8]
 8103bc4:	011b      	lsls	r3, r3, #4
 8103bc6:	697a      	ldr	r2, [r7, #20]
 8103bc8:	4313      	orrs	r3, r2
 8103bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	4a28      	ldr	r2, [pc, #160]	; (8103c70 <TIM_OC2_SetConfig+0x100>)
 8103bd0:	4293      	cmp	r3, r2
 8103bd2:	d003      	beq.n	8103bdc <TIM_OC2_SetConfig+0x6c>
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	4a27      	ldr	r2, [pc, #156]	; (8103c74 <TIM_OC2_SetConfig+0x104>)
 8103bd8:	4293      	cmp	r3, r2
 8103bda:	d10d      	bne.n	8103bf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8103bdc:	697b      	ldr	r3, [r7, #20]
 8103bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8103be4:	683b      	ldr	r3, [r7, #0]
 8103be6:	68db      	ldr	r3, [r3, #12]
 8103be8:	011b      	lsls	r3, r3, #4
 8103bea:	697a      	ldr	r2, [r7, #20]
 8103bec:	4313      	orrs	r3, r2
 8103bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8103bf0:	697b      	ldr	r3, [r7, #20]
 8103bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8103bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	4a1d      	ldr	r2, [pc, #116]	; (8103c70 <TIM_OC2_SetConfig+0x100>)
 8103bfc:	4293      	cmp	r3, r2
 8103bfe:	d00f      	beq.n	8103c20 <TIM_OC2_SetConfig+0xb0>
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	4a1c      	ldr	r2, [pc, #112]	; (8103c74 <TIM_OC2_SetConfig+0x104>)
 8103c04:	4293      	cmp	r3, r2
 8103c06:	d00b      	beq.n	8103c20 <TIM_OC2_SetConfig+0xb0>
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	4a1b      	ldr	r2, [pc, #108]	; (8103c78 <TIM_OC2_SetConfig+0x108>)
 8103c0c:	4293      	cmp	r3, r2
 8103c0e:	d007      	beq.n	8103c20 <TIM_OC2_SetConfig+0xb0>
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	4a1a      	ldr	r2, [pc, #104]	; (8103c7c <TIM_OC2_SetConfig+0x10c>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d003      	beq.n	8103c20 <TIM_OC2_SetConfig+0xb0>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	4a19      	ldr	r2, [pc, #100]	; (8103c80 <TIM_OC2_SetConfig+0x110>)
 8103c1c:	4293      	cmp	r3, r2
 8103c1e:	d113      	bne.n	8103c48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8103c20:	693b      	ldr	r3, [r7, #16]
 8103c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8103c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8103c28:	693b      	ldr	r3, [r7, #16]
 8103c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8103c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8103c30:	683b      	ldr	r3, [r7, #0]
 8103c32:	695b      	ldr	r3, [r3, #20]
 8103c34:	009b      	lsls	r3, r3, #2
 8103c36:	693a      	ldr	r2, [r7, #16]
 8103c38:	4313      	orrs	r3, r2
 8103c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8103c3c:	683b      	ldr	r3, [r7, #0]
 8103c3e:	699b      	ldr	r3, [r3, #24]
 8103c40:	009b      	lsls	r3, r3, #2
 8103c42:	693a      	ldr	r2, [r7, #16]
 8103c44:	4313      	orrs	r3, r2
 8103c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	693a      	ldr	r2, [r7, #16]
 8103c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	68fa      	ldr	r2, [r7, #12]
 8103c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8103c54:	683b      	ldr	r3, [r7, #0]
 8103c56:	685a      	ldr	r2, [r3, #4]
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	697a      	ldr	r2, [r7, #20]
 8103c60:	621a      	str	r2, [r3, #32]
}
 8103c62:	bf00      	nop
 8103c64:	371c      	adds	r7, #28
 8103c66:	46bd      	mov	sp, r7
 8103c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c6c:	4770      	bx	lr
 8103c6e:	bf00      	nop
 8103c70:	40010000 	.word	0x40010000
 8103c74:	40010400 	.word	0x40010400
 8103c78:	40014000 	.word	0x40014000
 8103c7c:	40014400 	.word	0x40014400
 8103c80:	40014800 	.word	0x40014800

08103c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8103c84:	b480      	push	{r7}
 8103c86:	b087      	sub	sp, #28
 8103c88:	af00      	add	r7, sp, #0
 8103c8a:	6078      	str	r0, [r7, #4]
 8103c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	6a1b      	ldr	r3, [r3, #32]
 8103c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	6a1b      	ldr	r3, [r3, #32]
 8103c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	685b      	ldr	r3, [r3, #4]
 8103ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	69db      	ldr	r3, [r3, #28]
 8103caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8103cac:	68fb      	ldr	r3, [r7, #12]
 8103cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	f023 0303 	bic.w	r3, r3, #3
 8103cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103cc0:	683b      	ldr	r3, [r7, #0]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	68fa      	ldr	r2, [r7, #12]
 8103cc6:	4313      	orrs	r3, r2
 8103cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8103cca:	697b      	ldr	r3, [r7, #20]
 8103ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8103cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8103cd2:	683b      	ldr	r3, [r7, #0]
 8103cd4:	689b      	ldr	r3, [r3, #8]
 8103cd6:	021b      	lsls	r3, r3, #8
 8103cd8:	697a      	ldr	r2, [r7, #20]
 8103cda:	4313      	orrs	r3, r2
 8103cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	4a27      	ldr	r2, [pc, #156]	; (8103d80 <TIM_OC3_SetConfig+0xfc>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d003      	beq.n	8103cee <TIM_OC3_SetConfig+0x6a>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	4a26      	ldr	r2, [pc, #152]	; (8103d84 <TIM_OC3_SetConfig+0x100>)
 8103cea:	4293      	cmp	r3, r2
 8103cec:	d10d      	bne.n	8103d0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8103cee:	697b      	ldr	r3, [r7, #20]
 8103cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8103cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8103cf6:	683b      	ldr	r3, [r7, #0]
 8103cf8:	68db      	ldr	r3, [r3, #12]
 8103cfa:	021b      	lsls	r3, r3, #8
 8103cfc:	697a      	ldr	r2, [r7, #20]
 8103cfe:	4313      	orrs	r3, r2
 8103d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8103d02:	697b      	ldr	r3, [r7, #20]
 8103d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8103d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	4a1c      	ldr	r2, [pc, #112]	; (8103d80 <TIM_OC3_SetConfig+0xfc>)
 8103d0e:	4293      	cmp	r3, r2
 8103d10:	d00f      	beq.n	8103d32 <TIM_OC3_SetConfig+0xae>
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	4a1b      	ldr	r2, [pc, #108]	; (8103d84 <TIM_OC3_SetConfig+0x100>)
 8103d16:	4293      	cmp	r3, r2
 8103d18:	d00b      	beq.n	8103d32 <TIM_OC3_SetConfig+0xae>
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	4a1a      	ldr	r2, [pc, #104]	; (8103d88 <TIM_OC3_SetConfig+0x104>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d007      	beq.n	8103d32 <TIM_OC3_SetConfig+0xae>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	4a19      	ldr	r2, [pc, #100]	; (8103d8c <TIM_OC3_SetConfig+0x108>)
 8103d26:	4293      	cmp	r3, r2
 8103d28:	d003      	beq.n	8103d32 <TIM_OC3_SetConfig+0xae>
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	4a18      	ldr	r2, [pc, #96]	; (8103d90 <TIM_OC3_SetConfig+0x10c>)
 8103d2e:	4293      	cmp	r3, r2
 8103d30:	d113      	bne.n	8103d5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8103d32:	693b      	ldr	r3, [r7, #16]
 8103d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8103d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8103d3a:	693b      	ldr	r3, [r7, #16]
 8103d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8103d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8103d42:	683b      	ldr	r3, [r7, #0]
 8103d44:	695b      	ldr	r3, [r3, #20]
 8103d46:	011b      	lsls	r3, r3, #4
 8103d48:	693a      	ldr	r2, [r7, #16]
 8103d4a:	4313      	orrs	r3, r2
 8103d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8103d4e:	683b      	ldr	r3, [r7, #0]
 8103d50:	699b      	ldr	r3, [r3, #24]
 8103d52:	011b      	lsls	r3, r3, #4
 8103d54:	693a      	ldr	r2, [r7, #16]
 8103d56:	4313      	orrs	r3, r2
 8103d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	693a      	ldr	r2, [r7, #16]
 8103d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	68fa      	ldr	r2, [r7, #12]
 8103d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8103d66:	683b      	ldr	r3, [r7, #0]
 8103d68:	685a      	ldr	r2, [r3, #4]
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	697a      	ldr	r2, [r7, #20]
 8103d72:	621a      	str	r2, [r3, #32]
}
 8103d74:	bf00      	nop
 8103d76:	371c      	adds	r7, #28
 8103d78:	46bd      	mov	sp, r7
 8103d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d7e:	4770      	bx	lr
 8103d80:	40010000 	.word	0x40010000
 8103d84:	40010400 	.word	0x40010400
 8103d88:	40014000 	.word	0x40014000
 8103d8c:	40014400 	.word	0x40014400
 8103d90:	40014800 	.word	0x40014800

08103d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8103d94:	b480      	push	{r7}
 8103d96:	b087      	sub	sp, #28
 8103d98:	af00      	add	r7, sp, #0
 8103d9a:	6078      	str	r0, [r7, #4]
 8103d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	6a1b      	ldr	r3, [r3, #32]
 8103da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	6a1b      	ldr	r3, [r3, #32]
 8103dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	685b      	ldr	r3, [r3, #4]
 8103db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	69db      	ldr	r3, [r3, #28]
 8103dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8103dc8:	68fb      	ldr	r3, [r7, #12]
 8103dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103dd0:	683b      	ldr	r3, [r7, #0]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	021b      	lsls	r3, r3, #8
 8103dd6:	68fa      	ldr	r2, [r7, #12]
 8103dd8:	4313      	orrs	r3, r2
 8103dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8103ddc:	693b      	ldr	r3, [r7, #16]
 8103dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8103de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8103de4:	683b      	ldr	r3, [r7, #0]
 8103de6:	689b      	ldr	r3, [r3, #8]
 8103de8:	031b      	lsls	r3, r3, #12
 8103dea:	693a      	ldr	r2, [r7, #16]
 8103dec:	4313      	orrs	r3, r2
 8103dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	4a18      	ldr	r2, [pc, #96]	; (8103e54 <TIM_OC4_SetConfig+0xc0>)
 8103df4:	4293      	cmp	r3, r2
 8103df6:	d00f      	beq.n	8103e18 <TIM_OC4_SetConfig+0x84>
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	4a17      	ldr	r2, [pc, #92]	; (8103e58 <TIM_OC4_SetConfig+0xc4>)
 8103dfc:	4293      	cmp	r3, r2
 8103dfe:	d00b      	beq.n	8103e18 <TIM_OC4_SetConfig+0x84>
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	4a16      	ldr	r2, [pc, #88]	; (8103e5c <TIM_OC4_SetConfig+0xc8>)
 8103e04:	4293      	cmp	r3, r2
 8103e06:	d007      	beq.n	8103e18 <TIM_OC4_SetConfig+0x84>
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	4a15      	ldr	r2, [pc, #84]	; (8103e60 <TIM_OC4_SetConfig+0xcc>)
 8103e0c:	4293      	cmp	r3, r2
 8103e0e:	d003      	beq.n	8103e18 <TIM_OC4_SetConfig+0x84>
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	4a14      	ldr	r2, [pc, #80]	; (8103e64 <TIM_OC4_SetConfig+0xd0>)
 8103e14:	4293      	cmp	r3, r2
 8103e16:	d109      	bne.n	8103e2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8103e18:	697b      	ldr	r3, [r7, #20]
 8103e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8103e20:	683b      	ldr	r3, [r7, #0]
 8103e22:	695b      	ldr	r3, [r3, #20]
 8103e24:	019b      	lsls	r3, r3, #6
 8103e26:	697a      	ldr	r2, [r7, #20]
 8103e28:	4313      	orrs	r3, r2
 8103e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	697a      	ldr	r2, [r7, #20]
 8103e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	68fa      	ldr	r2, [r7, #12]
 8103e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8103e38:	683b      	ldr	r3, [r7, #0]
 8103e3a:	685a      	ldr	r2, [r3, #4]
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	693a      	ldr	r2, [r7, #16]
 8103e44:	621a      	str	r2, [r3, #32]
}
 8103e46:	bf00      	nop
 8103e48:	371c      	adds	r7, #28
 8103e4a:	46bd      	mov	sp, r7
 8103e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e50:	4770      	bx	lr
 8103e52:	bf00      	nop
 8103e54:	40010000 	.word	0x40010000
 8103e58:	40010400 	.word	0x40010400
 8103e5c:	40014000 	.word	0x40014000
 8103e60:	40014400 	.word	0x40014400
 8103e64:	40014800 	.word	0x40014800

08103e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8103e68:	b480      	push	{r7}
 8103e6a:	b087      	sub	sp, #28
 8103e6c:	af00      	add	r7, sp, #0
 8103e6e:	6078      	str	r0, [r7, #4]
 8103e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	6a1b      	ldr	r3, [r3, #32]
 8103e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	6a1b      	ldr	r3, [r3, #32]
 8103e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	685b      	ldr	r3, [r3, #4]
 8103e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103e9c:	683b      	ldr	r3, [r7, #0]
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	68fa      	ldr	r2, [r7, #12]
 8103ea2:	4313      	orrs	r3, r2
 8103ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8103ea6:	693b      	ldr	r3, [r7, #16]
 8103ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8103eae:	683b      	ldr	r3, [r7, #0]
 8103eb0:	689b      	ldr	r3, [r3, #8]
 8103eb2:	041b      	lsls	r3, r3, #16
 8103eb4:	693a      	ldr	r2, [r7, #16]
 8103eb6:	4313      	orrs	r3, r2
 8103eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	4a17      	ldr	r2, [pc, #92]	; (8103f1c <TIM_OC5_SetConfig+0xb4>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d00f      	beq.n	8103ee2 <TIM_OC5_SetConfig+0x7a>
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	4a16      	ldr	r2, [pc, #88]	; (8103f20 <TIM_OC5_SetConfig+0xb8>)
 8103ec6:	4293      	cmp	r3, r2
 8103ec8:	d00b      	beq.n	8103ee2 <TIM_OC5_SetConfig+0x7a>
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	4a15      	ldr	r2, [pc, #84]	; (8103f24 <TIM_OC5_SetConfig+0xbc>)
 8103ece:	4293      	cmp	r3, r2
 8103ed0:	d007      	beq.n	8103ee2 <TIM_OC5_SetConfig+0x7a>
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	4a14      	ldr	r2, [pc, #80]	; (8103f28 <TIM_OC5_SetConfig+0xc0>)
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	d003      	beq.n	8103ee2 <TIM_OC5_SetConfig+0x7a>
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	4a13      	ldr	r2, [pc, #76]	; (8103f2c <TIM_OC5_SetConfig+0xc4>)
 8103ede:	4293      	cmp	r3, r2
 8103ee0:	d109      	bne.n	8103ef6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8103ee2:	697b      	ldr	r3, [r7, #20]
 8103ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8103eea:	683b      	ldr	r3, [r7, #0]
 8103eec:	695b      	ldr	r3, [r3, #20]
 8103eee:	021b      	lsls	r3, r3, #8
 8103ef0:	697a      	ldr	r2, [r7, #20]
 8103ef2:	4313      	orrs	r3, r2
 8103ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	697a      	ldr	r2, [r7, #20]
 8103efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	68fa      	ldr	r2, [r7, #12]
 8103f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8103f02:	683b      	ldr	r3, [r7, #0]
 8103f04:	685a      	ldr	r2, [r3, #4]
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	693a      	ldr	r2, [r7, #16]
 8103f0e:	621a      	str	r2, [r3, #32]
}
 8103f10:	bf00      	nop
 8103f12:	371c      	adds	r7, #28
 8103f14:	46bd      	mov	sp, r7
 8103f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f1a:	4770      	bx	lr
 8103f1c:	40010000 	.word	0x40010000
 8103f20:	40010400 	.word	0x40010400
 8103f24:	40014000 	.word	0x40014000
 8103f28:	40014400 	.word	0x40014400
 8103f2c:	40014800 	.word	0x40014800

08103f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8103f30:	b480      	push	{r7}
 8103f32:	b087      	sub	sp, #28
 8103f34:	af00      	add	r7, sp, #0
 8103f36:	6078      	str	r0, [r7, #4]
 8103f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	6a1b      	ldr	r3, [r3, #32]
 8103f3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	6a1b      	ldr	r3, [r3, #32]
 8103f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	685b      	ldr	r3, [r3, #4]
 8103f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103f64:	683b      	ldr	r3, [r7, #0]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	021b      	lsls	r3, r3, #8
 8103f6a:	68fa      	ldr	r2, [r7, #12]
 8103f6c:	4313      	orrs	r3, r2
 8103f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8103f70:	693b      	ldr	r3, [r7, #16]
 8103f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8103f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8103f78:	683b      	ldr	r3, [r7, #0]
 8103f7a:	689b      	ldr	r3, [r3, #8]
 8103f7c:	051b      	lsls	r3, r3, #20
 8103f7e:	693a      	ldr	r2, [r7, #16]
 8103f80:	4313      	orrs	r3, r2
 8103f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	4a18      	ldr	r2, [pc, #96]	; (8103fe8 <TIM_OC6_SetConfig+0xb8>)
 8103f88:	4293      	cmp	r3, r2
 8103f8a:	d00f      	beq.n	8103fac <TIM_OC6_SetConfig+0x7c>
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	4a17      	ldr	r2, [pc, #92]	; (8103fec <TIM_OC6_SetConfig+0xbc>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d00b      	beq.n	8103fac <TIM_OC6_SetConfig+0x7c>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	4a16      	ldr	r2, [pc, #88]	; (8103ff0 <TIM_OC6_SetConfig+0xc0>)
 8103f98:	4293      	cmp	r3, r2
 8103f9a:	d007      	beq.n	8103fac <TIM_OC6_SetConfig+0x7c>
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	4a15      	ldr	r2, [pc, #84]	; (8103ff4 <TIM_OC6_SetConfig+0xc4>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d003      	beq.n	8103fac <TIM_OC6_SetConfig+0x7c>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	4a14      	ldr	r2, [pc, #80]	; (8103ff8 <TIM_OC6_SetConfig+0xc8>)
 8103fa8:	4293      	cmp	r3, r2
 8103faa:	d109      	bne.n	8103fc0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8103fac:	697b      	ldr	r3, [r7, #20]
 8103fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8103fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8103fb4:	683b      	ldr	r3, [r7, #0]
 8103fb6:	695b      	ldr	r3, [r3, #20]
 8103fb8:	029b      	lsls	r3, r3, #10
 8103fba:	697a      	ldr	r2, [r7, #20]
 8103fbc:	4313      	orrs	r3, r2
 8103fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	697a      	ldr	r2, [r7, #20]
 8103fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	68fa      	ldr	r2, [r7, #12]
 8103fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8103fcc:	683b      	ldr	r3, [r7, #0]
 8103fce:	685a      	ldr	r2, [r3, #4]
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	693a      	ldr	r2, [r7, #16]
 8103fd8:	621a      	str	r2, [r3, #32]
}
 8103fda:	bf00      	nop
 8103fdc:	371c      	adds	r7, #28
 8103fde:	46bd      	mov	sp, r7
 8103fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe4:	4770      	bx	lr
 8103fe6:	bf00      	nop
 8103fe8:	40010000 	.word	0x40010000
 8103fec:	40010400 	.word	0x40010400
 8103ff0:	40014000 	.word	0x40014000
 8103ff4:	40014400 	.word	0x40014400
 8103ff8:	40014800 	.word	0x40014800

08103ffc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8103ffc:	b480      	push	{r7}
 8103ffe:	b087      	sub	sp, #28
 8104000:	af00      	add	r7, sp, #0
 8104002:	60f8      	str	r0, [r7, #12]
 8104004:	60b9      	str	r1, [r7, #8]
 8104006:	607a      	str	r2, [r7, #4]
 8104008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810400a:	68fb      	ldr	r3, [r7, #12]
 810400c:	6a1b      	ldr	r3, [r3, #32]
 810400e:	f023 0201 	bic.w	r2, r3, #1
 8104012:	68fb      	ldr	r3, [r7, #12]
 8104014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	699b      	ldr	r3, [r3, #24]
 810401a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810401c:	68fb      	ldr	r3, [r7, #12]
 810401e:	6a1b      	ldr	r3, [r3, #32]
 8104020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8104022:	68fb      	ldr	r3, [r7, #12]
 8104024:	4a28      	ldr	r2, [pc, #160]	; (81040c8 <TIM_TI1_SetConfig+0xcc>)
 8104026:	4293      	cmp	r3, r2
 8104028:	d01b      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104030:	d017      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 8104032:	68fb      	ldr	r3, [r7, #12]
 8104034:	4a25      	ldr	r2, [pc, #148]	; (81040cc <TIM_TI1_SetConfig+0xd0>)
 8104036:	4293      	cmp	r3, r2
 8104038:	d013      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	4a24      	ldr	r2, [pc, #144]	; (81040d0 <TIM_TI1_SetConfig+0xd4>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d00f      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 8104042:	68fb      	ldr	r3, [r7, #12]
 8104044:	4a23      	ldr	r2, [pc, #140]	; (81040d4 <TIM_TI1_SetConfig+0xd8>)
 8104046:	4293      	cmp	r3, r2
 8104048:	d00b      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	4a22      	ldr	r2, [pc, #136]	; (81040d8 <TIM_TI1_SetConfig+0xdc>)
 810404e:	4293      	cmp	r3, r2
 8104050:	d007      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 8104052:	68fb      	ldr	r3, [r7, #12]
 8104054:	4a21      	ldr	r2, [pc, #132]	; (81040dc <TIM_TI1_SetConfig+0xe0>)
 8104056:	4293      	cmp	r3, r2
 8104058:	d003      	beq.n	8104062 <TIM_TI1_SetConfig+0x66>
 810405a:	68fb      	ldr	r3, [r7, #12]
 810405c:	4a20      	ldr	r2, [pc, #128]	; (81040e0 <TIM_TI1_SetConfig+0xe4>)
 810405e:	4293      	cmp	r3, r2
 8104060:	d101      	bne.n	8104066 <TIM_TI1_SetConfig+0x6a>
 8104062:	2301      	movs	r3, #1
 8104064:	e000      	b.n	8104068 <TIM_TI1_SetConfig+0x6c>
 8104066:	2300      	movs	r3, #0
 8104068:	2b00      	cmp	r3, #0
 810406a:	d008      	beq.n	810407e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810406c:	697b      	ldr	r3, [r7, #20]
 810406e:	f023 0303 	bic.w	r3, r3, #3
 8104072:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8104074:	697a      	ldr	r2, [r7, #20]
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	4313      	orrs	r3, r2
 810407a:	617b      	str	r3, [r7, #20]
 810407c:	e003      	b.n	8104086 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810407e:	697b      	ldr	r3, [r7, #20]
 8104080:	f043 0301 	orr.w	r3, r3, #1
 8104084:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8104086:	697b      	ldr	r3, [r7, #20]
 8104088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810408c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810408e:	683b      	ldr	r3, [r7, #0]
 8104090:	011b      	lsls	r3, r3, #4
 8104092:	b2db      	uxtb	r3, r3
 8104094:	697a      	ldr	r2, [r7, #20]
 8104096:	4313      	orrs	r3, r2
 8104098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810409a:	693b      	ldr	r3, [r7, #16]
 810409c:	f023 030a 	bic.w	r3, r3, #10
 81040a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81040a2:	68bb      	ldr	r3, [r7, #8]
 81040a4:	f003 030a 	and.w	r3, r3, #10
 81040a8:	693a      	ldr	r2, [r7, #16]
 81040aa:	4313      	orrs	r3, r2
 81040ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81040ae:	68fb      	ldr	r3, [r7, #12]
 81040b0:	697a      	ldr	r2, [r7, #20]
 81040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81040b4:	68fb      	ldr	r3, [r7, #12]
 81040b6:	693a      	ldr	r2, [r7, #16]
 81040b8:	621a      	str	r2, [r3, #32]
}
 81040ba:	bf00      	nop
 81040bc:	371c      	adds	r7, #28
 81040be:	46bd      	mov	sp, r7
 81040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c4:	4770      	bx	lr
 81040c6:	bf00      	nop
 81040c8:	40010000 	.word	0x40010000
 81040cc:	40000400 	.word	0x40000400
 81040d0:	40000800 	.word	0x40000800
 81040d4:	40000c00 	.word	0x40000c00
 81040d8:	40010400 	.word	0x40010400
 81040dc:	40001800 	.word	0x40001800
 81040e0:	40014000 	.word	0x40014000

081040e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81040e4:	b480      	push	{r7}
 81040e6:	b087      	sub	sp, #28
 81040e8:	af00      	add	r7, sp, #0
 81040ea:	60f8      	str	r0, [r7, #12]
 81040ec:	60b9      	str	r1, [r7, #8]
 81040ee:	607a      	str	r2, [r7, #4]
 81040f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81040f2:	68fb      	ldr	r3, [r7, #12]
 81040f4:	6a1b      	ldr	r3, [r3, #32]
 81040f6:	f023 0210 	bic.w	r2, r3, #16
 81040fa:	68fb      	ldr	r3, [r7, #12]
 81040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81040fe:	68fb      	ldr	r3, [r7, #12]
 8104100:	699b      	ldr	r3, [r3, #24]
 8104102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	6a1b      	ldr	r3, [r3, #32]
 8104108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810410a:	697b      	ldr	r3, [r7, #20]
 810410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	021b      	lsls	r3, r3, #8
 8104116:	697a      	ldr	r2, [r7, #20]
 8104118:	4313      	orrs	r3, r2
 810411a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810411c:	697b      	ldr	r3, [r7, #20]
 810411e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104122:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8104124:	683b      	ldr	r3, [r7, #0]
 8104126:	031b      	lsls	r3, r3, #12
 8104128:	b29b      	uxth	r3, r3
 810412a:	697a      	ldr	r2, [r7, #20]
 810412c:	4313      	orrs	r3, r2
 810412e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8104130:	693b      	ldr	r3, [r7, #16]
 8104132:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8104136:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8104138:	68bb      	ldr	r3, [r7, #8]
 810413a:	011b      	lsls	r3, r3, #4
 810413c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8104140:	693a      	ldr	r2, [r7, #16]
 8104142:	4313      	orrs	r3, r2
 8104144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8104146:	68fb      	ldr	r3, [r7, #12]
 8104148:	697a      	ldr	r2, [r7, #20]
 810414a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810414c:	68fb      	ldr	r3, [r7, #12]
 810414e:	693a      	ldr	r2, [r7, #16]
 8104150:	621a      	str	r2, [r3, #32]
}
 8104152:	bf00      	nop
 8104154:	371c      	adds	r7, #28
 8104156:	46bd      	mov	sp, r7
 8104158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810415c:	4770      	bx	lr

0810415e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810415e:	b480      	push	{r7}
 8104160:	b087      	sub	sp, #28
 8104162:	af00      	add	r7, sp, #0
 8104164:	60f8      	str	r0, [r7, #12]
 8104166:	60b9      	str	r1, [r7, #8]
 8104168:	607a      	str	r2, [r7, #4]
 810416a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	6a1b      	ldr	r3, [r3, #32]
 8104170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	69db      	ldr	r3, [r3, #28]
 810417c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	6a1b      	ldr	r3, [r3, #32]
 8104182:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8104184:	697b      	ldr	r3, [r7, #20]
 8104186:	f023 0303 	bic.w	r3, r3, #3
 810418a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 810418c:	697a      	ldr	r2, [r7, #20]
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	4313      	orrs	r3, r2
 8104192:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8104194:	697b      	ldr	r3, [r7, #20]
 8104196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810419a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810419c:	683b      	ldr	r3, [r7, #0]
 810419e:	011b      	lsls	r3, r3, #4
 81041a0:	b2db      	uxtb	r3, r3
 81041a2:	697a      	ldr	r2, [r7, #20]
 81041a4:	4313      	orrs	r3, r2
 81041a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 81041a8:	693b      	ldr	r3, [r7, #16]
 81041aa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 81041ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 81041b0:	68bb      	ldr	r3, [r7, #8]
 81041b2:	021b      	lsls	r3, r3, #8
 81041b4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 81041b8:	693a      	ldr	r2, [r7, #16]
 81041ba:	4313      	orrs	r3, r2
 81041bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	697a      	ldr	r2, [r7, #20]
 81041c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 81041c4:	68fb      	ldr	r3, [r7, #12]
 81041c6:	693a      	ldr	r2, [r7, #16]
 81041c8:	621a      	str	r2, [r3, #32]
}
 81041ca:	bf00      	nop
 81041cc:	371c      	adds	r7, #28
 81041ce:	46bd      	mov	sp, r7
 81041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041d4:	4770      	bx	lr

081041d6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81041d6:	b480      	push	{r7}
 81041d8:	b087      	sub	sp, #28
 81041da:	af00      	add	r7, sp, #0
 81041dc:	60f8      	str	r0, [r7, #12]
 81041de:	60b9      	str	r1, [r7, #8]
 81041e0:	607a      	str	r2, [r7, #4]
 81041e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	6a1b      	ldr	r3, [r3, #32]
 81041e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81041ec:	68fb      	ldr	r3, [r7, #12]
 81041ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81041f0:	68fb      	ldr	r3, [r7, #12]
 81041f2:	69db      	ldr	r3, [r3, #28]
 81041f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81041f6:	68fb      	ldr	r3, [r7, #12]
 81041f8:	6a1b      	ldr	r3, [r3, #32]
 81041fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 81041fc:	697b      	ldr	r3, [r7, #20]
 81041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104202:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	021b      	lsls	r3, r3, #8
 8104208:	697a      	ldr	r2, [r7, #20]
 810420a:	4313      	orrs	r3, r2
 810420c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810420e:	697b      	ldr	r3, [r7, #20]
 8104210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104214:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8104216:	683b      	ldr	r3, [r7, #0]
 8104218:	031b      	lsls	r3, r3, #12
 810421a:	b29b      	uxth	r3, r3
 810421c:	697a      	ldr	r2, [r7, #20]
 810421e:	4313      	orrs	r3, r2
 8104220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8104222:	693b      	ldr	r3, [r7, #16]
 8104224:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8104228:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810422a:	68bb      	ldr	r3, [r7, #8]
 810422c:	031b      	lsls	r3, r3, #12
 810422e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8104232:	693a      	ldr	r2, [r7, #16]
 8104234:	4313      	orrs	r3, r2
 8104236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8104238:	68fb      	ldr	r3, [r7, #12]
 810423a:	697a      	ldr	r2, [r7, #20]
 810423c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	693a      	ldr	r2, [r7, #16]
 8104242:	621a      	str	r2, [r3, #32]
}
 8104244:	bf00      	nop
 8104246:	371c      	adds	r7, #28
 8104248:	46bd      	mov	sp, r7
 810424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810424e:	4770      	bx	lr

08104250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8104250:	b480      	push	{r7}
 8104252:	b085      	sub	sp, #20
 8104254:	af00      	add	r7, sp, #0
 8104256:	6078      	str	r0, [r7, #4]
 8104258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104260:	2b01      	cmp	r3, #1
 8104262:	d101      	bne.n	8104268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8104264:	2302      	movs	r3, #2
 8104266:	e06d      	b.n	8104344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	2201      	movs	r2, #1
 810426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	2202      	movs	r2, #2
 8104274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	685b      	ldr	r3, [r3, #4]
 810427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	689b      	ldr	r3, [r3, #8]
 8104286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	4a30      	ldr	r2, [pc, #192]	; (8104350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d004      	beq.n	810429c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a2f      	ldr	r2, [pc, #188]	; (8104354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d108      	bne.n	81042ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81042a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81042a4:	683b      	ldr	r3, [r7, #0]
 81042a6:	685b      	ldr	r3, [r3, #4]
 81042a8:	68fa      	ldr	r2, [r7, #12]
 81042aa:	4313      	orrs	r3, r2
 81042ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81042ae:	68fb      	ldr	r3, [r7, #12]
 81042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81042b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81042b6:	683b      	ldr	r3, [r7, #0]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	68fa      	ldr	r2, [r7, #12]
 81042bc:	4313      	orrs	r3, r2
 81042be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	68fa      	ldr	r2, [r7, #12]
 81042c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a20      	ldr	r2, [pc, #128]	; (8104350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81042ce:	4293      	cmp	r3, r2
 81042d0:	d022      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042da:	d01d      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	4a1d      	ldr	r2, [pc, #116]	; (8104358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d018      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	4a1c      	ldr	r2, [pc, #112]	; (810435c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81042ec:	4293      	cmp	r3, r2
 81042ee:	d013      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	4a1a      	ldr	r2, [pc, #104]	; (8104360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81042f6:	4293      	cmp	r3, r2
 81042f8:	d00e      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	4a15      	ldr	r2, [pc, #84]	; (8104354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104300:	4293      	cmp	r3, r2
 8104302:	d009      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	4a16      	ldr	r2, [pc, #88]	; (8104364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d004      	beq.n	8104318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	4a15      	ldr	r2, [pc, #84]	; (8104368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8104314:	4293      	cmp	r3, r2
 8104316:	d10c      	bne.n	8104332 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8104318:	68bb      	ldr	r3, [r7, #8]
 810431a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810431e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8104320:	683b      	ldr	r3, [r7, #0]
 8104322:	689b      	ldr	r3, [r3, #8]
 8104324:	68ba      	ldr	r2, [r7, #8]
 8104326:	4313      	orrs	r3, r2
 8104328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	68ba      	ldr	r2, [r7, #8]
 8104330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	2201      	movs	r2, #1
 8104336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	2200      	movs	r2, #0
 810433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104342:	2300      	movs	r3, #0
}
 8104344:	4618      	mov	r0, r3
 8104346:	3714      	adds	r7, #20
 8104348:	46bd      	mov	sp, r7
 810434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810434e:	4770      	bx	lr
 8104350:	40010000 	.word	0x40010000
 8104354:	40010400 	.word	0x40010400
 8104358:	40000400 	.word	0x40000400
 810435c:	40000800 	.word	0x40000800
 8104360:	40000c00 	.word	0x40000c00
 8104364:	40001800 	.word	0x40001800
 8104368:	40014000 	.word	0x40014000

0810436c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810436c:	b480      	push	{r7}
 810436e:	b085      	sub	sp, #20
 8104370:	af00      	add	r7, sp, #0
 8104372:	6078      	str	r0, [r7, #4]
 8104374:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8104376:	2300      	movs	r3, #0
 8104378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104380:	2b01      	cmp	r3, #1
 8104382:	d101      	bne.n	8104388 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8104384:	2302      	movs	r3, #2
 8104386:	e065      	b.n	8104454 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	2201      	movs	r2, #1
 810438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104396:	683b      	ldr	r3, [r7, #0]
 8104398:	68db      	ldr	r3, [r3, #12]
 810439a:	4313      	orrs	r3, r2
 810439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810439e:	68fb      	ldr	r3, [r7, #12]
 81043a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81043a4:	683b      	ldr	r3, [r7, #0]
 81043a6:	689b      	ldr	r3, [r3, #8]
 81043a8:	4313      	orrs	r3, r2
 81043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81043b2:	683b      	ldr	r3, [r7, #0]
 81043b4:	685b      	ldr	r3, [r3, #4]
 81043b6:	4313      	orrs	r3, r2
 81043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81043ba:	68fb      	ldr	r3, [r7, #12]
 81043bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 81043c0:	683b      	ldr	r3, [r7, #0]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4313      	orrs	r3, r2
 81043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 81043c8:	68fb      	ldr	r3, [r7, #12]
 81043ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81043ce:	683b      	ldr	r3, [r7, #0]
 81043d0:	691b      	ldr	r3, [r3, #16]
 81043d2:	4313      	orrs	r3, r2
 81043d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81043dc:	683b      	ldr	r3, [r7, #0]
 81043de:	695b      	ldr	r3, [r3, #20]
 81043e0:	4313      	orrs	r3, r2
 81043e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81043e4:	68fb      	ldr	r3, [r7, #12]
 81043e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81043ea:	683b      	ldr	r3, [r7, #0]
 81043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043ee:	4313      	orrs	r3, r2
 81043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 81043f8:	683b      	ldr	r3, [r7, #0]
 81043fa:	699b      	ldr	r3, [r3, #24]
 81043fc:	041b      	lsls	r3, r3, #16
 81043fe:	4313      	orrs	r3, r2
 8104400:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a16      	ldr	r2, [pc, #88]	; (8104460 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d004      	beq.n	8104416 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	4a14      	ldr	r2, [pc, #80]	; (8104464 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8104412:	4293      	cmp	r3, r2
 8104414:	d115      	bne.n	8104442 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8104416:	68fb      	ldr	r3, [r7, #12]
 8104418:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810441c:	683b      	ldr	r3, [r7, #0]
 810441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104420:	051b      	lsls	r3, r3, #20
 8104422:	4313      	orrs	r3, r2
 8104424:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810442c:	683b      	ldr	r3, [r7, #0]
 810442e:	69db      	ldr	r3, [r3, #28]
 8104430:	4313      	orrs	r3, r2
 8104432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810443a:	683b      	ldr	r3, [r7, #0]
 810443c:	6a1b      	ldr	r3, [r3, #32]
 810443e:	4313      	orrs	r3, r2
 8104440:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	68fa      	ldr	r2, [r7, #12]
 8104448:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	2200      	movs	r2, #0
 810444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104452:	2300      	movs	r3, #0
}
 8104454:	4618      	mov	r0, r3
 8104456:	3714      	adds	r7, #20
 8104458:	46bd      	mov	sp, r7
 810445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810445e:	4770      	bx	lr
 8104460:	40010000 	.word	0x40010000
 8104464:	40010400 	.word	0x40010400

08104468 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8104468:	b480      	push	{r7}
 810446a:	b083      	sub	sp, #12
 810446c:	af00      	add	r7, sp, #0
 810446e:	6078      	str	r0, [r7, #4]
 8104470:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8104472:	683b      	ldr	r3, [r7, #0]
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	2b00      	cmp	r3, #0
 8104478:	d123      	bne.n	81044c2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8104482:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8104486:	683a      	ldr	r2, [r7, #0]
 8104488:	6851      	ldr	r1, [r2, #4]
 810448a:	683a      	ldr	r2, [r7, #0]
 810448c:	6892      	ldr	r2, [r2, #8]
 810448e:	4311      	orrs	r1, r2
 8104490:	683a      	ldr	r2, [r7, #0]
 8104492:	68d2      	ldr	r2, [r2, #12]
 8104494:	4311      	orrs	r1, r2
 8104496:	683a      	ldr	r2, [r7, #0]
 8104498:	6912      	ldr	r2, [r2, #16]
 810449a:	4311      	orrs	r1, r2
 810449c:	683a      	ldr	r2, [r7, #0]
 810449e:	6952      	ldr	r2, [r2, #20]
 81044a0:	4311      	orrs	r1, r2
 81044a2:	683a      	ldr	r2, [r7, #0]
 81044a4:	6992      	ldr	r2, [r2, #24]
 81044a6:	4311      	orrs	r1, r2
 81044a8:	683a      	ldr	r2, [r7, #0]
 81044aa:	69d2      	ldr	r2, [r2, #28]
 81044ac:	4311      	orrs	r1, r2
 81044ae:	683a      	ldr	r2, [r7, #0]
 81044b0:	6a12      	ldr	r2, [r2, #32]
 81044b2:	4311      	orrs	r1, r2
 81044b4:	683a      	ldr	r2, [r7, #0]
 81044b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 81044b8:	430a      	orrs	r2, r1
 81044ba:	431a      	orrs	r2, r3
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	601a      	str	r2, [r3, #0]
 81044c0:	e028      	b.n	8104514 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 81044ca:	683b      	ldr	r3, [r7, #0]
 81044cc:	69d9      	ldr	r1, [r3, #28]
 81044ce:	683b      	ldr	r3, [r7, #0]
 81044d0:	6a1b      	ldr	r3, [r3, #32]
 81044d2:	4319      	orrs	r1, r3
 81044d4:	683b      	ldr	r3, [r7, #0]
 81044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81044d8:	430b      	orrs	r3, r1
 81044da:	431a      	orrs	r2, r3
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	685b      	ldr	r3, [r3, #4]
 81044e4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 81044e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 81044ec:	683a      	ldr	r2, [r7, #0]
 81044ee:	6851      	ldr	r1, [r2, #4]
 81044f0:	683a      	ldr	r2, [r7, #0]
 81044f2:	6892      	ldr	r2, [r2, #8]
 81044f4:	4311      	orrs	r1, r2
 81044f6:	683a      	ldr	r2, [r7, #0]
 81044f8:	68d2      	ldr	r2, [r2, #12]
 81044fa:	4311      	orrs	r1, r2
 81044fc:	683a      	ldr	r2, [r7, #0]
 81044fe:	6912      	ldr	r2, [r2, #16]
 8104500:	4311      	orrs	r1, r2
 8104502:	683a      	ldr	r2, [r7, #0]
 8104504:	6952      	ldr	r2, [r2, #20]
 8104506:	4311      	orrs	r1, r2
 8104508:	683a      	ldr	r2, [r7, #0]
 810450a:	6992      	ldr	r2, [r2, #24]
 810450c:	430a      	orrs	r2, r1
 810450e:	431a      	orrs	r2, r3
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8104514:	2300      	movs	r3, #0
}
 8104516:	4618      	mov	r0, r3
 8104518:	370c      	adds	r7, #12
 810451a:	46bd      	mov	sp, r7
 810451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104520:	4770      	bx	lr

08104522 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8104522:	b480      	push	{r7}
 8104524:	b085      	sub	sp, #20
 8104526:	af00      	add	r7, sp, #0
 8104528:	60f8      	str	r0, [r7, #12]
 810452a:	60b9      	str	r1, [r7, #8]
 810452c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	2b00      	cmp	r3, #0
 8104532:	d128      	bne.n	8104586 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	689b      	ldr	r3, [r3, #8]
 8104538:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810453c:	68bb      	ldr	r3, [r7, #8]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	1e59      	subs	r1, r3, #1
 8104542:	68bb      	ldr	r3, [r7, #8]
 8104544:	685b      	ldr	r3, [r3, #4]
 8104546:	3b01      	subs	r3, #1
 8104548:	011b      	lsls	r3, r3, #4
 810454a:	4319      	orrs	r1, r3
 810454c:	68bb      	ldr	r3, [r7, #8]
 810454e:	689b      	ldr	r3, [r3, #8]
 8104550:	3b01      	subs	r3, #1
 8104552:	021b      	lsls	r3, r3, #8
 8104554:	4319      	orrs	r1, r3
 8104556:	68bb      	ldr	r3, [r7, #8]
 8104558:	68db      	ldr	r3, [r3, #12]
 810455a:	3b01      	subs	r3, #1
 810455c:	031b      	lsls	r3, r3, #12
 810455e:	4319      	orrs	r1, r3
 8104560:	68bb      	ldr	r3, [r7, #8]
 8104562:	691b      	ldr	r3, [r3, #16]
 8104564:	3b01      	subs	r3, #1
 8104566:	041b      	lsls	r3, r3, #16
 8104568:	4319      	orrs	r1, r3
 810456a:	68bb      	ldr	r3, [r7, #8]
 810456c:	695b      	ldr	r3, [r3, #20]
 810456e:	3b01      	subs	r3, #1
 8104570:	051b      	lsls	r3, r3, #20
 8104572:	4319      	orrs	r1, r3
 8104574:	68bb      	ldr	r3, [r7, #8]
 8104576:	699b      	ldr	r3, [r3, #24]
 8104578:	3b01      	subs	r3, #1
 810457a:	061b      	lsls	r3, r3, #24
 810457c:	430b      	orrs	r3, r1
 810457e:	431a      	orrs	r2, r3
 8104580:	68fb      	ldr	r3, [r7, #12]
 8104582:	609a      	str	r2, [r3, #8]
 8104584:	e02f      	b.n	81045e6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	689b      	ldr	r3, [r3, #8]
 810458a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810458e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104592:	68ba      	ldr	r2, [r7, #8]
 8104594:	68d2      	ldr	r2, [r2, #12]
 8104596:	3a01      	subs	r2, #1
 8104598:	0311      	lsls	r1, r2, #12
 810459a:	68ba      	ldr	r2, [r7, #8]
 810459c:	6952      	ldr	r2, [r2, #20]
 810459e:	3a01      	subs	r2, #1
 81045a0:	0512      	lsls	r2, r2, #20
 81045a2:	430a      	orrs	r2, r1
 81045a4:	431a      	orrs	r2, r3
 81045a6:	68fb      	ldr	r3, [r7, #12]
 81045a8:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	68db      	ldr	r3, [r3, #12]
 81045ae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 81045b2:	68bb      	ldr	r3, [r7, #8]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	1e59      	subs	r1, r3, #1
 81045b8:	68bb      	ldr	r3, [r7, #8]
 81045ba:	685b      	ldr	r3, [r3, #4]
 81045bc:	3b01      	subs	r3, #1
 81045be:	011b      	lsls	r3, r3, #4
 81045c0:	4319      	orrs	r1, r3
 81045c2:	68bb      	ldr	r3, [r7, #8]
 81045c4:	689b      	ldr	r3, [r3, #8]
 81045c6:	3b01      	subs	r3, #1
 81045c8:	021b      	lsls	r3, r3, #8
 81045ca:	4319      	orrs	r1, r3
 81045cc:	68bb      	ldr	r3, [r7, #8]
 81045ce:	691b      	ldr	r3, [r3, #16]
 81045d0:	3b01      	subs	r3, #1
 81045d2:	041b      	lsls	r3, r3, #16
 81045d4:	4319      	orrs	r1, r3
 81045d6:	68bb      	ldr	r3, [r7, #8]
 81045d8:	699b      	ldr	r3, [r3, #24]
 81045da:	3b01      	subs	r3, #1
 81045dc:	061b      	lsls	r3, r3, #24
 81045de:	430b      	orrs	r3, r1
 81045e0:	431a      	orrs	r2, r3
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 81045e6:	2300      	movs	r3, #0
}
 81045e8:	4618      	mov	r0, r3
 81045ea:	3714      	adds	r7, #20
 81045ec:	46bd      	mov	sp, r7
 81045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045f2:	4770      	bx	lr

081045f4 <__libc_init_array>:
 81045f4:	b570      	push	{r4, r5, r6, lr}
 81045f6:	4d0d      	ldr	r5, [pc, #52]	; (810462c <__libc_init_array+0x38>)
 81045f8:	4c0d      	ldr	r4, [pc, #52]	; (8104630 <__libc_init_array+0x3c>)
 81045fa:	1b64      	subs	r4, r4, r5
 81045fc:	10a4      	asrs	r4, r4, #2
 81045fe:	2600      	movs	r6, #0
 8104600:	42a6      	cmp	r6, r4
 8104602:	d109      	bne.n	8104618 <__libc_init_array+0x24>
 8104604:	4d0b      	ldr	r5, [pc, #44]	; (8104634 <__libc_init_array+0x40>)
 8104606:	4c0c      	ldr	r4, [pc, #48]	; (8104638 <__libc_init_array+0x44>)
 8104608:	f000 f820 	bl	810464c <_init>
 810460c:	1b64      	subs	r4, r4, r5
 810460e:	10a4      	asrs	r4, r4, #2
 8104610:	2600      	movs	r6, #0
 8104612:	42a6      	cmp	r6, r4
 8104614:	d105      	bne.n	8104622 <__libc_init_array+0x2e>
 8104616:	bd70      	pop	{r4, r5, r6, pc}
 8104618:	f855 3b04 	ldr.w	r3, [r5], #4
 810461c:	4798      	blx	r3
 810461e:	3601      	adds	r6, #1
 8104620:	e7ee      	b.n	8104600 <__libc_init_array+0xc>
 8104622:	f855 3b04 	ldr.w	r3, [r5], #4
 8104626:	4798      	blx	r3
 8104628:	3601      	adds	r6, #1
 810462a:	e7f2      	b.n	8104612 <__libc_init_array+0x1e>
 810462c:	08104674 	.word	0x08104674
 8104630:	08104674 	.word	0x08104674
 8104634:	08104674 	.word	0x08104674
 8104638:	08104678 	.word	0x08104678

0810463c <memset>:
 810463c:	4402      	add	r2, r0
 810463e:	4603      	mov	r3, r0
 8104640:	4293      	cmp	r3, r2
 8104642:	d100      	bne.n	8104646 <memset+0xa>
 8104644:	4770      	bx	lr
 8104646:	f803 1b01 	strb.w	r1, [r3], #1
 810464a:	e7f9      	b.n	8104640 <memset+0x4>

0810464c <_init>:
 810464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810464e:	bf00      	nop
 8104650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104652:	bc08      	pop	{r3}
 8104654:	469e      	mov	lr, r3
 8104656:	4770      	bx	lr

08104658 <_fini>:
 8104658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810465a:	bf00      	nop
 810465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810465e:	bc08      	pop	{r3}
 8104660:	469e      	mov	lr, r3
 8104662:	4770      	bx	lr
